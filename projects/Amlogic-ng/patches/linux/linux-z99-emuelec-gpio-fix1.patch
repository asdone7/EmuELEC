From 0ee3dd16e9a84a6b1a99cfc1ba68c8e7dc7545d9 Mon Sep 17 00:00:00 2001
From: Dongjin Kim <tobetter@gmail.com>
Date: Tue, 10 Nov 2020 03:13:06 +0900
Subject: [PATCH] ODROID-N2: arm64/dts: fix pinctrl conflict of GPIOA_13 for
 SPDIF

Signed-off-by: Dongjin Kim <tobetter@gmail.com>
---
 .../boot/dts/amlogic/g12b_s922x_odroid_n2_joystick.dts   | 9 +++++++++
 .../dts/amlogic/g12b_s922x_odroid_n2plus_joystick.dts    | 9 +++++++++
 2 files changed, 18 insertions(+)

diff --git a/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2_joystick.dts b/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2_joystick.dts
index 353ad93776acf..9c46f148b11c6 100644
--- a/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2_joystick.dts
+++ b/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2_joystick.dts
@@ -39,3 +39,12 @@
 			<&gpio GPIOX_5 GPIO_ACTIVE_LOW>;
 	};
 };
+
+&pinctrl_periphs {
+	spdifout: spdifout {
+		mux {/* GPIOA_11 */
+			groups = "spdif_out_a11";
+			function = "spdif_out";
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2plus_joystick.dts b/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2plus_joystick.dts
index 353ad93776acf..9c46f148b11c6 100644
--- a/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2plus_joystick.dts
+++ b/arch/arm64/boot/dts/amlogic/g12b_s922x_odroid_n2plus_joystick.dts
@@ -39,3 +39,12 @@
 			<&gpio GPIOX_5 GPIO_ACTIVE_LOW>;
 	};
 };
+
+&pinctrl_periphs {
+	spdifout: spdifout {
+		mux {/* GPIOA_11 */
+			groups = "spdif_out_a11";
+			function = "spdif_out";
+		};
+	};
+};

diff --git a/drivers/input/joystick/gamecon.c b/drivers/input/joystick/gamecon.c
index 5bdc48a81a046..a96c6bc1cdf4a 100644
--- a/drivers/input/joystick/gamecon.c
+++ b/drivers/input/joystick/gamecon.c
@@ -764,11 +764,11 @@ static void gc_gpio_read_packet(struct gc *gc,
 
 	val = parport_read_status(gc->pd->port);
 	for (i = 0; i < 4; i++)
-		data[i] = (val & status_bit[i]) ? 255 : 0;
+		data[i] = (val & status_bit[i]) ? 1 : 0;
 
 	val = parport_read_data(gc->pd->port);
 	for (mask = 1; i < 12; i++, mask <<= 1)
-		data[i] = (val & mask) ? 255 : 0;
+		data[i] = (val & mask) ? 1 : 0;
 }
 
 static void gc_gpio_process_packet(struct gc *gc)
@@ -785,8 +785,8 @@ static void gc_gpio_process_packet(struct gc *gc)
 
 			gc_gpio_read_packet(gc, data);
 
-			input_report_abs(dev, ABS_X, data[3] - data[2]);
-			input_report_abs(dev, ABS_Y, data[1] - data[0]);
+			input_report_abs(dev, ABS_HAT0X, data[2] - data[3]);
+			input_report_abs(dev, ABS_HAT0Y, data[0] - data[1]);
 
 			for (j = 0; j < 8; j++) {
 				input_report_key(dev, gc_gpio_btn[j],
@@ -983,6 +983,8 @@ static int gc_setup_pad(struct gc *gc, int idx, int pad_type)
 	case GC_GPIO:
 		for (i = 0; i < 8; i++)
 			__set_bit(gc_gpio_btn[i], input_dev->keybit);
+		for (i = 0; i < 2; i++)
+			input_set_abs_params(input_dev, ABS_HAT0X + i, -1, 1, 0, 0);
 		break;
 	}
 
