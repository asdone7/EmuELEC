--- a/core/rtw_mp.c
+++ b/core/rtw_mp.c
@@ -2418,6 +2418,7 @@
 	u32 psd_data = 0;
 	struct psd_init_regs regs = {};
 	int psd_analysis = 0;
+    char tmp[50];
 
 #ifdef PLATFORM_LINUX
 	if (!netif_running(pAdapter->pnetdev)) {
@@ -2449,7 +2450,8 @@
 			psd_data = rtw_GetPSDData(pAdapter, i - psd_pts);
 		else
 			psd_data = rtw_GetPSDData(pAdapter, i);
-		sprintf(data, "%s%x ", data, psd_data);
+		sprintf(tmp, "%s%x ", data, psd_data);
+       strcat(data, tmp);
 		i++;
 	}
 
--- a/os_dep/linux/ioctl_mp.c
+++ b/os_dep/linux/ioctl_mp.c
@@ -537,6 +537,7 @@
 	char input[wrqu->length + 1];
 	u32 rfpath;
 	u32 txpower_inx;
+    char tmp[50];
 
 	if (wrqu->length > 128)
 		return -EFAULT;
@@ -557,15 +558,18 @@
 		sprintf(extra, "patha=%d", txpower_inx);
 		if (phal_data->rf_type > RF_1T2R) {
 			txpower_inx = mpt_ProQueryCalTxPower(padapter, 1);
-			sprintf(extra, "%s,pathb=%d", extra, txpower_inx);
+			sprintf(tmp, "%s,pathb=%d", extra, txpower_inx);
+            strcat(extra, tmp);
 		}
 		if (phal_data->rf_type > RF_2T4R) {
 			txpower_inx = mpt_ProQueryCalTxPower(padapter, 2);
-			sprintf(extra, "%s,pathc=%d", extra, txpower_inx);
+			sprintf(tmp, "%s,pathc=%d", extra, txpower_inx);
+            strcat(extra, tmp);
 		}
 		if (phal_data->rf_type > RF_3T4R) {
 			txpower_inx = mpt_ProQueryCalTxPower(padapter, 3);
-			sprintf(extra, "%s,pathd=%d", extra, txpower_inx);
+			sprintf(tmp, "%s,pathd=%d", extra, txpower_inx);
+            strcat(extra, tmp);
 		}
 	}
 	wrqu->length = strlen(extra);
@@ -2118,7 +2122,8 @@
 		char	*ptmp, tmp;
 		u8	count = 0;
 		u8	i = 0;
-
+        char tmp2[50];
+        
 		ptmp = extra;
 		pch = strsep(&ptmp, ",");
 
@@ -2144,11 +2149,13 @@
 		 } while (count < 64);
 
 		for (i = 0; i < count; i++)
-			sprintf(extra, "%s:%02x", extra, maskfileBuffer[i]);
+			sprintf(tmp2, "%s:%02x", extra, maskfileBuffer[i]);
+            strcat(extra, tmp2);
 
 		padapter->registrypriv.bFileMaskEfuse = _TRUE;
 
-		sprintf(extra, "%s\nLoad Efuse Mask data %d hex ok\n", extra, count);
+		sprintf(tmp2, "%s\nLoad Efuse Mask data %d hex ok\n", extra, count);
+        strcat(extra, tmp2);
 		wrqu->data.length = strlen(extra);
 		return 0;
 	}
