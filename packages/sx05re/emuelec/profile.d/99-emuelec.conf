# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2019-present Shanti Gilbert (https://github.com/shantigilbert)

export LD_LIBRARY_PATH="/emuelec/lib:$LD_LIBRARY_PATH"
export PATH="/emuelec/scripts:/emuelec/bin:/usr/bin/batocera:$PATH"

export SDL_GAMECONTROLLERCONFIG_FILE="/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt"

EE_DIR="/storage/.config/emuelec"
EE_CONF="${EE_DIR}/configs/emuelec.conf"
EE_EMUCONF=/emuelec/configs/emuoptions.conf
ES_CONF="/storage/.emulationstation/es_settings.cfg"
EE_DEVICE=$(cat /ee_arch)
JSLISTENCONF="/emuelec/configs/jslisten.cfg"
EE_LOG="/emuelec/logs/emuelec.log"

get_ee_setting() {
# Argument $1 is the setting name, EmuELEC settings alway start with ee_ e.g. ee_novideo
# Usage: get_ee_setting setting [platform] [rom]
# Only the setting argument is required 
# Priority is: GAME, PLATFORM, GLOBAL, EE_SETTING if at any point one returns 0 it means its dissabled, if it returns empty it will continue onto the next one. 

SETTING="${1}"
PLATFORM="${2}"
ROM="${3}"

#ROM
ROM=$(echo [\"${ROM}\"] | sed -e 's|\[|\\\[|g' | sed -e 's|\]|\\\]|g' | sed -e 's|(|\\\(|g' | sed -e 's|)|\\\)|g')
PAT="^${PLATFORM}${ROM}[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_EMUCONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"

if [ -z "${EES}" ]; then
#PLATFORM
PAT="^${PLATFORM}[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_EMUCONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#GLOBAL
PAT="^global[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#EE_SETTINGS
PAT="^${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

echo "${EES}"	
}

set_ee_setting() {
# argument $1 is the setting name e.g. nes.integerscale. $2 is the value, e.g "1"

# Does the setting exists? if yes edit in place, else add it
if grep -Eq "^[\#]?${1}=" "${EE_CONF}"; then
    [ "$2" == "disable" ] && sed -Ei "s|^[\#]?${1}=.*|^\#${1}=|" "${EE_CONF}" || sed -Ei "s|^[\#]?${1}=.*|${1}=${2//&/\\&}|" "${EE_CONF}"
else 
    sed -i "/$1=/d" "${EE_CONF}"
	[ "$2" == "disable" ] && echo "#${1}=" >> "${EE_CONF}" || echo "${1}=${2}" >> "${EE_CONF}"
fi
}

set_audio() { 
if [ "${1}" == "default" ]; then
	if [ "$EE_DEVICE" == "Amlogic" ] || [[ $(cat /proc/device-tree/coreelec-dt-id) == *"gxl_"* ]] ; then
	[ "$(get_ee_setting ee_alsa.always)" == 1 ] && AUDIO="alsa" || AUDIO="pulseaudio" 
	else
		AUDIO="alsa"
	fi
else
	AUDIO=${1}
fi
rr_audio.sh ${AUDIO}
}

get_es_setting() { 
	echo $(sed -n "s|\s*<${1} name=\"${2}\" value=\"\(.*\)\" />|\1|p" ${ES_CONF})
}

init_port() {
sed -i "2s|program=.*|program=\"/usr/bin/killall ${1}\"|" ${JSLISTENCONF}

# If jslisten is running we kill it first so that it can reload the config file. 
killall jslisten

# JSLISTEN setup so that we can kill CGeniusExe using hotkey+start
/storage/.emulationstation/scripts/configscripts/z_getkillkeys.sh
/usr/bin/jslisten --mode hold &

set_audio ${2}

cat /etc/motd > "$EE_LOG"
}

end_port() {
set_audio default

# Kill jslisten, we don't need to but just to make sure, dot not kill if using OdroidGoAdvance
[[ "$EE_DEVICE" != "OdroidGoAdvance" && "$EE_DEVICE" != "RG351P" ]] && killall jslisten

# for some reason head sometimes does not exit
killall head
}

# used to change gov to performance or return to ondemand
maxperf() {
	
	if [ "$EE_DEVICE" == "OdroidGoAdvance" -o "$EE_DEVICE" == "RG351P" ] || [ "$EE_DEVICE" == "GameForce" ]; then
		echo performance > /sys/devices/platform/ff400000.gpu/devfreq/ff400000.gpu/governor
		echo performance > /sys/devices/platform/dmc/devfreq/dmc/governor
		echo performance > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
	else
		echo "performance" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
		echo "performance" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
		echo 5 > /sys/class/mpgpu/cur_freq
	fi
}

normperf() {
	if [ "$EE_DEVICE" == "OdroidGoAdvance" -o "$EE_DEVICE" == "RG351P" ] || [ "$EE_DEVICE" == "GameForce" ]; then
		echo simple_ondemand > /sys/devices/platform/ff400000.gpu/devfreq/ff400000.gpu/governor
		echo dmc_ondemand > /sys/devices/platform/dmc/devfreq/dmc/governor
		echo interactive > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
	else
		echo "ondemand" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
		echo "ondemand" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
		echo 1 > /sys/class/mpgpu/cur_freq
	fi	
}

ee_check_bios() {

PLATFORM="${1}"
CORE="${2}"
EMULATOR="${3}"
ROMNAME="${4}"
LOG="${5}"

if [[ -z "$LOG" ]]; then
	LOG="$EE_LOG"
fi

MISSINGBIOS="$(batocera-systems --strictfilter ${PLATFORM})"
if [ "$?" == "2" ]; then

# formating so it looks nice :)
PLATFORMNAME="${MISSINGBIOS##*>}"  # read from -P onwards
PLATFORMNAME="${PLATFORMNAME%%MISSING*}"  # until a space is found
PLATFORMNAME=$(echo $PLATFORMNAME | sed -e 's/\\n//g')

if [[ -f "${LOG}" ]]; then
    echo "${CORE} ${EMULATOR} ${ROMNAME}" >> $LOG
    echo "${PLATFORMNAME} missing BIOS - Could not find all BIOS: " >> $LOG
    echo "please make sure you copied the files into the corresponding folder " >> $LOG
    echo "${MISSINGBIOS}" >> $LOG
fi
    text_viewer -e -t "Error! ${2}" -f 24 ${LOG}
    return 1
else 
    return 0
fi
}

ee_console() {
case "${1}" in
    "enable")   
        echo 0 > /sys/class/vtconsole/vtcon1/bind
        echo 1 > /sys/class/vtconsole/vtcon1/bind
        clear /dev/tty0
    ;;
    "disable")
        clear /dev/tty0
        echo 0 > /sys/class/vtconsole/vtcon1/bind
    ;;
esac
}


oga_ver() { 
DEVICE=$(cat /proc/device-tree/compatible)

case "${DEVICE}" in
    *"odroidgo3-linux"*)
        echo "OGS"
    ;;
    *"odroidgo2-linux-v11"*)
        echo "OGABE"
    ;;
    *"odroidgo2-linuxrockchip"*)
        echo "OGA"
    ;;
    *"gameforce"*)
        echo "GF"
    ;;
    *"rg351p"*)
        echo "RG351P"
    ;;
esac

}

set_video_controls() {
DEV=${1}
[[ -z ${DEV} ]] && DEV="js0"

# Search for connected gamepads based device number e.g js0 and extract the name to $GAMEPAD
for file in /tmp/joypads/*.cfg; do
	EE_GAMEPAD=$(cat "$file" | grep input_device|  cut -d'"' -f 2)
	ES_EE_GAMEPAD=$(printf %q "$EE_GAMEPAD")
if cat /proc/bus/input/devices | grep -Ew -A 4 -B 1 "Name=\"${ES_EE_GAMEPAD}" | grep ${DEV} > /dev/null; then
	GPFILE="$file"
    break
fi
done

for button in input_select_btn input_start_btn input_a_btn input_b_btn input_up_btn input_down_btn input_left_btn input_right_btn; do 
KEY=$(cat "${GPFILE}" | grep -E "${button}" | cut -d '"' -f2)
    case ${button} in
         "input_select_btn")
         select=$KEY
         ;;
         "input_start_btn")
         start=$KEY
         ;;
         "input_a_btn")
         a=$KEY
         ;;
         "input_b_btn")
         b=$KEY
         ;;
         "input_up_btn")
         up=$KEY
         ;;
         "input_down_btn")
         down=$KEY
         ;;
         "input_left_btn")
         left=$KEY
         ;;
         "input_right_btn")
         right=$KEY
         ;;
    esac
done

# Usually gamepads use hats on dpads, but sometimes they use buttons, check for h0up and set the command accordingly
if [[ "${up}" != "h0up" ]]; then
    gptokeyb ${select}  ${start} ${a} ${b} ${up} ${down} ${left} ${right} "/dev/input/${DEV}" 1 & > /dev/null 2>&1
else
    gptokeyb ${select}  ${start} ${a} ${b} 200 201 300 3001 "/dev/input/${DEV}" 0 & > /dev/null 2>&1
fi
}

kill_video_controls() {
killall gptokeyb > /dev/null 2>&1
}


# read config files from /storage/.config/profile.d
  for config in /storage/.config/profile.d/*; do
    if [ -f "$config" ] ; then
      . $config
    fi
done
