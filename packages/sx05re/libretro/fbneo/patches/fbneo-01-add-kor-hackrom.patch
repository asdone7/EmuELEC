diff --git a/gamelist.txt b/gamelist.txt
index 434ba6f46..c6e95b08e 100644
--- a/gamelist.txt
+++ b/gamelist.txt
@@ -1,6 +1,6 @@
 This list contains all games supported by FinalBurn Neo.
 
-15905 games supported in total; X = excluded from build; D = included in debug build only; NW = not working
+16032 games supported in total; X = excluded from build; D = included in debug build only; NW = not working
 
   name		  status  full name						  parent	  year	  company	  hardware	  remarks
 +---------------+-------+-------------------------------------------------------+---------------+-------+---------------+---------------+---------------------------------------+
@@ -482,6 +482,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_aliensuk	|  	| Aliens UK						| 		| 1986	| Electric Dream| ZX Spectrum	| 					|
 | spec_aliensus	|  	| Aliens US						| 		| 1987	| Electric Dream| ZX Spectrum	| 					|
 | md_alisiad	|  	| Alisia Dragoon (Euro)					| 		| 1992	| Sega		| Sega Megadrive| 					|
+| md_alisiadk	|  	| Alisia Dragoon (Hack, Korean)				| md_alisiad	| 2013	| Game Arts	| Sega Megadrive| 					|
 | md_alisiads	|  	| Alisia Dragoon (Hack, Spanish)			| md_alisiad	| 2018	| Sega		| Sega Megadrive| 					|
 | md_alisiadj	|  	| Alisia Dragoon (Jpn)					| md_alisiad	| 1992	| Game Arts	| Sega Megadrive| 					|
 | md_alisiadu	|  	| Alisia Dragoon (USA)					| md_alisiad	| 1992	| Sega		| Sega Megadrive| 					|
@@ -715,15 +716,19 @@ This list contains all games supported by FinalBurn Neo.
 | md_arrowp	|  	| Arrow Flash (USA, Prototype)				| md_arrow	| 1990	| Renovation	| Sega Megadrive| 					|
 | md_arrow	|  	| Arrow Flash (World)					| 		| 1990	| Sega		| Sega Megadrive| 					|
 | md_artalive	|  	| Art Alive (World)					| 		| 1991	| Sega		| Sega Megadrive| 					|
+| aofb		|  	| Art of Fighting (Boss Hack)				| aof		| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_aof	|  	| Art of Fighting (Euro)				| 		| 1994	| Sega		| Sega Megadrive| 					|
 | md_aofec	|  	| Art of Fighting (Hack, Enhanced Colors)		| md_aof	| 2015	| Sega - Pyron	| Sega Megadrive| 					|
 | md_aofs	|  	| Art Of Fighting (Hack, Spanish)			| md_aof	| 2019	| SNK		| Sega Megadrive| 					|
+| aofk		|  	| Art of Fighting (Korean Patch, Boss Hack)		| aof		| 2016	| SNK		| Neo Geo MVS	| 					|
 | md_aofp	|  	| Art of Fighting (Prototype, 19940711)			| md_aof	| 1994	| Sega		| Sega Megadrive| 					|
 | md_aofu	|  	| Art of Fighting (USA)					| md_aof	| 1994	| Sega		| Sega Megadrive| 					|
 | aof		|  	| Art of Fighting / Ryuuko no Ken (NGM-044)(NGH-044)	| 		| 1992	| SNK		| Neo Geo MVS	| 					|
+| aof2b		|  	| Art of Fighting 2 (Boss Hack)				| aof2		| 1994	| SNK		| Neo Geo MVS	| 					|
 | aof2bh	|  	| Art of Fighting 2 / Ryuuko no Ken 2 (Enable hidden cha| aof2		| 1994	| Yumeji	| Neo Geo MVS	| 					|
 | aof2a		|  	| Art of Fighting 2 / Ryuuko no Ken 2 (NGH-056)		| aof2		| 1994	| SNK		| Neo Geo MVS	| 					|
 | aof2		|  	| Art of Fighting 2 / Ryuuko no Ken 2 (NGM-056)		| 		| 1994	| SNK		| Neo Geo MVS	| 					|
+| aof3b		|  	| Art of Fighting 3 - The Path of the Warrior (Boss Hack| aof3		| 1996	| SNK		| Neo Geo MVS	| 					|
 | aof3k		|  	| Art of Fighting 3 - The Path of the Warrior (Korean re| aof3		| 1996	| SNK		| Neo Geo MVS	| 					|
 | aof3bh	|  	| Art of Fighting 3 - The Path of the Warrior / Art of F| aof3		| 1996	| Yumeji	| Neo Geo MVS	| 					|
 | aof3		|  	| Art of Fighting 3 - The Path of the Warrior / Art of F| 		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -1006,6 +1011,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_bandito	|  	| Bandito (HB)						| 		| 2020	| Andy McDermott| ZX Spectrum	| 					|
 | bangball	|  	| Bang Bang Ball (v1.05)				| 		| 1996	| Banpresto / Ku| Miscellaneous	| 					|
 | b2b		|  	| Bang Bang Busters (2010 NCI release)			| 		| 2000	| Visco		| Neo Geo MVS	| 					|
+| bangbnd	|  	| Bang Bead (Fully Decrypted)				| bangbead	| 2000	| Visco		| Neo Geo MVS	| 					|
 | bangbedp	|  	| Bang Bead (Prototype?)				| bangbead	| 2000	| Visco		| Neo Geo MVS	| 					|
 | bangbead	|  	| Bang Bead						| 		| 2000	| Visco		| Neo Geo MVS	| 					|
 | bang		|  	| Bang!							| 		| 1998	| Gaelco	| Miscellaneous	| 					|
@@ -1130,6 +1136,7 @@ This list contains all games supported by FinalBurn Neo.
 | bcruzm12	|  	| Battle Cruiser M-12					| 		| 1983	| Sigma Enterpri| Miscellaneous	| 					|
 | btlfieldb	|  	| Battle Field (bootleg)				| timesold	| 1987	| bootleg	| Alpha 68k	| no-rotation joystick ver		|
 | btlfield	|  	| Battle Field (Japan)					| timesold	| 1987	| Alpha Denshi C| Alpha 68k	| 					|
+| flipshtk	|  	| Battle Flip Shot (Korean)				| flipshot	| 2005	| Visco		| Neo Geo MVS	| 					|
 | flipshot	|  	| Battle Flip Shot					| 		| 1998	| Visco		| Neo Geo MVS	| 					|
 | nes_battleformula|  	| Battle Formula (Japan)				| 		| 1991	| Sunsoft	| Miscellaneous	| 					|
 | bgareggahk	|  	| Battle Garegga (Austria / Hong Kong) (Sat Feb 3 1996)	| bgaregga	| 1996	| Raizing / 8ing| Toaplan GP9001| 					|
@@ -1371,6 +1378,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_blackboxcha|  	| Black Box Challenge (HB)				| 		| 2017	| Sly Dog Studio| Miscellaneous	| 					|
 | blkdrgonb	|  	| Black Dragon (bootleg)				| blktiger	| 1987	| bootleg	| Miscellaneous	| 					|
 | blkdrgon	|  	| Black Dragon (Japan)					| blktiger	| 1987	| Capcom	| Miscellaneous	| 					|
+| blkdrgnk	|  	| Black Dragon (Korean)					| blktiger	| 1987	| Capcom	| Miscellaneous	| 					|
 | blkheartj	|  	| Black Heart (Japan)					| blkheart	| 1991	| UPL		| NMK16		| 					|
 | blkheart	|  	| Black Heart						| 		| 1991	| UPL		| NMK16		| 					|
 | blkhole	|  	| Black Hole						| 		| 1981	| TDS		| Galaxian	| 					|
@@ -1675,6 +1683,8 @@ This list contains all games supported by FinalBurn Neo.
 | msx_breakoutt	|  	| Break Out!						| 		| 1985	| Toshiba-EMI	| MSX		| 					|
 | brkthru	|  	| Break Thru (US)					| 		| 1986	| Data East USA	| Miscellaneous	| 					|
 | msx_breaker	|  	| Breaker Breaker (Euro)				| 		| 1988	| Eurosoft	| MSX		| 					|
+| breakerb	|  	| Breakers (Boss Hack)					| breakers	| 1996	| Visco		| Neo Geo MVS	| 					|
+| breakreb	|  	| Breakers Revenge (Boss Hack)				| breakrev	| 1998	| Visco		| Neo Geo MVS	| 					|
 | breakrevbh	|  	| Breakers Revenge - Boss Hack (Bai-Hu)			| breakrev	| 1998	| hack		| Neo Geo MVS	| 					|
 | brkrevext	|  	| Breakers Revenge - Extra Mode (Hack)			| breakrev	| 2018	| Visco		| Neo Geo MVS	| 					|
 | breakrev	|  	| Breakers Revenge					| 		| 1998	| Visco		| Neo Geo MVS	| 					|
@@ -1994,6 +2004,7 @@ This list contains all games supported by FinalBurn Neo.
 | captcommr1	|  	| Captain Commando (911014 World)			| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcommj	|  	| Captain Commando (911202 Japan)			| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcomm	|  	| Captain Commando (911202 World)			| 		| 1991	| Capcom	| CPS1		| 					|
+| captcommv4	|  	| Captain Commando (911202 World, 1 vs 4 Hack)		| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcommb	|  	| Captain Commando (bootleg set 1, 911014 other country)| captcomm	| 1991	| bootleg	| CPS1		| 					|
 | captcommb2	|   NW	| Captain Commando (bootleg set 2 (with 2xMSM5205), 9110| captcomm	| 1991	| bootleg	| CPS1		| unemulated graphics			|
 | captcommb3	|  	| Captain Commando (bootleg set 3 (with YM2151 + 2xMSM52| captcomm	| 1991	| bootleg	| CPS1		| 					|
@@ -2615,6 +2626,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_contra	|  	| Contra - Hard Corps (USA, Kor)			| 		| 1994	| Konami	| Sega Megadrive| 					|
 | nes_contrredfalwar|  	| Contra - Red Falcon War (USA)				| nes_contra	| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_contrrevredfal|  	| Contra - Revenge of the Red Falcon (USA)		| nes_contra	| 1989?	| Nintendo	| Miscellaneous	| 					|
+| md_contrak	|  	| Contra - The Hard Corps (Hack, Korean)		| md_contra	| 2013	| Konami	| Sega Megadrive| 					|
 | md_contraj	|  	| Contra - The Hard Corps (Jpn)				| md_contra	| 1994	| Konami	| Sega Megadrive| 					|
 | nes_contra168in1|  	| Contra 168-in-1 (Unl)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_contraforcec|  	| Contra Force (2nd option, T-Chi)			| nes_contraforce| 2018	| Konami	| Miscellaneous	| 					|
@@ -2679,9 +2691,9 @@ This list contains all games supported by FinalBurn Neo.
 | msx_cosmoexpa	|  	| Cosmo-Explorer (Jpn, Alt)				| msx_cosmoexp	| 1985	| Sony		| MSX		| 					|
 | cottong	|  	| Cotocoto Cottong					| locomotn	| 1982	| bootleg	| Miscellaneous	| 					|
 | cottonjad	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypte| cotton	| 1991	| Success / Sega| System 16B	| 					|
-| cottonja	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a))	| cotton	| 1991	| Success / Sega| System 16B	| 					|
+| cottonja	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonjd	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypte| cotton	| 1991	| Success / Sega| System 16B	| 					|
-| cottonj	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b))	| cotton	| 1991	| Success / Sega| System 16B	| 					|
+| cottonj	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonud	|  	| Cotton (set 2, US, FD1094 317-0180 decrypted)		| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonu	|  	| Cotton (set 2, US, FD1094 317-0180)			| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottond	|  	| Cotton (set 3, World, FD1094 317-0181a decrypted)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
@@ -3514,7 +3526,7 @@ This list contains all games supported by FinalBurn Neo.
 | msx_ddragon	|  	| Double Dragon (Kor)					| 		| 1989	| Zemina	| MSX		| 					|
 | sms_ddragonk	|  	| Double Dragon (Kor)					| sms_ddragon	| 198?	| Samsung	| Sega Master Sy| 					|
 | doubledr	|  	| Double Dragon (Neo-Geo)				| 		| 1995	| Technos	| Neo Geo MVS	| 					|
-| doubledrsp	| D	| Double Dragon (Special 2017, hack)			| doubledr	| 2017	| hack		| Neo Geo MVS	| 					|
+| doubledrsp	|  	| Double Dragon (Special 2017, hack)			| doubledr	| 2017	| hack		| Neo Geo MVS	| 					|
 | ddragonu	|  	| Double Dragon (US set 1)				| ddragon	| 1987	| [Technos] (Tai| Miscellaneous	| 					|
 | ddragonua	|  	| Double Dragon (US set 2)				| ddragon	| 1987	| [Technos] (Tai| Miscellaneous	| 					|
 | ddragonub	|  	| Double Dragon (US set 3)				| ddragon	| 1987	| [Technos] (Tai| Miscellaneous	| 					|
@@ -3786,6 +3798,7 @@ This list contains all games supported by FinalBurn Neo.
 | ddsomh	|  	| Dungeons & Dragons - shadow over mystara (960223 Hispa| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsomjr2	|  	| Dungeons & Dragons - shadow over mystara (960223 Japan| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsoma	|  	| Dungeons & Dragons - shadow over mystara (960619 Asia)| ddsom		| 1996	| Capcom	| CPS2		| 					|
+| ddsomav4	|  	| Dungeons & Dragons - shadow over mystara (960619 Asia,| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsom		|  	| Dungeons & Dragons - shadow over mystara (960619 Euro)| 		| 1996	| Capcom	| CPS2		| 					|
 | ddsomj	|  	| Dungeons & Dragons - shadow over mystara (960619 Japan| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsomud	|  	| Dungeons & Dragons - shadow over mystara (960619 USA P| ddsom		| 1996	| bootleg	| CPS2		| 					|
@@ -3958,11 +3971,13 @@ This list contains all games supported by FinalBurn Neo.
 | efdt		|  	| El Fin Del Tiempo					| 		| 1981	| Niemer	| Miscellaneous	| 					|
 | msx_sideral	|  	| El Motorista Sideral (Spa)				| 		| 1986	| Anaya Multimed| MSX		| 					|
 | msx_mundoper	|  	| El Mundo Perdido (Spa)				| 		| 1988	| Topo Soft	| MSX		| 					|
+| md_elvientok	|  	| El Viento (Hack, Korean)				| md_elviento	| 2009	| Wolf Team	| Sega Megadrive| 					|
 | md_elvientos	|  	| El Viento (Hack, Spanish)				| md_elviento	| 2018	| Wolf Team	| Sega Megadrive| 					|
 | md_elvientoj	|  	| El Viento (Jpn)					| md_elviento	| 1991	| Wolf Team	| Sega Megadrive| 					|
 | md_elviento	|  	| El Viento (USA)					| 		| 1991	| Renovation	| Sega Megadrive| 					|
 | fds_electrician1|  	| Electrician (Japan)					| fds_electrician| 1989?	| Nintendo	| Miscellaneous	| 					|
 | fds_electrician|  	| Electrician (T-eng)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| md_elemastk	|  	| Elemental Master (Hack, Korean)			| md_elemast	| 2013	| Technosoft	| Sega Megadrive| 					|
 | md_elemastj	|  	| Elemental Master (Jpn)				| md_elemast	| 1990	| Technosoft	| Sega Megadrive| 					|
 | md_elemast	|  	| Elemental Master (USA)				| 		| 1993	| Renovation	| Sega Megadrive| 					|
 | elevator	|  	| Elevator Action (BA3, 4 pcb version, 1.1)		| 		| 1983	| Taito Corporat| Taito SJ Syste| 					|
@@ -4108,6 +4123,7 @@ This list contains all games supported by FinalBurn Neo.
 | exerizerb	|  	| Exerizer (Japan) (bootleg)				| skyfox	| 1987	| Jaleco	| Miscellaneous	| 					|
 | exerizer	|  	| Exerizer (Japan)					| skyfox	| 1987	| Jaleco	| Miscellaneous	| 					|
 | md_exile	|  	| Exile (USA)						| 		| 1991	| Renovation	| Sega Megadrive| 					|
+| md_exilek	|  	| Exile - Toki no Hazama e (Hack, Korean)		| md_exile	| 2018	| Riot		| Sega Megadrive| 					|
 | md_exilej	|  	| Exile - Toki no Hazama e (Jpn)			| md_exile	| 1991	| Riot		| Sega Megadrive| 					|
 | md_exosquad	|  	| Exo Squad (Euro)					| 		| 1995	| Virgin Interac| Sega Megadrive| 					|
 | md_exosquadu	|  	| Exo Squad (USA)					| md_exosquad	| 1995	| Playmates Inte| Sega Megadrive| 					|
@@ -4296,6 +4312,7 @@ This list contains all games supported by FinalBurn Neo.
 | tg_fantzone	|  	| Fantasy Zone						| 		| 1989	| NEC		| TurboGrafx 16	| 					|
 | fantazia	|  	| Fantazia (bootleg?)					| mooncrst	| 1980	| bootleg (Subel| Galaxian	| 					|
 | kabukiklb	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| kabukikl	| 1995	| Ydmis / Creamy| Neo Geo MVS	| 					|
+| kabukikb	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| kabukikl	| 1995	| Hudson	| Neo Geo MVS	| 					|
 | kabukikl	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| 		| 1995	| Hudson	| Neo Geo MVS	| 					|
 | farwest	| D NW	| Far West						| ironhors	| 1986	| bootleg?	| GX560		| 					|
 | nes_faria	|  	| Faria - A World of Mystery & Danger! (USA)		| 		| 1991	| Nexoft	| Miscellaneous	| 					|
@@ -4312,16 +4329,20 @@ This list contains all games supported by FinalBurn Neo.
 | md_fastest1	|  	| Fastest 1 (Jpn)					| 		| 1991	| Human Entertai| Sega Megadrive| 					|
 | md_fatfury	|  	| Fatal Fury (Euro, Kor)				| 		| 1993	| Sega		| Sega Megadrive| 					|
 | md_fatfuryu	|  	| Fatal Fury (USA)					| md_fatfury	| 1993	| Takara	| Sega Megadrive| 					|
+| fatfur1h	|  	| Fatal Fury - King of Fighters (Hidden Hack)		| fatfury1	| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury1bh	|  	| Fatal Fury - King of Fighters / Garou Densetsu - shuku| fatfury1	| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury1	|  	| Fatal Fury - King of Fighters / Garou Densetsu - shuku| 		| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_fatfury2ec	|  	| Fatal Fury 2 (Hack, Enhanced Colors v4.0)		| md_fatfury2	| 2015	| Takara - Pyron| Sega Megadrive| 					|
+| fatfur2h	|  	| Fatal Fury 2 (Hidden Hack)				| fatfury2	| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_fatfury2	|  	| Fatal Fury 2 (USA, Kor)				| 		| 1994	| Takara	| Sega Megadrive| 					|
 | fatfury2	|  	| Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (| 		| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury2a	|  	| Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (| fatfury2	| 1992	| SNK		| Neo Geo MVS	| 					|
+| fatfur3b	|  	| Fatal Fury 3 - Road to the Final Victory (Boss Hack)	| fatfury3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | fatfury3bh	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| fatfury3	| 1995	| Yumeji	| Neo Geo MVS	| 					|
 | fatfury3a	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| fatfury3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | fatfury3	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| 		| 1995	| SNK		| Neo Geo MVS	| 					|
 | gg_fatfursp	|  	| Fatal Fury Special (Euro)				| 		| 1994	| Takara	| Sega Game Gear| 					|
+| fatfursh	|  	| Fatal Fury Special (Hidden Hack)			| fatfursp	| 1993	| SNK		| Neo Geo MVS	| 					|
 | gg_fatfurspu	|  	| Fatal Fury Special (USA)				| gg_fatfursp	| 1994	| Takara	| Sega Game Gear| 					|
 | fatfurspbs	|  	| Fatal Fury Special / Garou Densetsu Special (Optional | fatfursp	| 1993	| Yumeji	| Neo Geo MVS	| 					|
 | fatfursp	|  	| Fatal Fury Special / Garou Densetsu Special (set 1)(NG| 		| 1993	| SNK		| Neo Geo MVS	| 					|
@@ -4379,6 +4400,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_fifa99	|  	| FIFA Soccer 99 (Pirate)				| md_fifa96	| 199?	| <unlicensed>	| Sega Megadrive| 					|
 | md_fifa2k10	|  	| FIFA World Cup - South Africa 2010 (Rus)		| md_fifa	| 199?	| <unknown>	| Sega Megadrive| 					|
 | md_fifa2k2	|  	| FIFA World Cup 2002 (Rus)				| md_wcs2	| 199?	| Glorysun	| Sega Megadrive| 					|
+| fightfeb	|  	| Fight Fever (Boss Hack)				| fightfev	| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fightfev	|  	| Fight Fever (set 1)					| 		| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fightfeva	|  	| Fight Fever (set 2)					| fightfev	| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fghthistjb	|  	| Fighter's History (Japan ver 41-04, DE-0380-1 PCB)	| fghthist	| 1993	| Data East Corp| DECO 32	| 					|
@@ -4436,10 +4458,12 @@ This list contains all games supported by FinalBurn Neo.
 | ffightj3	|  	| Final Fight (900405 Japan)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightub	|  	| Final Fight (900424 USA)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightj4	|  	| Final Fight (900613 Japan)				| ffight	| 1989	| Capcom	| CPS1		| 					|
+| ffgtj4v2	|  	| Final Fight (900613 Japan, 1 vs 2 Hack)		| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightuc	|  	| Final Fight (900613 USA)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightbl	|  	| Final Fight (bootleg set 1 (with 2xYM2203 + 2xMSM5205)| ffight	| 1990	| bootleg	| CPS1		| 					|
 | ffightbla	|  	| Final Fight (bootleg set 2 (with 2xYM2203 + 2xMSM5205)| ffight	| 1990	| bootleg	| CPS1		| 					|
 | ffightj	|  	| Final Fight (Japan)					| ffight	| 1989	| Capcom	| CPS1		| 					|
+| ffgtj2sp	|  	| Final Fight (Super Plus Hack, 900305 Japan)		| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu	|  	| Final Fight (USA, set 1)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu1	|  	| Final Fight (USA, set 2)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu2	|  	| Final Fight (USA, set 3)				| ffight	| 1989	| Capcom	| CPS1		| 					|
@@ -4581,7 +4605,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_flea	|  	| FLEA! (HB)						| 		| 2020	| Lowtek	| Miscellaneous	| 					|
 | nes_fleademo	|  	| FLEA! demo (HB)					| nes_flea	| 2019	| Lowtek	| Miscellaneous	| 					|
 | flicky	|  	| Flicky (128k Version, 315-5051)			| 		| 1984	| Sega		| System 1	| 					|
-| flickya	|  	| Flicky (128k Version, 315-5051, larger roms))		| flicky	| 1984	| Sega		| System 1	| 					|
+| flickya	|  	| Flicky (128k Version, 315-5051, larger roms)		| flicky	| 1984	| Sega		| System 1	| 					|
 | flickys2	|  	| Flicky (128k Version, not encrypted)			| flicky	| 1984	| Sega		| System 1	| 					|
 | flickyg	|  	| Flicky (128k Version, System 2, 315-5051, alt graphics| flicky	| 1984	| Sega		| System 1	| 					|
 | flickys2g	|  	| Flicky (128k Version, System 2, not encrypted, alt gra| flicky	| 1984	| Sega		| System 1	| 					|
@@ -4883,6 +4907,7 @@ This list contains all games supported by FinalBurn Neo.
 | cv_galaxian	|  	| Galaxian						| 		| 1983	| Atarisoft	| ColecoVision	| 					|
 | nes_galaxy5000|  	| Galaxy 5000 (USA)					| 		| 1991	| Activision	| Miscellaneous	| 					|
 | galemp	|  	| Galaxy Empire (bootleg?)				| uniwars	| 1980	| bootleg (Taito| Galaxian	| 					|
+| galaxyfh	|  	| Galaxy Fight - Universal Warriors (Hidden Hack)	| galaxyfg	| 1995	| Sunsoft	| Neo Geo MVS	| 					|
 | galaxyfg	|  	| Galaxy Fight - Universal Warriors			| 		| 1995	| Sunsoft	| Neo Geo MVS	| 					|
 | sms_gforce	|  	| Galaxy Force (Euro, Bra)				| 		| 1989	| Sega		| Sega Master Sy| 					|
 | sms_gforceu	|  	| Galaxy Force (USA)					| sms_gforce	| 1989	| Activision	| Sega Master Sy| 					|
@@ -4972,6 +4997,7 @@ This list contains all games supported by FinalBurn Neo.
 | gangwars	|  	| Gang Wars						| 		| 1989	| Alpha Denshi C| Alpha 68k	| 					|
 | sms_robocop	|  	| Gangcheol RoboCop (Kor)				| 		| 1992	| Sieco		| Sega Master Sy| 					|
 | sms_gangster	|  	| Gangster Town (Euro, USA, Bra)			| 		| 1987	| Sega		| Sega Master Sy| Light Phaser game			|
+| ganryund	|  	| Ganryu (Fully Decrypted)				| ganryu	| 1999	| Visco		| Neo Geo MVS	| 					|
 | ganryu	|  	| Ganryu / Musashi Ganryuki				| 		| 1999	| Visco		| Neo Geo MVS	| 					|
 | nes_gansosaij	|  	| Ganso Saiyuuki - Super Monkey Daibouken (Japan)	| nes_gansosai	| 1986	| Vap		| Miscellaneous	| 					|
 | nes_gansosai	|  	| Ganso Saiyuuki - Super Monkey Daibouken (T-Eng)	| 		| 1986	| Vap		| Miscellaneous	| 					|
@@ -4993,6 +5019,7 @@ This list contains all games supported by FinalBurn Neo.
 | garogun	|  	| Garogun Seroyang (Korea)				| 		| 2000	| Yun Sung	| Miscellaneous	| 					|
 | garoubl	|  	| Garou - Mark of the Wolves (bootleg)			| garou		| 1999	| bootleg	| Neo Geo MVS	| 					|
 | garoub	|  	| Garou - Mark of the Wolves (Enable hidden characters)	| garou		| 1999	| Ydmis		| Neo Geo MVS	| 					|
+| garound	|  	| Garou - Mark of the Wolves (Fully Decrypted)		| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garouha	|  	| Garou - Mark of the Wolves (NGH-2530)			| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garouh	|  	| Garou - Mark of the Wolves (NGM-2530) (NGH-2530)	| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garou		|  	| Garou - Mark of the Wolves (NGM-2530)			| 		| 1999	| SNK		| Neo Geo MVS	| 					|
@@ -5169,6 +5196,7 @@ This list contains all games supported by FinalBurn Neo.
 | gigasm2b	|  	| Gigas Mark II						| gigasm2	| 1986	| bootleg	| Miscellaneous	| 					|
 | nes_gimmick	|  	| Gimmick! (Japan)					| 		| 1992	| Sunsoft	| Miscellaneous	| 					|
 | fds_gingaden	|  	| Ginga Denshou - Galaxy Odyssey (Japan)		| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| ginganink	|  	| Ginga NinkyouDen (Korean)				| ginganin	| 1987	| Jaleco	| Miscellaneous	| 					|
 | ginganin	|  	| Ginga NinkyouDen (set 1)				| 		| 1987	| Jaleco	| Miscellaneous	| 					|
 | ginganina	|  	| Ginga NinkyouDen (set 2)				| ginganin	| 1987	| Jaleco	| Miscellaneous	| 					|
 | gteikokub	|  	| Gingateikoku No Gyakushu (bootleg set 1)		| uniwars	| 1980	| bootleg	| Galaxian	| 					|
@@ -5185,6 +5213,7 @@ This list contains all games supported by FinalBurn Neo.
 | glasskr	|  	| Glass (Ver 1.1, Break Edition, Version 1994) (censored| glass		| 1994	| OMK / Gaelco (| Miscellaneous	| 					|
 | glass		|  	| Glass (Ver 1.1, Break Edition, Version 1994)		| 		| 1994	| OMK / Gaelco	| Miscellaneous	| 					|
 | md_gleylance	|  	| GleyLancer (Hack, English)				| md_gleylanc	| 2007	| NCS		| Sega Megadrive| 					|
+| md_gleylanck	|  	| GleyLancer (Hack, Korean)				| md_gleylanc	| 2013	| NCS		| Sega Megadrive| 					|
 | md_gleylanc	|  	| GleyLancer (Jpn)					| 		| 1992	| NCS		| Sega Megadrive| 					|
 | msx_glider	|  	| Glider (Jpn)						| 		| 1985	| ZAP		| MSX		| 					|
 | msx_glidera	|  	| Glider (Jpn, Alt)					| msx_glider	| 1985	| ZAP		| MSX		| 					|
@@ -5557,6 +5586,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_gunship	|  	| Gunship (Euro)					| 		| 1993	| U.S. Gold	| Sega Megadrive| 					|
 | spec_gunship	|  	| Gunship						| 		| 1987	| MicroProse Sof| ZX Spectrum	| 					|
 | md_gunstar	|  	| Gunstar Heroes (Euro)					| 		| 1993	| Sega		| Sega Megadrive| 					|
+| md_gunstark	|  	| Gunstar Heroes (Hack, Korean)				| md_gunstar	| 2017	| Sega		| Sega Megadrive| 					|
 | md_gunstars	|  	| Gunstar Heroes (Hack, Spanish)			| md_gunstar	| 2017	| Treasure	| Sega Megadrive| 					|
 | gg_gunstar	|  	| Gunstar Heroes (Jpn)					| 		| 1995	| Sega		| Sega Game Gear| 					|
 | md_gunstarj	|  	| Gunstar Heroes (Jpn)					| md_gunstar	| 1993	| Sega		| Sega Megadrive| 					|
@@ -5619,7 +5649,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_hammerboy2|  	| Hammer Boy (Part 2 of 2) (128K)			| 		| 1991	| Dinamic Softwa| ZX Spectrum	| 					|
 | msx_hammboy	|  	| Hammer Boy (Spa)					| 		| 1991	| Dinamic Softwa| MSX		| Keyboard control only.		|
 | hharryu	|  	| Hammerin' Harry (US, M84 hardware)			| hharry	| 1990	| Irem America	| Irem M82	| 					|
-| hharry	|  	| Hammerin' Harry (World, M81 hardware))		| 		| 1990	| Irem		| Irem M82	| 					|
+| hharry	|  	| Hammerin' Harry (World, M81 hardware)			| 		| 1990	| Irem		| Irem M82	| 					|
 | hharryb	|  	| Hammerin' Harry (World, M84 hardware bootleg)		| hharry	| 1990	| bootleg	| Irem M82	| 					|
 | pce_hanataka	|  	| Hana Taaka Daka!?					| 		| 1991	| Taito		| PC Engine	| 					|
 | sms_hangon	|  	| Hang-On (Euro, Bra, Aus)				| 		| 1985	| Sega		| Sega Master Sy| 					|
@@ -5862,6 +5892,7 @@ This list contains all games supported by FinalBurn Neo.
 | redfoxwp2	|  	| Hong Hu Zhanji II (China, set 1)			| grdnstrm	| 1998	| Afega		| NMK16		| 					|
 | redfoxwp2a	|  	| Hong Hu Zhanji II (China, set 2)			| grdnstrm	| 1998	| Afega		| NMK16		| 					|
 | sms_hongkildong|  	| Hong Kil Dong (Kor)					| 		| 1991	| Clover	| Sega Master Sy| 					|
+| md_ddanpeik	|  	| Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)	| md_ddanpei	| 1992	| Sega		| Sega Megadrive| 					|
 | gg_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei (Jpn)		| 		| 1992	| Sega		| Sega Game Gear| 					|
 | md_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei (Jpn)		| 		| 1992	| Sega		| Sega Megadrive| 					|
 | pce_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei			| 		| 1992	| Hudson	| PC Engine	| 					|
@@ -5991,6 +6022,7 @@ This list contains all games supported by FinalBurn Neo.
 | hyperspt	|  	| Hyper Sports						| 		| 1984	| Konami (Centur| GX330		| 					|
 | spec_hypersports|  	| Hyper Sports						| 		| 1985	| Imagine	| ZX Spectrum	| 					|
 | hsf2j1	|  	| Hyper Street Fighter II: The Anniversary Edition (0312| hsf2		| 2004	| Capcom	| CPS2		| 					|
+| hsf2jh	|  	| Hyper Street Fighter II: The Anniversary Edition (0312| hsf2		| 2004	| Capcom	| CPS2		| 					|
 | hsf2d		|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| bootleg	| CPS2		| 					|
 | hsf2da	|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| bootleg	| CPS2		| 					|
 | hsf2a		|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| Capcom	| CPS2		| 					|
@@ -6568,6 +6600,7 @@ This list contains all games supported by FinalBurn Neo.
 | karnova	|  	| Karnov (US, rev 5)					| karnov	| 1987	| Data East USA	| Miscellaneous	| 					|
 | karnov	|  	| Karnov (US, rev 6)					| 		| 1987	| Data East USA	| Miscellaneous	| 					|
 | nes_karnov	|  	| Karnov (USA)						| 		| 1988	| Data East	| Miscellaneous	| 					|
+| karnovrb	|  	| Karnov's Revenge / Fighter's History Dynamite (Hidden | karnovr	| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | karnovr	|  	| Karnov's Revenge / Fighter's History Dynamite		| 		| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | spec_karnov	|  	| Karnov						| 		| 1988	| Electric Dream| ZX Spectrum	| 					|
 | nes_kartfighter|  	| Kart Fighter (Unl)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
@@ -6734,6 +6767,7 @@ This list contains all games supported by FinalBurn Neo.
 | kittenk	|  	| Kitten Kaboodle					| 		| 1988	| Konami	| GX712		| 					|
 | nes_kittyscatch|  	| Kitty's Catch (USA)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_kiwikra	|  	| Kiwi Kraze - A Bird-Brained Adventure! (USA)		| 		| 1991	| Taito		| Miscellaneous	| 					|
+| kizunab	|  	| Kizuna Encounter - Super Tag Battle / Fu'un Super Tag | kizuna	| 1996	| SNK		| Neo Geo MVS	| 					|
 | kizuna	|  	| Kizuna Encounter - Super Tag Battle / Fu'un Super Tag | 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | nes_klashball	|  	| KlashBall (USA)					| 		| 1991	| Sofel		| Miscellaneous	| 					|
 | msx_klax	|  	| Klax (Euro)						| 		| 1990	| Domark	| MSX		| 					|
@@ -6774,6 +6808,7 @@ This list contains all games supported by FinalBurn Neo.
 | msx_knightm3	|  	| Knightmare III - Shalom (Jpn)				| 		| 1987	| Konami	| MSX		| 					|
 | sg1k_moyuchua	|  	| Knightmare, Moyu Chuanqi (Tw)				| 		| 1986?	| Jumbo		| Sega SG-1000	| 					|
 | knights	|  	| Knights of the Round (911127 etc)			| 		| 1991	| Capcom	| CPS1		| 					|
+| knightj3	|  	| Knights of the Round (911127 Japan, 1 vs 3 Hack)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsja	|  	| Knights of the Round (911127 Japan, B-Board 89625B-1)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsj	|  	| Knights of the Round (911127 Japan, B-Board 91634B-2)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsu	|  	| Knights of the Round (911127 USA)			| knights	| 1991	| Capcom	| CPS1		| 					|
@@ -7015,6 +7050,7 @@ This list contains all games supported by FinalBurn Neo.
 | gg_landill	|  	| Land of Illusion Starring Mickey Mouse (Euro, USA)	| 		| 1993	| Sega		| Sega Game Gear| 					|
 | lsasquad	|  	| Land Sea Air Squad / Riku Kai Kuu Saizensen		| 		| 1986	| Taito		| Miscellaneous	| 					|
 | md_landstlkg	|  	| Landstalker - Die Schatze von Konig Nolo (Ger)	| md_landstlk	| 1993	| Sega		| Sega Megadrive| 					|
+| md_landstlkk	|  	| Landstalker - Koutei no Zaihou (Hack, Korean)		| md_landstlk	| 2013	| Sega		| Sega Megadrive| 					|
 | md_landstlkj	|  	| Landstalker - Koutei no Zaihou (Jpn)			| md_landstlk	| 1992	| Sega		| Sega Megadrive| 					|
 | md_landstlkc	|  	| Landstalker - Koutei no Zaihou (T-Chi)		| md_landstlk	| 2007	| Sega		| Sega Megadrive| 					|
 | md_landstlkf	|  	| Landstalker - Le Tresor du Roi Nole (Fra)		| md_landstlk	| 1993	| Sega		| Sega Megadrive| 					|
@@ -7629,6 +7665,7 @@ This list contains all games supported by FinalBurn Neo.
 | mshb		|  	| Marvel Super Heroes (951117 Brazil)			| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshh		|  	| Marvel Super Heroes (951117 Hispanic)			| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshj		|  	| Marvel Super Heroes (951117 Japan)			| msh		| 1995	| Capcom	| CPS2		| 					|
+| mshjh		|  	| Marvel Super Heroes (951117 Japan, Hidden Hack)	| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshvsfa1	|  	| Marvel Super Heroes vs Street Fighter (970620 Asia)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfa	|  	| Marvel Super Heroes vs Street Fighter (970625 Asia)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfb1	|  	| Marvel Super Heroes vs Street Fighter (970625 Brazil)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
@@ -7639,6 +7676,7 @@ This list contains all games supported by FinalBurn Neo.
 | mshvsfu1	|  	| Marvel Super Heroes vs Street Fighter (970625 USA)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfj1	|  	| Marvel Super Heroes vs Street Fighter (970702 Japan)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfj	|  	| Marvel Super Heroes vs Street Fighter (970707 Japan)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
+| mshvsfjh	|  	| Marvel Super Heroes vs Street Fighter (970707 Japan, H| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfb	|  	| Marvel Super Heroes vs Street Fighter (970827 Brazil)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfu	|  	| Marvel Super Heroes vs Street Fighter (970827 USA)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mvscur1	|  	| Marvel vs Capcom - clash of super heroes (971222 USA)	| mvsc		| 1998	| Capcom	| CPS2		| 					|
@@ -7692,6 +7730,8 @@ This list contains all games supported by FinalBurn Neo.
 | nes_matendouji|  	| Matendouji (Japan)					| 		| 1990	| Bothtec (Quest| Miscellaneous	| 					|
 | md_mathblst	|  	| Math Blaster - Episode 1 (USA)			| 		| 1994	| Davidson & Ass| Sega Megadrive| 					|
 | fds_matounohou|  	| Matou no Houkai - The Hero of Babel (Japan)		| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| matrimdh	|  	| Matrimelee (Boss Hack)				| matrim	| 2002	| Noise Factory | Neo Geo MVS	| 					|
+| matrimnd	|  	| Matrimelee (Fully Decrypted)				| matrim	| 2002	| Noise Factory | Neo Geo MVS	| 					|
 | matrimbl	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (bootleg)| matrim	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | matrimbh	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (Enable H| matrim	| 2002	| Creamymami[EGC| Neo Geo MVS	| 					|
 | matrim	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (NGM-2660| 		| 2002	| Noise Factory | Neo Geo MVS	| 					|
@@ -7863,17 +7903,20 @@ This list contains all games supported by FinalBurn Neo.
 | mslug2dg	|  	| Metal Slug 2 - Super Vehicle-001/II (Multifunction Hac| mslug2	| 2017	| hack		| Neo Geo MVS	| 					|
 | mslug2	|  	| Metal Slug 2 - Super Vehicle-001/II (NGM-2410) (NGH-24| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | mslug2t	|  	| Metal Slug 2 Turbo (NGM-9410)				| mslug2	| 2015	| Hack		| Neo Geo MVS	| 					|
+| mslug3nd	|  	| Metal Slug 3 (Fully Decrypted)			| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3g	|  	| Metal Slug 3 (Multifunction Hack, 20190119)		| mslug3	| 2019	| hack		| Neo Geo MVS	| 					|
 | mslug3v	|  	| Metal Slug 3 (NGH-2560) (Enhanced Violence Version, ha| mslug3	| 2012	| hack		| Neo Geo MVS	| 					|
 | mslug3h	|  	| Metal Slug 3 (NGH-2560)				| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3	|  	| Metal Slug 3 (NGM-2560)				| 		| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3a	|  	| Metal Slug 3 (NGM-2560, earlier)			| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
+| mslug4nd	|  	| Metal Slug 4 (Fully Decrypted)			| mslug4	| 2002	| Mega		| Neo Geo MVS	| 					|
 | mslug4dg	|  	| Metal Slug 4 (Multifunction Hack, 20171225)		| mslug4	| 2017	| hack		| Neo Geo	| 					|
 | mslug4h	|  	| Metal Slug 4 (NGH-2630)				| mslug4	| 2002	| Mega		| Neo Geo MVS	| 					|
 | mslug4	|  	| Metal Slug 4 (NGM-2630)				| 		| 2002	| Mega		| Neo Geo MVS	| 					|
 | ms4plus	|  	| Metal Slug 4 Plus (bootleg)				| mslug4	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | mslug5b	|  	| Metal Slug 5 (bootleg, set 1)				| mslug5	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | mslug5b2	|  	| Metal Slug 5 (bootleg, set 2)				| mslug5	| 2003	| bootleg	| Neo Geo MVS	| 					|
+| mslug5nd	|  	| Metal Slug 5 (Fully Decrypted)			| mslug5	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | ms5pcb	|  	| Metal Slug 5 (JAMMA PCB)				| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | mslug5g	|  	| Metal Slug 5 (Multifunction Hack, 20170523)		| mslug5	| 2017	| hack		| Neo Geo MVS	| 					|
 | mslug5w	|  	| Metal Slug 5 (New Campaign, 2016-03-10)		| mslug5	| 2003	| hack, C.B	| Miscellaneous	| 					|
@@ -8425,6 +8468,7 @@ This list contains all games supported by FinalBurn Neo.
 | msx_msx	|   NW	| MSX1 System BIOS					| 		| 1982	| MSX		| MSX		| BIOS only				|
 | rocktrv2	|  	| MTV Rock-N-Roll Trivia (Part 2)			| 		| 1986	| Triumph Softwa| Pac-man	| 					|
 | mugsmash	|  	| Mug Smashers						| 		| 1990?	| Electronic Dev| Miscellaneous	| 					|
+| md_valisk	|  	| Mugen Senshi Valis (Hack, Korean)			| md_valis	| 2009	| Riot		| Sega Megadrive| 					|
 | md_valisj	|  	| Mugen Senshi Valis (Jpn)				| md_valis	| 1991	| Riot		| Sega Megadrive| 					|
 | msx_valis	|  	| Mugen Senshi Valis (Jpn)				| 		| 1986	| Nihon Telenet	| MSX		| 					|
 | msx_valisk	|  	| Mugen Senshi Valis (Kor)				| msx_valis	| 1987	| Zemina	| MSX		| 					|
@@ -8459,6 +8503,7 @@ This list contains all games supported by FinalBurn Neo.
 | mbombrd	|  	| Muscle Bomber Duo - ultimate team battle (931206 World| 		| 1993	| Capcom	| CPS1		| 					|
 | md_mushas	|  	| Musha - Metallic Uniframe Super Hybrid Armor (Hack, Sp| md_musha	| 2017	| Seismic	| Sega Megadrive| 					|
 | md_musha	|  	| MUSHA - Metallic Uniframe Super Hybrid Armor (USA)	| 		| 1990	| Seismic	| Sega Megadrive| 					|
+| md_mushak	|  	| Musha Aleste - Full Metal Fighter Ellinor (Hack, Korea| md_musha	| 2017	| Toaplan	| Sega Megadrive| 					|
 | md_mushaj	|  	| Musha Aleste - Full Metal Fighter Ellinor (Jpn)	| md_musha	| 1990	| Toaplan	| Sega Megadrive| 					|
 | sg1k_musicj	|  	| Music (Jpn)						| sg1k_music	| 1983	| Sega		| Sega SG-1000	| 					|
 | musicbal	|  	| Music Ball						| 		| 1988	| Tecfri / Desys| Miscellaneous	| 					|
@@ -8725,6 +8770,7 @@ This list contains all games supported by FinalBurn Neo.
 | syscheck	|  	| Neo System Check (ver 1.0b)				| 		| ????	| blastar@gmx.ne| Neo Geo MVS	| 					|
 | neothndr	|  	| Neo Thunder						| 		| 2012	| Sebastian Miha| Neo Geo	| sebastianmihai.com			|
 | turfmast	|  	| Neo Turf Masters / Big Tournament Golf		| 		| 1996	| Nazca		| Neo Geo MVS	| 					|
+| neocu98k	|  	| Neo-Geo Cup '98 - The Road to the Victory (Korean)	| neocup98	| 2006	| SNK		| Neo Geo MVS	| 					|
 | neocup98	|  	| Neo-Geo Cup '98 - The Road to the Victory		| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | neotet	|  	| NeoGeo 2-Player Tetris				| 		| 2013	| Crim/Stephen	| Neo Geo	| 					|
 | neo3ddmo	|  	| NeoGeo 3D! Demo					| 		| 2012	| Oxygene	| Neo Geo	| 					|
@@ -8903,6 +8949,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_ncirc1	|  	| Nightmare Circus (Bra, Alt)				| md_ncirc	| 1995	| Tec Toy	| Sega Megadrive| 					|
 | md_ncircp	|  	| Nightmare Circus (Prototype)				| md_ncirc	| 199?	| Sega		| Sega Megadrive| 					|
 | nitdbl	|  	| Nightmare in the Dark (bootleg)			| nitd		| 2001	| bootleg	| Neo Geo MVS	| 					|
+| nitdnd	|  	| Nightmare in the Dark (Fully Decrypted)		| nitd		| 2000	| Eleven / Gavak| Neo Geo MVS	| 					|
 | nitd		|  	| Nightmare in the Dark					| 		| 2000	| Eleven / Gavak| Neo Geo MVS	| 					|
 | nes_nightonelmstra|  	| Nightmare on Elm Street, A (USA)			| 		| 1990	| LJN		| Miscellaneous	| 					|
 | nes_nightshade|  	| Nightshade (USA)					| 		| 1992	| Ultra Games	| Miscellaneous	| 					|
@@ -8943,6 +8990,7 @@ This list contains all games supported by FinalBurn Neo.
 | kazan		|  	| Ninja Kazan (World)					| 		| 1988	| Jaleco	| Mega System 1	| 					|
 | nes_ninjakid	|  	| Ninja Kid (USA)					| 		| 1986	| Bandai	| Miscellaneous	| 					|
 | spec_ninjamassacre|  	| Ninja Massacre					| 		| 1989	| Codemasters	| ZX Spectrum	| 					|
+| ninjamab	|  	| Ninja Master's - haoh-ninpo-cho (Boss Hack)		| ninjamas	| 1996	| ADK / SNK	| Neo Geo MVS	| 					|
 | ninjamasha	|  	| Ninja Master's - haoh-ninpo-cho (Plus)		| ninjamas	| 1996	| 007325	| Neo Geo MVS	| 					|
 | ninjamas	|  	| Ninja Master's - haoh-ninpo-cho			| 		| 1996	| ADK / SNK	| Neo Geo MVS	| 					|
 | nprinces	|  	| Ninja Princess (315-5051, 64k Ver. bootleg?)		| seganinj	| 1985	| bootleg?	| System 1	| 					|
@@ -9528,6 +9576,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_pstarjmd	|  	| Phantasy Star (Jpn, MD)				| sms_pstar	| 1994	| Sega		| Sega Master Sy| 					|
 | sms_pstarje	|  	| Phantasy Star (Jpn, T-Eng v2.00)			| sms_pstar	| 2020	| Sega - SMS Pow| Sega Master Sy| YM2413 FM sound chip supported	|
 | sms_pstark	|  	| Phantasy Star (Kor)					| sms_pstar	| 1987	| Sega		| Sega Master Sy| 					|
+| md_pstar4k	|  	| Phantasy Star - Sennenki no Owari ni (Hack, Korean)	| md_pstar4	| 2014	| Sega		| Sega Megadrive| 					|
 | md_pstar4j	|  	| Phantasy Star - Sennenki no Owari ni (Jpn)		| md_pstar4	| 1993	| Sega		| Sega Megadrive| 					|
 | md_pstar4	|  	| Phantasy Star - The End of the Millennium (Euro)	| 		| 1994	| Sega		| Sega Megadrive| 					|
 | md_pstar4p5	|  	| Phantasy Star - The End of the Millennium (Prototype, | md_pstar4	| 1994	| Sega		| Sega Megadrive| 					|
@@ -9548,6 +9597,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_ps2ab	|  	| Phantasy Star II - Anne's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
 | md_ps2ace	|  	| Phantasy Star II - Huey's Adventure (Hack, English)	| md_ps2ac	| 2010	| Sega		| Sega Megadrive| 					|
 | md_ps2ac	|  	| Phantasy Star II - Huey's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
+| md_pstar2k	|  	| Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, K| md_pstar2	| 2013	| Sega		| Sega Megadrive| 					|
 | md_pstar2j	|  	| Phantasy Star II - Kaerazaru Toki no Owari ni (Jpn)	| md_pstar2	| 1989	| Sega		| Sega Megadrive| 					|
 | md_ps2ade	|  	| Phantasy Star II - Kinds's Adventure (Hack, English)	| md_ps2ad	| 2010	| Sega		| Sega Megadrive| 					|
 | md_ps2ad	|  	| Phantasy Star II - Kinds's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
@@ -9728,6 +9778,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_popoteam	|  	| Po Po Team (Taiwan)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | md_pocahont	|  	| Pocahontas (Euro)					| 		| 1996	| Sega		| Sega Megadrive| 					|
 | md_pocahontu	|  	| Pocahontas (USA)					| md_pocahont	| 1996	| Disney Interac| Sega Megadrive| 					|
+| pnyaand	|  	| Pochi and Nyaa (Fully Decrypted)			| pnyaa		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | pnyaaa	|  	| Pochi and Nyaa (Ver 2.00)				| pnyaa		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | pnyaa		|  	| Pochi and Nyaa (Ver 2.02)				| 		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | ngp_neo21	|  	| Pocket Casino Series - Neo 21 (Euro, USA)		| 		| 2000	| SNK		| NeoGeo Pocket | 					|
@@ -9872,7 +9923,7 @@ This list contains all games supported by FinalBurn Neo.
 | powerinsb	|  	| Power Instinct (USA, bootleg set 2)			| powerins	| 1993	| Atlus		| Miscellaneous	| 					|
 | powerinsc	|   NW	| Power Instinct (USA, bootleg set 3)			| powerins	| 1993	| bootleg	| Miscellaneous	| 					|
 | powerinspu	|  	| Power Instinct (USA, prototype)			| powerins	| 1993	| Atlus		| Miscellaneous	| 					|
-| pwrinst2k	|  	| Power instinct 2 (Korea, ver. 94/04/08)		| pwrinst2	| 1994	| Atlus		| Cave		| 					|
+| pwrinst2k	|  	| Power Instinct 2 (Korea, ver. 94/04/08)		| pwrinst2	| 1994	| Atlus		| Cave		| 					|
 | pwrinst2	|  	| Power Instinct 2 (USA, ver. 94/04/08)			| 		| 1994	| Atlus		| Cave		| 					|
 | pce_pleag93	|  	| Power League '93					| 		| 1993	| Hudson	| PC Engine	| 					|
 | pce_pleagas	|  	| Power League (All Star Version)			| 		| 19??	| Hudson	| PC Engine	| 					|
@@ -9910,6 +9961,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_predatr2s	|  	| Predator 2 (Hack, Spanish)				| md_predatr2	| 2019	| Arena		| Sega Megadrive| 					|
 | spec_predator2|  	| Predator 2						| 		| 1991	| Image Works	| ZX Spectrum	| 					|
 | spec_predator	|  	| Predator						| 		| 1987	| Activision	| ZX Spectrum	| 					|
+| pisle2nd	|  	| Prehistoric Isle 2 (Fully Decrypted)			| preisle2	| 1999	| Yumekobo	| Neo Geo MVS	| 					|
 | preisle2	|  	| Prehistoric Isle 2					| 		| 1999	| Yumekobo	| Neo Geo MVS	| 					|
 | prehislek	|  	| Prehistoric Isle in 1930 (Korea)			| prehisle	| 1989	| SNK (Victor li| Prehistoric Is| 					|
 | prehisleu	|  	| Prehistoric Isle in 1930 (US)				| prehisle	| 1989	| SNK of America| Prehistoric Is| 					|
@@ -10136,6 +10188,8 @@ This list contains all games supported by FinalBurn Neo.
 | pclubys	|  	| Puzzle Club (Yun Sung, set 1)				| 		| 2000	| Yun Sung	| Miscellaneous	| 					|
 | pclubysa	|  	| Puzzle Club (Yun Sung, set 2)				| pclubys	| 2000	| Yun Sung	| Miscellaneous	| 					|
 | pzlbowl	|  	| Puzzle De Bowling (Japan)				| 		| 1999	| Nihon System /| Newer Seta	| 					|
+| puzzldpk	|  	| Puzzle De Pon! (Korean)				| puzzledp	| 2006	| Taito (Visco l| Neo Geo MVS	| 					|
+| puzzldrk	|  	| Puzzle De Pon! R! (Korean)				| puzzledp	| 2006	| Taito (Visco l| Neo Geo MVS	| 					|
 | puzzldpr	|  	| Puzzle De Pon! R!					| puzzledp	| 1997	| Visco		| Neo Geo MVS	| 					|
 | puzzledp	|  	| Puzzle De Pon!					| 		| 1995	| Visco		| Neo Geo MVS	| 					|
 | puzzlekg	|  	| Puzzle King (Dance & Puzzle)				| 		| 1998	| Eolith	| Miscellaneous	| 					|
@@ -10349,6 +10403,8 @@ This list contains all games supported by FinalBurn Neo.
 | md_radrexu	|  	| Radical Rex (USA)					| md_radrex	| 1994	| Activision	| Sega Megadrive| 					|
 | nes_rafworld	|  	| Raf World (Japan)					| nes_journsil	| 1990	| Sunsoft	| Miscellaneous	| 					|
 | raflesia	|  	| Rafflesia (315-5162)					| 		| 1986	| Coreland / Seg| System 1	| 					|
+| rotdbh	|  	| Rage of the Dragons (Boss Hack)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
+| rotdnd	|  	| Rage of the Dragons (Fully Decrypted)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | rotdh		|  	| Rage of the Dragons (NGH-2640)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | rotd		|  	| Rage of the Dragons (NGM-264?)			| 		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | md_ragnacenk	|  	| Ragnacenty (Kor)					| md_soleil	| 1994	| Sega		| Sega Megadrive| 					|
@@ -10502,10 +10558,12 @@ This list contains all games supported by FinalBurn Neo.
 | rbff1k	|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (Korea| rbff1		| 1995	| SNK		| Neo Geo MVS	| 					|
 | rbff1ka	|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (Korea| rbff1		| 1995	| SNK		| Neo Geo MVS	| 					|
 | rbff1		|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (NGM-0| 		| 1995	| SNK		| Neo Geo MVS	| 					|
+| rbff2hb	|  	| Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)	| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2k	|  	| Real Bout Fatal Fury 2 - The Newcomers (Korean release| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2h	|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2		|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2bh	|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| rbff2		| 1998	| hack		| Neo Geo MVS	| 					|
+| rbffspeh	|  	| Real Bout Fatal Fury Special (Hidden Hack)		| rbffspec	| 1996	| SNK		| Neo Geo MVS	| 					|
 | rbffspbh	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| rbffspec	| 1996	| hack		| Neo Geo MVS	| Select Geese Howard with portrait, pre|
 | rbffspeck	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| rbffspec	| 1996	| SNK		| Neo Geo MVS	| 					|
 | rbffspec	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| 		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -10980,6 +11038,7 @@ This list contains all games supported by FinalBurn Neo.
 | tsamuraih	|  	| Samurai Nihon-Ichi (bootleg, harder)			| tsamurai	| 1985	| bootleg	| Miscellaneous	| 					|
 | tsamurai	|  	| Samurai Nihon-Ichi (set 1)				| 		| 1985	| Kaneko / Taito| Miscellaneous	| 					|
 | tsamurai2	|  	| Samurai Nihon-Ichi (set 2)				| tsamurai	| 1985	| Kaneko / Taito| Miscellaneous	| 					|
+| samshob	|  	| Samurai Shodown (Boss Hack)				| samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
 | md_samsho	|  	| Samurai Shodown (Euro)				| 		| 1994	| Takara	| Sega Megadrive| 					|
 | md_samshoec	|  	| Samurai Shodown (Hack, Enhanced Colors v2.0)		| md_samsho	| 2015	| Takara - Pyron| Sega Megadrive| 					|
 | md_samshos	|  	| Samurai Shodown (Hack, Spanish)			| md_samsho	| 2018	| Takara	| Sega Megadrive| 					|
@@ -10988,17 +11047,23 @@ This list contains all games supported by FinalBurn Neo.
 | samshoh	|  	| Samurai Shodown / Samurai Spirits (NGH-045)		| samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
 | samsho	|  	| Samurai Shodown / Samurai Spirits (NGM-045)		| 		| 1993	| SNK		| Neo Geo MVS	| 					|
 | samshoa	|  	| Samurai Shodown / Samurai Spirits (NGM-045, alternate | samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
+| samsho2b	|  	| Samurai Shodown II (Boss Hack)			| samsho2	| 1994	| SNK		| Neo Geo MVS	| 					|
 | samsho2	|  	| Samurai Shodown II / Shin Samurai Spirits - Haohmaru j| 		| 1994	| SNK		| Neo Geo MVS	| 					|
 | samsho2sp	|  	| Samurai Shodown II / Shin Samurai Spirits - Haohmaru j| samsho2	| 2017	| hack		| Neo Geo MVS	| 					|
+| samsho3b	|  	| Samurai Shodown III (Boss Hack)			| samsho3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | samsho3h	|  	| Samurai Shodown III / Samurai Spirits - Zankurou Musou| samsho3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | samsho3	|  	| Samurai Shodown III / Samurai Spirits - Zankurou Musou| 		| 1995	| SNK		| Neo Geo MVS	| 					|
+| samsho4b	|  	| Samurai Shodown IV - Amakusa's Revenge (Boss Hack)	| samsho4	| 1996	| SNK		| Neo Geo MVS	| 					|
 | samsho4	|  	| Samurai Shodown IV - Amakusa's Revenge / Samurai Spiri| 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | samsho4sp	|  	| Samurai Shodown IV - Amakusa's Revenge / Samurai Spiri| samsho4	| 1996	| hack		| Neo Geo MVS	| 					|
+| samsh5ndb	|  	| Samurai Shodown V (Boss Hack)				| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
+| samsho5nd	|  	| Samurai Shodown V (Fully Decrypted)			| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5b	|  	| Samurai Shodown V / Samurai Spirits Zero (bootleg)	| samsho5	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | samsho5x	|  	| Samurai Shodown V / Samurai Spirits Zero (hack of XBOX| samsho5	| 2003	| hack		| Neo Geo MVS	| 					|
 | samsho5h	|  	| Samurai Shodown V / Samurai Spirits Zero (NGH-2700)	| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5	|  	| Samurai Shodown V / Samurai Spirits Zero (NGM-2700, se| 		| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5a	|  	| Samurai Shodown V / Samurai Spirits Zero (NGM-2700, se| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
+| ssh5spnd	|  	| Samurai Shodown V Special (Fully Decrypted)		| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5spho	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5sph	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5fe	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
@@ -11086,6 +11151,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_savage2	|  	| Savage (Part 2 of 3) (48K)				| 		| 1988	| Firebird Softw| ZX Spectrum	| 					|
 | spec_savage3	|  	| Savage (Part 3 of 3) (48K)				| 		| 1988	| Firebird Softw| ZX Spectrum	| 					|
 | savgbees	|  	| Savage Bees						| exedexes	| 1985	| Capcom (Memetr| Miscellaneous	| 					|
+| savagerb	|  	| Savage Reign (Boss Hack)				| savagere	| 1995	| SNK		| Neo Geo MVS	| 					|
 | savagereb	|  	| Savage Reign / Fu'un Mokushiroku - kakutou sousei (Bos| savagere	| 1995	| Yumeji, Dodowa| Neo Geo MVS	| 					|
 | savagere	|  	| Savage Reign / Fu'un Mokushiroku - kakutou sousei	| 		| 1995	| SNK		| Neo Geo MVS	| 					|
 | spec_savingkong|  	| Saving Kong (HB)					| 		| 2018	| Gabriel Amore	| ZX Spectrum	| 					|
@@ -11144,6 +11210,7 @@ This list contains all games supported by FinalBurn Neo.
 | grainbow	|  	| SD Gundam Sangokushi Rainbow Tairiku Senki (Japan)	| 		| 1993	| Banpresto	| Miscellaneous	| 					|
 | grainbowk	|  	| SD Gundam Sangokushi Rainbow Tairiku Senki (Korea)	| grainbow	| 1993	| Banpresto	| Miscellaneous	| 					|
 | fds_sdgunworgacsescwa|  	| SD Gundam World - Gachapon Senshi - Scramble Wars (Jap| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| md_sdvalisk	|  	| SD Valis (Hack, Korean)				| md_sydvalis	| 2009	| Laser Soft	| Sega Megadrive| 					|
 | md_sdvalis	|  	| SD Valis (Jpn)					| md_sydvalis	| 1992	| Laser Soft	| Sega Megadrive| 					|
 | sms_sdi	|  	| SDI (Jpn)						| sms_globald	| 1987	| Sega		| Sega Master Sy| 					|
 | sdibl		|  	| SDI - Strategic Defense Initiative (bootleg, original | sdi		| 1987	| Sega		| System 16B	| 					|
@@ -11220,6 +11287,8 @@ This list contains all games supported by FinalBurn Neo.
 | sengokuh	|  	| Sengoku / Sengoku Denshou (NGH-017)(US)		| sengoku	| 1991	| SNK		| Neo Geo MVS	| 					|
 | sengoku	|  	| Sengoku / Sengoku Denshou (NGM-017)(NGH-017)		| 		| 1991	| SNK		| Neo Geo MVS	| 					|
 | sengoku2	|  	| Sengoku 2 / Sengoku Denshou 2				| 		| 1993	| SNK		| Neo Geo MVS	| 					|
+| sengo3nd	|  	| Sengoku 3 (Fully Decrypted)				| sengoku3	| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
+| sengo3nh	|  	| Sengoku 3 (Hidden Hack)				| sengoku3	| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
 | sengoku3s	|  	| Sengoku 3 / Sengoku Densho 2001 (Evolution 1.0, FCHT h| sengoku3	| 2001	| hack		| Neo Geo MVS	| 					|
 | sengoku3fs	|  	| Sengoku 3 / Sengoku Densho 2001 (Feng Shen Edition, Ha| sengoku3	| 2020-04-10| Hack		| Neo Geo MVS	| 					|
 | sengoku3	|  	| Sengoku 3 / Sengoku Densho 2001 (set 1)		| 		| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
@@ -11334,10 +11403,12 @@ This list contains all games supported by FinalBurn Neo.
 | md_ragnacenp	|  	| Shin Souseiki Ragnacenty (Jpn, Prototype)		| md_soleil	| 1994	| Sega		| Sega Megadrive| 					|
 | md_ragnacenc	|  	| Shin Souseiki Ragnacenty (T-Chi)			| md_soleil	| 1994	| Sega		| Sega Megadrive| 					|
 | tshingen	|   NW	| Shingen Samurai-Fighter (Japan, English)		| 		| 1988	| Jaleco	| Mega System 1	| Game crashes in level 2, play tshingen|
+| md_shindarkk	|  	| Shining and the Darkness (Hack, Korean)		| md_shindark	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shindarkj	|  	| Shining and the Darkness (Jpn)			| md_shindark	| 1991	| Sega		| Sega Megadrive| 					|
 | md_shinfrces	|  	| Shining Force (Hack, Spanish)				| md_shinfrce	| 2020	| Sega		| Sega Megadrive| 					|
 | md_shinfrce	|  	| Shining Force (USA)					| 		| 1992	| Sega		| Sega Megadrive| 					|
 | md_shinfrcep	|  	| Shining Force (USA, Prototype)			| md_shinfrce	| 1992	| Sega		| Sega Megadrive| 					|
+| md_shinfrcek	|  	| Shining Force - Kamigami no Isan (Hack, Korean)	| md_shinfrce	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shinfrcej	|  	| Shining Force - Kamigami no Isan (Jpn)		| md_shinfrce	| 1992	| Sega		| Sega Megadrive| 					|
 | gg_shinfrcg	|  	| Shining Force Gaiden - Ensei, Jashin no Kuni e (Jpn)	| 		| 1992	| Sega		| Sega Game Gear| 					|
 | gg_shinfrgfe	|  	| Shining Force Gaiden - Final Conflict (Hack, English)	| gg_shinfrgf	| 2006	| Sega		| Sega Game Gear| 					|
@@ -11347,6 +11418,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_shinfrc2u	|  	| Shining Force II (USA)				| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2p2	|  	| Shining Force II (USA, Prototype, 19940404)		| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2p1	|  	| Shining Force II (USA, Prototype, 19940607)		| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
+| md_shinfrc2k	|  	| Shining Force II - Koe no Fuuin (Hack, Korean)	| md_shinfrc2	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2j	|  	| Shining Force II - Koe no Fuuin (Jpn)			| md_shinfrc2	| 1993	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2c	|  	| Shining Force II - Koe no Fuuin (T-Chi, v2)		| md_shinfrc2	| 2007-01| Sega		| Sega Megadrive| 					|
 | gg_shinfrc2	|  	| Shining Force II - The Sword of Hajya (Euro, USA)	| 		| 1994	| Sega		| Sega Game Gear| 					|
@@ -11642,9 +11714,11 @@ This list contains all games supported by FinalBurn Neo.
 | ngp_svccardsja|  	| SNK vs. Capcom - Gekitotsu Card Fighters - SNK Support| ngp_svccards	| 1999	| SNK		| NeoGeo Pocket | 					|
 | ngp_svccardsj	|  	| SNK vs. Capcom - Gekitotsu Card Fighters - SNK Support| ngp_svccards	| 1999	| SNK		| NeoGeo Pocket | 					|
 | svcboot	|  	| SNK vs. Capcom - SVC Chaos (bootleg)			| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
+| svcnd		|  	| SNK vs. Capcom - SVC Chaos (Fully Decrypted)		| svc		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcpcb	|  	| SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 1)		| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcpcba	|  	| SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 2)		| svcpcb	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svc		|  	| SNK vs. Capcom - SVC Chaos (NGM-2690)(NGH-2690)	| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
+| svcndps2	|  	| SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)	| svc		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcplus	|  	| SNK vs. Capcom - SVC Chaos Plus (bootleg set 1)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
 | svcplusa	|  	| SNK vs. Capcom - SVC Chaos Plus (bootleg set 2)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
 | svcsplus	|  	| SNK vs. Capcom - SVC Chaos Super Plus (bootleg)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
@@ -12388,6 +12462,7 @@ This list contains all games supported by FinalBurn Neo.
 | sf2uf		|  	| Street Fighter II - The World Warrior (910411 USA)	| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ef		|  	| Street Fighter II - The World Warrior (910411 World)	| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2jh		|  	| Street Fighter II - The World Warrior (910522 Japan)	| sf2		| 1991	| Capcom	| CPS1		| 					|
+| sf2jhpp	|  	| Street Fighter II - The World Warrior (910522 Japan, P| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ug		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2uh		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ui		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
@@ -12532,6 +12607,7 @@ This list contains all games supported by FinalBurn Neo.
 | sfzh		|  	| Street Fighter Zero (950718 Hispanic)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzbr1	|  	| Street Fighter Zero (950727 Brazil)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzj		|  	| Street Fighter Zero (950727 Japan)			| sfa		| 1995	| Capcom	| CPS2		| 					|
+| sfzjh		|  	| Street Fighter Zero (950727 Japan, Hidden Hack)	| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzb		|  	| Street Fighter Zero (951109 Brazil)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzcha	|  	| Street Fighter Zero (CPS Changer, 040820 Japan)	| sfzch		| 2005	| Capcom	| CPS Changer	| 					|
 | sfzbch	| X	| Street Fighter Zero (CPS Changer, 950727 Brazil)	| sfzch		| 1995	| Capcom	| CPS Changer	| 					|
@@ -12543,12 +12619,14 @@ This list contains all games supported by FinalBurn Neo.
 | sfz2a		|  	| Street Fighter Zero 2 (960227 Asia)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2jd	|  	| Street Fighter Zero 2 (960227 Japan Phoenix Edition)	| sfa2		| 1996	| bootleg	| CPS2		| 					|
 | sfz2jr1	|  	| Street Fighter Zero 2 (960227 Japan)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
+| sfz2jr1h	|  	| Street Fighter Zero 2 (960227 Japan, Hidden Hack)	| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2n		|  	| Street Fighter Zero 2 (960229 Oceania)		| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2br1	|  	| Street Fighter Zero 2 (960304 Brazil)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2h		|  	| Street Fighter Zero 2 (960304 Hispanic)		| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2j		|  	| Street Fighter Zero 2 (960430 Japan)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2b		|  	| Street Fighter Zero 2 (960531 Brazil)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2alj	|  	| Street Fighter Zero 2 Alpha (960805 Japan)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
+| sfz2aljh	|  	| Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2alb	|  	| Street Fighter Zero 2 Alpha (960813 Brazil)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2alh	|  	| Street Fighter Zero 2 Alpha (960813 Hispanic)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2ald	|  	| Street Fighter Zero 2 Alpha (960826 Asia Phoenix Editi| sfz2al	| 1996	| bootleg	| CPS2		| 					|
@@ -12560,6 +12638,7 @@ This list contains all games supported by FinalBurn Neo.
 | sfz3jr1	|  	| Street Fighter Zero 3 (980727 Japan)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sfz3a		|  	| Street Fighter Zero 3 (980904 Asia)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sfz3j		|  	| Street Fighter Zero 3 (980904 Japan)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
+| sfz3jh	|  	| Street Fighter Zero 3 (980904 Japan, Hidden Hack)	| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sftm110	|  	| Street Fighter: The Movie (v1.10)			| sftm		| 1995	| Capcom / Incre| Miscellaneous	| 					|
 | sftm111	|  	| Street Fighter: The Movie (v1.11)			| sftm		| 1995	| Capcom / Incre| Miscellaneous	| 					|
 | sftm		|  	| Street Fighter: The Movie (v1.12)			| 		| 1995	| Capcom / Incre| Miscellaneous	| 					|
@@ -12656,6 +12735,7 @@ This list contains all games supported by FinalBurn Neo.
 | s1945n	|  	| Strikers 1945 (World, unprotected)			| s1945		| 1995	| Psikyo	| Psikyo 68EC020| 					|
 | s1945iii	|  	| Strikers 1945 III (World) / Strikers 1999 (Japan)	| 		| 1999	| Psikyo	| PS5		| 					|
 | s1945ii	|  	| Strikers 1945 II					| 		| 1997	| Psikyo	| PS3-V1	| 					|
+| s1945pnd	|  	| Strikers 1945 Plus (Fully Decrypted)			| s1945p	| 1999	| Psikyo	| Neo Geo MVS	| 					|
 | s1945p	|  	| Strikers 1945 Plus					| 		| 1999	| Psikyo	| Neo Geo MVS	| 					|
 | pce_stripf2	|  	| Strip Fighter II					| 		| 19??	| Game Express	| PC Engine	| 					|
 | strongx	|  	| Strong X						| stratgyx	| 1982	| bootleg	| Galaxian	| 					|
@@ -12843,6 +12923,7 @@ This list contains all games supported by FinalBurn Neo.
 | supduck	|  	| Super Duck						| 		| 1992	| Comad		| Miscellaneous	| 					|
 | usg32		|  	| Super Duper Casino (California V3.2)			| 		| 1987	| U.S. Games	| Miscellaneous	| 					|
 | md_sfzone	|  	| Super Fantasy Zone (Euro)				| 		| 1993	| Sunsoft	| Sega Megadrive| 					|
+| md_sfzonek	|  	| Super Fantasy Zone (Hack, Korean)			| md_sfzone	| 2013	| Sunsoft	| Sega Megadrive| 					|
 | md_sfzones	|  	| Super Fantasy Zone (Hack, Spanish)			| md_sfzone	| 2019	| Sega		| Sega Megadrive| 					|
 | md_sfzonej	|  	| Super Fantasy Zone (Jpn)				| md_sfzone	| 1992	| Sunsoft	| Sega Megadrive| 					|
 | sformula	|  	| Super Formula (Japan)					| tail2nos	| 1989	| V-System Co.	| Miscellaneous	| 					|
@@ -13088,6 +13169,8 @@ This list contains all games supported by FinalBurn Neo.
 | ssf2tur1	|  	| Super Street Fighter II Turbo (super street fighter 2 | ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2tu	|  	| Super Street Fighter II Turbo (super street fighter 2 | ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2tnl	|  	| Super Street Fighter II Turbo New Legacy v0.4 (Beta) (| ssf2t		| 2020	| hack		| CPS2		| 					|
+| ssf2xjh	|  	| Super Street Fighter II X - grand master challenge (94| ssf2t		| 1994	| Capcom	| CPS2		| 					|
+| ssf2xjr1dt	|  	| Super Street Fighter II X - grand master challenge (Ph| ssf2t		| 1994	| bootleg	| CPS2		| 					|
 | ssf2xjr1d	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| bootleg	| CPS2		| 					|
 | ssf2xjr1r	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2xjr1	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| Capcom	| CPS2		| 					|
@@ -13498,7 +13581,9 @@ This list contains all games supported by FinalBurn Neo.
 | dynwarjr	|  	| Tenchi wo Kurau (Japan Resale Ver.)			| dynwar	| 1989	| Capcom	| CPS1		| 					|
 | dynwarj	|  	| Tenchi wo Kurau (Japan)				| dynwar	| 1989	| Capcom	| CPS1		| 					|
 | nes_tenchiwokurau|  	| Tenchi wo Kurau (Japan)				| nes_destianemp| 1989	| Capcom	| Miscellaneous	| 					|
+| wofj103	|  	| Tenchi wo Kurau II - Counter Attack of Mei Sisters (92| wof		| 1992	| Capcom	| CPS1 / QSound	| 					|
 | wofj		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (921031 Japan| wof		| 1992	| Capcom	| CPS1 / QSound	| 					|
+| wofch3p	|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer | wofch		| 1992	| Capcom	| CPS Changer 3P| 					|
 | wofch		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer,| 		| 1992	| Capcom	| CPS Changer	| 					|
 | wofjh		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (hack, 921031| wof		| 1992	| hack		| CPS1 / QSound	| 					|
 | wofjdr	|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (Master Editi| wof		| 2020-12-27| Hack		| CPS1 / QSound	| 					|
@@ -13788,6 +13873,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_hybridfc	|  	| The Hybrid Front (T-Chi)				| md_hybridf	| 1994	| Sega		| Sega Megadrive| 					|
 | msx_iceking	|  	| The Ice King (Euro)					| 		| 1986	| CDS Micro Syst| MSX		| 					|
 | md_immortal	|  	| The Immortal (Euro, USA)				| 		| 1993	| Electronic Art| Sega Megadrive| 					|
+| md_immortalk	|  	| The Immortal (Hack, Korean)				| md_immortal	| 2011	| Electronic Art| Sega Megadrive| 					|
 | md_immortals	|  	| The Immortal (Hack, Spanish)				| md_immortal	| 2020	| Electronic Art| Sega Megadrive| 					|
 | sms_crashdum	|  	| The Incredible Crash Dummies (Euro, Bra)		| 		| 1993	| Flying Edge	| Sega Master Sy| 					|
 | md_crashdum	|  	| The Incredible Crash Dummies (Euro, USA)		| 		| 1993	| Flying Edge	| Sega Megadrive| 					|
@@ -13823,8 +13909,10 @@ This list contains all games supported by FinalBurn Neo.
 | kodr1		|  	| The King of Dragons (World 910711)			| kod		| 1991	| Capcom	| CPS1		| 					|
 | kod		|  	| The King of Dragons (World 910805)			| 		| 1991	| Capcom	| CPS1		| 					|
 | kof94rz	|  	| The King of Fighters '94 (Hack Boss Remixed)		| kof94		| 1994	| ZKW		| Neo Geo MVS	| 					|
+| kof94kr	|  	| The King of Fighters '94 (Korean, Boss Hack)		| kof94		| 2006	| SNK		| Neo Geo MVS	| 					|
 | kof94		|  	| The King of Fighters '94 (NGM-055)(NGH-055)		| 		| 1994	| SNK		| Neo Geo MVS	| 					|
 | kof95b	|  	| The King of Fighters '95 (Enable Hidden Characters V.[| kof95		| 1995	| Ydmis & Creamy| Neo Geo MVS	| 					|
+| kof95kr	|  	| The King of Fighters '95 (Korean, NeoGeo CD Hack)	| kof95		| 2005	| SNK		| Neo Geo MVS	| 					|
 | kof95h	|  	| The King of Fighters '95 (NGH-084)			| kof95		| 1995	| SNK		| Neo Geo MVS	| 					|
 | kof95a	|  	| The King of Fighters '95 (NGH-084, alternate board)	| kof95		| 1995	| SNK		| Neo Geo MVS	| 					|
 | kof95		|  	| The King of Fighters '95 (NGM-084)			| 		| 1995	| SNK		| Neo Geo MVS	| 					|
@@ -13832,6 +13920,7 @@ This list contains all games supported by FinalBurn Neo.
 | kof96ae	|  	| The King of Fighters '96 (Anniversary Edition, EGHT ha| kof96		| 2007	| hack		| Neo Geo MVS	| 					|
 | kof96ep	|  	| The King of Fighters '96 (bootleg / hack)		| kof96		| 1996	| bootleg	| Neo Geo MVS	| 					|
 | kof96cn	|  	| The King of Fighters '96 (Chinese Edition ver 1.0, hac| kof96		| 200?	| hack		| Neo Geo MVS	| 					|
+| kof96kr	|  	| The King of Fighters '96 (Korean, Add Practice Mode)	| kof96		| 2006	| SNK		| Neo Geo AES	| 					|
 | kof96h	|  	| The King of Fighters '96 (NGH-214)			| kof96		| 1996	| SNK		| Neo Geo AES	| 					|
 | kof96		|  	| The King of Fighters '96 (NGM-214)			| 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | kof96a	|  	| The King of Fighters '96 (NGM-214, alternate board)	| kof96		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -13840,6 +13929,8 @@ This list contains all games supported by FinalBurn Neo.
 | kof97ps	|  	| The King of Fighters '97 (Imitation Playstation final | kof97		| 1997	| Eddids	| Neo Geo MVS	| 					|
 | kof97inv	|  	| The King of Fighters '97 (Invincible Plus)		| kof97		| 2019	| Hack		| Neo Geo MVS	| 					|
 | kof97k	|  	| The King of Fighters '97 (Korean release)		| kof97		| 1997	| SNK		| Neo Geo MVS	| 					|
+| kof97psk	|  	| The King of Fighters '97 (Korean, PlayStation Hack)	| kof97		| 2005	| SNK		| Neo Geo MVS	| 					|
+| kof97kr	|  	| The King of Fighters '97 (Korean, Practice Mode, Boss | kof97		| 2005	| SNK		| Neo Geo MVS	| 					|
 | kof97h	|  	| The King of Fighters '97 (NGH-2320)			| kof97		| 1997	| SNK		| Neo Geo MVS	| 					|
 | kof97		|  	| The King of Fighters '97 (NGM-2320)			| 		| 1997	| SNK		| Neo Geo MVS	| 					|
 | kof97t2020	|  	| The King of Fighters '97 (Optimised Edition 2020)	| kof97		| 2020	| Hack		| Neo Geo MVS	| 					|
@@ -13853,11 +13944,15 @@ This list contains all games supported by FinalBurn Neo.
 | kof97oro	|  	| The King of Fighters '97 oroshi plus 2003		| kof97		| 1997	| bootleg	| Neo Geo MVS	| 					|
 | kof97pls	|  	| The King of Fighters '97 Plus (bootleg)		| kof97		| 1997	| bootleg	| Neo Geo MVS	| 					|
 | kof97pla	|  	| The King of Fighters '97 Plus 2003 (bootleg / hack)	| kof97		| 2003	| bootleg	| Neo Geo MVS	| 					|
+| kof97ts	|  	| The King of Fighters '97 Tu She Edition (v1.2, Hack)	| kof97		| 2019	| SNK		| Neo Geo MVS	| 					|
 | kof98ae2016	|  	| The King of Fighters '98 (Anniversary Edition build 1.| kof98		| 2016	| hack		| Neo Geo MVS	| 					|
 | kof98ae	|  	| The King of Fighters '98 (Anniversary Edition, EGHT ha| kof98		| 2007	| hack		| Neo Geo MVS	| 					|
 | kof98cps	|  	| The King of Fighters '98 (Combo Plus)			| kof98		| 2020	| Hack		| Neo Geo MVS	| 					|
 | kof98cb	|  	| The King of Fighters '98 (Combo, hack)		| kof98		| 2018	| hack		| Neo Geo MVS	| 					|
+| kof98kr	|  	| The King of Fighters '98 (Korean, NeoGeo CD Hack, Syst| kof98		| 2006	| SNK		| Neo Geo MVS	| 					|
+| kof98cd	|  	| The King of Fighters '98 (NeoGeo CD Hack, System Bugs | kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98pfe	|  	| The King of Fighters '98 (Plus Final Edition 2017-07-2| kof98		| 2017	| GSC2007	| Miscellaneous	| 					|
+| kof98bf	|  	| The King of Fighters '98 (System Bugs Fix)		| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98ult	|  	| The King of Fighters '98 (Ultimate Match)		| kof98		| 2020	| hack		| Neo Geo MVS	| 					|
 | kof98k	|  	| The King of Fighters '98 - The Slugfest / King of Figh| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98ka	|  	| The King of Fighters '98 - The Slugfest / King of Figh| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
@@ -13867,10 +13962,13 @@ This list contains all games supported by FinalBurn Neo.
 | kof98eck20	|  	| The King of Fighters '98 Easy Combo King (YZKOF Versio| kof98		| 2020-04-09| hack		| Neo Geo MVS	| 					|
 | kof98eckvs	|  	| The King of Fighters '98 Easy Combo King 2014 (Versus | kof98		| 2019-02-17| hack		| Neo Geo MVS	| 					|
 | kof98mix	|  	| The King of Fighters '98 Mix (2015-12-29)		| kof98		| 2015	| hack		| Miscellaneous	| 					|
+| kof99ae2016	|  	| The King of Fighters '99 (15th Anniversary Edition 201| kof99		| 2015	| SNK		| Neo Geo MVS	| 					|
 | md_kof99a	|  	| The King of Fighters '99 (Alt)			| md_kof99	| 199?	| <unlicensed>	| Sega Megadrive| 					|
 | kof99e	|  	| The King of Fighters '99 - Millennium Battle (earlier)| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
+| kof99nd	|  	| The King of Fighters '99 - Millennium Battle (Fully De| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99k	|  	| The King of Fighters '99 - Millennium Battle (Korean r| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99ka	|  	| The King of Fighters '99 - Millennium Battle (Korean r| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
+| kof99kr	|  	| The King of Fighters '99 - Millennium Battle (Korean, | kof99		| 2006	| SNK		| Neo Geo MVS	| 					|
 | kof99h	|  	| The King of Fighters '99 - Millennium Battle (NGH-2510| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99		|  	| The King of Fighters '99 - Millennium Battle (NGM-2510| 		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99p	|  	| The King of Fighters '99 - Millennium Battle (prototyp| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
@@ -13885,16 +13983,22 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k5uni	|  	| The King of Fighters 10th Anniversary 2005 Unique (boo| kof2002	| 2004	| bootleg	| Neo Geo MVS	| 					|
 | kof10thuo	|  	| The King of Fighters 10th Anniversary 2019 (Optimized | kof2002	| 2020-11-11| Hack		| Miscellaneous	| 					|
 | kf10thep	|  	| The King of Fighters 10th Anniversary Extra Plus (boot| kof2002	| 2005	| bootleg	| Neo Geo MVS	| 					|
+| kof2knd	|  	| The King of Fighters 2000 (Fully Decrypted)		| kof2000	| 2000	| SNK		| Neo Geo MVS	| 					|
+| kof2kkr	|  	| The King of Fighters 2000 (Korean, PlayStation 2 Hack)| kof2000	| 2010	| SNK		| Neo Geo MVS	| 					|
 | kof2000	|  	| The King of Fighters 2000 (NGM-2570) (NGH-2570)	| 		| 2000	| SNK		| Neo Geo MVS	| 					|
 | kof2000n	|  	| The King of Fighters 2000 (not encrypted)		| kof2000	| 2000	| SNK		| Neo Geo MVS	| 					|
 | kof2000otc	|  	| The King of Fighters 2000 (OTC, hack)			| kof2000	| 2020-06-15| hack		| Neo Geo MVS	| ZERO only enabled in AES mode		|
 | kof2000ps2	|  	| The King of Fighters 2000 (Playstation 2 ver. , EGHT h| kof2000	| 2000	| hack		| Neo Geo MVS	| hack only enable in AES mode		|
+| kof2k1nd	|  	| The King of Fighters 2001 (Fully Decrypted)		| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kof2001h	|  	| The King of Fighters 2001 (NGH-2621)			| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kof2001	|  	| The King of Fighters 2001 (NGM-262?)			| 		| 2001	| SNK / Eolith	| Neo Geo MVS	| 					|
+| kof2k1ps2	|  	| The King of Fighters 2001 (PlayStation 2 Hack)	| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kf2k1pkz	|  	| The King of Fighters 2001 (PS2 Krizalid Edition)	| kof2001	| 2019-12-12| Hack		| Neo Geo MVS	| hack only enable in AES mode		|
 | kf2k1pls	|  	| The King of Fighters 2001 Plus (set 1, bootleg / hack)| kof2001	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k1pa	|  	| The King of Fighters 2001 Plus (set 2, bootleg / hack)| kof2001	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kof2002b	|  	| The King of Fighters 2002 (bootleg)			| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
+| kof2k2nd	|  	| The King of Fighters 2002 (Fully Decrypted)		| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
+| kof2k2kh	|  	| The King of Fighters 2002 (Korean Font Fix, Nests, Bos| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kof2002	|  	| The King of Fighters 2002 (NGM-2650)(NGH-2650)	| 		| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kof2k2omg	|  	| The King of Fighters 2002 (Omega v.0?)		| kof2002	| 2002	| hack		| KOF-ON Team	| 					|
 | kof2k2omg8	|  	| The King of Fighters 2002 (Omega v0.8)		| kof2002	| 2010	| hack		| KOF-ON Team	| 					|
@@ -13905,15 +14009,18 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k2ps2b	|  	| The King of Fighters 2002 (PlayStation 2, Hack)	| kof2002	| 2018	| Hack		| Neo Geo MVS	| hack only enabled in AES mode		|
 | kof2k2plus	|  	| The King of Fighters 2002 (Plus 2017, Hack)		| kof2002	| 2020-10-22| Hack		| Neo Geo MVS	| 					|
 | kf2k23rd	|  	| The King of Fighters 2002 - 3rd Strike of Orochi (Hack| kof2002	| 2020-06-14| hack		| Miscellaneous	| 					|
+| kof2k2cm	|  	| The King of Fighters 2002 CLIMAX (Hack)		| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kf2k2mp	|  	| The King of Fighters 2002 Magic Plus (bootleg)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2mp2	|  	| The King of Fighters 2002 Magic Plus II (bootleg)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2pls	|  	| The King of Fighters 2002 Plus (bootleg set 1)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2pla	|  	| The King of Fighters 2002 Plus (bootleg set 2)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2plb	|  	| The King of Fighters 2002 Plus (bootleg set 3)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
+| kf2k2pls2017	|  	| The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kf2k2ru35	|  	| The King of Fighters 2002 Remix Ultra 3.5 (Hack By FCH| kof2002	| 2006	| hack		| Neo Geo MVS	| 					|
 | kf2k2plc	|  	| The King of Fighters 2002 Super (bootleg)		| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k3bl	|  	| The King of Fighters 2003 (bootleg set 1)		| kof2003	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | kf2k3bla	|  	| The King of Fighters 2003 (bootleg set 2)		| kof2003	| 2003	| bootleg	| Neo Geo MVS	| 					|
+| kof2k3nd	|  	| The King of Fighters 2003 (Fully Decrypted)		| kof2003	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | kf2k3pcb	|  	| The King of Fighters 2003 (Japan, JAMMA PCB)		| 		| 2003	| Playmore / Cap| dedicated Neo | 					|
 | kof2003h	|  	| The King of Fighters 2003 (NGH-2710)			| kof2003	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | kof2003	|  	| The King of Fighters 2003 (NGM-2710)			| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
@@ -13924,10 +14031,13 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k4pls	|  	| The King of Fighters Special Edition 2004 Plus (bootle| kof2002	| 2004	| bootleg	| Neo Geo MVS	| 					|
 | pce_kungfu	|  	| The Kung Fu						| 		| 1987	| Hudson	| PC Engine	| 					|
 | ngp_lastblad	|  	| The Last Blade - Beyond the Destiny (Euro)		| 		| 2000	| SNK		| NeoGeo Pocket | 					|
+| lastbladb	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hi| lastblad	| 1997	| SNK		| Neo Geo AES	| 					|
 | lastbladh	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| lastblad	| 1997	| SNK		| Neo Geo AES	| 					|
 | lastblad	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| 		| 1997	| SNK		| Neo Geo MVS	| 					|
 | lastblada	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| lastblad	| 1997	| SNK		| Neo Geo MVS	| 					|
 | lastbladsp	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Sp| lastblad	| 2017	| hack		| Neo Geo MVS	| 					|
+| lastbl2h	|  	| The Last Blade 2 (Hidden Hack)			| lastbld2	| 1998	| SNK		| Neo Geo MVS	| 					|
+| lastbl2f	|  	| The Last Blade 2 (System Bugs Fix)			| lastbld2	| 1998	| SNK		| Neo Geo MVS	| 					|
 | lb2b		|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| lastbld2	| 1998	| Dodowang[EGCG]| Neo Geo MVS	| 					|
 | lastbld2eh	|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| lastbld2	| 1998	| hack		| Neo Geo MVS	| 					|
 | lastbld2	|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| 		| 1998	| SNK		| Neo Geo MVS	| 					|
@@ -14104,9 +14214,11 @@ This list contains all games supported by FinalBurn Neo.
 | md_thorp2	|  	| The Story of Thor (USA, Prototype, 19941004)		| md_thor	| 1994	| Sega		| Sega Megadrive| 					|
 | md_thorp1	|  	| The Story of Thor (USA, Prototype, 19941017)		| md_thor	| 1994	| Sega		| Sega Megadrive| 					|
 | md_thorf	|  	| The Story of Thor - A Successor of The Light (Fra)	| md_thor	| 1995	| Sega		| Sega Megadrive| 					|
+| md_thork2	|  	| The Story of Thor - Hikari o Tsugumono (Hack, Korean)	| md_thor	| 2015	| Sega		| Sega Megadrive| 					|
 | md_thorj	|  	| The Story of Thor - Hikari o Tsugumono (Jpn)		| md_thor	| 1995	| Sega		| Sega Megadrive| 					|
 | md_thorc	|  	| The Story of Thor - Hikari o Tsugumono (T-Chi)	| md_thor	| 2004	| YUZO		| Sega Megadrive| 					|
 | md_supshin	|  	| The Super Shinobi (Jpn)				| md_revshin	| 1989	| Sega		| Sega Megadrive| 					|
+| md_supshin2k	|  	| The Super Shinobi II (Hack, Korean)			| md_shinobi3	| 2013	| Sega		| Sega Megadrive| 					|
 | md_supshin2	|  	| The Super Shinobi II (Jpn, Kor)			| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
 | md_supshin2p1	|  	| The Super Shinobi II (Jpn, Prototype)			| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
 | md_supshin2p2	|  	| The Super Shinobi II (Jpn, Prototype, Earlier)	| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
@@ -14659,8 +14771,10 @@ This list contains all games supported by FinalBurn Neo.
 | nes_twinb3	|  	| TwinBee 3 - Poko Poko Daimaou (Japan)			| 		| 1989	| Konami	| Miscellaneous	| 					|
 | twinkle	|  	| Twinkle (set 1)					| 		| 1997	| SemiCom	| Kaneko Pandora| 					|
 | twinklea	|  	| Twinkle (set 2)					| twinkle	| 1997	| SemiCom	| Kaneko Pandora| 					|
+| twinsprh	|  	| Twinkle Star Sprites (Hidden Hack)			| twinspri	| 1996	| ADK		| Neo Geo MVS	| 					|
 | twinspri	|  	| Twinkle Star Sprites					| 		| 1996	| ADK		| Neo Geo MVS	| 					|
 | md_twinklete	|  	| Twinkle Tale (Hack, English)				| md_twinklet	| 2007	| Toyo Records	| Sega Megadrive| 					|
+| md_twinkletk	|  	| Twinkle Tale (Hack, Korean)				| md_twinklet	| 2013	| Toyo Records	| Sega Megadrive| 					|
 | md_twinklet	|  	| Twinkle Tale (Jpn)					| 		| 1992	| Toyo Records	| Sega Megadrive| 					|
 | msx_twinlight	|  	| Twinlight (HB)					| 		| 2019	| RetroSouls	| MSX		| 					|
 | mtwinsb	|  	| Twins (bootleg of Mega Twins)				| mtwins	| 1993	| David Inc. (bo| CPS1		| 					|
@@ -14803,6 +14917,7 @@ This list contains all games supported by FinalBurn Neo.
 | vliner7e	|  	| V-Liner (v0.7e)					| vliner	| 2001	| Dyna / BreezaS| Neo Geo MVS	| 					|
 | md_valis	|  	| Valis (USA)						| 		| 1991	| Renovation	| Sega Megadrive| 					|
 | nes_valis	|  	| Valis - The Fantastic Soldier (Japan)			| 		| 1987	| Tokuma Shoten	| Miscellaneous	| 					|
+| md_valis3k	|  	| Valis III (Hack, Korean)				| md_valis3	| 2008	| Reno		| Sega Megadrive| 					|
 | md_valis3j	|  	| Valis III (Jpn, Rev. A)				| md_valis3	| 1991	| Reno		| Sega Megadrive| 					|
 | md_valis3	|  	| Valis III (USA)					| 		| 1991	| Renovation	| Sega Megadrive| 					|
 | msx_valkyr	|  	| Valkyr (Euro)						| 		| 1985	| Gremlin Graphi| MSX		| 					|
@@ -14821,6 +14936,7 @@ This list contains all games supported by FinalBurn Neo.
 | vampjr1	|  	| Vampire - the night warriors (940630 Japan)		| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vampj		|  	| Vampire - the night warriors (940705 Japan)		| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vampja	|  	| Vampire - the night warriors (940705 Japan, alt)	| dstlk		| 1994	| Capcom	| CPS2		| 					|
+| vampjh	|  	| Vampire - the night warriors (940705 Japan, Hidden Hac| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vhuntjr2	|  	| Vampire Hunter - darkstalkers' revenge (950302 Japan)	| nwarr		| 1995	| Capcom	| CPS2		| 					|
 | vhuntjr1s	|  	| Vampire Hunter - darkstalkers' revenge (950307 Japan s| nwarr		| 1995	| Capcom	| CPS2		| 					|
 | vhuntjr1	|  	| Vampire Hunter - darkstalkers' revenge (950307 Japan)	| nwarr		| 1995	| Capcom	| CPS2		| 					|
@@ -14835,6 +14951,7 @@ This list contains all games supported by FinalBurn Neo.
 | vsavh		|  	| Vampire Savior - the lord of vampire (970519 Hispanic)| vsav		| 1997	| Capcom	| CPS2		| 					|
 | vsavj		|  	| Vampire Savior - the lord of vampire (970519 Japan)	| vsav		| 1997	| Capcom	| CPS2		| 					|
 | vsavu		|  	| Vampire Savior - the lord of vampire (970519 USA)	| vsav		| 1997	| Capcom	| CPS2		| 					|
+| vsavdt	|  	| Vampire Savior - the lord of vampire (Phoenix Edition,| vsav		| 1997	| bootleg	| CPS2		| 					|
 | vsav2d	|  	| Vampire Savior 2 - the lord of vampire (970913 Japan P| vsav2		| 1997	| bootleg	| CPS2		| 					|
 | vsav2		|  	| Vampire Savior 2 - the lord of vampire (970913 Japan)	| 		| 1997	| Capcom	| CPS2		| 					|
 | spec_vampveng	|  	| Vampire Vengeance (HB, v1.1)				| 		| 2020	| Poe Games	| ZX Spectrum	| 					|
@@ -15004,6 +15121,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_volguardii|  	| Volguard II (Japan)					| 		| 1985	| dB-SOFT	| Miscellaneous	| 					|
 | fds_volleyball|  	| Volleyball (Japan)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_volleyball|  	| Volleyball (USA)					| 		| 1987	| Nintendo	| Miscellaneous	| 					|
+| gowcaizb	|  	| Voltage Fighter - Gowcaizer (Boss Hack)		| gowcaizr	| 1995	| Technos	| Neo Geo MVS	| 					|
 | gowcaizr	|  	| Voltage Fighter - Gowcaizer / Choujin Gakuen Gowcaizer| 		| 1995	| Technos	| Neo Geo MVS	| 					|
 | msx_vortraid	|  	| Vortex Raider (Euro)					| 		| 1988	| Eurosoft	| MSX		| 					|
 | sms_voyage	|  	| Voyage - A Sorceress Vacation (HB, v1.03)		| 		| 2020	| SNAGS		| Sega Master Sy| 					|
@@ -15052,6 +15170,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_WaimanuSMS|  	| Waimanu: Scary Monsters Saga (HB)			| 		| 2015	| Disjointed Stu| Sega Master Sy| 					|
 | mj4simai	|  	| Wakakusamonogatari Mahjong Yonshimai (Japan)		| 		| 1996	| Maboroshi Ware| Newer Seta	| 					|
 | wakuwak7bh	|  	| Waku Waku 7 (Boss Hack)				| wakuwak7	| 1996	| hack		| Neo Geo MVS	| 					|
+| wakuwa7h	|  	| Waku Waku 7 (Hidden Hack)				| wakuwak7	| 1996	| Sunsoft	| Neo Geo MVS	| 					|
 | wakuwak7	|  	| Waku Waku 7						| 		| 1996	| Sunsoft	| Neo Geo MVS	| 					|
 | ultracin	|  	| Waku Waku Ultraman Racing				| 		| 1996	| Sega		| System 16B	| Emulation not complete		|
 | fds_wakusatogai|  	| Wakusei Aton Gaiden (Japan)				| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
@@ -15204,6 +15323,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_wimbledup	|  	| Wimbledon Championship Tennis (USA, Prototype)	| md_wimbled	| 1993	| Sega		| Sega Megadrive| 					|
 | sms_wimbled2	|  	| Wimbledon II (Euro, Bra)				| 		| 1993	| Sega		| Sega Master Sy| 					|
 | nes_winlosordra|  	| Win, Lose or Draw (USA)				| 		| 1990	| Hi Tech Expres| Miscellaneous	| 					|
+| wjammerk	|  	| Windjammers / Flying Power Disc (Korean)		| wjammers	| 2005	| Data East Corp| Neo Geo MVS	| 					|
 | wjammers	|  	| Windjammers / Flying Power Disc			| 		| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | wingforc	|  	| Wing Force (Japan, prototype)				| 		| 1993	| A.I (Atlus lic| Kaneko16	| 					|
 | msx_wingman2	|  	| Wing Man 2 - Kitakura no Fukkatsu (Jpn)		| 		| 1987	| Enix		| MSX		| 					|
@@ -15408,6 +15528,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_worldgpp	|  	| World Grand Prix (USA, Prototype)			| sms_worldgp	| 1986	| Sega		| Sega Master Sy| 					|
 | wh1h		|  	| World Heroes (ALH-005)				| wh1		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
 | wh1		|  	| World Heroes (ALM-005)				| 		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
+| wh1b		|  	| World Heroes (Boss Hack)				| wh1		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
 | md_whj	|  	| World Heroes (Jpn)					| md_wh		| 199?	| <unknown>	| Sega Megadrive| 					|
 | md_whjp5	|  	| World Heroes (Jpn, Prototype, 19940330)		| md_wh		| 1994	| Sega		| Sega Megadrive| 					|
 | md_whjp4	|  	| World Heroes (Jpn, Prototype, 19940408)		| md_wh		| 1994	| Sega		| Sega Megadrive| 					|
@@ -15431,8 +15552,11 @@ This list contains all games supported by FinalBurn Neo.
 | md_whp02	|  	| World Heroes (USA, Prototype, 19940331-B)		| md_wh		| 1994	| Sega		| Sega Megadrive| 					|
 | wh2h		|  	| World Heroes 2 (ALH-006)				| wh2		| 1993	| ADK		| Neo Geo MVS	| 					|
 | wh2		|  	| World Heroes 2 (ALM-006)(ALH-006)			| 		| 1993	| ADK		| Neo Geo MVS	| 					|
+| wh2b		|  	| World Heroes 2 (Boss Hack)				| wh2		| 1993	| ADK		| Neo Geo MVS	| 					|
 | wh2j		|  	| World Heroes 2 Jet (ADM-007)(ADH-007)			| 		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
 | wh2ja		|  	| World Heroes 2 Jet (ADM-007)				| wh2j		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
+| wh2jb		|  	| World Heroes 2 Jet (Boss Hack)			| wh2j		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
+| whpb		|  	| World Heroes Perfect (Boss Hack)			| whp		| 1995	| ADK / SNK	| Neo Geo MVS	| 					|
 | whp		|  	| World Heroes Perfect					| 		| 1995	| ADK / SNK	| Neo Geo MVS	| 					|
 | pce_wjockey	|  	| World Jockey						| 		| 1991	| Namcot	| PC Engine	| 					|
 | md_worldillj	|  	| World of Illusion - Fushigi na Magic Box (Jpn)	| md_worldill	| 1992	| Sega		| Sega Megadrive| 					|
@@ -15567,6 +15691,7 @@ This list contains all games supported by FinalBurn Neo.
 | xmcotaj3	|  	| X-Men - children of the atom (941217 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaar1	|  	| X-Men - children of the atom (941219 Asia)		| xmcota	| 1995	| Capcom	| CPS2		| 					|
 | xmcotaj2	|  	| X-Men - children of the atom (941219 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
+| xmcotaj2h	|  	| X-Men - children of the atom (941219 Japan, Hidden Hac| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaj1	|  	| X-Men - children of the atom (941222 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaa	|  	| X-Men - children of the atom (950105 Asia)		| xmcota	| 1995	| Capcom	| CPS2		| 					|
 | xmcotar1d	|  	| X-Men - children of the atom (950105 Euro Phoenix Edit| xmcota	| 1995	| bootleg	| CPS2		| 					|
@@ -15746,6 +15871,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_ysd	|  	| Ys (USA, Demo)					| sms_ys	| 1988	| Sega		| Sega Master Sy| 					|
 | sms_ys	|  	| Ys - The Vanished Omens (Euro, USA, Bra)		| 		| 1988	| Sega		| Sega Master Sy| 					|
 | sms_ysfm	|  	| Ys - The Vanished Omens (FM Mod, v1.2)		| sms_ys	| 2009	| Sega - SSTrans| Sega Master Sy| YM2413 FM sound chip supported	|
+| md_ys3k	|  	| Ys - Wanderers from Ys (Hack, Korean)			| md_ys3	| 2013	| Reno		| Sega Megadrive| 					|
 | md_ys3j	|  	| Ys - Wanderers from Ys (Jpn)				| md_ys3	| 1991	| Reno		| Sega Megadrive| 					|
 | nes_ysiij	|  	| Ys II - Ancient Ys Vanished - The Final Chapter (Japan| nes_ysii	| 1990	| Victor	| Miscellaneous	| 					|
 | nes_ysii	|  	| Ys II - Ancient Ys Vanished - The Final Chapter (T-eng| 		| 1990	| Victor	| Miscellaneous	| 					|
@@ -15901,6 +16027,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_zouzou	|  	| Zou! Zou! Zou! Rescue Daisakusen (Jpn)		| md_rolo	| 1993	| Electronic Art| Sega Megadrive| 					|
 | spec_zub	|  	| Zub							| 		| 1986	| Mastertronic A| ZX Spectrum	| 					|
 | nes_zunousengal|  	| Zunou Senkan Galg (Japan)				| 		| 1985	| dB-SOFT	| Miscellaneous	| 					|
+| zupapand	|  	| Zupapa! (Fully Decrypted)				| zupapa	| 2001	| SNK		| Neo Geo MVS	| 					|
 | zupapa	|  	| Zupapa!						| 		| 2001	| SNK		| Neo Geo MVS	| 					|
 | spec_spec128	|   NW	| ZX Spectrum 128					| 		| 1984	| Sinclair Resea| ZX Spectrum	| BIOS Only				|
 | spec_spec128k	|  	| ZX Spectrum 128					| 		| 1984	| Sinclair Resea| ZX Spectrum	| 					|
diff --git a/src/burn/drv/capcom/d_cps1.cpp b/src/burn/drv/capcom/d_cps1.cpp
index 7ddce526b..fdb10f0a3 100644
--- a/src/burn/drv/capcom/d_cps1.cpp
+++ b/src/burn/drv/capcom/d_cps1.cpp
@@ -15517,6 +15517,15 @@ static const struct GameConfig ConfigTable[] =
 	{ "sfzech"        , CPS_B_21_DEF, mapper_sfzch , 0, NULL                },
 	{ "sfzhch"        , CPS_B_21_DEF, mapper_sfzch , 0, NULL                },
 
+	// Add Hack Roms
+	{ "captcommv4"    , CPS_B_21_BT3, mapper_CC63B , 0, NULL                },
+	{ "ffgtj4v2"      , CPS_B_05    , mapper_S224B , 0, NULL                },
+	{ "ffgtj2sp"      , CPS_B_02    , mapper_S224B , 0, NULL                },
+	{ "knightj3"      , CPS_B_21_BT4, mapper_KR63B , 0, NULL                },
+	{ "sf2jhpp"       , CPS_B_13    , mapper_STF29 , 0, NULL                },
+	{ "wofj103"       , CPS_B_21_QS1, mapper_TK263B, 0, wof_decode          },
+	{ "wofch3p"       , CPS_B_21_DEF, mapper_sfzch , 0, wof_decode          },
+
 	{ 0               , 0           , 0            , 0, 0                   }
 };
 
@@ -24162,6 +24171,341 @@ struct BurnDriver BurnDrvCpssf2mix = {
 
 #include "d_kenseim.h"
 
+//============================================================
+//  Add Hack Roms
+//============================================================
+
+static struct BurnRomInfo Captcommv4RomDesc[] = {
+	{ "cce_23fv4.8f",  0x080000, 0xaadba6af, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "cc_22f.7f",     0x080000, 0x0fd34195, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "cc_24f.9e",     0x020000, 0x3a794f25, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "cc_28f.9f",     0x020000, 0xfc3c2906, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "cc-5m.3a",      0x080000, 0x7261d8ba, BRF_GRA | CPS1_TILES },
+	{ "cc-7m.5a",      0x080000, 0x6a60f949, BRF_GRA | CPS1_TILES },
+	{ "cc-1m.4a",      0x080000, 0x00637302, BRF_GRA | CPS1_TILES },
+	{ "cc-3m.6a",      0x080000, 0xcc87cf61, BRF_GRA | CPS1_TILES },
+	{ "cc-6m.7a",      0x080000, 0x28718bed, BRF_GRA | CPS1_TILES },
+	{ "cc-8m.9a",      0x080000, 0xd4acc53a, BRF_GRA | CPS1_TILES },
+	{ "cc-2m.8a",      0x080000, 0x0c69f151, BRF_GRA | CPS1_TILES },
+	{ "cc-4m.10a",     0x080000, 0x1f9ebb97, BRF_GRA | CPS1_TILES },
+
+	{ "cc_09.11a",     0x010000, 0x698e8b58, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "cc_18.11c",     0x020000, 0x6de2c2db, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "cc_19.12c",     0x020000, 0xb99091ae, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "cc63b.1a",      0x000117, 0xcae8f0f9, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "ccprg1.11d",    0x000117, 0xe1c225c4, BRF_OPT },
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632b.ic1",     0x000117, 0x0fbd9270, BRF_OPT },
+};
+
+STD_ROM_PICK(Captcommv4)
+STD_ROM_FN(Captcommv4)
+
+static struct BurnRomInfo Ffgtj4v2RomDesc[] = {
+	{ "ff_36v2.12f",   0x020000, 0xa9f3fd1b, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_42v2.12h",  0x020000, 0x75085b57, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_37.13f",     0x020000, 0xdba5a476, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_43.13h",    0x020000, 0xfbeca028, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_34.10f",     0x020000, 0x0c8dc3fc, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_40.10h",    0x020000, 0x8075bab9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_35.11f",     0x020000, 0x4a934121, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_41.11h",    0x020000, 0x2af68154, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "ff_09.4b",      0x020000, 0x5b116d0d, BRF_GRA | CPS1_TILES },
+	{ "ff_01.4a",      0x020000, 0x815b1797, BRF_GRA | CPS1_TILES },
+	{ "ff_13.9b",      0x020000, 0x8721a7da, BRF_GRA | CPS1_TILES },
+	{ "ff_05.9a",      0x020000, 0xd0fcd4b5, BRF_GRA | CPS1_TILES },
+	{ "ff_24.5e",      0x020000, 0xa1ab607a, BRF_GRA | CPS1_TILES },
+	{ "ff_17.5c",      0x020000, 0x2dc18cf4, BRF_GRA | CPS1_TILES },
+	{ "ffj_38.8h",     0x020000, 0x6535a57f, BRF_GRA | CPS1_TILES }, // == ff_38.8h 
+	{ "ff_32.8f",      0x020000, 0xc8bc4a57, BRF_GRA | CPS1_TILES },
+	{ "ff_10.5b",      0x020000, 0x624a924a, BRF_GRA | CPS1_TILES },
+	{ "ff_02.5a",      0x020000, 0x5d91f694, BRF_GRA | CPS1_TILES },
+	{ "ff_14.10b",     0x020000, 0x0a2e9101, BRF_GRA | CPS1_TILES },
+	{ "ff_06.10a",     0x020000, 0x1c18f042, BRF_GRA | CPS1_TILES },
+	{ "ff_25.7e",      0x020000, 0x6e8181ea, BRF_GRA | CPS1_TILES },
+	{ "ff_18.7c",      0x020000, 0xb19ede59, BRF_GRA | CPS1_TILES },
+	{ "ffj_39.9h",     0x020000, 0x9416b477, BRF_GRA | CPS1_TILES }, // == ff_39.9h
+	{ "ff_33.9f",      0x020000, 0x7369fa07, BRF_GRA | CPS1_TILES },
+
+	{ "ff_23.13b",     0x010000, 0xb8367eb5, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "ff_30.12c",     0x020000, 0x375c66e7, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "ff_31.13c",     0x020000, 0x1ef137f9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "s222b.1a",      0x000117, 0x6d86b45e, BRF_OPT }, // b-board PLDs
+	{ "lwio.12e",      0x000117, 0xad52b90c, BRF_OPT },
+};
+
+STD_ROM_PICK(Ffgtj4v2)
+STD_ROM_FN(Ffgtj4v2)
+
+static struct BurnRomInfo Ffgtj2spRomDesc[] = {
+	{ "ffj_36sp.12f",  0x020000, 0x173a79d7, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_42sp.12h",  0x020000, 0x123a7e68, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_37sp.13f",  0x020000, 0x6a12d584, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_43sp.13h",  0x020000, 0x50a0442a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_34.10f",     0x020000, 0x0c8dc3fc, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_40.10h",     0x020000, 0x8075bab9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_35.11f",     0x020000, 0x4a934121, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_41.11h",     0x020000, 0x2af68154, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "ff_09.4b",      0x020000, 0x5b116d0d, BRF_GRA | CPS1_TILES },
+	{ "ff_01.4a",      0x020000, 0x815b1797, BRF_GRA | CPS1_TILES },
+	{ "ff_13.9b",      0x020000, 0x8721a7da, BRF_GRA | CPS1_TILES },
+	{ "ff_05.9a",      0x020000, 0xd0fcd4b5, BRF_GRA | CPS1_TILES },
+	{ "ff_24.5e",      0x020000, 0xa1ab607a, BRF_GRA | CPS1_TILES },
+	{ "ff_17.5c",      0x020000, 0x2dc18cf4, BRF_GRA | CPS1_TILES },
+	{ "ff_38.8h",      0x020000, 0x6535a57f, BRF_GRA | CPS1_TILES },
+	{ "ff_32.8f",      0x020000, 0xc8bc4a57, BRF_GRA | CPS1_TILES },
+	{ "ff_10.5b",      0x020000, 0x624a924a, BRF_GRA | CPS1_TILES },
+	{ "ff_02.5a",      0x020000, 0x5d91f694, BRF_GRA | CPS1_TILES },
+	{ "ff_14.10b",     0x020000, 0x0a2e9101, BRF_GRA | CPS1_TILES },
+	{ "ff_06.10a",     0x020000, 0x1c18f042, BRF_GRA | CPS1_TILES },
+	{ "ff_25.7e",      0x020000, 0x6e8181ea, BRF_GRA | CPS1_TILES },
+	{ "ff_18.7c",      0x020000, 0xb19ede59, BRF_GRA | CPS1_TILES },
+	{ "ff_39.9h",      0x020000, 0x9416b477, BRF_GRA | CPS1_TILES },
+	{ "ff_33.9f",      0x020000, 0x7369fa07, BRF_GRA | CPS1_TILES },
+
+	{ "ff_23.13c",     0x010000, 0xb8367eb5, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "ff_30.12e",     0x020000, 0x375c66e7, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "ff_31.13e",     0x020000, 0x1ef137f9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+
+	A_BOARD_PLDS
+	
+	{ "s222b.1a",      0x000117, 0x6d86b45e, BRF_OPT }, // b-board PLDs
+	{ "lwio.12c",      0x000117, 0xad52b90c, BRF_OPT },
+};
+
+STD_ROM_PICK(Ffgtj2sp)
+STD_ROM_FN(Ffgtj2sp)
+
+static struct BurnRomInfo Knightj3RomDesc[] = {
+	{ "kr_23j_v3.8f",  0x080000, 0xfb95179e, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "kr_22.7f",      0x080000, 0xd0b671a9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "kr_01.3a",      0x080000, 0x9e36c1a4, BRF_GRA | CPS1_TILES },
+	{ "kr_02.4a",      0x080000, 0xc5832cae, BRF_GRA | CPS1_TILES },
+	{ "kr_03.5a",      0x080000, 0xf095be2d, BRF_GRA | CPS1_TILES },
+	{ "kr_04.6a",      0x080000, 0x179dfd96, BRF_GRA | CPS1_TILES },
+	{ "kr_05.7a",      0x080000, 0x1f4298d2, BRF_GRA | CPS1_TILES },
+	{ "kr_06.8a",      0x080000, 0x37fa8751, BRF_GRA | CPS1_TILES },
+	{ "kr_07.9a",      0x080000, 0x0200bc3d, BRF_GRA | CPS1_TILES },
+	{ "kr_08.10a",     0x080000, 0x0bb2b4e7, BRF_GRA | CPS1_TILES },
+
+	{ "kr_09.12a",     0x010000, 0x5e44d9ee, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "kr_18.11c",     0x020000, 0xda69d15f, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "kr_19.12c",     0x020000, 0xbfc654e9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "kr63b.1a",      0x000117, 0xfd5b6522, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },
+};
+
+STD_ROM_PICK(Knightj3)
+STD_ROM_FN(Knightj3)
+
+static struct BurnRomInfo Sf2jhppRomDesc[] = {
+	{ "sf2j_30hp.11e", 0x020000, 0x021594e9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2e_30g.11e
+	{ "sf2j_37hp.11f", 0x020000, 0x92a5f669, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_31hp.12e", 0x020000, 0x7e4af671, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2e_31g.12e
+	{ "sf2j_38hp.12f", 0x020000, 0x4723f268, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_28hp.9e",  0x020000, 0x3c33abd7, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_35hp.9f",  0x020000, 0x6a6c2e9a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_29ap.10e", 0x020000, 0x0bb77024, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2_29b.10e
+	{ "sf2j_36ap.10f", 0x020000, 0x48256574, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2_36b.10f
+
+	{ "sf2_06.8a",     0x080000, 0x22c9cc8e, BRF_GRA | CPS1_TILES },
+	{ "sf2_08.10a",    0x080000, 0x57213be8, BRF_GRA | CPS1_TILES },
+	{ "sf2_05.7a",     0x080000, 0xba529b4f, BRF_GRA | CPS1_TILES },
+	{ "sf2_07.9a",     0x080000, 0x4b1b33a8, BRF_GRA | CPS1_TILES },
+	{ "sf2_15.8c",     0x080000, 0x2c7e2229, BRF_GRA | CPS1_TILES },
+	{ "sf2_17.10c",    0x080000, 0xb5548f17, BRF_GRA | CPS1_TILES },
+	{ "sf2_14.7c",     0x080000, 0x14b84312, BRF_GRA | CPS1_TILES },
+	{ "sf2_16.9c",     0x080000, 0x5e9cd89a, BRF_GRA | CPS1_TILES },
+	{ "sf2_25p.8d",    0x080000, 0x4267b696, BRF_GRA | CPS1_TILES },
+	{ "sf2_27p.10d",   0x080000, 0xdf9b9146, BRF_GRA | CPS1_TILES },
+	{ "sf2_24p.7d",    0x080000, 0xa08a9786, BRF_GRA | CPS1_TILES },
+	{ "sf2_26p.9d",    0x080000, 0x80feac31, BRF_GRA | CPS1_TILES },
+
+	{ "sf2_09.12a",    0x010000, 0xa4823a1b, BRF_PRG | CPS1_Z80_PROGRAM }, // == sf2_9.12a
+
+	{ "sf2_18.11c",    0x020000, 0x7f162009, BRF_SND | CPS1_OKIM6295_SAMPLES },  
+	{ "sf2_19.12c",    0x020000, 0xbeade53f, BRF_SND | CPS1_OKIM6295_SAMPLES },  
+
+	A_BOARD_PLDS
+	
+	{ "stf29.1a",      0x000117, 0x043309c5, BRF_OPT },	// b-board PLDs
+	{ "iob1.11d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },	// c-board PLDs
+};
+
+STD_ROM_PICK(Sf2jhpp)
+STD_ROM_FN(Sf2jhpp)
+
+static struct BurnRomInfo Wofj103RomDesc[] = {
+	{ "tk2j_23m.8f",   0x080000, 0x6dba1d2f, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "tk2j_22m.7f",   0x080000, 0x7630fd8a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "tk2_01.3a",     0x080000, 0x0d9cb9bf, BRF_GRA | CPS1_TILES },
+	{ "tk2_02.4a",     0x080000, 0x45227027, BRF_GRA | CPS1_TILES },
+	{ "tk2_03.5a",     0x080000, 0xc5ca2460, BRF_GRA | CPS1_TILES },
+	{ "tk2_04.6a",     0x080000, 0xe349551c, BRF_GRA | CPS1_TILES },
+	{ "tk2_05.7a",     0x080000, 0xe4a44d53, BRF_GRA | CPS1_TILES },
+	{ "tk2_06.8a",     0x080000, 0x58066ba8, BRF_GRA | CPS1_TILES },
+	{ "tk2_07.9a",     0x080000, 0xd706568e, BRF_GRA | CPS1_TILES },
+	{ "tk2_08.10a",    0x080000, 0xd4a19a02, BRF_GRA | CPS1_TILES },
+
+	{ "tk2_qa.5k",     0x020000, 0xc9183a0d, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "tk2-q1.1k",     0x080000, 0x611268cf, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q2.2k",     0x080000, 0x20f55ca9, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q3.3k",     0x080000, 0xbfcf6f52, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q4.4k",     0x080000, 0x36642e88, BRF_SND | CPS1_QSOUND_SAMPLES },
+
+	A_BOARD_QSOUND_PLDS
+	
+	{ "tk263b.1a",     0x000117, 0xc4b0349b, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	
+	{ "ioc1.ic1",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	
+	{ "d7l1.7l",       0x000117, 0x27b7410d, BRF_OPT },	// d-board PLDs
+	{ "d8l1.8l",       0x000117, 0x539fc7da, BRF_OPT },
+	{ "d9k1.9k",       0x000117, 0x6c35c805, BRF_OPT },
+	{ "d10f1.10f",     0x000117, 0x6619c494, BRF_OPT },
+};
+
+STD_ROM_PICK(Wofj103)
+STD_ROM_FN(Wofj103)
+
+static struct BurnRomInfo Wofch3pRomDesc[] = {
+	{ "tk23p_23.8f",   0x080000, 0x8a1017a4, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "tk23p_22.7f",   0x080000, 0x129f2942, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "tk2-1m.3a",     0x080000, 0x0d9cb9bf, BRF_GRA | CPS1_TILES },
+	{ "tk2-3m.5a",     0x080000, 0x45227027, BRF_GRA | CPS1_TILES },
+	{ "tk2-2m.4a",     0x080000, 0xc5ca2460, BRF_GRA | CPS1_TILES },
+	{ "tk2-4m.6a",     0x080000, 0xe349551c, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_05.7a", 0x080000, 0xe4a44d53, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_06.8a", 0x080000, 0x58066ba8, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_07.9a", 0x080000, 0xcc9006c9, BRF_GRA | CPS1_TILES }, // 1 byte different from wofj, pcb verified
+	{ "tk2(ch)_08.10a",0x080000, 0xd4a19a02, BRF_GRA | CPS1_TILES },
+
+	{ "tk2_qa.5k",     0x020000, 0xc9183a0d, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "tk2-q1.1k",     0x080000, 0x611268cf, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q2.2k",     0x080000, 0x20f55ca9, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q3.3k",     0x080000, 0xbfcf6f52, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q4.4k",     0x080000, 0x36642e88, BRF_SND | CPS1_QSOUND_SAMPLES },
+
+	{ "buf1",          0x000117, 0xeb122de7, BRF_OPT }, // a-board PLDs
+	{ "ioa1",          0x000117, 0x59c7ee3b, BRF_OPT },
+	{ "prg2",          0x000117, 0x4386879a, BRF_OPT },
+	{ "rom1",          0x000117, 0x41dc73b9, BRF_OPT },
+	{ "sou1",          0x000117, 0x84f4b2fe, BRF_OPT },
+	
+	{ "tk263b.1a",     0x000117, 0xc4b0349b, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },
+	
+	{ "d7l1.7l",       0x000117, 0x27b7410d, BRF_OPT },	// d-board PLDs
+	{ "d8l1.8l",       0x000117, 0x539fc7da, BRF_OPT },
+	{ "d9k1.9k",       0x000117, 0x6c35c805, BRF_OPT },
+	{ "d10f1.10f",     0x000117, 0x6619c494, BRF_OPT },
+};
+
+STD_ROM_PICK(Wofch3p)
+STD_ROM_FN(Wofch3p)
+
+struct BurnDriver BurnDrvCpsCaptcommv4 = {
+	"captcommv4", "captcomm", NULL, NULL, "1991",
+	"Captain Commando (911202 World, 1 vs 4 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 4, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Captcommv4RomInfo, Captcommv4RomName, NULL, NULL, NULL, NULL, CaptcommInputInfo, CaptcommDIPInfo,
+	Cps1RasterInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsFfgtj4v2 = {
+	"ffgtj4v2", "ffight", NULL, NULL, "1989",
+	"Final Fight (900613 Japan, 1 vs 2 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Ffgtj4v2RomInfo, Ffgtj4v2RomName, NULL, NULL, NULL, NULL, FfightInputInfo, FfightDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsFfgtj2sp = {
+	"ffgtj2sp", "ffight", NULL, NULL, "1989",
+	"Final Fight (Super Plus Hack, 900305 Japan)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Ffgtj2spRomInfo, Ffgtj2spRomName, NULL, NULL, NULL, NULL, FfightInputInfo, FfightDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsKnightj3 = {
+	"knightj3", "knights", NULL, NULL, "1991",
+	"Knights of the Round (911127 Japan, 1 vs 3 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 3, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Knightj3RomInfo, Knightj3RomName, NULL, NULL, NULL, NULL, KnightsInputInfo, KnightsDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsSf2jhpp = {
+	"sf2jhpp", "sf2", NULL, NULL, "1991",
+	"Street Fighter II - The World Warrior (910522 Japan, Plus Plus Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS1, GBF_VSFIGHT, FBF_SF,
+	NULL, Sf2jhppRomInfo, Sf2jhppRomName, NULL, NULL, NULL, NULL, Sf2InputInfo, Sf2jDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsWofj103 = {
+	"wofj103", "wof", NULL, NULL, "1992",
+	"Tenchi wo Kurau II - Counter Attack of Mei Sisters (921031 Japan, Hack)\0", NULL, "Capcom", "CPS1 / QSound",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 3, HARDWARE_CAPCOM_CPS1_QSOUND, GBF_SCRFIGHT, 0,
+	NULL, Wofj103RomInfo, Wofj103RomName, NULL, NULL, NULL, NULL, WofInputInfo, WofDIPInfo,
+	TwelveMhzInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsWofch3p = {
+	"wofch3p", "wofch", NULL, NULL, "1992",
+	"Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer 3P Ura Mode Hack, 921031 Japan)\0", NULL, "Capcom", "CPS Changer 3P Hack",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 3, HARDWARE_CAPCOM_CPSCHANGER, GBF_SCRFIGHT, 0,
+	NULL, Wofch3pRomInfo, Wofch3pRomName, NULL, NULL, NULL, NULL, WofchpInputInfo, NULL,
+	WofchInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
 #undef CPS1_68K_PROGRAM_BYTESWAP
 #undef CPS1_68K_PROGRAM_NO_BYTESWAP
 #undef CPS1_Z80_PROGRAM
diff --git a/src/burn/drv/capcom/d_cps2.cpp b/src/burn/drv/capcom/d_cps2.cpp
index 05b4d7557..a1ed22e01 100644
--- a/src/burn/drv/capcom/d_cps2.cpp
+++ b/src/burn/drv/capcom/d_cps2.cpp
@@ -13796,3 +13796,529 @@ struct BurnDriver BurnDrvCpsGigaman2 = {
 	Gigaman2Init, Gigaman2Exit, Cps2Frame, CpsRedraw, Gigaman2Scan,
 	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
 };
+
+//============================================================
+//  Add Hack Roms
+//============================================================
+
+static struct BurnRomInfo Ddsomav4RomDesc[] = {
+	{ "dd2a_v4.03g",   0x080000, 0xe28c61f2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2a_v4.04g",   0x080000, 0x145efa6f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.05g",       0x080000, 0x5eb1991c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.06g",       0x080000, 0xc26b5e55, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.07",        0x080000, 0x909a0b8b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.08",        0x080000, 0xe53c4d01, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.09",        0x080000, 0x5f86279f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.10",        0x080000, 0xad954c26, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "dd2.13m",       0x400000, 0xa46b4e6e, CPS2_GFX | BRF_GRA },
+	{ "dd2.15m",       0x400000, 0xd5fc50fc, CPS2_GFX | BRF_GRA },
+	{ "dd2.17m",       0x400000, 0x837c0867, CPS2_GFX | BRF_GRA },
+	{ "dd2.19m",       0x400000, 0xbb0ec21c, CPS2_GFX | BRF_GRA },
+	{ "dd2.14m",       0x200000, 0x6d824ce2, CPS2_GFX | BRF_GRA },
+	{ "dd2.16m",       0x200000, 0x79682ae5, CPS2_GFX | BRF_GRA },
+	{ "dd2.18m",       0x200000, 0xacddd149, CPS2_GFX | BRF_GRA },
+	{ "dd2.20m",       0x200000, 0x117fb0c0, CPS2_GFX | BRF_GRA },
+
+	{ "dd2.01",        0x020000, 0x99d657e5, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "dd2.02",        0x020000, 0x117a3824, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "dd2.11m",       0x200000, 0x98d0c325, CPS2_QSND | BRF_SND },
+	{ "dd2.12m",       0x200000, 0x5ea2e7fa, CPS2_QSND | BRF_SND },
+	
+	{ "ddsoma.key",    0x000014, 0x8c3cc560, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ddsomav4)
+STD_ROM_FN(Ddsomav4)
+
+struct BurnDriver BurnDrvCpsDdsomav4 = {
+	"ddsomav4", "ddsom", NULL, NULL, "1996",
+	"Dungeons & Dragons - shadow over mystara (960619 Asia, 1 vs 4 Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 4, HARDWARE_CAPCOM_CPS2, GBF_SCRFIGHT, 0,
+	NULL, Ddsomav4RomInfo, Ddsomav4RomName, NULL, NULL, NULL, NULL, DdsomInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Ssf2xjhRomDesc[] = {
+	{ "sfxjh.03c",     0x080000, 0x62b59bf0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.04a",      0x080000, 0xaf7767b4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.05",       0x080000, 0xf4ff18f5, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.06b",      0x080000, 0x413477c2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.07a",      0x080000, 0xa18b3d83, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.08",       0x080000, 0x2de76f10, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfx.09",        0x080000, 0x642fae3f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfx.13m",       0x200000, 0xcf94d275, CPS2_GFX | BRF_GRA },
+	{ "sfx.15m",       0x200000, 0x5eb703af, CPS2_GFX | BRF_GRA },
+	{ "sfx.17m",       0x200000, 0xffa60e0f, CPS2_GFX | BRF_GRA },
+	{ "sfx.19m",       0x200000, 0x34e825c5, CPS2_GFX | BRF_GRA },
+	{ "sfx.14m",       0x100000, 0xb7cc32e7, CPS2_GFX | BRF_GRA },
+	{ "sfx.16m",       0x100000, 0x8376ad18, CPS2_GFX | BRF_GRA },
+	{ "sfx.18m",       0x100000, 0xf5b1b336, CPS2_GFX | BRF_GRA },
+	{ "sfx.20m",       0x100000, 0x459d5c6b, CPS2_GFX | BRF_GRA },
+	{ "sfx.21m",       0x100000, 0xe32854af, CPS2_GFX | BRF_GRA },
+	{ "sfx.23m",       0x100000, 0x760f2927, CPS2_GFX | BRF_GRA },
+	{ "sfx.25m",       0x100000, 0x1ee90208, CPS2_GFX | BRF_GRA },
+	{ "sfx.27m",       0x100000, 0xf814400f, CPS2_GFX | BRF_GRA },
+
+	{ "sfx.01",        0x020000, 0xb47b8835, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfx.02",        0x020000, 0x0022633f, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfx.11m",       0x200000, 0x9bdbd476, CPS2_QSND | BRF_SND },
+	{ "sfx.12m",       0x200000, 0xa05e3aab, CPS2_QSND | BRF_SND },
+
+	{ "ssf2xj.key",    0x000014, 0x160d1424, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ssf2xjh)
+STD_ROM_FN(Ssf2xjh)
+
+struct BurnDriver BurnDrvCpsSsf2xjh = {
+	"ssf2xjh", "ssf2t", NULL, NULL, "1994",
+	"Super Street Fighter II X - grand master challenge (940223 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Ssf2xjhRomInfo, Ssf2xjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Ssf2xjr1dtRomDesc[] = {
+	{ "sfxjdt.03c",    0x080000, 0x1ba9faa0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjdt.04a",    0x080000, 0xcb0c0151, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.05",      0x080000, 0xc63358d0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.06a",     0x080000, 0xccb29808, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.07",      0x080000, 0x61f94982, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.08",      0x080000, 0xd399c36c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxd.09",       0x080000, 0x0b3a6196, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfx.13m",       0x200000, 0xcf94d275, CPS2_GFX | BRF_GRA },
+	{ "sfx.15m",       0x200000, 0x5eb703af, CPS2_GFX | BRF_GRA },
+	{ "sfx.17m",       0x200000, 0xffa60e0f, CPS2_GFX | BRF_GRA },
+	{ "sfx.19m",       0x200000, 0x34e825c5, CPS2_GFX | BRF_GRA },
+	{ "sfx.14m",       0x100000, 0xb7cc32e7, CPS2_GFX | BRF_GRA },
+	{ "sfx.16m",       0x100000, 0x8376ad18, CPS2_GFX | BRF_GRA },
+	{ "sfx.18m",       0x100000, 0xf5b1b336, CPS2_GFX | BRF_GRA },
+	{ "sfx.20m",       0x100000, 0x459d5c6b, CPS2_GFX | BRF_GRA },
+	{ "sfx.21m",       0x100000, 0xe32854af, CPS2_GFX | BRF_GRA },
+	{ "sfx.23m",       0x100000, 0x760f2927, CPS2_GFX | BRF_GRA },
+	{ "sfx.25m",       0x100000, 0x1ee90208, CPS2_GFX | BRF_GRA },
+	{ "sfx.27m",       0x100000, 0xf814400f, CPS2_GFX | BRF_GRA },
+
+	{ "sfx.01",        0x020000, 0xb47b8835, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfx.02",        0x020000, 0x0022633f, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfx.11m",       0x200000, 0x9bdbd476, CPS2_QSND | BRF_SND },
+	{ "sfx.12m",       0x200000, 0xa05e3aab, CPS2_QSND | BRF_SND },
+
+	{ "phoenix.key",   0x000014, 0x2cf772b0, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ssf2xjr1dt)
+STD_ROM_FN(Ssf2xjr1dt)
+
+struct BurnDriver BurnDrvCpsSsf2xjr1dt = {
+	"ssf2xjr1dt", "ssf2t", NULL, NULL, "1994",
+	"Super Street Fighter II X - grand master challenge (Phoenix Edition, Training Hack)\0", NULL, "bootleg", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Ssf2xjr1dtRomInfo, Ssf2xjr1dtRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tPhoenixInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo VampjhRomDesc[] = {
+	{ "vamjh.03a",     0x080000, 0x55c1be82, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamjh.04b",     0x080000, 0x9c12017e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.05a",      0x080000, 0x6c497e92, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.06a",      0x080000, 0xf1bbecb6, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.07a",      0x080000, 0x1067ad84, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.08a",      0x080000, 0x4b89f41f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.09a",      0x080000, 0xfc0a4aac, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.10a",      0x080000, 0x9270c26b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "vam.13m",       0x400000, 0xc51baf99, CPS2_GFX | BRF_GRA },
+	{ "vam.15m",       0x400000, 0x3ce83c77, CPS2_GFX | BRF_GRA },
+	{ "vam.17m",       0x400000, 0x4f2408e0, CPS2_GFX | BRF_GRA },
+	{ "vam.19m",       0x400000, 0x9ff60250, CPS2_GFX | BRF_GRA },
+	{ "vam.14m",       0x100000, 0xbd87243c, CPS2_GFX | BRF_GRA },
+	{ "vam.16m",       0x100000, 0xafec855f, CPS2_GFX | BRF_GRA },
+	{ "vam.18m",       0x100000, 0x3a033625, CPS2_GFX | BRF_GRA },
+	{ "vam.20m",       0x100000, 0x2bff6a89, CPS2_GFX | BRF_GRA },
+
+	{ "vam.01",        0x020000, 0x64b685d5, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "vam.02",        0x020000, 0xcf7c97c7, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "vam.11m",       0x200000, 0x4a39deb2, CPS2_QSND | BRF_SND },
+	{ "vam.12m",       0x200000, 0x1a3e5c03, CPS2_QSND | BRF_SND },
+
+	{ "vampj.key",     0x000014, 0x8418cc6f, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Vampjh)
+STD_ROM_FN(Vampjh)
+
+struct BurnDriver BurnDrvCpsVampjh = {
+	"vampjh", "dstlk", NULL, NULL, "1994",
+	"Vampire - the night warriors (940705 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_DSTLK,
+	NULL, VampjhRomInfo, VampjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Xmcotaj2hRomDesc[] = {
+	{ "xmnjh.03b",     0x080000, 0xbd2f0b84, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmnjh.04b",     0x080000, 0x5de40342, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.05",        0x080000, 0xc3ed62a2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.06",        0x080000, 0xf03c52e1, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.07",        0x080000, 0x325626b1, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.08",        0x080000, 0x7194ea10, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.09",        0x080000, 0xae946df3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.10",        0x080000, 0x32a6be1d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "xmn.13m",       0x400000, 0xbf4df073, CPS2_GFX | BRF_GRA },
+	{ "xmn.15m",       0x400000, 0x4d7e4cef, CPS2_GFX | BRF_GRA },
+	{ "xmn.17m",       0x400000, 0x513eea17, CPS2_GFX | BRF_GRA },
+	{ "xmn.19m",       0x400000, 0xd23897fc, CPS2_GFX | BRF_GRA },
+	{ "xmn.14m",       0x400000, 0x778237b7, CPS2_GFX | BRF_GRA },
+	{ "xmn.16m",       0x400000, 0x67b36948, CPS2_GFX | BRF_GRA },
+	{ "xmn.18m",       0x400000, 0x015a7c4c, CPS2_GFX | BRF_GRA },
+	{ "xmn.20m",       0x400000, 0x9dde2758, CPS2_GFX | BRF_GRA },
+
+	{ "xmn.01a",       0x020000, 0x40f479ea, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "xmn.02a",       0x020000, 0x39d9b5ad, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "xmn.11m",       0x200000, 0xc848a6bc, CPS2_QSND | BRF_SND },
+	{ "xmn.12m",       0x200000, 0x729c188f, CPS2_QSND | BRF_SND },
+
+	{ "xmcotaj.key",   0x000014, 0xd278b4ac, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Xmcotaj2h)
+STD_ROM_FN(Xmcotaj2h)
+
+struct BurnDriver BurnDrvCpsXmcotaj2h = {
+	"xmcotaj2h", "xmcota", NULL, NULL, "1994",
+	"X-Men - children of the atom (941219 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, 0,
+	NULL, Xmcotaj2hRomInfo, Xmcotaj2hRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	XmcotaInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo SfzjhRomDesc[] = {
+	{ "sfzjh.03c",     0x080000, 0x6b0366bf, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfz.04b",       0x080000, 0x8b73b0e5, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfz.05a",       0x080000, 0x0810544d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfzh.06",       0x080000, 0xe7bb5d20, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfz.14m",       0x200000, 0x90fefdb3, CPS2_GFX | BRF_GRA },
+	{ "sfz.16m",       0x200000, 0x5354c948, CPS2_GFX | BRF_GRA },
+	{ "sfz.18m",       0x200000, 0x41a1e790, CPS2_GFX | BRF_GRA },
+	{ "sfz.20m",       0x200000, 0xa549df98, CPS2_GFX | BRF_GRA },
+
+	{ "sfz.01",        0x020000, 0xffffec7d, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfz.02",        0x020000, 0x45f46a08, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfz.11m",       0x200000, 0xc4b093cd, CPS2_QSND | BRF_SND },
+	{ "sfz.12m",       0x200000, 0x8bdbc4b4, CPS2_QSND | BRF_SND },
+
+	{ "sfzj.key",      0x000014, 0x355d85b8, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfzjh)
+STD_ROM_FN(Sfzjh)
+
+struct BurnDriver BurnDrvCpsSfzjh = {
+	"sfzjh", "sfa", NULL, NULL, "1995",
+	"Street Fighter Zero (950727 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, SfzjhRomInfo, SfzjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo MshjhRomDesc[] = {
+	{ "mshj.03g",      0x080000, 0x261f4091, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mshjh.04g",     0x080000, 0xd66257ab, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.05a",       0x080000, 0xf37539e6, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.06b",       0x080000, 0x803e3fa4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.07a",       0x080000, 0xc45f8e27, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.08a",       0x080000, 0x9ca6f12c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.09a",       0x080000, 0x82ec27af, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.10b",       0x080000, 0x8d931196, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "msh.13m",       0x400000, 0x09d14566, CPS2_GFX | BRF_GRA },
+	{ "msh.15m",       0x400000, 0xee962057, CPS2_GFX | BRF_GRA },
+	{ "msh.17m",       0x400000, 0x604ece14, CPS2_GFX | BRF_GRA },
+	{ "msh.19m",       0x400000, 0x94a731e8, CPS2_GFX | BRF_GRA },
+	{ "msh.14m",       0x400000, 0x4197973e, CPS2_GFX | BRF_GRA },
+	{ "msh.16m",       0x400000, 0x438da4a0, CPS2_GFX | BRF_GRA },
+	{ "msh.18m",       0x400000, 0x4db92d94, CPS2_GFX | BRF_GRA },
+	{ "msh.20m",       0x400000, 0xa2b0c6c0, CPS2_GFX | BRF_GRA },
+
+	{ "msh.01",        0x020000, 0xc976e6f9, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "msh.02",        0x020000, 0xce67d0d9, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "msh.11m",       0x200000, 0x37ac6d30, CPS2_QSND | BRF_SND },
+	{ "msh.12m",       0x200000, 0xde092570, CPS2_QSND | BRF_SND },
+
+	{ "mshj.key",      0x000014, 0x888761ac, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Mshjh)
+STD_ROM_FN(Mshjh)
+
+struct BurnDriver BurnDrvCpsMshjh = {
+	"mshjh", "msh", NULL, NULL, "1995",
+	"Marvel Super Heroes (951117 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, 0,
+	NULL, MshjhRomInfo, MshjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz2jr1hRomDesc[] = {
+	{ "sz2jh.03a",     0x080000, 0x4afbba27, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2j.04a",      0x080000, 0xae4851a9, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.05a",       0x080000, 0x98e8e992, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.06",        0x080000, 0x5b1d49c0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2j.07a",      0x080000, 0xd910b2a2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.08",        0x080000, 0x0fe8585d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sz2.13m",       0x400000, 0x4d1f1f22, CPS2_GFX | BRF_GRA },
+	{ "sz2.15m",       0x400000, 0x19cea680, CPS2_GFX | BRF_GRA },
+	{ "sz2.17m",       0x400000, 0xe01b4588, CPS2_GFX | BRF_GRA },
+	{ "sz2.19m",       0x400000, 0x0feeda64, CPS2_GFX | BRF_GRA },
+	{ "sz2.14m",       0x100000, 0x0560c6aa, CPS2_GFX | BRF_GRA },
+	{ "sz2.16m",       0x100000, 0xae940f87, CPS2_GFX | BRF_GRA },
+	{ "sz2.18m",       0x100000, 0x4bc3c8bc, CPS2_GFX | BRF_GRA },
+	{ "sz2.20m",       0x100000, 0x39e674c0, CPS2_GFX | BRF_GRA },
+
+	{ "sz2.01a",       0x020000, 0x1bc323cf, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sz2.02a",       0x020000, 0xba6a5013, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sz2.11m",       0x200000, 0xaa47a601, CPS2_QSND | BRF_SND },
+	{ "sz2.12m",       0x200000, 0x2237bc53, CPS2_QSND | BRF_SND },
+
+	{ "sfz2j.key",     0x000014, 0x455bd098, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz2jr1h)
+STD_ROM_FN(Sfz2jr1h)
+
+struct BurnDriver BurnDrvCpsSfz2jr1h = {
+	"sfz2jr1h", "sfa2", NULL, NULL, "1996",
+	"Street Fighter Zero 2 (960227 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz2jr1hRomInfo, Sfz2jr1hRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Sfa2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz2aljhRomDesc[] = {
+	{ "szajh.03a",     0x080000, 0xa4ad2f9e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.04a",      0x080000, 0xe7ca87c7, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.05a",      0x080000, 0xc88ebf88, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.06a",      0x080000, 0x35ed5b7a, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.07a",      0x080000, 0x975dcb3e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.08a",      0x080000, 0xdc73f2d7, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sza.13m",       0x400000, 0x4d1f1f22, CPS2_GFX | BRF_GRA },
+	{ "sza.15m",       0x400000, 0x19cea680, CPS2_GFX | BRF_GRA },
+	{ "sza.17m",       0x400000, 0xe01b4588, CPS2_GFX | BRF_GRA },
+	{ "sza.19m",       0x400000, 0x0feeda64, CPS2_GFX | BRF_GRA },
+	{ "sza.14m",       0x100000, 0x0560c6aa, CPS2_GFX | BRF_GRA },
+	{ "sza.16m",       0x100000, 0xae940f87, CPS2_GFX | BRF_GRA },
+	{ "sza.18m",       0x100000, 0x4bc3c8bc, CPS2_GFX | BRF_GRA },
+	{ "sza.20m",       0x100000, 0x39e674c0, CPS2_GFX | BRF_GRA },
+
+	{ "sza.01",        0x020000, 0x1bc323cf, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sza.02",        0x020000, 0xba6a5013, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sza.11m",       0x200000, 0xaa47a601, CPS2_QSND | BRF_SND },
+	{ "sza.12m",       0x200000, 0x2237bc53, CPS2_QSND | BRF_SND },
+
+	{ "sfz2alj.key",   0x000014, 0x4c42320f, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz2aljh)
+STD_ROM_FN(Sfz2aljh)
+
+struct BurnDriver BurnDrvCpsSfz2aljh = {
+	"sfz2aljh", "sfz2al", NULL, NULL, "1996",
+	"Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz2aljhRomInfo, Sfz2aljhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Sfa2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo VsavdtRomDesc[] = {
+	{ "vm3edt.03d",    0x080000, 0xb984f547, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3edt.04d",    0x080000, 0xdbc29f2b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.05a",       0x080000, 0x4118e00f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.06a",       0x080000, 0x2f4fd3a9, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.07b",       0x080000, 0xcbda91b8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.08a",       0x080000, 0x6ca47259, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.09b",       0x080000, 0xf4a339e3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.10b",       0x080000, 0xfffbb5b8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "vm3.13m",       0x400000, 0xfd8a11eb, CPS2_GFX | BRF_GRA },
+	{ "vm3.15m",       0x400000, 0xdd1e7d4e, CPS2_GFX | BRF_GRA },
+	{ "vm3.17m",       0x400000, 0x6b89445e, CPS2_GFX | BRF_GRA },
+	{ "vm3.19m",       0x400000, 0x3830fdc7, CPS2_GFX | BRF_GRA },
+	{ "vm3.14m",       0x400000, 0xc1a28e6c, CPS2_GFX | BRF_GRA },
+	{ "vm3.16m",       0x400000, 0x194a7304, CPS2_GFX | BRF_GRA },
+	{ "vm3.18m",       0x400000, 0xdf9a9f47, CPS2_GFX | BRF_GRA },
+	{ "vm3.20m",       0x400000, 0xc22fc3d9, CPS2_GFX | BRF_GRA },
+
+	{ "vm3.01",        0x020000, 0xf778769b, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "vm3.02",        0x020000, 0xcc09faa1, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "vm3.11m",       0x400000, 0xe80e956e, CPS2_QSND | BRF_SND },
+	{ "vm3.12m",       0x400000, 0x9cd71557, CPS2_QSND | BRF_SND },
+
+	{ "phoenix.key",   0x000014, 0x2cf772b0, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Vsavdt)
+STD_ROM_FN(Vsavdt)
+
+struct BurnDriver BurnDrvCpsVsavdt = {
+	"vsavdt", "vsav", NULL, NULL, "1997",
+	"Vampire Savior - the lord of vampire (Phoenix Edition, Training Hack)\0", NULL, "bootleg", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_DSTLK,
+	NULL, VsavdtRomInfo, VsavdtRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	PhoenixInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo MshvsfjhRomDesc[] = {
+	{ "mvsjh.03i",     0x080000, 0x54ecd389, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvsjh.04i",     0x080000, 0x6031012f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.05h",       0x080000, 0x77870dc3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.06a",       0x080000, 0x959f3030, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.07b",       0x080000, 0x7f915bdb, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.08a",       0x080000, 0xc2813884, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.09b",       0x080000, 0x3ba08818, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.10b",       0x080000, 0xcf0dba98, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "mvs.13m",       0x400000, 0x29b05fd9, CPS2_GFX | BRF_GRA },
+	{ "mvs.15m",       0x400000, 0xfaddccf1, CPS2_GFX | BRF_GRA },
+	{ "mvs.17m",       0x400000, 0x97aaf4c7, CPS2_GFX | BRF_GRA },
+	{ "mvs.19m",       0x400000, 0xcb70e915, CPS2_GFX | BRF_GRA },
+	{ "mvs.14m",       0x400000, 0xb3b1972d, CPS2_GFX | BRF_GRA },
+	{ "mvs.16m",       0x400000, 0x08aadb5d, CPS2_GFX | BRF_GRA },
+	{ "mvs.18m",       0x400000, 0xc1228b35, CPS2_GFX | BRF_GRA },
+	{ "mvs.20m",       0x400000, 0x366cc6c2, CPS2_GFX | BRF_GRA },
+
+	{ "mvs.01",        0x020000, 0x68252324, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "mvs.02",        0x020000, 0xb34e773d, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "mvs.11m",       0x400000, 0x86219770, CPS2_QSND | BRF_SND },
+	{ "mvs.12m",       0x400000, 0xf2fd7f68, CPS2_QSND | BRF_SND },
+
+	{ "mshvsfj.key",   0x000014, 0x565eeebb, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Mshvsfjh)
+STD_ROM_FN(Mshvsfjh)
+
+struct BurnDriver BurnDrvCpsMshvsfjh = {
+	"mshvsfjh", "mshvsf", NULL, NULL, "1997",
+	"Marvel Super Heroes vs Street Fighter (970707 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, MshvsfjhRomInfo, MshvsfjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz3jhRomDesc[] = {
+	{ "sz3jh.03c",     0x080000, 0xd7eca311, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3jh.04c",     0x080000, 0xee836561, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.05c",       0x080000, 0x57fd0a40, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.06c",       0x080000, 0xf6305f8b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.07c",       0x080000, 0x6eab0f6f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.08c",       0x080000, 0x910c4a3b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.09c",       0x080000, 0xb29e5199, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.10b",       0x080000, 0xdeb2ff52, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sz3.13m",       0x400000, 0x0f7a60d9, CPS2_GFX | BRF_GRA },
+	{ "sz3.15m",       0x400000, 0x8e933741, CPS2_GFX | BRF_GRA },
+	{ "sz3.17m",       0x400000, 0xd6e98147, CPS2_GFX | BRF_GRA },
+	{ "sz3.19m",       0x400000, 0xf31a728a, CPS2_GFX | BRF_GRA },
+	{ "sz3.14m",       0x400000, 0x5ff98297, CPS2_GFX | BRF_GRA },
+	{ "sz3.16m",       0x400000, 0x52b5bdee, CPS2_GFX | BRF_GRA },
+	{ "sz3.18m",       0x400000, 0x40631ed5, CPS2_GFX | BRF_GRA },
+	{ "sz3.20m",       0x400000, 0x763409b4, CPS2_GFX | BRF_GRA },
+
+	{ "sz3.01",        0x020000, 0xde810084, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sz3.02",        0x020000, 0x72445dc4, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sz3.11m",       0x400000, 0x1c89eed1, CPS2_QSND | BRF_SND },
+	{ "sz3.12m",       0x400000, 0xf392b13a, CPS2_QSND | BRF_SND },
+
+	{ "sfz3j.key",     0x000014, 0xd30cca8d, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz3jh)
+STD_ROM_FN(Sfz3jh)
+
+struct BurnDriver BurnDrvCpsSfz3jh = {
+	"sfz3jh", "sfa3", NULL, NULL, "1998",
+	"Street Fighter Zero 3 (980904 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz3jhRomInfo, Sfz3jhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Hsf2jhRomDesc[] = {
+	{ "hs2jh.03",      0x080000, 0xbdeebd26, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2jh.04",      0x080000, 0xc46d367a, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.05",        0x080000, 0xdde34a35, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.06",        0x080000, 0xf4e56dda, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.07",        0x080000, 0xee4420fc, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.08",        0x080000, 0xc9441533, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.09",        0x080000, 0x3fc638a8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.10",        0x080000, 0x20d0f9e4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "hs2.13m" ,      0x800000, 0xa6ecab17, CPS2_GFX | BRF_GRA },
+	{ "hs2.15m",       0x800000, 0x10a0ae4d, CPS2_GFX | BRF_GRA },
+	{ "hs2.17m",       0x800000, 0xadfa7726, CPS2_GFX | BRF_GRA },
+	{ "hs2.19m",       0x800000, 0xbb3ae322, CPS2_GFX | BRF_GRA },
+
+	{ "hs2.01",        0x020000, 0xc1a13786, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "hs2.02",        0x020000, 0x2d8794aa, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "hs2.11m",       0x800000, 0x0e15c359, CPS2_QSND | BRF_SND },
+
+	{ "hsf2j.key",     0x000014, 0x19455a93, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Hsf2jh)
+STD_ROM_FN(Hsf2jh)
+
+struct BurnDriver BurnDrvCpsHsf2jh = {
+	"hsf2jh", "hsf2", NULL, NULL, "2004",
+	"Hyper Street Fighter II: The Anniversary Edition (031222 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Hsf2jhRomInfo, Hsf2jhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
diff --git a/src/burn/drv/cave/d_pwrinst2.cpp b/src/burn/drv/cave/d_pwrinst2.cpp
index b8b3eb802..bfbea58e7 100644
--- a/src/burn/drv/cave/d_pwrinst2.cpp
+++ b/src/burn/drv/cave/d_pwrinst2.cpp
@@ -1145,7 +1145,7 @@ struct BurnDriver BurnDrvPwrinst2j = {
 
 struct BurnDriver BurnDrvPwrinst2k = {
 	"pwrinst2k", "pwrinst2", NULL, NULL, "1994",
-	"Power instinct 2 (Korea, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
+	"Power Instinct 2 (Korea, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
 	NULL, pwrinst2kRomInfo, pwrinst2kRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
diff --git a/src/burn/drv/irem/d_m72.cpp b/src/burn/drv/irem/d_m72.cpp
index 6bc8c984b..c95cf95ae 100644
--- a/src/burn/drv/irem/d_m72.cpp
+++ b/src/burn/drv/irem/d_m72.cpp
@@ -3385,7 +3385,7 @@ static INT32 hharryInit()
 
 struct BurnDriver BurnDrvHharry = {
 	"hharry", NULL, NULL, NULL, "1990",
-	"Hammerin' Harry (World, M81 hardware))\0", NULL, "Irem", "Irem M82",
+	"Hammerin' Harry (World, M81 hardware)\0", NULL, "Irem", "Irem M82",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
 	NULL, hharryRomInfo, hharryRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
diff --git a/src/burn/drv/megadrive/d_megadrive.cpp b/src/burn/drv/megadrive/d_megadrive.cpp
index 9297a5707..80be54187 100644
--- a/src/burn/drv/megadrive/d_megadrive.cpp
+++ b/src/burn/drv/megadrive/d_megadrive.cpp
@@ -51309,3 +51309,462 @@ struct BurnDriver BurnDrvmd_tinheads = {
 	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
 	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
 };
+
+//============================================================
+//  Add Korean Translation
+//============================================================
+
+// GleyLancer (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/204/
+static struct BurnRomInfo md_gleylanckRomDesc[] = {
+	{ "advanced busterhawk gleylancer (korean translation).bin", 0x200000, 0x570ab2f6, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_gleylanck)
+STD_ROM_FN(md_gleylanck)
+
+struct BurnDriver BurnDrvmd_gleylanck = {
+	"md_gleylanck", "md_gleylanc", NULL, NULL, "2013",
+	"GleyLancer (Hack, Korean)\0", NULL, "NCS", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_gleylanckRomInfo, md_gleylanckRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Alisia Dragoon (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/216/
+static struct BurnRomInfo md_alisiadkRomDesc[] = {
+	{ "alisia dragoon (korean translation).bin", 0x180000, 0x8221762d, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_alisiadk)
+STD_ROM_FN(md_alisiadk)
+
+struct BurnDriver BurnDrvmd_alisiadk = {
+	"md_alisiadk", "md_alisiad", NULL, NULL, "2013",
+	"Alisia Dragoon (Hack, Korean)\0", NULL, "Game Arts", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_alisiadkRomInfo, md_alisiadkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Contra - The Hard Corps (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/223/
+static struct BurnRomInfo md_contrakRomDesc[] = {
+	{ "contra - the hard corps (korean translation).bin", 0x300000, 0xa634974f, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_contrak)
+STD_ROM_FN(md_contrak)
+
+struct BurnDriver BurnDrvmd_contrak = {
+	"md_contrak", "md_contra", NULL, NULL, "2013",
+	"Contra - The Hard Corps (Hack, Korean)\0", NULL, "Konami", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_RUNGUN, 0,
+	MegadriveGetZipName, md_contrakRomInfo, md_contrakRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// El Viento (Hack, Korean)
+// Source : http://nsm53p.tistory.com/366
+static struct BurnRomInfo md_elvientokRomDesc[] = {
+	{ "el viento (korean translation).bin", 0x100000, 0x5326ba55, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_elvientok)
+STD_ROM_FN(md_elvientok)
+
+struct BurnDriver BurnDrvmd_elvientok = {
+	"md_elvientok", "md_elviento", NULL, NULL, "2009",
+	"El Viento (Hack, Korean)\0", NULL, "Wolf Team", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_elvientokRomInfo, md_elvientokRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Elemental Master (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/218/
+static struct BurnRomInfo md_elemastkRomDesc[] = {
+	{ "elemental master (korean translation).bin", 0x100000, 0x777327a0, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_elemastk)
+STD_ROM_FN(md_elemastk)
+
+struct BurnDriver BurnDrvmd_elemastk = {
+	"md_elemastk", "md_elemast", NULL, NULL, "2013",
+	"Elemental Master (Hack, Korean)\0", NULL, "Technosoft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_elemastkRomInfo, md_elemastkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Exile - Toki no Hazama e (Hack, Korean)
+// Source : https://blog.naver.com/kkitty5425/221216185135
+static struct BurnRomInfo md_exilekRomDesc[] = {
+	{ "exile - toki no hazama e (korean translation).bin", 0x100000, 0xc00d63f2, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_exilek)
+STD_ROM_FN(md_exilek)
+
+struct BurnDriver BurnDrvmd_exilek = {
+	"md_exilek", "md_exile", NULL, NULL, "2018",
+	"Exile - Toki no Hazama e (Hack, Korean)\0", NULL, "Riot", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_exilekRomInfo, md_exilekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Gunstar Heroes (Hack, Korean)
+// Source : http://blog.naver.com/passion_pay/221071290170
+static struct BurnRomInfo md_gunstarkRomDesc[] = {
+	{ "gunstar heroes (korean translation).bin", 0x200000, 0x558b7747, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_gunstark)
+STD_ROM_FN(md_gunstark)
+
+struct BurnDriver BurnDrvmd_gunstark = {
+	"md_gunstark", "md_gunstar", NULL, NULL, "2017",
+	"Gunstar Heroes (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_RUNGUN, 0,
+	MegadriveGetZipName, md_gunstarkRomInfo, md_gunstarkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)
+static struct BurnRomInfo md_ddanpeikRomDesc[] = {
+	{ "honoo no toukyuuji - dodge danpei (korean translation).bin", 0x080000, 0xc80ac1aa, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_ddanpeik)
+STD_ROM_FN(md_ddanpeik)
+
+struct BurnDriver BurnDrvmd_ddanpeik = {
+	"md_ddanpeik", "md_ddanpei", NULL, NULL, "1992",
+	"Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_ddanpeikRomInfo, md_ddanpeikRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Landstalker - Koutei no Zaihou (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/205/
+static struct BurnRomInfo md_landstlkkRomDesc[] = {
+	{ "landstalker - koutei no zaihou (korean translation).bin", 0x260000, 0xe6540237, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_landstlkk)
+STD_ROM_FN(md_landstlkk)
+
+struct BurnDriver BurnDrvmd_landstlkk = {
+	"md_landstlkk", "md_landstlk", NULL, NULL, "2013",
+	"Landstalker - Koutei no Zaihou (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM | HARDWARE_SEGA_MEGADRIVE_SRAM_10000, GBF_MISC, 0,
+	MegadriveGetZipName, md_landstlkkRomInfo, md_landstlkkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Mugen Senshi Valis (Hack, Korean)
+// Source : http://nsm53p.tistory.com/220
+static struct BurnRomInfo md_valiskRomDesc[] = {
+	{ "mugen senshi valis (korean translation).bin", 0x100000, 0x3c1c1e94, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_valisk)
+STD_ROM_FN(md_valisk)
+
+struct BurnDriver BurnDrvmd_valisk = {
+	"md_valisk", "md_valis", NULL, NULL, "2009",
+	"Mugen Senshi Valis (Hack, Korean)\0", NULL, "Riot", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_valiskRomInfo, md_valiskRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)
+// Source : http://nsm53p.tistory.com/319
+static struct BurnRomInfo md_mushakRomDesc[] = {
+	{ "musha aleste - full metal fighter ellinor (korean translation).bin", 0x080000, 0xa0656a48, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_mushak)
+STD_ROM_FN(md_mushak)
+
+struct BurnDriver BurnDrvmd_mushak = {
+	"md_mushak", "md_musha", NULL, NULL, "2017",
+	"Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)\0", NULL, "Toaplan", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_mushakRomInfo, md_mushakRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Phantasy Star - Sennenki no Owari ni (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/222/
+static struct BurnRomInfo md_pstar4kRomDesc[] = {
+	{ "phantasy star - sennenki no owari ni (korean translation).bin", 0x400000, 0x360e046a, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_pstar4k)
+STD_ROM_FN(md_pstar4k)
+
+struct BurnDriver BurnDrvmd_pstar4k = {
+	"md_pstar4k", "md_pstar4", NULL, NULL, "2014",
+	"Phantasy Star - Sennenki no Owari ni (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_pstar4kRomInfo, md_pstar4kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/221/
+static struct BurnRomInfo md_pstar2kRomDesc[] = {
+	{ "phantasy star ii (korean translation).bin", 0x180000, 0x49ca9651, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_pstar2k)
+STD_ROM_FN(md_pstar2k)
+
+struct BurnDriver BurnDrvmd_pstar2k = {
+	"md_pstar2k", "md_pstar2", NULL, NULL, "2013",
+	"Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_pstar2kRomInfo, md_pstar2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// SD Valis (Hack, Korean)
+// Source : http://nsm53p.tistory.com/347
+static struct BurnRomInfo md_sdvaliskRomDesc[] = {
+	{ "sd valis (korean translation).bin", 0x080000, 0x85a3c219, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_sdvalisk)
+STD_ROM_FN(md_sdvalisk)
+
+struct BurnDriver BurnDrvmd_sdvalisk = {
+	"md_sdvalisk", "md_sydvalis", NULL, NULL, "2009",
+	"SD Valis (Hack, Korean)\0", NULL, "Laser Soft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_sdvaliskRomInfo, md_sdvaliskRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining and the Darkness (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/210/
+static struct BurnRomInfo md_shindarkkRomDesc[] = {
+	{ "shining and the darkness (korean translation).bin", 0x200000, 0xb7194909, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shindarkk)
+STD_ROM_FN(md_shindarkk)
+
+struct BurnDriver BurnDrvmd_shindarkk = {
+	"md_shindarkk", "md_shindark", NULL, NULL, "2013",
+	"Shining and the Darkness (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shindarkkRomInfo, md_shindarkkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining Force - Kamigami no Isan (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/211/
+static struct BurnRomInfo md_shinfrcekRomDesc[] = {
+	{ "shining force - kamigami no isan (korean translation).bin", 0x200000, 0xf8822813, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shinfrcek)
+STD_ROM_FN(md_shinfrcek)
+
+struct BurnDriver BurnDrvmd_shinfrcek = {
+	"md_shinfrcek", "md_shinfrce", NULL, NULL, "2013",
+	"Shining Force - Kamigami no Isan (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shinfrcekRomInfo, md_shinfrcekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining Force II - Koe no Fuuin (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/212/
+static struct BurnRomInfo md_shinfrc2kRomDesc[] = {
+	{ "shining force ii - koe no fuuin (korean translation).bin", 0x300000, 0x8ece9f4f, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shinfrc2k)
+STD_ROM_FN(md_shinfrc2k)
+
+struct BurnDriver BurnDrvmd_shinfrc2k = {
+	"md_shinfrc2k", "md_shinfrc2", NULL, NULL, "2013",
+	"Shining Force II - Koe no Fuuin (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shinfrc2kRomInfo, md_shinfrc2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Story of Thor - Hikari o Tsugumono (Hack, Korean)
+// Source : http://chocotimes.tistory.com/25
+static struct BurnRomInfo md_thork2RomDesc[] = {
+	{ "story of thor, the - hikari o tsugumono (korean translation).bin", 0x300000, 0x8d22f9a7, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_thork2)
+STD_ROM_FN(md_thork2)
+
+struct BurnDriver BurnDrvmd_thork2 = {
+	"md_thork2", "md_thor", NULL, NULL, "2015",
+	"The Story of Thor - Hikari o Tsugumono (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_thork2RomInfo, md_thork2RomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Super Fantasy Zone (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/214/
+static struct BurnRomInfo md_sfzonekRomDesc[] = {
+	{ "super fantasy zone (korean translation).bin", 0x100000, 0x50d17067, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_sfzonek)
+STD_ROM_FN(md_sfzonek)
+
+struct BurnDriver BurnDrvmd_sfzonek = {
+	"md_sfzonek", "md_sfzone", NULL, NULL, "2013",
+	"Super Fantasy Zone (Hack, Korean)\0", NULL, "Sunsoft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_sfzonekRomInfo, md_sfzonekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Super Shinobi II (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/213/
+static struct BurnRomInfo md_supshin2kRomDesc[] = {
+	{ "super shinobi ii, the (korean translation).bin", 0x180000, 0x59286027, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_supshin2k)
+STD_ROM_FN(md_supshin2k)
+
+struct BurnDriver BurnDrvmd_supshin2k = {
+	"md_supshin2k", "md_shinobi3", NULL, NULL, "2013",
+	"The Super Shinobi II (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_SCRFIGHT, 0,
+	MegadriveGetZipName, md_supshin2kRomInfo, md_supshin2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Twinkle Tale (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/220/
+static struct BurnRomInfo md_twinkletkRomDesc[] = {
+	{ "twinkle tale (korean translation).bin", 0x100000, 0x7a388959, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_twinkletk)
+STD_ROM_FN(md_twinkletk)
+
+struct BurnDriver BurnDrvmd_twinkletk = {
+	"md_twinkletk", "md_twinklet", NULL, NULL, "2013",
+	"Twinkle Tale (Hack, Korean)\0", NULL, "Toyo Records", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_twinkletkRomInfo, md_twinkletkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Valis III (Hack, Korean)
+// Source : http://nsm53p.tistory.com/27
+static struct BurnRomInfo md_valis3kRomDesc[] = {
+	{ "valis iii (korean translation).bin", 0x100000, 0x47d4050a, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_valis3k)
+STD_ROM_FN(md_valis3k)
+
+struct BurnDriver BurnDrvmd_valis3k = {
+	"md_valis3k", "md_valis3", NULL, NULL, "2008",
+	"Valis III (Hack, Korean)\0", NULL, "Reno", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_valis3kRomInfo, md_valis3kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Immortal (Hack, Korean)
+// Source : https://cafe.naver.com/hansicgu/16876
+static struct BurnRomInfo md_immortalkRomDesc[] = {
+	{ "immortal, the (korean translation).bin", 0x200000, 0xae94c9f1, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_immortalk)
+STD_ROM_FN(md_immortalk)
+
+struct BurnDriver BurnDrvmd_immortalk = {
+	"md_immortalk", "md_immortal", NULL, NULL, "2011",
+	"The Immortal (Hack, Korean)\0", NULL, "Electronic Arts", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_immortalkRomInfo, md_immortalkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Ys - Wanderers from Ys (Hack, Korean)
+// Source : http://nsm53p.tistory.com/591
+static struct BurnRomInfo md_ys3kRomDesc[] = {
+	{ "ys - wanderers from ys (korean translation).bin", 0x100000, 0xf31b6a61, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_ys3k)
+STD_ROM_FN(md_ys3k)
+
+struct BurnDriver BurnDrvmd_ys3k = {
+	"md_ys3k", "md_ys3", NULL, NULL, "2013",
+	"Ys - Wanderers from Ys (Hack, Korean)\0", NULL, "Reno", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_ys3kRomInfo, md_ys3kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
diff --git a/src/burn/drv/neogeo/d_neogeo.cpp b/src/burn/drv/neogeo/d_neogeo.cpp
index b83ba063d..ebbdd77ca 100644
--- a/src/burn/drv/neogeo/d_neogeo.cpp
+++ b/src/burn/drv/neogeo/d_neogeo.cpp
@@ -110,7 +110,7 @@ static struct BurnDIPInfo ms5pcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -164,7 +164,7 @@ static struct BurnDIPInfo svcpcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -218,7 +218,7 @@ static struct BurnDIPInfo kf2k3pcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -554,7 +554,7 @@ static struct BurnDIPInfo neodefaultDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -586,7 +586,7 @@ static struct BurnDIPInfo neounidefaultDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x8f, NULL},
+	{0x02,	0xFF, 0xFF,	0x93, NULL},
 	{0x03,	0xFF, 0xFF,	0x02, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -602,7 +602,7 @@ static struct BurnDIPInfo neopaddleDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 };
 
@@ -614,7 +614,7 @@ static struct BurnDIPInfo neodualDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -630,7 +630,7 @@ static struct BurnDIPInfo neomahjongDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Mahjong control panel"},
@@ -777,7 +777,7 @@ static struct BurnDIPInfo neoKOFDIPList[] = {
 
 static struct BurnDIPInfo neoFakeDIPList[] = {
 	// default
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// Fake DIPs
 	// BIOS
@@ -834,7 +834,7 @@ static struct BurnDIPInfo neoCDDIPList[] = {
 	{0x16,	0xF0, 0x00,	0x00, NULL},
 
 	// Defaults
-	{0x00,	0xFF, 0xFF,	0x02, NULL},
+	{0x00,	0xFF, 0xFF,	0x00, NULL},
 
 	// Region
 	{0,		0xFE, 0,	4,	  "Region"},
@@ -864,7 +864,7 @@ static struct BurnDIPInfo neotrackballDIPList[] = {
 	{0x0D,	0xFF, 0xFF,	0x00, NULL},
 	{0x0E,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x0F,	0xFF, 0xFF,	0x86, NULL},
+	{0x0F,	0xFF, 0xFF,	0x8d, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -10291,7 +10291,7 @@ static INT32 samsh5spInit()
 struct BurnDriver BurnDrvsamsh5sp = {
 	"samsh5sp", NULL, "neogeo", NULL, "2004",
 	"Samurai Shodown V Special / Samurai Spirits Zero Special (NGM-2720)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
-	L"Samurai Shodown V Special\0\u30B5\u30E0\u30E9\u30A4\u30B9\u30D4\u30EA\u30C3\u30C4\u96F6 Special  (NGM-2720)\0", NULL, NULL, NULL,
+	L"Samurai Shodown V Special\0\u30B5\u30E0\u30E9\u30A4\u30B9\u30D4\u30EA\u30C3\u30C4\u96F6 Special (NGM-2720)\0", NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_CMC50 | HARDWARE_SNK_ENCRYPTED_M1, GBF_VSFIGHT, FBF_SAMSHO,
 	NULL, samsh5spRomInfo, samsh5spRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
 	samsh5spInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
@@ -14748,7 +14748,7 @@ static INT32 DoubledrspExit()
     return NeoExit();
 }
 
-struct BurnDriverD BurnDrvdoubledrsp = {
+struct BurnDriver BurnDrvdoubledrsp = {
 	"doubledrsp", "doubledr", "neogeo", NULL, "2017",
 	"Double Dragon (Special 2017, hack)\0", NULL, "hack", "Neo Geo MVS",
 	NULL, NULL, NULL, NULL,
@@ -15306,13 +15306,23 @@ static struct BurnRomInfo mslug5wRomDesc[] = {
 STDROMPICKEXT(mslug5w, mslug5w, neogeo)
 STD_ROM_FN(mslug5w)
 
+static INT32 mslug5wInit()
+{
+	nNeoProtectionXor = 0x05;
+	s1945pmode = 1;
+
+	nNeoTextROMSize[nNeoActiveSlot] = 0x20000;
+
+	return NeoInit();
+}
+
 struct BurnDriver BurnDrvMslug5w = {
 	"mslug5w", "mslug5", "neogeo", NULL, "2003",
 	"Metal Slug 5 (New Campaign, 2016-03-10)\0", NULL, "hack, C.B", "Miscellaneous",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_CMC42, GBF_RUNGUN, FBF_MSLUG,
 	NULL, mslug5wRomInfo, mslug5wRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
-	s1945pInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	mslug5wInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
 	0x1000,	304, 224, 4, 3
 };
 
@@ -20444,4 +20454,2887 @@ struct BurnDriver BurnDrvTeot = {
 	NULL, teotRomInfo, teotRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neoaesjapanDIPInfo,
 	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
 	0x1000, 304, 224, 4, 3
-};
\ No newline at end of file
+};
+	
+//============================================================
+// Add Hack Roms
+//============================================================
+
+static INT32 kof99ndInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x20000;
+
+	return NeoInit();
+}
+
+static INT32 mslug3ndInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x80000;
+
+	return NeoInit();
+}
+
+// Fatal Fury - King of Fighters (Hidden Hack)
+
+static struct BurnRomInfo fatfur1hRomDesc[] = {
+	{ "033-p1h.p1",   0x080000, 0xfc051e1d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC534200
+	{ "033-p2.p2",    0x020000, 0xc473af1c, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC531024
+
+	{ "033-s1.s1",    0x020000, 0x3c3bdf8c, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "033-c1.c1",    0x100000, 0x74317e54, 3 | BRF_GRA },           //  3 Sprite data 		/ TC538200
+	{ "033-c2.c2",    0x100000, 0x5bb952f3, 3 | BRF_GRA },           //  4 					/ TC538200
+	{ "033-c3.c3",    0x100000, 0x9b714a7c, 3 | BRF_GRA },           //  5 					/ TC538200
+	{ "033-c4.c4",    0x100000, 0x9397476a, 3 | BRF_GRA },           //  6 					/ TC538200
+
+	{ "033-m1.m1",    0x020000, 0x5be10ffd, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code 		/ TC531001
+
+	{ "033-v1.v1",    0x100000, 0x212fd20d, 5 | BRF_SND },           //  8 Sound data 		/ TC538200
+	{ "033-v2.v2",    0x100000, 0xfa2ae47f, 5 | BRF_SND },           //  9 					/ TC538200
+};
+
+STDROMPICKEXT(fatfur1h, fatfur1h, neogeo)
+STD_ROM_FN(fatfur1h)
+
+struct BurnDriver BurnDrvFatFur1h = {
+	"fatfur1h", "fatfury1", "neogeo", NULL, "1992",
+	"Fatal Fury - King of Fighters (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur1hRomInfo, fatfur1hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Art of Fighting (Boss Hack)
+
+static struct BurnRomInfo aofbRomDesc[] = {
+	{ "044-p1b.p1",   0x080000, 0x202a60d8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "044-s1.s1",    0x020000, 0x89903f39, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "044-c1.c1",    0x200000, 0xddab98a7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "044-c2.c2",    0x200000, 0xd8ccd575, 3 | BRF_GRA },           //  3 
+	{ "044-c3.c3",    0x200000, 0x403e898a, 3 | BRF_GRA },           //  4 
+	{ "044-c4.c4",    0x200000, 0x6235fbaa, 3 | BRF_GRA },           //  5 
+
+	{ "044-m1.m1",    0x020000, 0x0987e4bb, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "044-v2.v2",    0x200000, 0x3ec632ea, 5 | BRF_SND },           //  7 Sound data
+	{ "044-v4.v4",    0x200000, 0x4b0f8e23, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(aofb, aofb, neogeo)
+STD_ROM_FN(aofb)
+
+struct BurnDriver BurnDrvAofb = {
+	"aofb", "aof", "neogeo", NULL, "1992",
+	"Art of Fighting (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, aofbRomInfo, aofbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting (Korean Patch, Boss Hack)
+
+static struct BurnRomInfo aofkRomDesc[] = {
+	{ "044-p1k.p1",   0x080000, 0x4c2e8047, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "044-s1k.s1",   0x020000, 0x6e7c531e, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "044-c1.c1",    0x200000, 0xddab98a7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "044-c2.c2",    0x200000, 0xd8ccd575, 3 | BRF_GRA },           //  3 
+	{ "044-c3.c3",    0x200000, 0x403e898a, 3 | BRF_GRA },           //  4 
+	{ "044-c4.c4",    0x200000, 0x6235fbaa, 3 | BRF_GRA },           //  5 
+
+	{ "044-m1.m1",    0x020000, 0x0987e4bb, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "044-v2.v2",    0x200000, 0x3ec632ea, 5 | BRF_SND },           //  7 Sound data
+	{ "044-v4.v4",    0x200000, 0x4b0f8e23, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(aofk, aofk, neogeo)
+STD_ROM_FN(aofk)
+
+struct BurnDriver BurnDrvAofk = {
+	"aofk", "aof", "neogeo", NULL, "2016",
+	"Art of Fighting (Korean Patch, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, aofkRomInfo, aofkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown (Boss Hack)
+
+static struct BurnRomInfo samshobRomDesc[] = {
+	{ "045-p1b.p1",   0x100000, 0x8e4310a8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC538200
+	{ "045-pg2.sp2",  0x100000, 0x46745b94, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC538200
+
+	{ "045-s1.s1",    0x020000, 0x9142a4d3, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "045-c1.c1",    0x200000, 0x2e5873a4, 3 | BRF_GRA },           //  3 Sprite data 		/ TC5316200
+	{ "045-c2.c2",    0x200000, 0x04febb10, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "045-c3.c3",    0x200000, 0xf3dabd1e, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "045-c4.c4",    0x200000, 0x935c62f0, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "045-c51.c5",   0x100000, 0x81932894, 3 | BRF_GRA },           //  7 					/ TC538200
+	{ "045-c61.c6",   0x100000, 0xbe30612e, 3 | BRF_GRA },           //  8 					/ TC538200
+
+	{ "045-m1.m1",    0x020000, 0x95170640, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code 		/ TC531001
+
+	{ "045-v1.v1",    0x200000, 0x37f78a9b, 5 | BRF_SND },           // 10 Sound data 		/ TC5316200
+	{ "045-v2.v2",    0x200000, 0x568b20cf, 5 | BRF_SND },           // 11 					/ TC5316200
+};
+
+STDROMPICKEXT(samshob, samshob, neogeo)
+STD_ROM_FN(samshob)
+
+struct BurnDriver BurnDrvSamShob = {
+	"samshob", "samsho", "neogeo", NULL, "1993",
+	"Samurai Shodown (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samshobRomInfo, samshobRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Fatal Fury 2 (Hidden Hack)
+
+static struct BurnRomInfo fatfur2hRomDesc[] = {
+	{ "047-p1h.p1",   0x100000, 0xb594b7b3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "047-s1.s1",    0x020000, 0xd7dbbf39, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "047-c1.c1",    0x200000, 0xf72a939e, 3 | BRF_GRA },           //  3 Sprite data
+	{ "047-c2.c2",    0x200000, 0x05119a0d, 3 | BRF_GRA },           //  4 
+	{ "047-c3.c3",    0x200000, 0x01e00738, 3 | BRF_GRA },           //  5 
+	{ "047-c4.c4",    0x200000, 0x9fe27432, 3 | BRF_GRA },           //  6 
+
+	{ "047-m1.m1",    0x020000, 0x820b0ba7, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code
+
+	{ "047-v1.v1",    0x200000, 0xd9d00784, 5 | BRF_SND },           //  8 Sound data
+	{ "047-v2.v2",    0x200000, 0x2c9a4b33, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(fatfur2h, fatfur2h, neogeo)
+STD_ROM_FN(fatfur2h)
+
+struct BurnDriver BurnDrvFatfur2h = {
+	"fatfur2h", "fatfury2", "neogeo", NULL, "1992",
+	"Fatal Fury 2 (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur2hRomInfo, fatfur2hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	fatfury2Init, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// World Heroes (Boss Hack)
+
+static struct BurnRomInfo wh1bRomDesc[] = {
+	{ "053-eprb.p1",  0x080000, 0xa7b49883, 1 | BRF_ESS | BRF_PRG }, //  0 68K code / D27C400
+	{ "053-epr.p2",   0x080000, 0x0e33e8a3, 1 | BRF_ESS | BRF_PRG }, //  1 			/ D27C400
+
+	{ "053-s1.s1",    0x020000, 0x8c2c2d6b, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "053-c1.c1",    0x200000, 0x85eb5bce, 3 | BRF_GRA },           //  3 Sprite data
+	{ "053-c2.c2",    0x200000, 0xec93b048, 3 | BRF_GRA },           //  4 
+	{ "053-c3.c3",    0x100000, 0x0dd64965, 3 | BRF_GRA },           //  5 
+	{ "053-c4.c4",    0x100000, 0x9270d954, 3 | BRF_GRA },           //  6 
+
+	{ "053-m1.m1",    0x020000, 0x1bd9d04b, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code / TC54H1000
+
+	{ "053-v2.v2",    0x200000, 0xa68df485, 5 | BRF_SND },           //  8 Sound data
+	{ "053-v4.v4",    0x100000, 0x7bea8f66, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(wh1b, wh1b, neogeo)
+STD_ROM_FN(wh1b)
+
+struct BurnDriver BurnDrvwh1b = {
+	"wh1b", "wh1", "neogeo", NULL, "1992",
+	"World Heroes (Boss Hack)\0", NULL, "Alpha Denshi Co.", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, wh1bRomInfo, wh1bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '94 (Korean, Boss Hack)
+
+static struct BurnRomInfo kof94krRomDesc[] = {
+	{ "055-p1kr.p1",  0x200000, 0xb251ced4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "055-s1.s1",    0x020000, 0x825976c1, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "055-c1kr.c1",  0x200000, 0xbf987727, 3 | BRF_GRA },           //  2 Sprite data
+	{ "055-c2.c2",    0x200000, 0x15e096a7, 3 | BRF_GRA },           //  3 
+	{ "055-c3.c3",    0x200000, 0x54f66254, 3 | BRF_GRA },           //  4 
+	{ "055-c4.c4",    0x200000, 0x0b01765f, 3 | BRF_GRA },           //  5 
+	{ "055-c5.c5",    0x200000, 0xee759363, 3 | BRF_GRA },           //  6 
+	{ "055-c6.c6",    0x200000, 0x498da52c, 3 | BRF_GRA },           //  7 
+	{ "055-c7.c7",    0x200000, 0x62f66888, 3 | BRF_GRA },           //  8 
+	{ "055-c8.c8",    0x200000, 0xfe0a235d, 3 | BRF_GRA },           //  9 
+
+	{ "055-m1.m1",    0x020000, 0xf6e77cf5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "055-v1.v1",    0x200000, 0x8889596d, 5 | BRF_SND },           // 11 Sound data
+	{ "055-v2.v2",    0x200000, 0x25022b27, 5 | BRF_SND },           // 12 
+	{ "055-v3.v3",    0x200000, 0x83cf32c0, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof94kr, kof94kr, neogeo)
+STD_ROM_FN(kof94kr)
+
+struct BurnDriver BurnDrvKof94kr = {
+	"kof94kr", "kof94", "neogeo", NULL, "2006",
+	"The King of Fighters '94 (Korean, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof94krRomInfo, kof94krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting 2 (Boss Hack)
+
+static struct BurnRomInfo aof2bRomDesc[] = {
+	{ "056-p1b.p1",   0x100000, 0x3af1e484, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "056-s1.s1",    0x020000, 0x8b02638e, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "056-c1.c1",    0x200000, 0x17b9cbd2, 3 | BRF_GRA },           //  2 Sprite data
+	{ "056-c2.c2",    0x200000, 0x5fd76b67, 3 | BRF_GRA },           //  3 
+	{ "056-c3.c3",    0x200000, 0xd2c88768, 3 | BRF_GRA },           //  4 
+	{ "056-c4.c4",    0x200000, 0xdb39b883, 3 | BRF_GRA },           //  5 
+	{ "056-c5.c5",    0x200000, 0xc3074137, 3 | BRF_GRA },           //  6 
+	{ "056-c6.c6",    0x200000, 0x31de68d3, 3 | BRF_GRA },           //  7 
+	{ "056-c7.c7",    0x200000, 0x3f36df57, 3 | BRF_GRA },           //  8 
+	{ "056-c8.c8",    0x200000, 0xe546d7a8, 3 | BRF_GRA },           //  9 
+
+	{ "056-m1.m1",    0x020000, 0xf27e9d52, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "056-v1.v1",    0x200000, 0x4628fde0, 5 | BRF_SND },           // 11 Sound data
+	{ "056-v2.v2",    0x200000, 0xb710e2f2, 5 | BRF_SND },           // 12 
+	{ "056-v3.v3",    0x100000, 0xd168c301, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(aof2b, aof2b, neogeo)
+STD_ROM_FN(aof2b)
+
+struct BurnDriver BurnDrvAof2b = {
+	"aof2b", "aof2", "neogeo", NULL, "1994",
+	"Art of Fighting 2 (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, aof2bRomInfo, aof2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// World Heroes 2 (Boss Hack)
+
+static struct BurnRomInfo wh2bRomDesc[] = {
+	{ "057-p1b.p1",   0x200000, 0x6e6a0077, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC5316200
+
+	{ "057-s1.s1",    0x020000, 0xfcaeb3a4, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "057-c1.c1",    0x200000, 0x21c6bb91, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "057-c2.c2",    0x200000, 0xa3999925, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "057-c3.c3",    0x200000, 0xb725a219, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "057-c4.c4",    0x200000, 0x8d96425e, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "057-c5.c5",    0x200000, 0xb20354af, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "057-c6.c6",    0x200000, 0xb13d1de3, 3 | BRF_GRA },           //  7 					/ TC5316200
+
+	{ "057-m1.m1",    0x020000, 0x8fa3bc77, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code			/ TC531001
+
+	{ "057-v1.v1",    0x200000, 0x8877e301, 5 | BRF_SND },           //  9 Sound data		/ TC5316200
+	{ "057-v2.v2",    0x200000, 0xc1317ff4, 5 | BRF_SND },           // 10 					/ TC5316200
+};
+
+STDROMPICKEXT(wh2b, wh2b, neogeo)
+STD_ROM_FN(wh2b)
+
+struct BurnDriver BurnDrvwh2b = {
+	"wh2b", "wh2", "neogeo", NULL, "1993",
+	"World Heroes 2 (Boss Hack)\0", NULL, "ADK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, wh2bRomInfo, wh2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fatal Fury Special (Hidden Hack)
+
+static struct BurnRomInfo fatfurshRomDesc[] = {
+	{ "058-p1b.p1",   0x100000, 0x8cd18f7f, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC538200
+	{ "058-p2.sp2",   0x080000, 0xd7c71a6b, 1 | BRF_ESS | BRF_PRG }, //  1 					/ mask rom TC534200
+
+	{ "058-s1.s1",    0x020000, 0x2df03197, 2 | BRF_GRA },           //  2 Text layer tiles / mask rom TC531000
+
+	{ "058-c1.c1",    0x200000, 0x044ab13c, 3 | BRF_GRA },           //  3 Sprite data		/ mask rom TC5316200
+	{ "058-c2.c2",    0x200000, 0x11e6bf96, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "058-c3.c3",    0x200000, 0x6f7938d5, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "058-c4.c4",    0x200000, 0x4ad066ff, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "058-c5.c5",    0x200000, 0x49c5e0bf, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "058-c6.c6",    0x200000, 0x8ff1f43d, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+
+	{ "058-m1.m1",    0x020000, 0xccc5186e, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code			/ mask rom TC531001
+
+	{ "058-v1.v1",    0x200000, 0x55d7ce84, 5 | BRF_SND },           // 10 Sound data		/ mask rom TC5316200
+	{ "058-v2.v2",    0x200000, 0xee080b10, 5 | BRF_SND },           // 11 					/ mask rom TC5316200					
+	{ "058-v3.v3",    0x100000, 0xf9eb3d4a, 5 | BRF_SND },           // 12 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(fatfursh, fatfursh, neogeo)
+STD_ROM_FN(fatfursh)
+
+struct BurnDriver BurnDrvFatfursh = {
+	"fatfursh", "fatfursp", "neogeo", NULL, "1993",
+	"Fatal Fury Special (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfurshRomInfo, fatfurshRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Savage Reign (Boss Hack)
+
+static struct BurnRomInfo savagerbRomDesc[] = {
+	{ "059-p1b.p1",   0x200000, 0xe892979a, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "059-s1.s1",    0x020000, 0xe08978ca, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "059-c1.c1",    0x200000, 0x763ba611, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "059-c2.c2",    0x200000, 0xe05e8ca6, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "059-c3.c3",    0x200000, 0x3e4eba4b, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "059-c4.c4",    0x200000, 0x3c2a3808, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "059-c5.c5",    0x200000, 0x59013f9e, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "059-c6.c6",    0x200000, 0x1c8d5def, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "059-c7.c7",    0x200000, 0xc88f7035, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "059-c8.c8",    0x200000, 0x484ce3ba, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "059-m1.m1",    0x020000, 0x29992eba, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ TC531001
+
+	{ "059-v1.v1",    0x200000, 0x530c50fd, 5 | BRF_SND },           // 11 Sound data		/ TC5316200
+	{ "059-v2.v2",    0x200000, 0xeb6f1cdb, 5 | BRF_SND },           // 12 					/ TC5316200
+	{ "059-v3.v3",    0x200000, 0x7038c2f9, 5 | BRF_SND },           // 13 					/ TC5316200
+};
+
+STDROMPICKEXT(savagerb, savagerb, neogeo)
+STD_ROM_FN(savagerb)
+
+struct BurnDriver BurnDrvsavagerb = {
+	"savagerb", "savagere", "neogeo", NULL, "1995",
+	"Savage Reign (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, savagerbRomInfo, savagerbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fight Fever (Boss Hack)
+
+static struct BurnRomInfo fightfebRomDesc[] = {
+	{ "060-p1b.p1",   0x100000, 0x0b9e106d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+
+	{ "060-s1.s1",    0x020000, 0x7f012104, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "060-c1.c1",    0x200000, 0x8908fff9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "060-c2.c2",    0x200000, 0xc6649492, 3 | BRF_GRA },           //  3 
+	{ "060-c3.c3",    0x200000, 0x0956b437, 3 | BRF_GRA },           //  4 
+	{ "060-c4.c4",    0x200000, 0x026f3b62, 3 | BRF_GRA },           //  5 
+
+	{ "060-m1.m1",    0x020000, 0x0b7c4e65, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "060-v1.v1",    0x200000, 0xf417c215, 5 | BRF_SND },           //  7 Sound data
+	{ "060-v2.v2",    0x100000, 0xefcff7cf, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(fightfeb, fightfeb, neogeo)
+STD_ROM_FN(fightfeb)
+
+struct BurnDriver BurnDrvfightfeb = {
+	"fightfeb", "fightfev", "neogeo", NULL, "1994",
+	"Fight Fever (Boss Hack)\0", NULL, "Viccom", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, fightfebRomInfo, fightfebRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown II (Boss Hack)
+
+static struct BurnRomInfo samsho2bRomDesc[] = {
+	{ "063-p1b.p1",   0x200000, 0x7ab45a4c, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "063-s1.s1",    0x020000, 0x64a5cd66, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "063-c1.c1",    0x200000, 0x86cd307c, 3 | BRF_GRA },           //  2 Sprite data
+	{ "063-c2.c2",    0x200000, 0xcdfcc4ca, 3 | BRF_GRA },           //  3
+	{ "063-c3.c3",    0x200000, 0x7a63ccc7, 3 | BRF_GRA },           //  4
+	{ "063-c4.c4",    0x200000, 0x751025ce, 3 | BRF_GRA },           //  5
+	{ "063-c5.c5",    0x200000, 0x20d3a475, 3 | BRF_GRA },           //  6
+	{ "063-c6.c6",    0x200000, 0xae4c0a88, 3 | BRF_GRA },           //  7
+	{ "063-c7.c7",    0x200000, 0x2df3cbcf, 3 | BRF_GRA },           //  8
+	{ "063-c8.c8",    0x200000, 0x1ffc6dfa, 3 | BRF_GRA },           //  9
+
+	{ "063-m1.m1",    0x020000, 0x56675098, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "063-v1.v1",    0x200000, 0x37703f91, 5 | BRF_SND },           // 11 Sound data
+	{ "063-v2.v2",    0x200000, 0x0142bde8, 5 | BRF_SND },           // 12
+	{ "063-v3.v3",    0x200000, 0xd07fa5ca, 5 | BRF_SND },           // 13
+	{ "063-v4.v4",    0x100000, 0x24aab4bb, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(samsho2b, samsho2b, neogeo)
+STD_ROM_FN(samsho2b)
+
+struct BurnDriver BurnDrvSamSho2b = {
+	"samsho2b", "samsho2", "neogeo", NULL, "1994",
+	"Samurai Shodown II (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho2bRomInfo, samsho2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// World Heroes 2 Jet (Boss Hack)
+
+static struct BurnRomInfo wh2jbRomDesc[] = {
+	{ "064-p1b.p1",   0x200000, 0x14d5f4af, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "064-s1.s1",    0x020000, 0x2a03998a, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "064-c1.c1",    0x200000, 0x2ec87cea, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "064-c2.c2",    0x200000, 0x526b81ab, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "064-c3.c3",    0x200000, 0x436d1b31, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "064-c4.c4",    0x200000, 0xf9c8dd26, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "064-c5.c5",    0x200000, 0x8e34a9f4, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "064-c6.c6",    0x200000, 0xa43e4766, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "064-c7.c7",    0x200000, 0x59d97215, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "064-c8.c8",    0x200000, 0xfc092367, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "064-m1.m1",    0x020000, 0xd2eec9d3, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code			/ TC531001
+
+	{ "064-v1.v1",    0x200000, 0xaa277109, 5 | BRF_SND },           //  7 Sound data		/ TC5316200
+	{ "064-v2.v2",    0x200000, 0xb6527edd, 5 | BRF_SND },           //  8 					/ TC5316200
+};
+
+STDROMPICKEXT(wh2jb, wh2jb, neogeo)
+STD_ROM_FN(wh2jb)
+
+struct BurnDriver BurnDrvwh2jb = {
+	"wh2jb", "wh2j", "neogeo", NULL, "1994",
+	"World Heroes 2 Jet (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, wh2jbRomInfo, wh2jbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Windjammers / Flying Power Disc (Korean)
+
+static struct BurnRomInfo wjammerkRomDesc[] = {
+	{ "065-p1.p1",    0x100000, 0x6692c140, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ mask rom TC538200
+
+	{ "065-s1.s1",    0x020000, 0x074b5723, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "065-c1k.c1",   0x100000, 0xebded27e, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC538200
+	{ "065-c2k.c2",   0x100000, 0xf5483767, 3 | BRF_GRA },           //  3 					/ mask rom TC538200
+	{ "065-c3.c3",    0x100000, 0x40986386, 3 | BRF_GRA },           //  4 					/ mask rom TC538200
+	{ "065-c4.c4",    0x100000, 0x715e15ff, 3 | BRF_GRA },           //  5 					/ mask rom TC538200
+
+	{ "065-m1.m1",    0x020000, 0x52c23cfc, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code			/ mask rom TC531001
+
+	{ "065-v1.v1",    0x100000, 0xce8b3698, 5 | BRF_SND },           //  7 Sound data		/ mask rom TC538200
+	{ "065-v2.v2",    0x100000, 0x659f9b96, 5 | BRF_SND },           //  8 					/ mask rom TC538200
+	{ "065-v3.v3",    0x100000, 0x39f73061, 5 | BRF_SND },           //  9 					/ mask rom TC538200
+	{ "065-v4.v4",    0x100000, 0x5dee7963, 5 | BRF_SND },           // 10 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(wjammerk, wjammerk, neogeo)
+STD_ROM_FN(wjammerk)
+
+struct BurnDriver BurnDrvwjammerk = {
+	"wjammerk", "wjammers", "neogeo", NULL, "2005",
+	"Windjammers / Flying Power Disc (Korean)\0", NULL, "Data East Corporation", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SPORTSMISC, 0,
+	NULL, wjammerkRomInfo, wjammerkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)
+
+static struct BurnRomInfo karnovrbRomDesc[] = {
+	{ "066-p1h.p1",   0x100000, 0x7b776bb5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "066-s1.s1",    0x020000, 0xbae5d5e5, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "066-c1.c1",    0x200000, 0x09dfe061, 3 | BRF_GRA },           //  2 Sprite data
+	{ "066-c2.c2",    0x200000, 0xe0f6682a, 3 | BRF_GRA },           //  3 
+	{ "066-c3.c3",    0x200000, 0xa673b4f7, 3 | BRF_GRA },           //  4 
+	{ "066-c4.c4",    0x200000, 0xcb3dc5f4, 3 | BRF_GRA },           //  5 
+	{ "066-c5.c5",    0x200000, 0x9a28785d, 3 | BRF_GRA },           //  6 
+	{ "066-c6.c6",    0x200000, 0xc15c01ed, 3 | BRF_GRA },           //  7 
+
+	{ "066-m1.m1",    0x020000, 0x030beae4, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "066-v1.v1",    0x200000, 0x0b7ea37a, 5 | BRF_SND },           //  9 Sound data
+};
+
+STDROMPICKEXT(karnovrb, karnovrb, neogeo)
+STD_ROM_FN(karnovrb)
+
+struct BurnDriver BurnDrvkarnovrb = {
+	"karnovrb", "karnovr", "neogeo", NULL, "1994",
+	"Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)\0", NULL, "Data East Corporation", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, karnovrbRomInfo, karnovrbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fatal Fury 3 - Road to the Final Victory (Boss Hack)
+
+static struct BurnRomInfo fatfur3bRomDesc[] = {
+	{ "069-p1b.p1",   0x100000, 0xb8362f59, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "069-sp2.sp2",  0x200000, 0xdbe963ed, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "069-s1.s1",    0x020000, 0x0b33a800, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "069-c1.c1",    0x400000, 0xe302f93c, 3 | BRF_GRA },           //  3 Sprite data
+	{ "069-c2.c2",    0x400000, 0x1053a455, 3 | BRF_GRA },           //  4 
+	{ "069-c3.c3",    0x400000, 0x1c0fde2f, 3 | BRF_GRA },           //  5 
+	{ "069-c4.c4",    0x400000, 0xa25fc3d0, 3 | BRF_GRA },           //  6 
+	{ "069-c5.c5",    0x200000, 0xb3ec6fa6, 3 | BRF_GRA },           //  7 
+	{ "069-c6.c6",    0x200000, 0x69210441, 3 | BRF_GRA },           //  8 
+
+	{ "069-m1.m1",    0x020000, 0xfce72926, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "069-v1.v1",    0x400000, 0x2bdbd4db, 5 | BRF_SND },           // 10 Sound data
+	{ "069-v2.v2",    0x400000, 0xa698a487, 5 | BRF_SND },           // 11 
+	{ "069-v3.v3",    0x200000, 0x581c5304, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(fatfur3b, fatfur3b, neogeo)
+STD_ROM_FN(fatfur3b)
+
+struct BurnDriver BurnDrvFatfur3b = {
+	"fatfur3b", "fatfury3", "neogeo", NULL, "1995",
+	"Fatal Fury 3 - Road to the Final Victory (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur3bRomInfo, fatfur3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Zupapa! (Fully Decrypted)
+
+static struct BurnRomInfo zupapandRomDesc[] = {
+	{ "070-p1.p1",    0x100000, 0x5a96203e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "070-c1d.c1",   0x800000, 0x65d73348, 3 | BRF_GRA },           //  1 Sprite data
+	{ "070-c2d.c2",   0x800000, 0xc498708f, 3 | BRF_GRA },           //  2 
+
+	{ "070-epr.m1",   0x020000, 0x5a3b3191, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "070-v1.v1",    0x200000, 0xd3a7e1ff, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(zupapand, zupapand, neogeo)
+STD_ROM_FN(zupapand)
+
+struct BurnDriver BurnDrvZupapand = {
+	"zupapand", "zupapa", "neogeo", NULL, "2001",
+	"Zupapa! (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, zupapandRomInfo, zupapandRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Galaxy Fight - Universal Warriors (Hidden Hack)
+
+static struct BurnRomInfo galaxyfhRomDesc[] = {
+	{ "078-p1h.p1",   0x200000, 0x7fede043, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC5316200
+
+	{ "078-s1.s1",    0x020000, 0x72f8923e, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "078-c1.c1",    0x200000, 0xc890c7c0, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC5316200
+	{ "078-c2.c2",    0x200000, 0xb6d25419, 3 | BRF_GRA },           //  3 					/ mask rom TC5316200
+	{ "078-c3.c3",    0x200000, 0x9d87e761, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "078-c4.c4",    0x200000, 0x765d7cb8, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "078-c5.c5",    0x200000, 0xe6b77e6a, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "078-c6.c6",    0x200000, 0xd779a181, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "078-c7.c7",    0x100000, 0x4f27d580, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+	{ "078-c8.c8",    0x100000, 0x0a7cc0d8, 3 | BRF_GRA },           //  9 					/ mask rom TC5316200
+
+	{ "078-m1.m1",    0x020000, 0x8e9e3b10, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ mask rom TC531001
+
+	{ "078-v1.v1",    0x200000, 0xe3b735ac, 5 | BRF_SND },           // 11 Sound data		/ mask rom TC5316200
+	{ "078-v2.v2",    0x200000, 0x6a8e78c2, 5 | BRF_SND },           // 12 					/ mask rom TC5316200
+	{ "078-v3.v3",    0x100000, 0x70bca656, 5 | BRF_SND },           // 13 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(galaxyfh, galaxyfh, neogeo)
+STD_ROM_FN(galaxyfh)
+
+struct BurnDriver BurnDrvgalaxyfh = {
+	"galaxyfh", "galaxyfg", "neogeo", NULL, "1995",
+	"Galaxy Fight - Universal Warriors (Hidden Hack)\0", NULL, "Sunsoft", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, galaxyfhRomInfo, galaxyfhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '95 (Korean, NeoGeo CD Hack)
+
+static struct BurnRomInfo kof95krRomDesc[] = {
+	{ "084-p1kr.p1",  0x200000, 0x162a1405, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "084-s1kr.s1",  0x020000, 0x0d07a5ab, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "084-c1kr.c1",  0x400000, 0x4bb4eb90, 3 | BRF_GRA },           //  2 Sprite data
+	{ "084-c2kr.c2",  0x400000, 0x7e94c968, 3 | BRF_GRA },           //  3 
+	{ "084-c3.c3",    0x400000, 0xa4e65d1b, 3 | BRF_GRA },           //  4
+	{ "084-c4.c4",    0x400000, 0xc1ace468, 3 | BRF_GRA },           //  5 
+	{ "084-c5.c5",    0x200000, 0x8a2c1edc, 3 | BRF_GRA },           //  6 
+	{ "084-c6.c6",    0x200000, 0xf593ac35, 3 | BRF_GRA },           //  7 
+	{ "084-c7.c7",    0x100000, 0x9904025f, 3 | BRF_GRA },           //  8 
+	{ "084-c8.c8",    0x100000, 0x78eb0f9b, 3 | BRF_GRA },           //  9 
+
+	{ "084-m1.m1",    0x020000, 0x6f2d7429, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "084-v1.v1",    0x400000, 0x84861b56, 5 | BRF_SND },           // 11 Sound data
+	{ "084-v2.v2",    0x200000, 0xb38a2803, 5 | BRF_SND },           // 12 
+	{ "084-v3.v3",    0x100000, 0xd683a338, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof95kr, kof95kr, neogeo)
+STD_ROM_FN(kof95kr)
+
+struct BurnDriver BurnDrvKof95kr = {
+	"kof95kr", "kof95", "neogeo", NULL, "2005",
+	"The King of Fighters '95 (Korean, NeoGeo CD Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof95krRomInfo, kof95krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown III (Boss Hack)
+
+static struct BurnRomInfo samsho3bRomDesc[] = {
+	{ "087-eprb.ep1", 0x080000, 0x6aca07b5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ M27C4002
+	{ "087-epr.ep2",  0x080000, 0x256f5302, 1 | BRF_ESS | BRF_PRG }, //  1 					/ M27C4002
+	{ "087-epr.ep3",  0x080000, 0xbf2db5dd, 1 | BRF_ESS | BRF_PRG }, //  2 					/ M27C4002
+	{ "087-epr.ep4",  0x080000, 0x53e60c58, 1 | BRF_ESS | BRF_PRG }, //  3 					/ M27C4002
+
+	{ "087-p5.p5",    0x100000, 0xe86ca4af, 1 | BRF_ESS | BRF_PRG }, //  4 					/ TC538200
+
+	{ "087-s1.s1",    0x020000, 0x74ec7d9f, 2 | BRF_GRA },           //  5 Text layer tiles / TC531000
+
+	{ "087-c1.c1",    0x400000, 0x07a233bc, 3 | BRF_GRA },           //  6 Sprite data		/ TC5332202
+	{ "087-c2.c2",    0x400000, 0x7a413592, 3 | BRF_GRA },           //  7 					/ TC5332202
+	{ "087-c3.c3",    0x400000, 0x8b793796, 3 | BRF_GRA },           //  8 					/ TC533202
+	{ "087-c4.c4",    0x400000, 0x728fbf11, 3 | BRF_GRA },           //  9 					/ TC533202
+	{ "087-c5.c5",    0x400000, 0x172ab180, 3 | BRF_GRA },           // 10 					/ TC5332202
+	{ "087-c6.c6",    0x400000, 0x002ff8f3, 3 | BRF_GRA },           // 11 					/ TC5332202
+	{ "087-c7.c7",    0x100000, 0xae450e3d, 3 | BRF_GRA },           // 12 					/ TC538200
+	{ "087-c8.c8",    0x100000, 0xa9e82717, 3 | BRF_GRA },           // 13 					/ TC538200
+
+	{ "087-m1.m1",    0x020000, 0x8e6440eb, 4 | BRF_ESS | BRF_PRG }, // 14 Z80 code			/ TC531001
+
+	{ "087-v1.v1",    0x400000, 0x84bdd9a0, 5 | BRF_SND },           // 15 Sound data		/ TC5332201
+	{ "087-v2.v2",    0x200000, 0xac0f261a, 5 | BRF_SND },           // 16					/ TC5316200
+};
+
+STDROMPICKEXT(samsho3b, samsho3b, neogeo)
+STD_ROM_FN(samsho3b)
+
+struct BurnDriver BurnDrvSamSho3b = {
+	"samsho3b", "samsho3", "neogeo", NULL, "1995",
+	"Samurai Shodown III (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho3bRomInfo, samsho3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// World Heroes Perfect (Boss Hack)
+
+static struct BurnRomInfo whpbRomDesc[] = {
+	{ "090-p1b.p1",   0x200000, 0x9c1a79d5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC5316200
+
+	{ "090-s1.s1",    0x020000, 0x174a880f, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "090-c1b.c1",   0x400000, 0xa56ebf84, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC5332205
+	{ "090-c2b.c2",   0x400000, 0x6d589146, 3 | BRF_GRA },           //  3 					/ mask rom TC5332205
+	{ "064-c3.c3",    0x200000, 0x436d1b31, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "064-c4.c4",    0x200000, 0xf9c8dd26, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "064-c5.c5",    0x200000, 0x8e34a9f4, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "064-c6.c6",    0x200000, 0xa43e4766, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "064-c7.c7",    0x200000, 0x59d97215, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+	{ "064-c8.c8",    0x200000, 0xfc092367, 3 | BRF_GRA },           //  9 					/ mask rom TC5316200
+
+	{ "090-m1.m1",    0x020000, 0x28065668, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ mask rom TC531001
+
+	{ "090-v1.v1",    0x200000, 0x30cf2709, 5 | BRF_SND },           // 11 Sound data		/ mask rom TC5316200
+	{ "064-v2.v2",    0x200000, 0xb6527edd, 5 | BRF_SND },           // 12 					/ mask rom TC5316200
+	{ "090-v3.v3",    0x200000, 0x1908a7ce, 5 | BRF_SND },           // 13 					/ mask rom TC5316200
+};
+
+STDROMPICKEXT(whpb, whpb, neogeo)
+STD_ROM_FN(whpb)
+
+struct BurnDriver BurnDrvwhpb = {
+	"whpb", "whp", "neogeo", NULL, "1995",
+	"World Heroes Perfect (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, whpbRomInfo, whpbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)
+
+static struct BurnRomInfo kabukikbRomDesc[] = {
+	{ "092-p1b.p1",   0x200000, 0x9e17f576, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "092-s1.s1",    0x020000, 0xa3d68ee2, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "092-c1.c1",    0x400000, 0x2a9fab01, 3 | BRF_GRA },           //  2 Sprite data
+	{ "092-c2.c2",    0x400000, 0x6d2bac02, 3 | BRF_GRA },           //  3 
+	{ "092-c3.c3",    0x400000, 0x5da735d6, 3 | BRF_GRA },           //  4 
+	{ "092-c4.c4",    0x400000, 0xde07f997, 3 | BRF_GRA },           //  5 
+
+	{ "092-m1.m1",    0x020000, 0x91957ef6, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "092-v1.v1",    0x200000, 0x69e90596, 5 | BRF_SND },           //  7 Sound data
+	{ "092-v2.v2",    0x200000, 0x7abdb75d, 5 | BRF_SND },           //  8 
+	{ "092-v3.v3",    0x200000, 0xeccc98d3, 5 | BRF_SND },           //  9 
+	{ "092-v4.v4",    0x100000, 0xa7c9c949, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(kabukikb, kabukikb, neogeo)
+STD_ROM_FN(kabukikb)
+
+struct BurnDriver BurnDrvkabukikb = {
+	"kabukikb", "kabukikl", "neogeo", NULL, "1995",
+	"Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)\0", NULL, "Hudson", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, kabukikbRomInfo, kabukikbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Voltage Fighter - Gowcaizer (Boss Hack)
+
+static struct BurnRomInfo gowcaizbRomDesc[] = {
+	{ "094-p1b.p1",   0x200000, 0xd4f37cc4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "094-s1.s1",    0x020000, 0x2f8748a2, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "094-c1.c1",    0x200000, 0x042f6af5, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "094-c2.c2",    0x200000, 0x0fbcd046, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "094-c3.c3",    0x200000, 0x58bfbaa1, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "094-c4.c4",    0x200000, 0x9451ee73, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "094-c5.c5",    0x200000, 0xff9cf48c, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "094-c6.c6",    0x200000, 0x31bbd918, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "094-c7.c7",    0x200000, 0x2091ec04, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "094-c8.c8",    0x200000, 0xd80dd241, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "094-m1.m1",    0x020000, 0x78c851cb, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ TC531001
+
+	{ "094-v1.v1",    0x200000, 0x6c31223c, 5 | BRF_SND },           // 11 Sound data		/ TC5316200
+	{ "094-v2.v2",    0x200000, 0x8edb776c, 5 | BRF_SND },           // 12 					/ TC5316200
+	{ "094-v3.v3",    0x100000, 0xc63b9285, 5 | BRF_SND },           // 13 					/ TC538200
+};
+
+STDROMPICKEXT(gowcaizb, gowcaizb, neogeo)
+STD_ROM_FN(gowcaizb)
+
+struct BurnDriver BurnDrvgowcaizb = {
+	"gowcaizb", "gowcaizr", "neogeo", NULL, "1995",
+	"Voltage Fighter - Gowcaizer (Boss Hack)\0", NULL, "Technos", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, gowcaizbRomInfo, gowcaizbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting 3 - The Path of the Warrior (Boss Hack)
+
+static struct BurnRomInfo aof3bRomDesc[] = {
+	{ "096-p1b.p1",   0x100000, 0x70969ff1, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC538200
+	{ "096-p2.sp2",   0x200000, 0x4d5a2602, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC5316200
+
+	{ "096-s1.s1",    0x020000, 0xcc7fd344, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "096-c1.c1",    0x400000, 0xf17b8d89, 3 | BRF_GRA },           //  3 Sprite data		/ TC5332205
+	{ "096-c2.c2",    0x400000, 0x3840c508, 3 | BRF_GRA },           //  4 					/ TC5332205
+	{ "096-c3.c3",    0x400000, 0x55f9ee1e, 3 | BRF_GRA },           //  5 					/ TC5332205
+	{ "096-c4.c4",    0x400000, 0x585b7e47, 3 | BRF_GRA },           //  6 					/ TC5332205
+	{ "096-c5.c5",    0x400000, 0xc75a753c, 3 | BRF_GRA },           //  7 					/ TC5332205
+	{ "096-c6.c6",    0x400000, 0x9a9d2f7a, 3 | BRF_GRA },           //  8 					/ TC5332205
+	{ "096-c7.c7",    0x200000, 0x51bd8ab2, 3 | BRF_GRA },           //  9 					/ TC5316200
+	{ "096-c8.c8",    0x200000, 0x9a34f99c, 3 | BRF_GRA },           // 10 					/ TC5316200
+
+	{ "096-m1.m1",    0x020000, 0xcb07b659, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code			/ TC531001
+
+	{ "096-v1.v1",    0x200000, 0xe2c32074, 5 | BRF_SND },           // 12 Sound data		/ TC5316200
+	{ "096-v2.v2",    0x200000, 0xa290eee7, 5 | BRF_SND },           // 13 					/ TC5316200
+	{ "096-v3.v3",    0x200000, 0x199d12ea, 5 | BRF_SND },           // 14 					/ TC5316200
+};
+
+STDROMPICKEXT(aof3b, aof3b, neogeo)
+STD_ROM_FN(aof3b)
+
+struct BurnDriver BurnDrvAof3b = {
+	"aof3b", "aof3", "neogeo", NULL, "1996",
+	"Art of Fighting 3 - The Path of the Warrior (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, aof3bRomInfo, aof3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Puzzle De Pon! (Korean)
+
+static struct BurnRomInfo puzzldpkRomDesc[] = {
+	{ "202-p1.p1",    0x080000, 0x2b61415b, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC534200
+
+	{ "202-s1.s1",    0x020000, 0xcd19264f, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "202-c1k.c1",   0x100000, 0xfc5e5ae7, 3 | BRF_GRA },           //  2 Sprite data		/ TC538200
+	{ "202-c2.c2",    0x100000, 0x42371307, 3 | BRF_GRA },           //  3 					/ TC538200
+
+	{ "202-m1.m1",    0x020000, 0x9c0291ea, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code			/ TC531001
+
+	{ "202-v1.v1",    0x080000, 0xdebeb8fb, 5 | BRF_SND },           //  5 Sound data		/ TC534200
+};
+
+STDROMPICKEXT(puzzldpk, puzzldpk, neogeo)
+STD_ROM_FN(puzzldpk)
+
+struct BurnDriver BurnDrvpuzzldpk = {
+	"puzzldpk", "puzzledp", "neogeo", NULL, "2006",
+	"Puzzle De Pon! (Korean)\0", NULL, "Taito (Visco license)", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, puzzldpkRomInfo, puzzldpkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '96 (Korean, Add Practice Mode)
+
+static struct BurnRomInfo kof96krRomDesc[] = {
+	{ "214-p1kr.p1",  0x100000, 0xcd100253, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "214-p2kr.p2",  0x200000, 0xa7e05e29, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "214-s1.s1",    0x020000, 0x1254cbdb, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "214-c1kr.c1",  0x400000, 0x0524e33e, 3 | BRF_GRA },           //  3 Sprite data
+	{ "214-c2kr.c2",  0x400000, 0xe1374ccc, 3 | BRF_GRA },           //  4 
+	{ "214-c3.c3",    0x400000, 0x64989a65, 3 | BRF_GRA },           //  5 
+	{ "214-c4.c4",    0x400000, 0xafbea515, 3 | BRF_GRA },           //  6 
+	{ "214-c5.c5",    0x400000, 0x2a3bbd26, 3 | BRF_GRA },           //  7 
+	{ "214-c6.c6",    0x400000, 0x44d30dc7, 3 | BRF_GRA },           //  8 
+	{ "214-c7.c7",    0x400000, 0x3687331b, 3 | BRF_GRA },           //  9 
+	{ "214-c8.c8",    0x400000, 0xfa1461ad, 3 | BRF_GRA },           // 10 
+
+	{ "214-m1.m1",    0x020000, 0xdabc427c, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "214-v1.v1",    0x400000, 0x63f7b045, 5 | BRF_SND },           // 12 Sound data
+	{ "214-v2.v2",    0x400000, 0x25929059, 5 | BRF_SND },           // 13 
+	{ "214-v3.v3",    0x200000, 0x92a2257d, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof96kr, kof96kr, neogeo)
+STD_ROM_FN(kof96kr)
+
+struct BurnDriver BurnDrvKof96kr = {
+	"kof96kr", "kof96", "neogeo", NULL, "2006",
+	"The King of Fighters '96 (Korean, Add Practice Mode)\0", NULL, "SNK", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO,  GBF_VSFIGHT, FBF_KOF,
+	NULL, kof96krRomInfo, kof96krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)
+
+static struct BurnRomInfo kizunabRomDesc[] = {
+	{ "216-p1b.p1",   0x200000, 0xa4ccd402, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "216-s1.s1",    0x020000, 0xefdc72d7, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "059-c1.c1",    0x200000, 0x763ba611, 3 | BRF_GRA },           //  2 Sprite data
+	{ "059-c2.c2",    0x200000, 0xe05e8ca6, 3 | BRF_GRA },           //  3 
+	{ "216-c3.c3",    0x400000, 0x665c9f16, 3 | BRF_GRA },           //  4 
+	{ "216-c4.c4",    0x400000, 0x7f5d03db, 3 | BRF_GRA },           //  5 
+	{ "059-c5.c5",    0x200000, 0x59013f9e, 3 | BRF_GRA },           //  6 
+	{ "059-c6.c6",    0x200000, 0x1c8d5def, 3 | BRF_GRA },           //  7 
+	{ "059-c7.c7",    0x200000, 0xc88f7035, 3 | BRF_GRA },           //  8 
+	{ "059-c8.c8",    0x200000, 0x484ce3ba, 3 | BRF_GRA },           //  9 
+
+	{ "216-m1.m1",    0x020000, 0x1b096820, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "059-v1.v1",    0x200000, 0x530c50fd, 5 | BRF_SND },           // 11 Sound data
+	{ "216-v2.v2",    0x200000, 0x03667a8d, 5 | BRF_SND },           // 12 
+	{ "059-v3.v3",    0x200000, 0x7038c2f9, 5 | BRF_SND },           // 13 
+	{ "216-v4.v4",    0x200000, 0x31b99bd6, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kizunab, kizunab, neogeo)
+STD_ROM_FN(kizunab)
+
+struct BurnDriver BurnDrvkizunab = {
+	"kizunab", "kizuna", "neogeo", NULL, "1996",
+	"Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, kizunabRomInfo, kizunabRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Ninja Master's - haoh-ninpo-cho (Boss Hack)
+
+static struct BurnRomInfo ninjamabRomDesc[] = {
+	{ "217-p1b.p1",   0x100000, 0x661d86c9, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "217-p2.sp2",   0x200000, 0x191fca88, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "217-s1.s1",    0x020000, 0x8ff782f0, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "217-c1.c1",    0x400000, 0x5fe97bc4, 3 | BRF_GRA },           //  3 Sprite data
+	{ "217-c2.c2",    0x400000, 0x886e0d66, 3 | BRF_GRA },           //  4 
+	{ "217-c3.c3",    0x400000, 0x59e8525f, 3 | BRF_GRA },           //  5 
+	{ "217-c4.c4",    0x400000, 0x8521add2, 3 | BRF_GRA },           //  6 
+	{ "217-c5.c5",    0x400000, 0xfb1896e5, 3 | BRF_GRA },           //  7 
+	{ "217-c6.c6",    0x400000, 0x1c98c54b, 3 | BRF_GRA },           //  8 
+	{ "217-c7.c7",    0x400000, 0x8b0ede2e, 3 | BRF_GRA },           //  9 
+	{ "217-c8.c8",    0x400000, 0xa085bb61, 3 | BRF_GRA },           // 10 
+
+	{ "217-m1.m1",    0x020000, 0xd00fb2af, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "217-v1.v1",    0x400000, 0x1c34e013, 5 | BRF_SND },           // 12 Sound data
+	{ "217-v2.v2",    0x200000, 0x22f1c681, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(ninjamab, ninjamab, neogeo)
+STD_ROM_FN(ninjamab)
+
+struct BurnDriver BurnDrvninjamab = {
+	"ninjamab", "ninjamas", "neogeo", NULL, "1996",
+	"Ninja Master's - haoh-ninpo-cho (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, ninjamabRomInfo, ninjamabRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Samurai Shodown IV - Amakusa's Revenge (Boss Hack)
+
+static struct BurnRomInfo samsho4bRomDesc[] = {
+	{ "222-p1b.p1",   0x100000, 0xb3cdfc29, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "222-p2.sp2",   0x400000, 0xb023cd8b, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "222-s1.s1",    0x020000, 0x8d3d3bf9, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "222-c1.c1",    0x400000, 0x68f2ed95, 3 | BRF_GRA },           //  3 Sprite data
+	{ "222-c2.c2",    0x400000, 0xa6e9aff0, 3 | BRF_GRA },           //  4 
+	{ "222-c3.c3",    0x400000, 0xc91b40f4, 3 | BRF_GRA },           //  5 
+	{ "222-c4.c4",    0x400000, 0x359510a4, 3 | BRF_GRA },           //  6 
+	{ "222-c5.c5",    0x400000, 0x9cfbb22d, 3 | BRF_GRA },           //  7 
+	{ "222-c6.c6",    0x400000, 0x685efc32, 3 | BRF_GRA },           //  8 
+	{ "222-c7.c7",    0x400000, 0xd0f86f0d, 3 | BRF_GRA },           //  9 
+	{ "222-c8.c8",    0x400000, 0xadfc50e3, 3 | BRF_GRA },           // 10 
+
+	{ "222-m1.m1",    0x020000, 0x7615bc1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "222-v1.v1",    0x400000, 0x7d6ba95f, 5 | BRF_SND },           // 12 Sound data
+	{ "222-v2.v2",    0x400000, 0x6c33bb5d, 5 | BRF_SND },           // 13 
+	{ "222-v3.v3",    0x200000, 0x831ea8c0, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsho4b, samsho4b, neogeo)
+STD_ROM_FN(samsho4b)
+
+struct BurnDriver BurnDrvSamSho4b = {
+	"samsho4b", "samsho4", "neogeo", NULL, "1996",
+	"Samurai Shodown IV - Amakusa's Revenge (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho4bRomInfo, samsho4bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Real Bout Fatal Fury Special (Hidden Hack)
+
+static struct BurnRomInfo rbffspehRomDesc[] = {
+	{ "223-p1b.p1",   0x100000, 0xabf2a6e7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "223-p2.sp2",   0x400000, 0xaddd8f08, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "223-s1.s1",    0x020000, 0x7ecd6e8c, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "223-c1.c1",    0x400000, 0xebab05e2, 3 | BRF_GRA },           //  3 Sprite data
+	{ "223-c2.c2",    0x400000, 0x641868c3, 3 | BRF_GRA },           //  4 
+	{ "223-c3.c3",    0x400000, 0xca00191f, 3 | BRF_GRA },           //  5 
+	{ "223-c4.c4",    0x400000, 0x1f23d860, 3 | BRF_GRA },           //  6 
+	{ "223-c5.c5",    0x400000, 0x321e362c, 3 | BRF_GRA },           //  7 
+	{ "223-c6.c6",    0x400000, 0xd8fcef90, 3 | BRF_GRA },           //  8 
+	{ "223-c7.c7",    0x400000, 0xbc80dd2d, 3 | BRF_GRA },           //  9 
+	{ "223-c8.c8",    0x400000, 0x5ad62102, 3 | BRF_GRA },           // 10 
+
+	{ "223-m1.m1",    0x020000, 0x3fee46bf, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "223-v1.v1",    0x400000, 0x76673869, 5 | BRF_SND },           // 12 Sound data
+	{ "223-v2.v2",    0x400000, 0x7a275acd, 5 | BRF_SND },           // 13 
+	{ "223-v3.v3",    0x400000, 0x5a797fd2, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(rbffspeh, rbffspeh, neogeo)
+STD_ROM_FN(rbffspeh)
+
+struct BurnDriver BurnDrvrbffspeh = {
+	"rbffspeh", "rbffspec", "neogeo", NULL, "1996",
+	"Real Bout Fatal Fury Special (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, rbffspehRomInfo, rbffspehRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Twinkle Star Sprites (Hidden Hack)
+
+static struct BurnRomInfo twinsprhRomDesc[] = {
+	{ "224-p1h.p1",   0x200000, 0xdf71c8cd, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "224-s1.s1",    0x020000, 0xeeed5758, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "224-c1.c1",    0x400000, 0xf7da64ab, 3 | BRF_GRA },           //  2 Sprite data
+	{ "224-c2.c2",    0x400000, 0x4c09bbfb, 3 | BRF_GRA },           //  3 
+	{ "224-c3.c3",    0x100000, 0xc59e4129, 3 | BRF_GRA },           //  4 
+	{ "224-c4.c4",    0x100000, 0xb5532e53, 3 | BRF_GRA },           //  5 
+
+	{ "224-m1.m1",    0x020000, 0x364d6f96, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "224-v1.v1",    0x400000, 0xff57f088, 5 | BRF_SND },           //  7 Sound data
+	{ "224-v2.v2",    0x200000, 0x7ad26599, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(twinsprh, twinsprh, neogeo)
+STD_ROM_FN(twinsprh)
+
+struct BurnDriver BurnDrvtwinsprh = {
+	"twinsprh", "twinspri", "neogeo", NULL, "1996",
+	"Twinkle Star Sprites (Hidden Hack)\0", NULL, "ADK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VERSHOOT, 0,
+	NULL, twinsprhRomInfo, twinsprhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Waku Waku 7 (Hidden Hack)
+
+static struct BurnRomInfo wakuwa7hRomDesc[] = {
+	{ "225-p1h.p1",   0x100000, 0x0b7a3776, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "225-p2.sp2",   0x200000, 0xfe190665, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "225-s1.s1",    0x020000, 0x71c4b4b5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "225-c1.c1",    0x400000, 0xee4fea54, 3 | BRF_GRA },           //  3 Sprite data
+	{ "225-c2.c2",    0x400000, 0x0c549e2d, 3 | BRF_GRA },           //  4 
+	{ "225-c3.c3",    0x400000, 0xaf0897c0, 3 | BRF_GRA },           //  5 
+	{ "225-c4.c4",    0x400000, 0x4c66527a, 3 | BRF_GRA },           //  6 
+	{ "225-c5.c5",    0x400000, 0x8ecea2b5, 3 | BRF_GRA },           //  7 
+	{ "225-c6.c6",    0x400000, 0x0eb11a6d, 3 | BRF_GRA },           //  8 
+
+	{ "225-m1.m1",    0x020000, 0x0634bba6, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "225-v1.v1",    0x400000, 0x6195c6b4, 5 | BRF_SND },           // 10 Sound data
+	{ "225-v2.v2",    0x400000, 0x6159c5fe, 5 | BRF_SND },           // 11 
+};
+
+STDROMPICKEXT(wakuwa7h, wakuwa7h, neogeo)
+STD_ROM_FN(wakuwa7h)
+
+struct BurnDriver BurnDrvwakuwa7h = {
+	"wakuwa7h", "wakuwak7", "neogeo", NULL, "1996",
+	"Waku Waku 7 (Hidden Hack)\0", NULL, "Sunsoft", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, wakuwa7hRomInfo, wakuwa7hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Breakers (Boss Hack)
+
+static struct BurnRomInfo breakerbRomDesc[] = {
+	{ "230-p1b.p1",   0x200000, 0x1d708f96, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "230-s1.s1",    0x020000, 0x076fb64c, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "230-c1.c1",    0x400000, 0x68d4ae76, 3 | BRF_GRA },           //  2 Sprite data
+	{ "230-c2.c2",    0x400000, 0xfdee05cd, 3 | BRF_GRA },           //  3 
+	{ "230-c3.c3",    0x400000, 0x645077f3, 3 | BRF_GRA },           //  4 
+	{ "230-c4.c4",    0x400000, 0x63aeb74c, 3 | BRF_GRA },           //  5 
+
+	{ "230-m1.m1",    0x020000, 0x3951a1c1, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "230-v1.v1",    0x400000, 0x7f9ed279, 5 | BRF_SND },           //  7 Sound data
+	{ "230-v2.v2",    0x400000, 0x1d43e420, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(breakerb, breakerb, neogeo)
+STD_ROM_FN(breakerb)
+
+struct BurnDriver BurnDrvbreakerb = {
+	"breakerb", "breakers", "neogeo", NULL, "1996",
+	"Breakers (Boss Hack)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, breakerbRomInfo, breakerbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '97 (Korean, Practice Mode, Boss Hack)
+
+static struct BurnRomInfo kof97krRomDesc[] = {
+	{ "232-p1k.p1",   0x100000, 0xadf9bf77, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2k.sp2",  0x400000, 0x94434eec, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1.s1",    0x020000, 0x8514ecf5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1k.c1",   0x800000, 0x0f89f596, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2k.c2",   0x800000, 0x3d1328c5, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5k.c5",   0x400000, 0x8174fdf5, 3 | BRF_GRA },           //  7 
+	{ "232-c6k.c6",   0x400000, 0x32d5aa6a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97kr, kof97kr, neogeo)
+STD_ROM_FN(kof97kr)
+
+struct BurnDriver BurnDrvKof97kr = {
+	"kof97kr", "kof97", "neogeo", NULL, "2005",
+	"The King of Fighters '97 (Korean, Practice Mode, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97krRomInfo, kof97krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '97 (Korean, PlayStation Hack)
+
+static struct BurnRomInfo kof97pskRomDesc[] = {
+	{ "232-p1ps.p1",  0x100000, 0x57a35bf6, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2ps.sp2", 0x400000, 0xe1398fae, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1.s1",    0x020000, 0x8514ecf5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1ps.c1",  0x800000, 0x2488dbb1, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2ps.c2",  0x800000, 0xebb78e2a, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5ps.c5",  0x400000, 0x47711a8c, 3 | BRF_GRA },           //  7 
+	{ "232-c6ps.c6",  0x400000, 0x6703a48a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97psk, kof97psk, neogeo)
+STD_ROM_FN(kof97psk)
+
+struct BurnDriver BurnDrvkof97ps = {
+	"kof97psk", "kof97", "neogeo", NULL, "2005",
+	"The King of Fighters '97 (Korean, PlayStation Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97pskRomInfo, kof97pskRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '97 Tu She Edition (v1.2, Hack)
+
+static struct BurnRomInfo kof97tsRomDesc[] = {
+	{ "232-p1ts.p1",  0x100000, 0x9a56d828, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2ts.p2",  0x400000, 0x6aacb6f3, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1ts.s1",  0x020000, 0xa7d2ea6d, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1.c1",    0x800000, 0x5f8bf0a1, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2.c2",    0x800000, 0xe4d45c81, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5ts.c5",  0x400000, 0x8174fdf5, 3 | BRF_GRA },           //  7 
+	{ "232-c6ts.c6",  0x400000, 0x32d5aa6a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97ts, kof97ts, neogeo)
+STD_ROM_FN(kof97ts)
+
+struct BurnDriver BurnDrvKof97ts = {
+	"kof97ts", "kof97", "neogeo", NULL, "2019",
+	"The King of Fighters '97 Tu She Edition (v1.2, Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97tsRomInfo, kof97tsRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)
+
+static struct BurnRomInfo lastbladbRomDesc[] = {
+	{ "234-p1h.p1",   0x100000, 0xdf879af3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "234-p2.sp2",   0x400000, 0x0fdc289e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "234-s1.s1",    0x020000, 0x95561412, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "234-c1.c1",    0x800000, 0x9f7e2bd3, 3 | BRF_GRA },           //  3 Sprite data
+	{ "234-c2.c2",    0x800000, 0x80623d3c, 3 | BRF_GRA },           //  4 
+	{ "234-c3.c3",    0x800000, 0x91ab1a30, 3 | BRF_GRA },           //  5 
+	{ "234-c4.c4",    0x800000, 0x3d60b037, 3 | BRF_GRA },           //  6 
+	{ "234-c5.c5",    0x400000, 0x1ba80cee, 3 | BRF_GRA },           //  7 
+	{ "234-c6.c6",    0x400000, 0xbeafd091, 3 | BRF_GRA },           //  8 
+
+	{ "234-m1.m1",    0x020000, 0x087628ea, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "234-v1.v1",    0x400000, 0xed66b76f, 5 | BRF_SND },           // 10 Sound data
+	{ "234-v2.v2",    0x400000, 0xa0e7f6e2, 5 | BRF_SND },           // 11 
+	{ "234-v3.v3",    0x400000, 0xa506e1e2, 5 | BRF_SND },           // 12 
+	{ "234-v4.v4",    0x400000, 0x0e34157f, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbladb, lastbladb, neogeo)
+STD_ROM_FN(lastbladb)
+
+struct BurnDriver BurnDrvlastbladb = {
+	"lastbladb", "lastblad", "neogeo", NULL, "1997",
+	"The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)\0", NULL, "SNK", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbladbRomInfo, lastbladbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Puzzle De Pon! R! (Korean)
+
+static struct BurnRomInfo puzzldrkRomDesc[] = {
+	{ "235-p1.p1",    0x080000, 0xafed5de2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "235-s1.s1",    0x020000, 0x3b13a22f, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "202-c1k.c1",   0x100000, 0xfc5e5ae7, 3 | BRF_GRA },           //  2 Sprite data		/ TC538200
+	{ "202-c2.c2",    0x100000, 0x42371307, 3 | BRF_GRA },           //  3 
+
+	{ "202-m1.m1",    0x020000, 0x9c0291ea, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "202-v1.v1",    0x080000, 0xdebeb8fb, 5 | BRF_SND },           //  5 Sound data
+};
+
+STDROMPICKEXT(puzzldrk, puzzldrk, neogeo)
+STD_ROM_FN(puzzldrk)
+
+struct BurnDriver BurnDrvpuzzldrk = {
+	"puzzldrk", "puzzledp", "neogeo", NULL, "2006",
+	"Puzzle De Pon! R! (Korean)\0", NULL, "Taito (Visco license)", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, puzzldrkRomInfo, puzzldrkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)
+
+static struct BurnRomInfo rbff2hbRomDesc[] = {
+	{ "240-p1b.p1",   0x100000, 0xd01854fa, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "240-p2b.p2",   0x400000, 0xc063193d, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "240-s1.s1",    0x020000, 0xda3b40de, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "240-c1.c1",    0x800000, 0xeffac504, 3 | BRF_GRA },           //  3 Sprite data
+	{ "240-c2.c2",    0x800000, 0xed182d44, 3 | BRF_GRA },           //  4 
+	{ "240-c3.c3",    0x800000, 0x22e0330a, 3 | BRF_GRA },           //  5 
+	{ "240-c4.c4",    0x800000, 0xc19a07eb, 3 | BRF_GRA },           //  6 
+	{ "240-c5b.c5",   0x800000, 0x21831787, 3 | BRF_GRA },           //  7 
+	{ "240-c6b.c6",   0x800000, 0x06b2d1da, 3 | BRF_GRA },           //  8 
+
+	{ "240-m1.m1",    0x040000, 0xed482791, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "240-v1.v1",    0x400000, 0xf796265a, 5 | BRF_SND },           // 10 Sound data
+	{ "240-v2.v2",    0x400000, 0x2cb3f3bb, 5 | BRF_SND },           // 11 
+	{ "240-v3.v3",    0x400000, 0x8fe1367a, 5 | BRF_SND },           // 12 
+	{ "240-v4.v4",    0x200000, 0x996704d8, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(rbff2hb, rbff2hb, neogeo)
+STD_ROM_FN(rbff2hb)
+
+struct BurnDriver BurnDrvrbff2hb = {
+	"rbff2hb", "rbff2", "neogeo", NULL, "1998",
+	"Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, rbff2hbRomInfo, rbff2hbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '98 (System Bugs Fix)
+
+static struct BurnRomInfo kof98bfRomDesc[] = {
+	{ "242-p1bf.p1",  0x100000, 0xf881bbc4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2bf.sp2", 0x400000, 0x29039af7, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1bf.s1",  0x020000, 0x6389fb37, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1bf.c1",  0x800000, 0x770043c3, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2bf.c2",  0x800000, 0xdce7ed5b, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98bf, kof98bf, neogeo)
+STD_ROM_FN(kof98bf)
+
+struct BurnDriver BurnDrvKof98bf = {
+	"kof98bf", "kof98", "neogeo", NULL, "1998",
+	"The King of Fighters '98 (System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98bfRomInfo, kof98bfRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)
+
+static struct BurnRomInfo kof98cdRomDesc[] = {
+	{ "242-p1cd.p1",  0x100000, 0x936c2094, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2cd.sp2", 0x400000, 0xef4d2509, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1bf.s1",  0x020000, 0x6389fb37, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1cd.c1",  0x800000, 0x1d2f32a4, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2cd.c2",  0x800000, 0xb25f3d95, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98cd, kof98cd, neogeo)
+STD_ROM_FN(kof98cd)
+
+struct BurnDriver BurnDrvKof98cd = {
+	"kof98cd", "kof98", "neogeo", NULL, "1998",
+	"The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98cdRomInfo, kof98cdRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)
+
+static struct BurnRomInfo kof98krRomDesc[] = {
+	{ "242-p1kr.p1",  0x100000, 0x495a661e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2kr.p2",  0x400000, 0xdb631e31, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1kr.s1",  0x020000, 0xb2806d03, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1kr.c1",  0x800000, 0x6815f107, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2kr.c2",  0x800000, 0xd31c7784, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98kr, kof98kr, neogeo)
+STD_ROM_FN(kof98kr)
+
+struct BurnDriver BurnDrvKof98kr = {
+	"kof98kr", "kof98", "neogeo", NULL, "2006",
+	"The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98krRomInfo, kof98krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The Last Blade 2 (Hidden Hack)
+
+static struct BurnRomInfo lastbl2hRomDesc[] = {
+	{ "243-p1h.p1",   0x100000, 0x8af4b6e2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "243-p2h.p2",   0x400000, 0xeef07572, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "243-s1.s1",    0x020000, 0xc9cd2298, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "243-c1.c1",    0x800000, 0x5839444d, 3 | BRF_GRA },           //  3 Sprite data
+	{ "243-c2.c2",    0x800000, 0xdd087428, 3 | BRF_GRA },           //  4 
+	{ "243-c3.c3",    0x800000, 0x6054cbe0, 3 | BRF_GRA },           //  5 
+	{ "243-c4.c4",    0x800000, 0x8bd2a9d2, 3 | BRF_GRA },           //  6 
+	{ "243-c5.c5",    0x800000, 0x6a503dcf, 3 | BRF_GRA },           //  7 
+	{ "243-c6.c6",    0x800000, 0xec9c36d0, 3 | BRF_GRA },           //  8 
+
+	{ "243-m1.m1",    0x020000, 0xacf12d10, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "243-v1.v1",    0x400000, 0xf7ee6fbb, 5 | BRF_SND },           // 10 Sound data
+	{ "243-v2.v2",    0x400000, 0xaa9e4df6, 5 | BRF_SND },           // 11 
+	{ "243-v3.v3",    0x400000, 0x4ac750b2, 5 | BRF_SND },           // 12 
+	{ "243-v4.v4",    0x400000, 0xf5c64ba6, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbl2h, lastbl2h, neogeo)
+STD_ROM_FN(lastbl2h)
+
+struct BurnDriver BurnDrvlastbl2h = {
+	"lastbl2h", "lastbld2", "neogeo", NULL, "1998",
+	"The Last Blade 2 (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbl2hRomInfo, lastbl2hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The Last Blade 2 (System Bugs Fix)
+
+static struct BurnRomInfo lastbl2fRomDesc[] = {
+	{ "243-p1f.p1",   0x100000, 0x4fbc1019, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "243-p2f.p2",   0x400000, 0xad489305, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "243-s1.s1",    0x020000, 0xc9cd2298, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "243-c1.c1",    0x800000, 0x5839444d, 3 | BRF_GRA },           //  3 Sprite data
+	{ "243-c2.c2",    0x800000, 0xdd087428, 3 | BRF_GRA },           //  4 
+	{ "243-c3.c3",    0x800000, 0x6054cbe0, 3 | BRF_GRA },           //  5 
+	{ "243-c4.c4",    0x800000, 0x8bd2a9d2, 3 | BRF_GRA },           //  6 
+	{ "243-c5.c5",    0x800000, 0x6a503dcf, 3 | BRF_GRA },           //  7 
+	{ "243-c6.c6",    0x800000, 0xec9c36d0, 3 | BRF_GRA },           //  8 
+
+	{ "243-m1.m1",    0x020000, 0xacf12d10, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "243-v1.v1",    0x400000, 0xf7ee6fbb, 5 | BRF_SND },           // 10 Sound data
+	{ "243-v2.v2",    0x400000, 0xaa9e4df6, 5 | BRF_SND },           // 11 
+	{ "243-v3.v3",    0x400000, 0x4ac750b2, 5 | BRF_SND },           // 12 
+	{ "243-v4.v4",    0x400000, 0xf5c64ba6, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbl2f, lastbl2f, neogeo)
+STD_ROM_FN(lastbl2f)
+
+struct BurnDriver BurnDrvlastbl2f = {
+	"lastbl2f", "lastbld2", "neogeo", NULL, "1998",
+	"The Last Blade 2 (System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbl2fRomInfo, lastbl2fRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Neo-Geo Cup '98 - The Road to the Victory (Korean)
+
+static struct BurnRomInfo neocu98kRomDesc[] = {
+	{ "244-p1k.p1",   0x200000, 0x130a8029, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "244-s1k.s1",   0x020000, 0xbecb9e7a, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "244-c1k.c1",   0x800000, 0x8505fa3e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "244-c2k.c2",   0x800000, 0x54e86379, 3 | BRF_GRA },           //  3 
+
+	{ "244-m1.m1",    0x020000, 0xa701b276, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "244-v1.v1",    0x400000, 0x79def46d, 5 | BRF_SND },           //  5 Sound data
+	{ "244-v2.v2",    0x200000, 0xb231902f, 5 | BRF_SND },           //  6 
+};
+
+STDROMPICKEXT(neocu98k, neocu98k, neogeo)
+STD_ROM_FN(neocu98k)
+
+struct BurnDriver BurnDrvNeocu98k = {
+	"neocu98k", "neocup98", "neogeo", NULL, "2006",
+	"Neo-Geo Cup '98 - The Road to the Victory (Korean)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_SPORTSFOOTBALL, 0,
+	NULL, neocu98kRomInfo, neocu98kRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Breakers Revenge (Boss Hack)
+
+static struct BurnRomInfo breakrebRomDesc[] = {
+	{ "245-p1b.p1",   0x200000, 0x52c978b5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "245-s1.s1",    0x020000, 0xe7660a5d, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "245-c1.c1",    0x400000, 0x68d4ae76, 3 | BRF_GRA },           //  2 Sprite data
+	{ "245-c2.c2",    0x400000, 0xfdee05cd, 3 | BRF_GRA },           //  3 
+	{ "245-c3.c3",    0x400000, 0x645077f3, 3 | BRF_GRA },           //  4 
+	{ "245-c4.c4",    0x400000, 0x63aeb74c, 3 | BRF_GRA },           //  5 
+	{ "245-c5.c5",    0x400000, 0xb5f40e7f, 3 | BRF_GRA },           //  6 
+	{ "245-c6.c6",    0x400000, 0xd0337328, 3 | BRF_GRA },           //  7 
+
+	{ "245-m1.m1",    0x020000, 0x00f31c66, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "245-v1.v1",    0x400000, 0xe255446c, 5 | BRF_SND },           //  9 Sound data
+	{ "245-v2.v2",    0x400000, 0x9068198a, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(breakreb, breakreb, neogeo)
+STD_ROM_FN(breakreb)
+
+struct BurnDriver BurnDrvbreakreb = {
+	"breakreb", "breakrev", "neogeo", NULL, "1998",
+	"Breakers Revenge (Boss Hack)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, breakrebRomInfo, breakrebRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Battle Flip Shot (Korean)
+
+static struct BurnRomInfo flipshtkRomDesc[] = {
+	{ "247-p1.p1",    0x100000, 0x95779094, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "247-s1.s1",    0x020000, 0x6300185c, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "247-c1k.c1",   0x200000, 0x1ccfeff9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "247-c2k.c2",   0x200000, 0x648cdd5d, 3 | BRF_GRA },           //  3 
+
+	{ "247-m1.m1",    0x020000, 0xa9fe0144, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "247-v1.v1",    0x200000, 0x42ec743d, 5 | BRF_SND },           //  5 Sound data
+};
+
+STDROMPICKEXT(flipshtk, flipshtk, neogeo)
+STD_ROM_FN(flipshtk)
+
+struct BurnDriver BurnDrvflipshtk = {
+	"flipshtk", "flipshot", "neogeo", NULL, "2005",
+	"Battle Flip Shot (Korean)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_BALLPADDLE, 0,
+	NULL, flipshtkRomInfo, flipshtkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)
+
+static struct BurnRomInfo kof99ndRomDesc[] = {
+	{ "251-p1d.p1",  0x100000, 0xcfb4b521, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+	{ "251-p2d.p2",  0x400000, 0xa4afaa86, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "251-c1d.c1",  0x800000, 0xb3d88546, 3 | BRF_GRA },           //  2 Sprite data
+	{ "251-c2d.c2",  0x800000, 0x915c8634, 3 | BRF_GRA },           //  3 
+	{ "251-c3d.c3",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  4 
+	{ "251-c4d.c4",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  5 
+	{ "251-c5d.c5",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  6 
+	{ "251-c6d.c6",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  7 
+	{ "251-c7d.c7",  0x800000, 0x2f68fdeb, 3 | BRF_GRA },           //  8 
+	{ "251-c8d.c8",  0x800000, 0x4c2fad1e, 3 | BRF_GRA },           //  9 
+
+	{ "251-m1.m1",   0x020000, 0x5e74539c, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "251-v1.v1",   0x400000, 0xef2eecc8, 5 | BRF_SND },           // 11 Sound data
+	{ "251-v2.v2",   0x400000, 0x73e211ca, 5 | BRF_SND },           // 12 
+	{ "251-v3.v3",   0x400000, 0x821901da, 5 | BRF_SND },           // 13 
+	{ "251-v4.v4",   0x200000, 0xb49e6178, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof99nd, kof99nd, neogeo)
+STD_ROM_FN(kof99nd)
+
+struct BurnDriver BurnDrvkof99nd = {
+	"kof99nd", "kof99", "neogeo", NULL, "1999",
+	"The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99ndRomInfo, kof99ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)
+
+static struct BurnRomInfo kof99krRomDesc[] = {
+	{ "251-p1kr.p1", 0x100000, 0xbbb04bc2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+	{ "251-p2kr.p2", 0x400000, 0xcedba0c0, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "251-c1kr.c1", 0x800000, 0x5dea7ea8, 3 | BRF_GRA },           //  2 Sprite data
+	{ "251-c2kr.c2", 0x800000, 0x5e218d5a, 3 | BRF_GRA },           //  3 
+	{ "251-c3d.c3",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  4 
+	{ "251-c4d.c4",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  5 
+	{ "251-c5d.c5",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  6 
+	{ "251-c6d.c6",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  7 
+	{ "251-c7kr.c7", 0x800000, 0x165607a2, 3 | BRF_GRA },           //  8 
+	{ "251-c8kr.c8", 0x800000, 0x720c9304, 3 | BRF_GRA },           //  9 
+
+	{ "251-m1.m1",   0x020000, 0x5e74539c, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "251-v1.v1",   0x400000, 0xef2eecc8, 5 | BRF_SND },           // 11 Sound data
+	{ "251-v2.v2",   0x400000, 0x73e211ca, 5 | BRF_SND },           // 12 
+	{ "251-v3.v3",   0x400000, 0x821901da, 5 | BRF_SND },           // 13 
+	{ "251-v4.v4",   0x200000, 0xb49e6178, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof99kr, kof99kr, neogeo)
+STD_ROM_FN(kof99kr)
+
+struct BurnDriver BurnDrvkof99kr = {
+	"kof99kr", "kof99", "neogeo", NULL, "2006",
+	"The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99krRomInfo, kof99krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 (15th Anniversary Edition 2016)
+/* Yashional hack - 2016/04/19 version */
+static struct BurnRomInfo kof99ae2016RomDesc[] = {
+	{ "199-p1.bin",   0x100000, 0xc19447eb, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "199-p2.bin",   0x800000, 0x55418995, 1 | BRF_ESS | BRF_PRG }, //  1
+
+	{ "199-s1.bin",   0x020000, 0x3c31ee43, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "199-c1.bin",   0x800000, 0x497c2e83, 3 | BRF_GRA },           //  3 Sprite data
+	{ "199-c2.bin",   0x800000, 0x0a13eeb7, 3 | BRF_GRA },           //  4 
+	{ "251-c3d.bin",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  5 
+	{ "251-c4d.bin",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  6 
+	{ "251-c5d.bin",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  7 
+	{ "251-c6d.bin",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  8 
+	{ "199-c7.bin",   0x800000, 0xf22760ad, 3 | BRF_GRA },           //  9 
+	{ "199-c8.bin",   0x800000, 0x396c3a70, 3 | BRF_GRA },           // 10 
+	{ "199-c9.bin",   0x800000, 0x86a3550d, 3 | BRF_GRA },           // 11 
+	{ "199-ca.bin",   0x800000, 0x986bb897, 3 | BRF_GRA },           // 12 
+	{ "199-cb.bin",   0x800000, 0x7fe785c2, 3 | BRF_GRA },           // 13 
+	{ "199-cc.bin",   0x800000, 0xa7541483, 3 | BRF_GRA },           // 14 
+
+	{ "199-m1.bin",   0x020000, 0xf847e188, 4 | BRF_ESS | BRF_PRG }, // 15 Z80 code
+
+	{ "199-v1.bin",   0x400000, 0xceaa3bae, 5 | BRF_SND },           // 16 Sound data
+	{ "199-v2.bin",   0x400000, 0x07d70650, 5 | BRF_SND },           // 17 
+	{ "251-v3.v3",    0x400000, 0x821901da, 5 | BRF_SND },           // 18 
+	{ "251-v4.v4",    0x200000, 0xb49e6178, 5 | BRF_SND },           // 19 
+};
+
+STDROMPICKEXT(kof99ae2016, kof99ae2016, neogeo)
+STD_ROM_FN(kof99ae2016)
+
+struct BurnDriver BurnDrvkof99ae2016 = {
+	"kof99ae2016", "kof99", "neogeo", NULL, "2015",
+	"The King of Fighters '99 (15th Anniversary Edition 2016)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99ae2016RomInfo, kof99ae2016RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Ganryu (Fully Decrypted)
+
+static struct BurnRomInfo ganryundRomDesc[] = {
+	{ "252-p1d.p1",  0x200000, 0x8f212084, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "252-c1d.c1",  0x800000, 0x6bf7605b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "252-c2d.c2",  0x800000, 0x596792ce, 3 | BRF_GRA },           //  2 
+
+	{ "252-m1.m1",    0x020000, 0x30cc4099, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "252-v1.v1",    0x400000, 0xe5946733, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(ganryund, ganryund, neogeo)
+STD_ROM_FN(ganryund)
+
+struct BurnDriver BurnDrvganryund = {
+	"ganryund", "ganryu", "neogeo", NULL, "1999",
+	"Ganryu (Fully Decrypted)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, ganryundRomInfo, ganryundRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Garou - Mark of the Wolves (Fully Decrypted)
+
+static struct BurnRomInfo garoundRomDesc[] = {
+	{ "253-p1d.bin",  0x800000, 0xe7c40dfa, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "253-c1d.bin",  0x800000, 0x497be3f2, 3 | BRF_GRA },           //  1 Sprite data
+	{ "253-c2d.bin",  0x800000, 0x6a9e95ca, 3 | BRF_GRA },           //  2 
+	{ "253-c3d.bin",  0x800000, 0x39373d2f, 3 | BRF_GRA },           //  3 
+	{ "253-c4d.bin",  0x800000, 0x4de23f6c, 3 | BRF_GRA },           //  4 
+	{ "253-c5d.bin",  0x800000, 0x16634ba5, 3 | BRF_GRA },           //  5 
+	{ "253-c6d.bin",  0x800000, 0x95671ffd, 3 | BRF_GRA },           //  6 
+	{ "253-c7d.bin",  0x800000, 0xe36ce77f, 3 | BRF_GRA },           //  7 
+	{ "253-c8d.bin",  0x800000, 0xddbd1096, 3 | BRF_GRA },           //  8 
+
+	{ "253-m1.m1",    0x040000, 0x36a806be, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "253-v1.v1",    0x400000, 0x263e388c, 5 | BRF_SND },           // 10 Sound data
+	{ "253-v2.v2",    0x400000, 0x2c6bc7be, 5 | BRF_SND },           // 11 
+	{ "253-v3.v3",    0x400000, 0x0425b27d, 5 | BRF_SND },           // 12 
+	{ "253-v4.v4",    0x400000, 0xa54be8a9, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(garound, garound, neogeo)
+STD_ROM_FN(garound)
+
+void __fastcall garoundWriteWordBankswitch(UINT32 sekAddress, UINT16 wordValue)
+{
+	if (sekAddress == 0x2FFFC0) {
+		static UINT32 bankoffset[64] = {
+			0x100000, 0x200000, 0x300000, 0x400000, // 00
+			0x380000, 0x480000, 0x3d0000, 0x4d0000, // 04
+			0x3f0000, 0x4f0000, 0x500000, 0x600000, // 08
+			0x520000, 0x620000, 0x540000, 0x640000, // 12
+			0x598000, 0x698000, 0x5a0000, 0x6a0000, // 16
+			0x5a8000, 0x6a8000, 0x5b0000, 0x6b0000, // 20
+			0x5b8000, 0x6b8000, 0x5c0000, 0x6c0000, // 24
+			0x5c8000, 0x6c8000, 0x5d0000, 0x6d0000, // 28
+			0x558000, 0x658000, 0x560000, 0x660000, // 32
+			0x568000, 0x668000, 0x570000, 0x670000, // 36
+			0x578000, 0x678000, 0x580000, 0x680000, // 40
+			0x588000, 0x688000, 0x590000, 0x690000, // 44
+			0x6d0000, 0x6d8000, 0x6e0000, 0x6e8000, // 48
+			0x6f0000, 0x6f8000, 0x700000, /* rest not used? */
+		};
+
+		// Unscramble bank number
+		INT32 nBank =
+			(((wordValue >>  5) & 1) << 0) +
+			(((wordValue >>  9) & 1) << 1) +
+			(((wordValue >>  7) & 1) << 2) +
+			(((wordValue >>  6) & 1) << 3) +
+			(((wordValue >> 14) & 1) << 4) +
+			(((wordValue >> 12) & 1) << 5);
+
+		if (bankoffset[nBank] != nNeo68KROMBank) {
+			nNeo68KROMBank = bankoffset[nBank];
+			SekMapMemory(Neo68KROMActive + nNeo68KROMBank,			  0x200000, 0x2FE3FF, MAP_ROM);
+			SekMapMemory(Neo68KROMActive + nNeo68KROMBank + 0x0FE800, 0x2FE800, 0x2FFBFF, MAP_ROM);
+		}
+	}
+}
+
+static INT32 garoundInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x80000;
+
+	return NeoSMAInit(NULL, garoundWriteWordBankswitch, 0x2FFFCC, 0x2FFFF0);
+}
+
+struct BurnDriver BurnDrvGaround = {
+	"garound", "garou", "neogeo", NULL, "1999",
+	"Garou - Mark of the Wolves (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, garoundRomInfo, garoundRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	garoundInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Strikers 1945 Plus (Fully Decrypted)
+
+static struct BurnRomInfo s1945pndRomDesc[] = {
+	{ "254-p1.p1",   0x100000, 0xff8efcff, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "254-p2.sp2",  0x400000, 0xefdfd4dd, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "254-c1d.c1",  0x800000, 0x7b6902f9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "254-c2d.c2",  0x800000, 0x51bd4252, 3 | BRF_GRA },           //  3 
+	{ "254-c3d.c3",  0x800000, 0xa38993e4, 3 | BRF_GRA },           //  4 
+	{ "254-c4d.c4",  0x800000, 0xd5696530, 3 | BRF_GRA },           //  5 
+	{ "254-c5d.c5",  0x800000, 0x28764bd6, 3 | BRF_GRA },           //  6 
+	{ "254-c6d.c6",  0x800000, 0x9931bdf1, 3 | BRF_GRA },           //  7 
+	{ "254-c7d.c7",  0x800000, 0x6e12afcd, 3 | BRF_GRA },           //  8 
+	{ "254-c8d.c8",  0x800000, 0x178d4684, 3 | BRF_GRA },           //  9 
+
+	{ "254-m1.m1",   0x020000, 0x994b4487, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "254-v1.v1",   0x400000, 0x844f58fb, 5 | BRF_SND },           // 11 Sound data
+	{ "254-v2.v2",   0x400000, 0xd9a248f0, 5 | BRF_SND },           // 12 
+	{ "254-v3.v3",   0x400000, 0x0b0d2d33, 5 | BRF_SND },           // 13 
+	{ "254-v4.v4",   0x400000, 0x6d13dc91, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(s1945pnd, s1945pnd, neogeo)
+STD_ROM_FN(s1945pnd)
+
+struct BurnDriver BurnDrvs1945pnd = {
+	"s1945pnd", "s1945p", "neogeo", NULL, "1999",
+	"Strikers 1945 Plus (Fully Decrypted)\0", NULL, "Psikyo", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VERSHOOT, 0,
+	NULL, s1945pndRomInfo, s1945pndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Prehistoric Isle 2 (Fully Decrypted)
+
+static struct BurnRomInfo pisle2ndRomDesc[] = {
+	{ "255-p1.p1",   0x100000, 0xdfa3c0f3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "255-p2.sp2",  0x400000, 0x42050b80, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "255-c1d.c1",  0x800000, 0x50fd785e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "255-c2d.c2",  0x800000, 0xab913f1e, 3 | BRF_GRA },           //  3 
+	{ "255-c3d.c3",  0x800000, 0xbc0ee75c, 3 | BRF_GRA },           //  4 
+	{ "255-c4d.c4",  0x800000, 0x29908823, 3 | BRF_GRA },           //  5 
+	{ "255-c5d.c5",  0x800000, 0x83c56bca, 3 | BRF_GRA },           //  6 
+	{ "255-c6d.c6",  0x800000, 0x59e0e805, 3 | BRF_GRA },           //  7 
+
+	{ "255-m1.m1",   0x020000, 0x8efd4014, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "255-v1.v1",   0x400000, 0x5a14543d, 5 | BRF_SND },           //  9 Sound data
+	{ "255-v2.v2",   0x200000, 0x6610d91a, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(pisle2nd, pisle2nd, neogeo)
+STD_ROM_FN(pisle2nd)
+
+struct BurnDriver BurnDrvpisle2nd = {
+	"pisle2nd", "preisle2", "neogeo", NULL, "1999",
+	"Prehistoric Isle 2 (Fully Decrypted)\0", NULL, "Yumekobo", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_HORSHOOT, 0,
+	NULL, pisle2ndRomInfo, pisle2ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 3 (Fully Decrypted)
+
+static struct BurnRomInfo mslug3ndRomDesc[] = {
+	{ "256-p1d.p1",  0x100000, 0x9c42ca85, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "256-p2d.p2",  0x400000, 0x1f3d8ce8, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "256-c1d.c1",  0x800000, 0x3540398c, 3 | BRF_GRA },           //  2 Sprite data
+	{ "256-c2d.c2",  0x800000, 0xbdd220f0, 3 | BRF_GRA },           //  3
+	{ "256-c3d.c3",  0x800000, 0xbfaade82, 3 | BRF_GRA },           //  4
+	{ "256-c4d.c4",  0x800000, 0x1463add6, 3 | BRF_GRA },           //  5
+	{ "256-c5d.c5",  0x800000, 0x48ca7f28, 3 | BRF_GRA },           //  6
+	{ "256-c6d.c6",  0x800000, 0x806eb36f, 3 | BRF_GRA },           //  7
+	{ "256-c7d.c7",  0x800000, 0x9395b809, 3 | BRF_GRA },           //  8
+	{ "256-c8d.c8",  0x800000, 0xa369f9d4, 3 | BRF_GRA },           //  9
+
+	{ "256-m1d.m1",  0x040000, 0x2f88e0c0, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "256-v1.v1",   0x400000, 0xf2690241, 5 | BRF_SND },           // 11 Sound data
+	{ "256-v2.v2",   0x400000, 0x7e2a10bd, 5 | BRF_SND },           // 12
+	{ "256-v3.v3",   0x400000, 0x0eaec17c, 5 | BRF_SND },           // 13
+	{ "256-v4.v4",   0x400000, 0x9b4b22d4, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(mslug3nd, mslug3nd, neogeo)
+STD_ROM_FN(mslug3nd)
+
+struct BurnDriver BurnDrvmslug3nd = {
+	"mslug3nd", "mslug3", "neogeo", NULL, "2000",
+	"Metal Slug 3 (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug3ndRomInfo, mslug3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	mslug3ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2000 (Fully Decrypted)
+
+static struct BurnRomInfo kof2kndRomDesc[] = {
+	{ "257-p1d.p1",  0x100000, 0x5f809dbe, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "257-p2d.p2",  0x400000, 0x693c2c5e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "257-c1d.c1",  0x800000, 0xabcdd424, 3 | BRF_GRA },           //  2 Sprite data
+	{ "257-c2d.c2",  0x800000, 0xcda33778, 3 | BRF_GRA },           //  3 
+	{ "257-c3d.c3",  0x800000, 0x087fb15b, 3 | BRF_GRA },           //  4 
+	{ "257-c4d.c4",  0x800000, 0xfe9dfde4, 3 | BRF_GRA },           //  5 
+	{ "257-c5d.c5",  0x800000, 0x03ee4bf4, 3 | BRF_GRA },           //  6 
+	{ "257-c6d.c6",  0x800000, 0x8599cc5b, 3 | BRF_GRA },           //  7 
+	{ "257-c7d.c7",  0x800000, 0x93c343ec, 3 | BRF_GRA },           //  8 
+	{ "257-c8d.c8",  0x800000, 0xba92f698, 3 | BRF_GRA },           //  9 
+
+	{ "257-m1d.m1",  0x040000, 0xd404db70, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "257-v1.v1",   0x400000, 0x17cde847, 5 | BRF_SND },           // 11 Sound data
+	{ "257-v2.v2",   0x400000, 0x1afb20ff, 5 | BRF_SND },           // 12 
+	{ "257-v3.v3",   0x400000, 0x4605036a, 5 | BRF_SND },           // 13 
+	{ "257-v4.v4",   0x400000, 0x764bbd6b, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2knd, kof2knd, neogeo)
+STD_ROM_FN(kof2knd)
+
+struct BurnDriver BurnDrvkof2knd = {
+	"kof2knd", "kof2000", "neogeo", NULL, "2000",
+	"The King of Fighters 2000 (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2kndRomInfo, kof2kndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2000 (Korean, PlayStation 2 Hack)
+
+static struct BurnRomInfo kof2kkrRomDesc[] = {
+	{ "257-p1kr.p1", 0x100000, 0xa8526ab2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "257-p2kr.p2", 0x400000, 0xcf9d9e39, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "257-c1kr.c1", 0x800000, 0xe5773336, 3 | BRF_GRA },           //  2 Sprite data
+	{ "257-c2kr.c2", 0x800000, 0x654c2a61, 3 | BRF_GRA },           //  3 
+	{ "257-c3d.c3",  0x800000, 0x087fb15b, 3 | BRF_GRA },           //  4 
+	{ "257-c4d.c4",  0x800000, 0xfe9dfde4, 3 | BRF_GRA },           //  5 
+	{ "257-c5d.c5",  0x800000, 0x03ee4bf4, 3 | BRF_GRA },           //  6 
+	{ "257-c6d.c6",  0x800000, 0x8599cc5b, 3 | BRF_GRA },           //  7 
+	{ "257-c7kr.c7", 0x800000, 0xf6d09417, 3 | BRF_GRA },           //  8 
+	{ "257-c8kr.c8", 0x800000, 0x7aff9fba, 3 | BRF_GRA },           //  9 
+
+	{ "257-m1d.m1",  0x040000, 0xd404db70, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "257-v1.v1",   0x400000, 0x17cde847, 5 | BRF_SND },           // 11 Sound data
+	{ "257-v2.v2",   0x400000, 0x1afb20ff, 5 | BRF_SND },           // 12 
+	{ "257-v3.v3",   0x400000, 0x4605036a, 5 | BRF_SND },           // 13 
+	{ "257-v4.v4",   0x400000, 0x764bbd6b, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2kkr, kof2kkr, neogeo)
+STD_ROM_FN(kof2kkr)
+
+struct BurnDriver BurnDrvkof2kkr = {
+	"kof2kkr", "kof2000", "neogeo", NULL, "2010",
+	"The King of Fighters 2000 (Korean, PlayStation 2 Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2kkrRomInfo, kof2kkrRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Bang Bead (Fully Decrypted)
+
+static struct BurnRomInfo bangbndRomDesc[] = {
+	{ "259-p1d.p1",  0x200000, 0x08b6b530, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "259-c1d.c1",  0x800000, 0xc50a91c3, 3 | BRF_GRA },           //  1 Sprite data
+	{ "259-c2d.c2",  0x800000, 0x820ab36e, 3 | BRF_GRA },           //  2 
+
+	{ "259-m1.m1",   0x020000, 0x85668ee9, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "259-v1.v1",   0x400000, 0x088eb8ab, 5 | BRF_SND },           //  4 Sound data
+	{ "259-v2.v2",   0x100000, 0x97528fe9, 5 | BRF_SND },           //  5 
+};
+
+STDROMPICKEXT(bangbnd, bangbnd, neogeo)
+STD_ROM_FN(bangbnd)
+
+struct BurnDriver BurnDrvbangbnd = {
+	"bangbnd", "bangbead", "neogeo", NULL, "2000",
+	"Bang Bead (Fully Decrypted)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_BALLPADDLE, 0,
+	NULL, bangbndRomInfo, bangbndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Nightmare in the Dark (Fully Decrypted)
+
+static struct BurnRomInfo nitdndRomDesc[] = {
+	{ "260-p1.p1",    0x080000, 0x61361082, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "260-c1d.c1",   0x800000, 0xf3ff4953, 3 | BRF_GRA },           //  1 Sprite data
+	{ "260-c2d.c2",   0x800000, 0xf1e49faa, 3 | BRF_GRA },           //  2 
+
+	{ "260-m1.m1",    0x080000, 0x6407c5e5, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "260-v1.v1",    0x400000, 0x24b0480c, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(nitdnd, nitdnd, neogeo)
+STD_ROM_FN(nitdnd)
+
+struct BurnDriver BurnDrvnitdnd = {
+	"nitdnd", "nitd", "neogeo", NULL, "2000",
+	"Nightmare in the Dark (Fully Decrypted)\0", NULL, "Eleven / Gavaking", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, nitdndRomInfo, nitdndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Sengoku 3 (Fully Decrypted)
+
+static struct BurnRomInfo sengo3ndRomDesc[] = {
+	{ "261-p1d.p1",  0x200000, 0x12db5c94, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "261-c1d.c1",  0x800000, 0x9af7cbca, 3 | BRF_GRA },           //  1 Sprite data
+	{ "261-c2d.c2",  0x800000, 0x2a1f874d, 3 | BRF_GRA },           //  2 
+	{ "261-c3d.c3",  0x800000, 0x5403adb5, 3 | BRF_GRA },           //  3 
+	{ "261-c4d.c4",  0x800000, 0x18926df6, 3 | BRF_GRA },           //  4 
+
+	{ "261-m1.m1",   0x080000, 0x7d501c39, 4 | BRF_ESS | BRF_PRG }, //  5 Z80 code
+
+	{ "261-v1.v1",   0x400000, 0x64c30081, 5 | BRF_SND },           //  6 Sound data
+	{ "261-v2.v2",   0x400000, 0x392a9c47, 5 | BRF_SND },           //  7 
+	{ "261-v3.v3",   0x400000, 0xc1a7ebe3, 5 | BRF_SND },           //  8 
+	{ "261-v4.v4",   0x200000, 0x9000d085, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(sengo3nd, sengo3nd, neogeo)
+STD_ROM_FN(sengo3nd)
+
+struct BurnDriver BurnDrvSengo3nd = {
+	"sengo3nd", "sengoku3", "neogeo", NULL, "2001",
+	"Sengoku 3 (Fully Decrypted)\0", NULL, "SNK / Noise Factory", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, sengo3ndRomInfo, sengo3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Sengoku 3 (Hidden Hack)
+
+static struct BurnRomInfo sengo3nhRomDesc[] = {
+	{ "261-p1h.p1",   0x200000, 0xb0ce4444, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "261-c1d.c1",   0x800000, 0x9af7cbca, 3 | BRF_GRA },           //  1 Sprite data
+	{ "261-c2d.c2",   0x800000, 0x2a1f874d, 3 | BRF_GRA },           //  2 
+	{ "261-c3d.c3",   0x800000, 0x5403adb5, 3 | BRF_GRA },           //  3 
+	{ "261-c4d.c4",   0x800000, 0x18926df6, 3 | BRF_GRA },           //  4 
+
+	{ "261-m1.m1",    0x080000, 0x7d501c39, 4 | BRF_ESS | BRF_PRG }, //  5 Z80 code
+
+	{ "261-v1.v1",    0x400000, 0x64c30081, 5 | BRF_SND },           //  6 Sound data
+	{ "261-v2.v2",    0x400000, 0x392a9c47, 5 | BRF_SND },           //  7 
+	{ "261-v3.v3",    0x400000, 0xc1a7ebe3, 5 | BRF_SND },           //  8 
+	{ "261-v4.v4",    0x200000, 0x9000d085, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(sengo3nh, sengo3nh, neogeo)
+STD_ROM_FN(sengo3nh)
+
+struct BurnDriver BurnDrvsengo3nh = {
+	"sengo3nh", "sengoku3", "neogeo", NULL, "2001",
+	"Sengoku 3 (Hidden Hack)\0", NULL, "SNK / Noise Factory", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, sengo3nhRomInfo, sengo3nhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters 2001 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k1ndRomDesc[] = {
+	{ "262-p1d.p1",      0x100000, 0x138dea19, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "262-p2d.p2",      0x400000, 0xc773bf51, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "262-c1d.c1",      0x800000, 0x098aeb69, 3 | BRF_GRA },           //  2 Sprite data
+	{ "262-c2d.c2",      0x800000, 0xf9d05d99, 3 | BRF_GRA },           //  3 
+	{ "262-c3d.c3",      0x800000, 0x4c7ec427, 3 | BRF_GRA },           //  4 
+	{ "262-c4d.c4",      0x800000, 0x1d237aa6, 3 | BRF_GRA },           //  5 
+	{ "262-c5d.c5",      0x800000, 0xc2256db5, 3 | BRF_GRA },           //  6 
+	{ "262-c6d.c6",      0x800000, 0x8d6565a9, 3 | BRF_GRA },           //  7 
+	{ "262-c7d.c7",      0x800000, 0xd1408776, 3 | BRF_GRA },           //  8 
+	{ "262-c8d.c8",      0x800000, 0x954d0e16, 3 | BRF_GRA },           //  9 
+
+	{ "262-m1d.m1",      0x020000, 0x2fb0a8a5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "262-v1-08-e0.v1", 0x400000, 0x83d49ecf, 5 | BRF_SND },           // 11 Sound data
+	{ "262-v2-08-e0.v2", 0x400000, 0x003f1843, 5 | BRF_SND },           // 12 
+	{ "262-v3-08-e0.v3", 0x400000, 0x2ae38dbe, 5 | BRF_SND },           // 13 
+	{ "262-v4-08-e0.v4", 0x400000, 0x26ec4dd9, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k1nd, kof2k1nd, neogeo)
+STD_ROM_FN(kof2k1nd)
+
+struct BurnDriver BurnDrvkof2k1nd = {
+	"kof2k1nd", "kof2001", "neogeo", NULL, "2001",
+	"The King of Fighters 2001 (Fully Decrypted)\0", NULL, "SNK / Eolith", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k1ndRomInfo, kof2k1ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2001 (PlayStation 2 Hack)
+
+static struct BurnRomInfo kof2k1ps2RomDesc[] = {
+	{ "262-p1ps2.p1",    0x100000, 0xb5becb3c, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "262-p2ps2.p2",    0x400000, 0x7fc0136f, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "262-c1d.c1",      0x800000, 0x098aeb69, 3 | BRF_GRA },           //  2 Sprite data
+	{ "262-c2d.c2",      0x800000, 0xf9d05d99, 3 | BRF_GRA },           //  3 
+	{ "262-c3d.c3",      0x800000, 0x4c7ec427, 3 | BRF_GRA },           //  4 
+	{ "262-c4d.c4",      0x800000, 0x1d237aa6, 3 | BRF_GRA },           //  5 
+	{ "262-c5d.c5",      0x800000, 0xc2256db5, 3 | BRF_GRA },           //  6 
+	{ "262-c6d.c6",      0x800000, 0x8d6565a9, 3 | BRF_GRA },           //  7 
+	{ "262-c7ps2.c7",    0x800000, 0x85e1c51f, 3 | BRF_GRA },           //  8 
+	{ "262-c8ps2.c8",    0x800000, 0xad2c47db, 3 | BRF_GRA },           //  9 
+
+	{ "262-m1d.m1",      0x020000, 0x2fb0a8a5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "262-v1-08-e0.v1", 0x400000, 0x83d49ecf, 5 | BRF_SND },           // 11 Sound data
+	{ "262-v2-08-e0.v2", 0x400000, 0x003f1843, 5 | BRF_SND },           // 12 
+	{ "262-v3-08-e0.v3", 0x400000, 0x2ae38dbe, 5 | BRF_SND },           // 13 
+	{ "262-v4-08-e0.v4", 0x400000, 0x26ec4dd9, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(kof2k1ps2, kof2k1ps2, neogeo)
+STD_ROM_FN(kof2k1ps2)
+
+struct BurnDriver BurnDrvkof2k1ps2 = {
+	"kof2k1ps2", "kof2001", "neogeo", NULL, "2001",
+	"The King of Fighters 2001 (PlayStation 2 Hack)\0", NULL, "SNK / Eolith", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k1ps2RomInfo, kof2k1ps2RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 4 (Fully Decrypted)
+
+static struct BurnRomInfo mslug4ndRomDesc[] = {
+	{ "263-p1d.p1",  0x100000, 0xc67f5c8d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "263-p2d.p2",  0x400000, 0xbc3ec89e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "263-c1d.c1",  0x800000, 0xa75ffcde, 3 | BRF_GRA },           //  2 Sprite data
+	{ "263-c2d.c2",  0x800000, 0x5ab0d12b, 3 | BRF_GRA },           //  3 
+	{ "263-c3d.c3",  0x800000, 0x61af560c, 3 | BRF_GRA },           //  4 
+	{ "263-c4d.c4",  0x800000, 0xf2c544fd, 3 | BRF_GRA },           //  5 
+	{ "263-c5d.c5",  0x800000, 0x84c66c44, 3 | BRF_GRA },           //  6 
+	{ "263-c6d.c6",  0x800000, 0x5ed018ab, 3 | BRF_GRA },           //  7 
+
+	{ "263-m1d.m1",  0x020000, 0xef5db532, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "263-v1d.v1",  0x400000, 0x8cb5a9ef, 5 | BRF_SND },           //  9 Sound data
+	{ "263-v2d.v2",  0x400000, 0x94217b1e, 5 | BRF_SND },           // 10 
+	{ "263-v3d.v3",  0x400000, 0x7616fcec, 5 | BRF_SND },           // 11 
+	{ "263-v4d.v4",  0x400000, 0x7b0b92a1, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(mslug4nd, mslug4nd, neogeo)
+STD_ROM_FN(mslug4nd)
+
+struct BurnDriver BurnDrvmslug4nd = {
+	"mslug4nd", "mslug4", "neogeo", NULL, "2002",
+	"Metal Slug 4 (Fully Decrypted)\0", NULL, "Mega", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug4ndRomInfo, mslug4ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	mslug3ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Rage of the Dragons (Fully Decrypted)
+
+static struct BurnRomInfo rotdndRomDesc[] = {
+	{ "264-pk1.p1",   0x100000, 0xff2fa719, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "264-pk2.sp2",  0x200000, 0x0df2e112, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "264-c1d.c1",   0x800000, 0xec9d18c0, 3 | BRF_GRA },           //  2 Sprite data
+	{ "264-c2d.c2",   0x800000, 0xb1069066, 3 | BRF_GRA },           //  3 
+	{ "264-c3d.c3",   0x800000, 0x7e636d49, 3 | BRF_GRA },           //  4 
+	{ "264-c4d.c4",   0x800000, 0x76892fda, 3 | BRF_GRA },           //  5 
+	{ "264-c5d.c5",   0x800000, 0x469061bc, 3 | BRF_GRA },           //  6 
+	{ "264-c6d.c6",   0x800000, 0x2200220a, 3 | BRF_GRA },           //  7 
+	{ "264-c7d.c7",   0x800000, 0xedda4baf, 3 | BRF_GRA },           //  8 
+	{ "264-c8d.c8",   0x800000, 0x82b1ba22, 3 | BRF_GRA },           //  9 
+
+	{ "264-m1d.m1",   0x010000, 0x7e06206d, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "264-v1d.v1",   0x400000, 0x5c77a3fe, 5 | BRF_SND },           // 11 Sound data
+	{ "264-v2d.v2",   0x400000, 0xa9b7af14, 5 | BRF_SND },           // 12 
+	{ "264-v3d.v3",   0x400000, 0x17aff92a, 5 | BRF_SND },           // 13 
+	{ "264-v4d.v4",   0x400000, 0xbc6a091e, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(rotdnd, rotdnd, neogeo)
+STD_ROM_FN(rotdnd)
+
+struct BurnDriver BurnDrvrotdnd = {
+	"rotdnd", "rotd", "neogeo", NULL, "2002",
+	"Rage of the Dragons (Fully Decrypted)\0", NULL, "Evoga / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, rotdndRomInfo, rotdndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Rage of the Dragons (Boss Hack)
+
+static struct BurnRomInfo rotdbhRomDesc[] = {
+	{ "264-p1b.p1",   0x800000, 0x44889313, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "264-c1d.c1",   0x800000, 0xec9d18c0, 3 | BRF_GRA },           //  1 Sprite data
+	{ "264-c2d.c2",   0x800000, 0xb1069066, 3 | BRF_GRA },           //  2 
+	{ "264-c3d.c3",   0x800000, 0x7e636d49, 3 | BRF_GRA },           //  3 
+	{ "264-c4d.c4",   0x800000, 0x76892fda, 3 | BRF_GRA },           //  4 
+	{ "264-c5d.c5",   0x800000, 0x469061bc, 3 | BRF_GRA },           //  5 
+	{ "264-c6d.c6",   0x800000, 0x2200220a, 3 | BRF_GRA },           //  6 
+	{ "264-c7b.c7",   0x800000, 0x2b5c1044, 3 | BRF_GRA },           //  7 
+	{ "264-c8b.c8",   0x800000, 0xf697f287, 3 | BRF_GRA },           //  8 
+
+	{ "264-m1d.m1",   0x010000, 0x7e06206d, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "264-v1d.v1",   0x400000, 0x5c77a3fe, 5 | BRF_SND },           // 10 Sound data
+	{ "264-v2d.v2",   0x400000, 0xa9b7af14, 5 | BRF_SND },           // 11 
+	{ "264-v3d.v3",   0x400000, 0x17aff92a, 5 | BRF_SND },           // 12 
+	{ "264-v4d.v4",   0x400000, 0xbc6a091e, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(rotdbh, rotdbh, neogeo)
+STD_ROM_FN(rotdbh)
+
+struct BurnDriver BurnDrvrotdbh = {
+	"rotdbh", "rotd", "neogeo", NULL, "2002",
+	"Rage of the Dragons (Boss Hack)\0", NULL, "Evoga / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, rotdbhRomInfo, rotdbhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters 2002 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k2ndRomDesc[] = {
+	{ "265-p1d.p1",   0x100000, 0xd7a4ef5e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2d.p2",   0x400000, 0x8e26868b, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-c1d.c1",   0x800000, 0x7efa6ef7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "265-c2d.c2",   0x800000, 0xaa82948b, 3 | BRF_GRA },           //  3 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  4 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  5 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  6 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  7 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           //  8 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           //  9 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 11 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 12 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 13 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k2nd, kof2k2nd, neogeo)
+STD_ROM_FN(kof2k2nd)
+
+struct BurnDriver BurnDrvkof2k2nd = {
+	"kof2k2nd", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 (Fully Decrypted)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2ndRomInfo, kof2k2ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)
+
+static struct BurnRomInfo kof2k2khRomDesc[] = {
+	{ "265-p1kh.p1",  0x100000, 0xd8f9626f, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2kh.p2",  0x400000, 0x97724411, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-c1kh.c1",  0x800000, 0x7f10255a, 3 | BRF_GRA },           //  2 Sprite data
+	{ "265-c2kh.c2",  0x800000, 0x2aab7f98, 3 | BRF_GRA },           //  3 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  4 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  5 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  6 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  7 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           //  8 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           //  9 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 11 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 12 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 13 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k2kh, kof2k2kh, neogeo)
+STD_ROM_FN(kof2k2kh)
+
+struct BurnDriver BurnDrvkof2k2kh = {
+	"kof2k2kh", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2khRomInfo, kof2k2khRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 CLIMAX (Hack)
+
+static struct BurnRomInfo kof2k2cmRomDesc[] = {
+	{ "265-p1x.p1",   0x100000, 0x516c362b, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2x.p2",   0x400000, 0x01f474fa, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-s1x.s1",   0x020000, 0xbd19c308, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "265-c1d.c1",   0x800000, 0x7efa6ef7, 3 | BRF_GRA },           //  3 Sprite data
+	{ "265-c2d.c2",   0x800000, 0xaa82948b, 3 | BRF_GRA },           //  4 
+	{ "265-c3x.c3",   0x800000, 0xca656090, 3 | BRF_GRA },           //  5 
+	{ "265-c4x.c4",   0x800000, 0xeb898849, 3 | BRF_GRA },           //  6 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  7 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  8 
+	{ "265-c7x.c7",   0x800000, 0xd8a23e22, 3 | BRF_GRA },           //  9 
+	{ "265-c8x.c8",   0x800000, 0xf8ba2250, 3 | BRF_GRA },           // 10 
+
+	{ "265-m1x.m1",   0x020000, 0x9956ccd8, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "265-v1x.v1",   0x800000, 0x6e7e3508, 5 | BRF_SND },           // 12 Sound data
+	{ "265-v2x.v2",   0x800000, 0x2157b90f, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof2k2cm, kof2k2cm, neogeo)
+STD_ROM_FN(kof2k2cm)
+
+struct BurnDriver BurnDrvkof2k2cm = {
+	"kof2k2cm", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 CLIMAX (Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2cmRomInfo, kof2k2cmRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)
+// Modified by: GSC2007
+// Version number: 2017-12-26
+
+static struct BurnRomInfo kf2k2pls2017RomDesc[] = {
+	{ "265-p1ps.p1",  0x100000, 0xbd94702d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2ps.p2",  0x500000, 0x76e75315, 1 | BRF_ESS | BRF_PRG }, //  1 
+	{ "265-p3ps.p3",  0x020000, 0x6bfe80b0, 1 | BRF_ESS | BRF_PRG }, //  2 
+
+	{ "265-s1ps.s1",  0x020000, 0x96bdd036, 2 | BRF_GRA },           //  3 Text layer tiles
+
+	{ "265-c1ps.c1",  0x800000, 0x93cf6345, 3 | BRF_GRA },           //  4 Sprite data
+	{ "265-c2ps.c2",  0x800000, 0xd7373d66, 3 | BRF_GRA },           //  5 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  6 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  7 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  8 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  9 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           // 10 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           // 11 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 12 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 13 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 14 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 15 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 16 
+};
+
+STDROMPICKEXT(kf2k2pls2017, kf2k2pls2017, neogeo)
+STD_ROM_FN(kf2k2pls2017)
+
+static UINT8 *kf2k2pls2017ExtraROM;
+
+static INT32 kf2k2pls2017Init()
+{
+ 	INT32 nRet = NeoInit();
+
+	if (nRet == 0) {
+		kf2k2pls2017ExtraROM = (UINT8*)BurnMalloc(0x20000);
+
+		if (BurnLoadRom(kf2k2pls2017ExtraROM, 2, 1)) return 1;
+
+		UINT16 *rom = (UINT16*)kf2k2pls2017ExtraROM;
+		for (INT32 i = 0; i < 0x20000/2; i++) {
+			if (rom[i] == 0x4e7d) rom[i] = 0x4e71;
+			if (rom[i] == 0x4e7c) rom[i] = 0x4e75;
+		}
+
+		rom[0x0178/2] = 0x4e75;
+
+		rom = (UINT16*)Neo68KROMActive;
+
+		for (INT32 i = 0; i < 0x100000/2; i++) {
+			if (rom[i] == 0x4e7d) rom[i] = 0x4e71;
+			if (rom[i] == 0x4e7c) rom[i] = 0x4e75;
+		}
+
+		SekOpen(0);
+		SekMapMemory(kf2k2pls2017ExtraROM, 0x900000, 0x91ffff, MAP_ROM);
+		SekClose();
+	}
+
+	return nRet;
+}
+
+static INT32 kf2k2pls2017Exit()
+{
+	BurnFree (kf2k2pls2017ExtraROM);
+
+	return NeoExit();
+}
+
+struct BurnDriver BurnDrvkf2k2pls2017 = {
+	"kf2k2pls2017", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kf2k2pls2017RomInfo, kf2k2pls2017RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kf2k2pls2017Init, kf2k2pls2017Exit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Matrimelee (Fully Decrypted)
+
+static struct BurnRomInfo matrimndRomDesc[] = {
+	{ "266-p1d.p1",  0x100000, 0x5d4c2dc7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "266-p2d.p2",  0x400000, 0xb0132cef, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "266-c1d.c1",  0x800000, 0x0ab54c54, 3 | BRF_GRA },           //  2 Sprite data
+	{ "266-c2d.c2",  0x800000, 0xb834dd89, 3 | BRF_GRA },           //  3 
+	{ "266-c3d.c3",  0x800000, 0xf31d68d4, 3 | BRF_GRA },           //  4 
+	{ "266-c4d.c4",  0x800000, 0x58cfb6e9, 3 | BRF_GRA },           //  5 
+	{ "266-c5d.c5",  0x800000, 0xf3c0e3fd, 3 | BRF_GRA },           //  6 
+	{ "266-c6d.c6",  0x800000, 0xb53c8dcf, 3 | BRF_GRA },           //  7 
+	{ "266-c7d.c7",  0x800000, 0x3c1fb02a, 3 | BRF_GRA },           //  8 
+	{ "266-c8d.c8",  0x800000, 0x5ee31f80, 3 | BRF_GRA },           //  9 
+
+	{ "266-m1d.m1",  0x010000, 0x563428bd, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "266-v1d.v1",  0x400000, 0x435f33cf, 5 | BRF_SND },           // 11 Sound data
+	{ "266-v2d.v2",  0x400000, 0x945f8831, 5 | BRF_SND },           // 12 
+	{ "266-v3d.v3",  0x400000, 0xe8362fcc, 5 | BRF_SND },           // 13 
+	{ "266-v4d.v4",  0x400000, 0x393c9a62, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(matrimnd, matrimnd, neogeo)
+STD_ROM_FN(matrimnd)
+
+struct BurnDriver BurnDrvmatrimnd = {
+	"matrimnd", "matrim", "neogeo", NULL, "2002",
+	"Matrimelee (Fully Decrypted)\0", NULL, "Noise Factory / Atlus", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, matrimndRomInfo, matrimndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Matrimelee (Boss Hack)
+
+static struct BurnRomInfo matrimdhRomDesc[] = {
+	{ "266-p1b.p1",  0x100000, 0x5f7b6942, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "266-p2d.p2",  0x400000, 0xb0132cef, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "266-c1d.c1",  0x800000, 0x0ab54c54, 3 | BRF_GRA },           //  2 Sprite data
+	{ "266-c2d.c2",  0x800000, 0xb834dd89, 3 | BRF_GRA },           //  3 
+	{ "266-c3d.c3",  0x800000, 0xf31d68d4, 3 | BRF_GRA },           //  4 
+	{ "266-c4d.c4",  0x800000, 0x58cfb6e9, 3 | BRF_GRA },           //  5 
+	{ "266-c5d.c5",  0x800000, 0xf3c0e3fd, 3 | BRF_GRA },           //  6 
+	{ "266-c6d.c6",  0x800000, 0xb53c8dcf, 3 | BRF_GRA },           //  7 
+	{ "266-c7d.c7",  0x800000, 0x3c1fb02a, 3 | BRF_GRA },           //  8 
+	{ "266-c8d.c8",  0x800000, 0x5ee31f80, 3 | BRF_GRA },           //  9 
+
+	{ "266-m1d.m1",  0x010000, 0x563428bd, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "266-v1d.v1",  0x400000, 0x435f33cf, 5 | BRF_SND },           // 11 Sound data
+	{ "266-v2d.v2",  0x400000, 0x945f8831, 5 | BRF_SND },           // 12 
+	{ "266-v3d.v3",  0x400000, 0xe8362fcc, 5 | BRF_SND },           // 13 
+	{ "266-v4d.v4",  0x400000, 0x393c9a62, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(matrimdh, matrimdh, neogeo)
+STD_ROM_FN(matrimdh)
+
+struct BurnDriver BurnDrvmatrimdh = {
+	"matrimdh", "matrim", "neogeo", NULL, "2002",
+	"Matrimelee (Boss Hack)\0", NULL, "Noise Factory / Atlus", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, matrimdhRomInfo, matrimdhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Pochi and Nyaa (Fully Decrypted)
+
+static struct BurnRomInfo pnyaandRomDesc[] = {
+	{ "267-p1d.p1",  0x080000, 0x400fd762, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "267-c1d.c1",  0x800000, 0x75fa4f27, 3 | BRF_GRA },           //  1 Sprite data
+	{ "267-c2d.c2",  0x800000, 0x02345689, 3 | BRF_GRA },           //  2 
+
+	{ "267-m1d.m1",  0x020000, 0xc13895b9, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "267-v1d.v1",  0x400000, 0x1ac7db71, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(pnyaand, pnyaand, neogeo)
+STD_ROM_FN(pnyaand)
+
+struct BurnDriver BurnDrvpnyaand = {
+	"pnyaand", "pnyaa", "neogeo", NULL, "2003",
+	"Pochi and Nyaa (Fully Decrypted)\0", NULL, "Aiky / Taito", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, pnyaandRomInfo, pnyaandRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 5 (Fully Decrypted)
+
+static struct BurnRomInfo mslug5ndRomDesc[] = {
+	{ "268-p1d.p1",   0x100000, 0x92ad7047, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "268-p2d.p2",   0x400000, 0x768ee64a, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "268-c1d.c1",   0x800000, 0xe8239365, 3 | BRF_GRA },           //  2 Sprite data
+	{ "268-c2d.c2",   0x800000, 0x89b21d4c, 3 | BRF_GRA },           //  3 
+	{ "268-c3d.c3",   0x800000, 0x3cda13a0, 3 | BRF_GRA },           //  4 
+	{ "268-c4d.c4",   0x800000, 0x9c00160d, 3 | BRF_GRA },           //  5 
+	{ "268-c5d.c5",   0x800000, 0x38754256, 3 | BRF_GRA },           //  6 
+	{ "268-c6d.c6",   0x800000, 0x59d33e9c, 3 | BRF_GRA },           //  7 
+	{ "268-c7d.c7",   0x800000, 0xc9f8c357, 3 | BRF_GRA },           //  8 
+	{ "268-c8d.c8",   0x800000, 0xfafc3eb9, 3 | BRF_GRA },           //  9 
+
+	{ "268-m1d.m1",   0x010000, 0x45a7b351, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "268-v1d.v1",   0x400000, 0xf61daa9e, 5 | BRF_SND },           // 11 Sound data
+	{ "268-v2d.v2",   0x400000, 0xeeb7c926, 5 | BRF_SND },           // 12 
+	{ "268-v3d.v3",   0x400000, 0x02fd519e, 5 | BRF_SND },           // 13 
+	{ "268-v4d.v4",   0x400000, 0xd7c67794, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(mslug5nd, mslug5nd, neogeo)
+STD_ROM_FN(mslug5nd)
+
+struct BurnDriver BurnDrvmslug5nd = {
+	"mslug5nd", "mslug5", "neogeo", NULL, "2003",
+	"Metal Slug 5 (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug5ndRomInfo, mslug5ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// SNK vs. Capcom - SVC Chaos (Fully Decrypted)
+
+static struct BurnRomInfo svcndRomDesc[] = {
+	{ "269-p1d.p1",   0x600000, 0xc3b1b4b7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "269-c1d.c1",   0x800000, 0x465d473b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "269-c2d.c2",   0x800000, 0x3eb28f78, 3 | BRF_GRA },           //  2 
+	{ "269-c3d.c3",   0x800000, 0xf4d4ab2b, 3 | BRF_GRA },           //  3 
+	{ "269-c4d.c4",   0x800000, 0xa69d523a, 3 | BRF_GRA },           //  4 
+	{ "269-c5d.c5",   0x800000, 0xba2a7892, 3 | BRF_GRA },           //  5 
+	{ "269-c6d.c6",   0x800000, 0x37371ca1, 3 | BRF_GRA },           //  6 
+	{ "269-c7d.c7",   0x800000, 0xd8418412, 3 | BRF_GRA },           //  7 
+	{ "269-c8d.c8",   0x800000, 0xe327a78c, 3 | BRF_GRA },           //  8 
+
+	{ "269-m1d.m1",   0x020000, 0x447b3123, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "269-v1d.v1",   0x400000, 0x5eb6c8ab, 5 | BRF_SND },           // 10 Sound data
+	{ "269-v2d.v2",   0x400000, 0x1cbe5aa6, 5 | BRF_SND },           // 11 
+	{ "269-v3d.v3",   0x400000, 0xf6267114, 5 | BRF_SND },           // 12 
+	{ "269-v4d.v4",   0x400000, 0x40d3ba59, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(svcnd, svcnd, neogeo)
+STD_ROM_FN(svcnd)
+
+struct BurnDriver BurnDrvsvcnd = {
+	"svcnd", "svc", "neogeo", NULL, "2003",
+	"SNK vs. Capcom - SVC Chaos (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF | FBF_SF,
+	NULL, svcndRomInfo, svcndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)
+
+static struct BurnRomInfo svcndps2RomDesc[] = {
+	{ "269-p1ps2.p1", 0x600000, 0x2b11751d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "269-c1d.c1",   0x800000, 0x465d473b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "269-c2d.c2",   0x800000, 0x3eb28f78, 3 | BRF_GRA },           //  2 
+	{ "269-c3d.c3",   0x800000, 0xf4d4ab2b, 3 | BRF_GRA },           //  3 
+	{ "269-c4d.c4",   0x800000, 0xa69d523a, 3 | BRF_GRA },           //  4 
+	{ "269-c5d.c5",   0x800000, 0xba2a7892, 3 | BRF_GRA },           //  5 
+	{ "269-c6d.c6",   0x800000, 0x37371ca1, 3 | BRF_GRA },           //  6 
+	{ "269-c7ps2.c7", 0x800000, 0xbfe9c5f6, 3 | BRF_GRA },           //  7 
+	{ "269-c8ps2.c8", 0x800000, 0x75f2f88c, 3 | BRF_GRA },           //  8 
+
+	{ "269-m1d.m1",   0x020000, 0x447b3123, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "269-v1d.v1",   0x400000, 0x5eb6c8ab, 5 | BRF_SND },           // 10 Sound data
+	{ "269-v2d.v2",   0x400000, 0x1cbe5aa6, 5 | BRF_SND },           // 11 
+	{ "269-v3d.v3",   0x400000, 0xf6267114, 5 | BRF_SND },           // 12
+	{ "269-v4d.v4",   0x400000, 0x40d3ba59, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(svcndps2, svcndps2, neogeo)
+STD_ROM_FN(svcndps2)
+
+struct BurnDriver BurnDrvsvcndps2 = {
+	"svcndps2", "svc", "neogeo", NULL, "2003",
+	"SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF | FBF_SF,
+	NULL, svcndps2RomInfo, svcndps2RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V (Fully Decrypted)
+
+static struct BurnRomInfo samsho5ndRomDesc[] = {
+	{ "270-p1d.p1",  0x400000, 0x3fcae9e7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "270-p2d.p2",  0x400000, 0x91979dee, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "270-c1d.c1",  0x800000, 0x9adec562, 3 | BRF_GRA },           //  2 Sprite data
+	{ "270-c2d.c2",  0x800000, 0xac0309e5, 3 | BRF_GRA },           //  3 
+	{ "270-c3d.c3",  0x800000, 0x82db9dae, 3 | BRF_GRA },           //  4 
+	{ "270-c4d.c4",  0x800000, 0xf8041153, 3 | BRF_GRA },           //  5 
+	{ "270-c5d.c5",  0x800000, 0xe689d62d, 3 | BRF_GRA },           //  6 
+	{ "270-c6d.c6",  0x800000, 0xa993bdcf, 3 | BRF_GRA },           //  7 
+	{ "270-c7d.c7",  0x800000, 0x707d56a0, 3 | BRF_GRA },           //  8 
+	{ "270-c8d.c8",  0x800000, 0xf5903adc, 3 | BRF_GRA },           //  9 
+
+	{ "270-m1d.m1",  0x020000, 0x8afd2b46, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "270-v1d.v1",  0x400000, 0x240c6742, 5 | BRF_SND },           // 11 Sound data
+	{ "270-v2d.v2",  0x400000, 0x7d096473, 5 | BRF_SND },           // 12 
+	{ "270-v3d.v3",  0x400000, 0x980e4cc7, 5 | BRF_SND },           // 13 
+	{ "270-v4d.v4",  0x400000, 0xf8fd316f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsho5nd, samsho5nd, neogeo)
+STD_ROM_FN(samsho5nd)
+
+struct BurnDriver BurnDrvsamsho5nd = {
+	"samsho5nd", "samsho5", "neogeo", NULL, "2003",
+	"Samurai Shodown V (Fully Decrypted)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho5ndRomInfo, samsho5ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V (Boss Hack)
+
+static struct BurnRomInfo samsh5ndbRomDesc[] = {
+	{ "270-p1b.p1",  0x400000, 0x85f15550, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "270-p2d.p2",  0x400000, 0x91979dee, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "270-c1d.c1",  0x800000, 0x9adec562, 3 | BRF_GRA },           //  2 Sprite data
+	{ "270-c2d.c2",  0x800000, 0xac0309e5, 3 | BRF_GRA },           //  3 
+	{ "270-c3d.c3",  0x800000, 0x82db9dae, 3 | BRF_GRA },           //  4 
+	{ "270-c4d.c4",  0x800000, 0xf8041153, 3 | BRF_GRA },           //  5 
+	{ "270-c5d.c5",  0x800000, 0xe689d62d, 3 | BRF_GRA },           //  6 
+	{ "270-c6d.c6",  0x800000, 0xa993bdcf, 3 | BRF_GRA },           //  7 
+	{ "270-c7b.c7",  0x800000, 0x02914b0b, 3 | BRF_GRA },           //  8 
+	{ "270-c8b.c8",  0x800000, 0xe874ac8b, 3 | BRF_GRA },           //  9 
+
+	{ "270-m1d.m1",  0x020000, 0x8afd2b46, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "270-v1d.v1",  0x400000, 0x240c6742, 5 | BRF_SND },           // 11 Sound data
+	{ "270-v2d.v2",  0x400000, 0x7d096473, 5 | BRF_SND },           // 12 
+	{ "270-v3d.v3",  0x400000, 0x980e4cc7, 5 | BRF_SND },           // 13 
+	{ "270-v4d.v4",  0x400000, 0xf8fd316f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsh5ndb, samsh5ndb, neogeo)
+STD_ROM_FN(samsh5ndb)
+
+struct BurnDriver BurnDrvsamsh5ndb = {
+	"samsh5ndb", "samsho5", "neogeo", NULL, "2003",
+	"Samurai Shodown V (Boss Hack)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsh5ndbRomInfo, samsh5ndbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2003 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k3ndRomDesc[] = {
+	{ "271-p1d.p1",   0x800000, 0x4899d569, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "271-s1d.s1",   0x080000, 0x85f47910, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "271-c1d.c1",   0x800000, 0xe42fc226, 3 | BRF_GRA },           //  2 Sprite data
+	{ "271-c2d.c2",   0x800000, 0x1b5e3b58, 3 | BRF_GRA },           //  3 
+	{ "271-c3d.c3",   0x800000, 0xd334fdd9, 3 | BRF_GRA },           //  4 
+	{ "271-c4d.c4",   0x800000, 0x0d457699, 3 | BRF_GRA },           //  5 
+	{ "271-c5d.c5",   0x800000, 0x8a91aae4, 3 | BRF_GRA },           //  6 
+	{ "271-c6d.c6",   0x800000, 0x9f8674b8, 3 | BRF_GRA },           //  7 
+	{ "271-c7d.c7",   0x800000, 0x84b4ecd7, 3 | BRF_GRA },           //  8 
+	{ "271-c8d.c8",   0x800000, 0xaca7f22d, 3 | BRF_GRA },           //  9 
+
+	{ "271-m1d.m1",   0x020000, 0xcdd67d4d, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "271-v1d.v1",   0x400000, 0xdba0b938, 5 | BRF_SND },           // 11 Sound data
+	{ "271-v2d.v2",   0x400000, 0x71956ee2, 5 | BRF_SND },           // 12 
+	{ "271-v3d.v3",   0x400000, 0xddbbb199, 5 | BRF_SND },           // 13 
+	{ "271-v4d.v4",   0x400000, 0x01b90c4f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k3nd, kof2k3nd, neogeo)
+STD_ROM_FN(kof2k3nd)
+
+struct BurnDriver BurnDrvkof2k3nd = {
+	"kof2k3nd", "kof2003", "neogeo", NULL, "2003",
+	"The King of Fighters 2003 (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k3ndRomInfo, kof2k3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V Special (Fully Decrypted)
+
+static struct BurnRomInfo ssh5spndRomDesc[] = {
+	{ "272-p1d.p1",   0x400000, 0xd0814aa8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "272-p2d.p2",   0x400000, 0xda770f06, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "272-c1d.c1",   0x800000, 0x8548097e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "272-c2d.c2",   0x800000, 0x8c1b48d0, 3 | BRF_GRA },           //  3 
+	{ "272-c3d.c3",   0x800000, 0x96ddb28c, 3 | BRF_GRA },           //  4 
+	{ "272-c4d.c4",   0x800000, 0x99ef7a0a, 3 | BRF_GRA },           //  5 
+	{ "272-c5d.c5",   0x800000, 0x772e8b1e, 3 | BRF_GRA },           //  6 
+	{ "272-c6d.c6",   0x800000, 0x5fff21fc, 3 | BRF_GRA },           //  7 
+	{ "272-c7d.c7",   0x800000, 0x9ac56a0e, 3 | BRF_GRA },           //  8 
+	{ "272-c8d.c8",   0x800000, 0xcfde7aff, 3 | BRF_GRA },           //  9 
+
+	{ "272-m1d.m1",   0x020000, 0x0b5d4d6a, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "272-v1d.v1",   0x400000, 0x4d1b252b, 5 | BRF_SND },           // 11 Sound data
+	{ "272-v2d.v2",   0x400000, 0x0e46d2f8, 5 | BRF_SND },           // 12 
+	{ "272-v3d.v3",   0x400000, 0x3f0f7554, 5 | BRF_SND },           // 13 
+	{ "272-v4d.v4",   0x400000, 0xad8fabb4, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(ssh5spnd, ssh5spnd, neogeo)
+STD_ROM_FN(ssh5spnd)
+
+struct BurnDriver BurnDrvssh5spnd = {
+	"ssh5spnd", "samsh5sp", "neogeo", NULL, "2004",
+	"Samurai Shodown V Special (Fully Decrypted)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, ssh5spndRomInfo, ssh5spndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
diff --git a/src/burn/drv/pre90s/d_blktiger.cpp b/src/burn/drv/pre90s/d_blktiger.cpp
index ba5d22890..fc6279204 100644
--- a/src/burn/drv/pre90s/d_blktiger.cpp
+++ b/src/burn/drv/pre90s/d_blktiger.cpp
@@ -1114,6 +1114,51 @@ struct BurnDriver BurnDrvBlkdrgon = {
 };
 
 
+// Black Dragon (Korean)
+
+static struct BurnRomInfo blkdrgnkRomDesc[] = {
+	{ "bd_01k.5e",		0x08000, 0xe713b486, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bd_02.6e",		0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "bd_03.8e",		0x10000, 0xd1bf3757, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd_04.9e",		0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd_05.10e",		0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd_06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd_15k.2n",		0x08000, 0x3b432217, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd_12.5b",		0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd_11.4b",		0x10000, 0xc8b5fc52, 4 | BRF_GRA },           //  8
+	{ "bd_14.9b",		0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
+	{ "bd_13.8b",		0x10000, 0x5b0df8ce, 4 | BRF_GRA },           // 10
+
+	{ "bd_08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd_07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd_10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd_09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+	
+	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
+};
+
+STD_ROM_PICK(blkdrgnk)
+STD_ROM_FN(blkdrgnk)
+
+struct BurnDriver BurnDrvBlkdrgnk = {
+	"blkdrgnk", "blktiger", NULL, NULL, "1987",
+	"Black Dragon (Korean)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blkdrgnkRomInfo, blkdrgnkRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
 // Black Dragon (bootleg)
 
 static struct BurnRomInfo blkdrgonbRomDesc[] = {
diff --git a/src/burn/drv/pre90s/d_ginganin.cpp b/src/burn/drv/pre90s/d_ginganin.cpp
index eb74c000d..8e24e20cd 100644
--- a/src/burn/drv/pre90s/d_ginganin.cpp
+++ b/src/burn/drv/pre90s/d_ginganin.cpp
@@ -745,3 +745,43 @@ struct BurnDriver BurnDrvGinganina = {
 	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
 	256, 224, 4, 3
 };
+
+// Ginga NinkyouDen (Korean)
+
+static struct BurnRomInfo ginganinkRomDesc[] = {
+	{ "gn_02.bin",	0x10000, 0x4a4e012f, 1 | BRF_PRG | BRF_ESS }, //  0 M68000 Code
+	{ "gn_01.bin",	0x10000, 0x30256fcb, 1 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "gn_05.bin",	0x10000, 0xe76e10e7, 2 | BRF_PRG | BRF_ESS }, //  2 M6809 Code
+
+	{ "gn_15k.bin",	0x10000, 0xeba72bc2, 3 | BRF_GRA },           //  3 Background Tiles
+	{ "gn_14.bin",	0x10000, 0xe73fe668, 3 | BRF_GRA },           //  4
+
+	{ "gn_12.bin",	0x10000, 0xc134a1e9, 4 | BRF_GRA },           //  5 Foreground Tiles
+	{ "gn_13.bin",	0x10000, 0x1d3bec21, 4 | BRF_GRA },           //  6
+
+	{ "gn_10k.bin",	0x04000, 0x5d5ce06f, 5 | BRF_GRA },           //  7 Characters
+
+	{ "gn_06.bin",	0x20000, 0xbdc65835, 6 | BRF_GRA },           //  8 Sprites
+	{ "gn_07k.bin",	0x10000, 0xd12bae11, 6 | BRF_GRA },           //  9
+	{ "gn_08.bin",	0x10000, 0xf7c73c18, 6 | BRF_GRA },           // 10
+	{ "gn_09.bin",	0x10000, 0xa5e07c3b, 6 | BRF_GRA },           // 11
+
+	{ "gn_11.bin",	0x08000, 0xf0d0e605, 7 | BRF_GRA },           // 12 Background Tilemap
+
+	{ "gn_04.bin",	0x10000, 0x0ed9133b, 8 | BRF_SND },           // 13 Y8950 Samples
+	{ "gn_03.bin",	0x10000, 0xf1ba222c, 8 | BRF_SND },           // 14
+};
+
+STD_ROM_PICK(ginganink)
+STD_ROM_FN(ginganink)
+
+struct BurnDriver BurnDrvGinganink = {
+	"ginganink", "ginganin", NULL, NULL, "1987",
+	"Ginga NinkyouDen (Korean)\0", NULL, "Jaleco", "Miscellaneous",
+	L"\u9280\u6CB3\u4EFB\u4FA0\u4F1D\0Ginga NinkyouDen (Korean)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_MISC_PRE90S, GBF_PLATFORM, 0,
+	NULL, ginganinkRomInfo, ginganinkRomName, NULL, NULL, NULL, NULL, GinganinInputInfo, GinganinDIPInfo,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
diff --git a/src/burn/drv/sega/d_sys1.cpp b/src/burn/drv/sega/d_sys1.cpp
index a21520a8f..f02795717 100644
--- a/src/burn/drv/sega/d_sys1.cpp
+++ b/src/burn/drv/sega/d_sys1.cpp
@@ -6525,7 +6525,7 @@ struct BurnDriver BurnDrvFlicky = {
 
 struct BurnDriver BurnDrvFlickya = {
 	"flickya", "flicky", NULL, NULL, "1984",
-	"Flicky (128k Version, 315-5051, larger roms))\0", NULL, "Sega", "System 1",
+	"Flicky (128k Version, 315-5051, larger roms)\0", NULL, "Sega", "System 1",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM1, GBF_PLATFORM, 0,
 	NULL, FlickyaRomInfo, FlickyaRomName, NULL, NULL, NULL, NULL, FlickyInputInfo, FlickyDIPInfo,
diff --git a/src/burn/drv/sega/d_sys16b.cpp b/src/burn/drv/sega/d_sys16b.cpp
index f4b762eab..5aa8f173e 100644
--- a/src/burn/drv/sega/d_sys16b.cpp
+++ b/src/burn/drv/sega/d_sys16b.cpp
@@ -9513,7 +9513,7 @@ struct BurnDriver BurnDrvCottonud = {
 
 struct BurnDriver BurnDrvCottonj = {
 	"cottonj", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b))\0", NULL, "Success / Sega", "System 16B",
+	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b)\0", NULL, "Success / Sega", "System 16B",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
 	NULL, CottonjRomInfo, CottonjRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
@@ -9523,7 +9523,7 @@ struct BurnDriver BurnDrvCottonj = {
 
 struct BurnDriver BurnDrvCottonjd = {
 	"cottonjd", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted))\0", NULL, "Success / Sega", "System 16B",
+	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted)\0", NULL, "Success / Sega", "System 16B",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
 	NULL, CottonjdRomInfo, CottonjdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
@@ -9533,7 +9533,7 @@ struct BurnDriver BurnDrvCottonjd = {
 
 struct BurnDriver BurnDrvCottonja = {
 	"cottonja", "cotton", NULL, NULL, "1991",
-	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a))\0", NULL, "Success / Sega", "System 16B",
+	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a)\0", NULL, "Success / Sega", "System 16B",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
 	NULL, CottonjaRomInfo, CottonjaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
@@ -9543,7 +9543,7 @@ struct BurnDriver BurnDrvCottonja = {
 
 struct BurnDriver BurnDrvCottonjad = {
 	"cottonjad", "cotton", NULL, NULL, "1991",
-	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted))\0", NULL, "Success / Sega", "System 16B",
+	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted)\0", NULL, "Success / Sega", "System 16B",
 	NULL, NULL, NULL, NULL,
 	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
 	NULL, CottonjadRomInfo, CottonjadRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
diff --git a/src/burner/burner.h b/src/burner/burner.h
index ddb20a517..19f0ef983 100644
--- a/src/burner/burner.h
+++ b/src/burner/burner.h
@@ -198,6 +198,31 @@ void ComputeGammaLUT();
 #define DAT_FDS_ONLY        13
 #define DAT_NGP_ONLY        14
 
+// Add Codes (DsNo)
+#define DAT_CAPCOM_ONLY     15
+#define DAT_CPS1_ONLY       16
+#define DAT_CPS2_ONLY       17
+#define DAT_CPS3_ONLY       18
+#define DAT_CAVE_ONLY       19
+#define DAT_DATAEAST_ONLY   20
+#define DAT_GALAXIAN_ONLY   21
+#define DAT_IREM_ONLY       22
+#define DAT_KANEKO_ONLY     23
+#define DAT_KONAMI_ONLY     24
+#define DAT_MIDWAY_ONLY     25
+#define DAT_SNK_ONLY        26
+#define DAT_PACMAN_ONLY     27
+#define DAT_PGM_ONLY        28
+#define DAT_PSIKYO_ONLY     29
+#define DAT_SEGA_ONLY       30
+#define DAT_SETA_ONLY       31
+#define DAT_TAITO_ONLY      32
+#define DAT_TECHNOS_ONLY    33
+#define DAT_TOAPLAN_ONLY    34
+#define DAT_PRE90S_ONLY     35
+#define DAT_POST90S_ONLY    36
+// Add Codes (DsNo)
+
 INT32 write_datfile(INT32 bType, FILE* fDat);
 INT32 create_datfile(TCHAR* szFilename, INT32 bType);
 
diff --git a/src/burner/dat.cpp b/src/burner/dat.cpp
index 6a8cd762f..6e4a43a80 100644
--- a/src/burner/dat.cpp
+++ b/src/burner/dat.cpp
@@ -123,6 +123,30 @@ INT32 write_datfile(INT32 bType, FILE* fDat)
 	if (bType == DAT_NES_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - NES Games</name>\n");
 	if (bType == DAT_FDS_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - FDS Games</name>\n");
 	if (bType == DAT_NGP_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Neo Geo Pocket Games</name>\n");
+// Add Codes (DsNo)
+	if (bType == DAT_CAPCOM_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Capcom Misc Games</name>\n");
+	if (bType == DAT_CPS1_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - CPS-1 Games</name>\n");
+	if (bType == DAT_CPS2_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - CPS-2 Games</name>\n");
+	if (bType == DAT_CPS3_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - CPS-3 Games</name>\n");
+	if (bType == DAT_CAVE_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Cave Games</name>\n");
+	if (bType == DAT_DATAEAST_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Dataeast Games</name>\n");
+	if (bType == DAT_GALAXIAN_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Galaxian Games</name>\n");
+	if (bType == DAT_IREM_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Irem Games</name>\n");
+	if (bType == DAT_KANEKO_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Kaneko Games</name>\n");
+	if (bType == DAT_KONAMI_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Konami Games</name>\n");
+	if (bType == DAT_MIDWAY_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Midway Games</name>\n");
+	if (bType == DAT_SNK_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Neogeo Games</name>\n");
+	if (bType == DAT_PACMAN_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Pacman Games</name>\n");
+	if (bType == DAT_PGM_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - PGM Games</name>\n");
+	if (bType == DAT_PSIKYO_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Psikyo Games</name>\n");
+	if (bType == DAT_SEGA_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Sega Games</name>\n");
+	if (bType == DAT_SETA_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Seta Games</name>\n");
+	if (bType == DAT_TAITO_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Taito Games</name>\n");
+	if (bType == DAT_TECHNOS_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Technos Games</name>\n");
+	if (bType == DAT_TOAPLAN_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Toaplan Games</name>\n");
+	if (bType == DAT_PRE90S_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Pre90s Games</name>\n");
+	if (bType == DAT_POST90S_ONLY) fprintf(fDat, "\t\t<name>" APP_TITLE " - Post90s Games</name>\n");
+// Add Codes (DsNo)
 
 	if (bType == DAT_ARCADE_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Arcade Games</description>\n"), szAppBurnVer);
 	if (bType == DAT_MEGADRIVE_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Megadrive Games</description>\n"), szAppBurnVer);
@@ -139,6 +163,31 @@ INT32 write_datfile(INT32 bType, FILE* fDat)
 	if (bType == DAT_NES_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" NES Games</description>\n"), szAppBurnVer);
 	if (bType == DAT_FDS_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" FDS Games</description>\n"), szAppBurnVer);
 	if (bType == DAT_NGP_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Neo Geo Pocket Games</description>\n"), szAppBurnVer);
+// Add Codes (DsNo)
+	if (bType == DAT_CAPCOM_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Capcom Misc Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_CPS1_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" CPS-1 Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_CPS2_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" CPS-2 Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_CPS3_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" CPS-3 Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_CAVE_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Cave Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_DATAEAST_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Dataeast Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_GALAXIAN_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Galaxian Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_IREM_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Irem Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_KANEKO_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Kaneko Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_KONAMI_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Konami Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_MIDWAY_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Midway Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_SNK_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Neogeo Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_PACMAN_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Pacman Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_PGM_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" PGM Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_PSIKYO_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Psikyo Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_SEGA_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Sega Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_SETA_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Seta Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_TAITO_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Taito Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_TECHNOS_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Technos Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_TOAPLAN_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Toaplan Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_PRE90S_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Pre90s Games</description>\n"), szAppBurnVer);
+	if (bType == DAT_POST90S_ONLY) _ftprintf(fDat, _T("\t\t<description>") _T(APP_TITLE) _T(" v%s") _T(" Post90s Games</description>\n"), szAppBurnVer);
+// Add Codes (DsNo)
+
 	fprintf(fDat, "\t\t<category>Standard DatFile</category>\n");
 	_ftprintf(fDat, _T("\t\t<version>%s</version>\n"), szAppBurnVer);
 	fprintf(fDat, "\t\t<author>" APP_TITLE "</author>\n");
@@ -238,6 +287,172 @@ INT32 write_datfile(INT32 bType, FILE* fDat)
 			continue;
 		}
 
+// Add Codes (DsNo)
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARWARE_CAPCOM_MISC) && (bType == DAT_CAPCOM_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1) && (bType == DAT_CPS1_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1_QSOUND) && (bType == DAT_CPS1_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1_GENERIC) && (bType == DAT_CPS1_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPSCHANGER) && (bType == DAT_CPS1_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS2) && (bType == DAT_CPS2_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS2_SIMM) && (bType == DAT_CPS2_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS3) && (bType == DAT_CPS3_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS3_NO_CD) && (bType == DAT_CPS3_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_CAVE) && (bType == DAT_CAVE_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAVE_M6295) && (bType == DAT_CAVE_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAVE_YM2151) && (bType == DAT_CAVE_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_DATAEAST) && (bType == DAT_DATAEAST_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_GALAXIAN) && (bType == DAT_GALAXIAN_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M62) && (bType == DAT_IREM_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M63) && (bType == DAT_IREM_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M72) && (bType == DAT_IREM_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M90) && (bType == DAT_IREM_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M92) && (bType == DAT_IREM_ONLY)) {
+							if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_MISC) && (bType == DAT_IREM_ONLY)) {
+								continue;
+							}
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO16) && (bType == DAT_KANEKO_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO_MISC) && (bType == DAT_KANEKO_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO_SKNS) && (bType == DAT_KANEKO_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_KONAMI) && (bType == DAT_KONAMI_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_KINST) && (bType == DAT_MIDWAY_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_TUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_WUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_WUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SNK_NEOGEO) && (bType == DAT_SNK_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SNK_DEDICATED_PCB) && (bType == DAT_SNK_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PACMAN) && (bType == DAT_PACMAN_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IGS_PGM) && (bType == DAT_PGM_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IGS_USE_ARM_CPU) && (bType == DAT_PGM_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PSIKYO) && (bType == DAT_PSIKYO_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEMX) && (bType == DAT_SEGA_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEMY) && (bType == DAT_SEGA_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16A) && (bType == DAT_SEGA_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16B) && (bType == DAT_SEGA_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16M) && (bType == DAT_SEGA_ONLY)) {
+							if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM18) && (bType == DAT_SEGA_ONLY)) {
+								if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_HANGON) && (bType == DAT_SEGA_ONLY)) {
+									if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_OUTRUN) && (bType == DAT_SEGA_ONLY)) {
+										if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM1) && (bType == DAT_SEGA_ONLY)) {
+											if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_MISC) && (bType == DAT_SEGA_ONLY)) {
+												if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM24) && (bType == DAT_SEGA_ONLY)) {
+													continue;
+												}
+											}
+										}
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA1) && (bType == DAT_SETA_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA2) && (bType == DAT_SETA_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA_SSV) && (bType == DAT_SETA_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOZ) && (bType == DAT_TAITO_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOF2) && (bType == DAT_TAITO_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_MISC) && (bType == DAT_TAITO_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOX) && (bType == DAT_TAITO_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOB) && (bType == DAT_TAITO_ONLY)) {
+							continue;
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TECHNOS) && (bType == DAT_TECHNOS_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_RAIZING) && (bType == DAT_TOAPLAN_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_68K_Zx80) && (bType == DAT_TOAPLAN_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_68K_ONLY) && (bType == DAT_TOAPLAN_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_MISC) && (bType == DAT_TOAPLAN_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MISC_PRE90S) && (bType == DAT_PRE90S_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MISC_POST90S) && (bType == DAT_POST90S_ONLY)) {
+			continue;
+		}
+// Add Codes (DsNo)
+
 		strcpy(sgName, BurnDrvGetTextA(DRV_NAME));
 		strcpy(spName, "");											// make sure this string is empty before we start
 		strcpy(sbName, "");											// make sure this string is empty before we start
@@ -624,6 +839,172 @@ INT32 write_datfile(INT32 bType, FILE* fDat)
 			continue;
 		}
 
+// Add Codes (DsNo)
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARWARE_CAPCOM_MISC) && (bType == DAT_CAPCOM_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1) && (bType == DAT_CPS1_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1_QSOUND) && (bType == DAT_CPS1_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS1_GENERIC) && (bType == DAT_CPS1_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPSCHANGER) && (bType == DAT_CPS1_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS2) && (bType == DAT_CPS2_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS2_SIMM) && (bType == DAT_CPS2_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS3) && (bType == DAT_CPS3_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAPCOM_CPS3_NO_CD) && (bType == DAT_CPS3_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_CAVE) && (bType == DAT_CAVE_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAVE_M6295) && (bType == DAT_CAVE_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_CAVE_YM2151) && (bType == DAT_CAVE_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_DATAEAST) && (bType == DAT_DATAEAST_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_GALAXIAN) && (bType == DAT_GALAXIAN_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M62) && (bType == DAT_IREM_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M63) && (bType == DAT_IREM_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M72) && (bType == DAT_IREM_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M90) && (bType == DAT_IREM_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_M92) && (bType == DAT_IREM_ONLY)) {
+							if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IREM_MISC) && (bType == DAT_IREM_ONLY)) {
+								continue;
+							}
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO16) && (bType == DAT_KANEKO_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO_MISC) && (bType == DAT_KANEKO_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_KANEKO_SKNS) && (bType == DAT_KANEKO_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PREFIX_KONAMI) && (bType == DAT_KONAMI_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_KINST) && (bType == DAT_MIDWAY_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_TUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_WUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MIDWAY_WUNIT) && (bType == DAT_MIDWAY_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SNK_NEOGEO) && (bType == DAT_SNK_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SNK_DEDICATED_PCB) && (bType == DAT_SNK_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PACMAN) && (bType == DAT_PACMAN_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IGS_PGM) && (bType == DAT_PGM_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_IGS_USE_ARM_CPU) && (bType == DAT_PGM_ONLY)) {
+				continue;
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_PSIKYO) && (bType == DAT_PSIKYO_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEMX) && (bType == DAT_SEGA_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEMY) && (bType == DAT_SEGA_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16A) && (bType == DAT_SEGA_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16B) && (bType == DAT_SEGA_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM16M) && (bType == DAT_SEGA_ONLY)) {
+							if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM18) && (bType == DAT_SEGA_ONLY)) {
+								if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_HANGON) && (bType == DAT_SEGA_ONLY)) {
+									if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_OUTRUN) && (bType == DAT_SEGA_ONLY)) {
+										if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM1) && (bType == DAT_SEGA_ONLY)) {
+											if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_MISC) && (bType == DAT_SEGA_ONLY)) {
+												if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SEGA_SYSTEM24) && (bType == DAT_SEGA_ONLY)) {
+													continue;
+												}
+											}
+										}
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA1) && (bType == DAT_SETA_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA2) && (bType == DAT_SETA_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_SETA_SSV) && (bType == DAT_SETA_ONLY)) {
+					continue;
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOZ) && (bType == DAT_TAITO_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOF2) && (bType == DAT_TAITO_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_MISC) && (bType == DAT_TAITO_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOX) && (bType == DAT_TAITO_ONLY)) {
+						if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TAITO_TAITOB) && (bType == DAT_TAITO_ONLY)) {
+							continue;
+						}
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TECHNOS) && (bType == DAT_TECHNOS_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_RAIZING) && (bType == DAT_TOAPLAN_ONLY)) {
+			if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_68K_Zx80) && (bType == DAT_TOAPLAN_ONLY)) {
+				if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_68K_ONLY) && (bType == DAT_TOAPLAN_ONLY)) {
+					if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_TOAPLAN_MISC) && (bType == DAT_TOAPLAN_ONLY)) {
+						continue;
+					}
+				}
+			}
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MISC_PRE90S) && (bType == DAT_PRE90S_ONLY)) {
+			continue;
+		}
+
+		if (((BurnDrvGetHardwareCode() & HARDWARE_PUBLIC_MASK) != HARDWARE_MISC_POST90S) && (bType == DAT_POST90S_ONLY)) {
+			continue;
+		}
+// Add Codes (DsNo)
+
 		strcpy(sgName, BurnDrvGetTextA(DRV_NAME));
 
 #ifdef DAT_DEBUG
diff --git a/src/burner/win32/app.rc b/src/burner/win32/app.rc
index b8476d6af..920adb1f9 100644
--- a/src/burner/win32/app.rc
+++ b/src/burner/win32/app.rc
@@ -1092,7 +1092,34 @@ BEGIN
         MENUITEM SEPARATOR
         POPUP    "Generate dat file"
         BEGIN
-	        MENUITEM "Generate dat (Arcade only)...",			MENU_CLRMAME_PRO_XML
+	        POPUP "Generate dat (Arcade Games)..."
+	        BEGIN
+	            MENUITEM "Generate dat (Arcade only)...",			MENU_CLRMAME_PRO_XML
+	            MENUITEM SEPARATOR
+	            MENUITEM "Generate dat (Capcom Misc only)...",		MENU_CLRMAME_PRO_XML_CAPCOM_ONLY
+	            MENUITEM "Generate dat (CPS-1 only)...",			MENU_CLRMAME_PRO_XML_CPS1_ONLY
+	            MENUITEM "Generate dat (CPS-2 only)...",			MENU_CLRMAME_PRO_XML_CPS2_ONLY
+	            MENUITEM "Generate dat (CPS-3 only)...",			MENU_CLRMAME_PRO_XML_CPS3_ONLY
+	            MENUITEM "Generate dat (Cave only)...",				MENU_CLRMAME_PRO_XML_CAVE_ONLY
+	            MENUITEM "Generate dat (Data East only)...",			MENU_CLRMAME_PRO_XML_DATAEAST_ONLY
+	            MENUITEM "Generate dat (Galaxian only)...",			MENU_CLRMAME_PRO_XML_GALAXIAN_ONLY
+	            MENUITEM "Generate dat (Irem only)...",				MENU_CLRMAME_PRO_XML_IREM_ONLY
+	            MENUITEM "Generate dat (Kaneko only)...",			MENU_CLRMAME_PRO_XML_KANEKO_ONLY
+	            MENUITEM "Generate dat (Konami only)...",			MENU_CLRMAME_PRO_XML_KONAMI_ONLY
+	            MENUITEM "Generate dat (Midway only)...",			MENU_CLRMAME_PRO_XML_MIDWAY_ONLY
+	            MENUITEM "Generate dat (Neogeo only)...",			MENU_CLRMAME_PRO_XML_SNK_ONLY
+	            MENUITEM "Generate dat (Pacman only)...",			MENU_CLRMAME_PRO_XML_PACMAN_ONLY
+	            MENUITEM "Generate dat (PGM only)...",				MENU_CLRMAME_PRO_XML_PGM_ONLY
+	            MENUITEM "Generate dat (Psikyo only)...",			MENU_CLRMAME_PRO_XML_PSIKYO_ONLY
+	            MENUITEM "Generate dat (Sega only)...",				MENU_CLRMAME_PRO_XML_SEGA_ONLY
+	            MENUITEM "Generate dat (Seta only)...",				MENU_CLRMAME_PRO_XML_SETA_ONLY
+	            MENUITEM "Generate dat (Taito only)...",			MENU_CLRMAME_PRO_XML_TAITO_ONLY
+	            MENUITEM "Generate dat (Technos only)...",			MENU_CLRMAME_PRO_XML_TECHNOS_ONLY
+	            MENUITEM "Generate dat (Toaplan only)...",			MENU_CLRMAME_PRO_XML_TOAPLAN_ONLY
+	            MENUITEM "Generate dat (Pre90s only)...",			MENU_CLRMAME_PRO_XML_PRE90S_ONLY
+	            MENUITEM "Generate dat (Post90s only)...",			MENU_CLRMAME_PRO_XML_POST90S_ONLY
+            END
+            MENUITEM SEPARATOR
 	        MENUITEM "Generate dat (Megadrive only)...",		MENU_CLRMAME_PRO_XML_MD_ONLY
 			MENUITEM "Generate dat (PC-Engine only)...",		MENU_CLRMAME_PRO_XML_PCE_ONLY
 			MENUITEM "Generate dat (TurboGrafx16 only)...",		MENU_CLRMAME_PRO_XML_TG16_ONLY
diff --git a/src/burner/win32/main.cpp b/src/burner/win32/main.cpp
index b1bb0ddab..8964aa65a 100644
--- a/src/burner/win32/main.cpp
+++ b/src/burner/win32/main.cpp
@@ -1002,6 +1002,118 @@ int ProcessCmdLine()
 			return 1;
 		}
 
+// Add Codes (DsNo)
+		if (_tcscmp(szName, _T("-listinfocapcom")) == 0) {
+			write_datfile(DAT_CAPCOM_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfocps1")) == 0) {
+			write_datfile(DAT_CPS1_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfocps2")) == 0) {
+			write_datfile(DAT_CPS2_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfocps3")) == 0) {
+			write_datfile(DAT_CPS3_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfocave")) == 0) {
+			write_datfile(DAT_CAVE_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfodataeast")) == 0) {
+			write_datfile(DAT_DATAEAST_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfogalaxian")) == 0) {
+			write_datfile(DAT_GALAXIAN_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfoirem")) == 0) {
+			write_datfile(DAT_IREM_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfokaneko")) == 0) {
+			write_datfile(DAT_KANEKO_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfokonami")) == 0) {
+			write_datfile(DAT_KONAMI_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfomidway")) == 0) {
+			write_datfile(DAT_MIDWAY_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfoneogeo")) == 0) {
+			write_datfile(DAT_SNK_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfopacman")) == 0) {
+			write_datfile(DAT_PACMAN_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfopgm")) == 0) {
+			write_datfile(DAT_PGM_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfopsikyo")) == 0) {
+			write_datfile(DAT_PSIKYO_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfosega")) == 0) {
+			write_datfile(DAT_SEGA_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfoseta")) == 0) {
+			write_datfile(DAT_SETA_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfotaito")) == 0) {
+			write_datfile(DAT_TAITO_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfotechnos")) == 0) {
+			write_datfile(DAT_TECHNOS_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfotoaplan")) == 0) {
+			write_datfile(DAT_TOAPLAN_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfopre90s")) == 0) {
+			write_datfile(DAT_PRE90S_ONLY, stdout);
+			return 1;
+		}
+
+		if (_tcscmp(szName, _T("-listinfopost90s")) == 0) {
+			write_datfile(DAT_POST90S_ONLY, stdout);
+			return 1;
+		}
+// Add Codes (DsNo)
+
 		if (_tcscmp(szName, _T("-listextrainfo")) == 0) {
 			int nWidth;
 			int nHeight;
diff --git a/src/burner/win32/neocdlist.cpp b/src/burner/win32/neocdlist.cpp
index 555f1d751..991708296 100644
--- a/src/burner/win32/neocdlist.cpp
+++ b/src/burner/win32/neocdlist.cpp
@@ -43,6 +43,7 @@ struct NGCDGAME games[] =
 	{ _T("bstars2")		, _T("Baseball Stars 2")									, _T("1992")	, _T("SNK")					, 0x0041 },		//
 	{ _T("3countb")		, _T("3 Count Bout / Fire Suplex")							, _T("1995")	, _T("SNK")					, 0x0043 },		//
 	{ _T("aof")			, _T("Art of Fighting / Ryuuko no Ken")						, _T("1994")	, _T("SNK")					, 0x0044 },		//
+	{ _T("aofk")		, _T("Art of Fighting / Ryuuko no Ken (Korean, Hack)")		, _T("1994")	, _T("SNK")					, 0x5044 },		//
 	{ _T("samsho")		, _T("Samurai Shodown / Samurai Spirits")					, _T("1993")	, _T("SNK")					, 0x0045 },		//
 	{ _T("tophuntr")	, _T("Top Hunter - Roddy & Cathy")							, _T("1994")	, _T("SNK")					, 0x0046 },		//
 	{ _T("fatfury2")	, _T("Fatal Fury 2 / Garou Densetsu 2 - Aratanaru Tatakai")	, _T("1994")	, _T("SNK")					, 0x0047 },		//
@@ -76,6 +77,7 @@ struct NGCDGAME games[] =
 	{ _T("pbobblen")	, _T("Puzzle Bobble / Bust-A-Move")							, _T("1994")	, _T("SNK")					, 0x0083 },		//
 	{ _T("kof95")		, _T("The King of Fighters '95 (JP-US)")					, _T("1995")	, _T("SNK")					, 0x0084 },		//
 	{ _T("kof95r1")		, _T("The King of Fighters '95 (JP-US)(Rev 1)")				, _T("1995")	, _T("SNK")					, 0x1084 },		//
+	{ _T("kof95k")		, _T("The King of Fighters '95 (Korean, Hack)")				, _T("1995")	, _T("SNK")					, 0x5084 },		//
 	{ _T("ssrpg")		, _T("Shinsetsu Samurai Spirits - Bushidohretsuden")		, _T("1997")	, _T("SNK")					, 0x0085 },		//
 	{ _T("samsho3")		, _T("Samurai Shodown 3 / Samurai Spirits 3")				, _T("1995")	, _T("SNK")					, 0x0087 },		//
 	{ _T("stakwin")		, _T("Stakes Winner - GI Kanzen Seiha Heno Machi")			, _T("1995")	, _T("Saurus")				, 0x0088 },		//
@@ -107,6 +109,7 @@ struct NGCDGAME games[] =
 	{ _T("kof96ngc")	, _T("The King of Fighters '96 NEOGEO Collection")			, _T("1996")	, _T("SNK")					, 0x0229 },		//
 	{ _T("breakers")	, _T("Breakers")											, _T("1996")	, _T("Visco")				, 0x0230 },		//
 	{ _T("kof97")		, _T("The King of Fighters '97")							, _T("1997")	, _T("SNK")					, 0x0232 },		//
+	{ _T("kof97b")		, _T("The King of Fighters '97 (Boss Hack)")				, _T("1997")	, _T("SNK")					, 0x5232 },		//
 	{ _T("lastblad")	, _T("The Last Blade / Bakumatsu Roman - Gekka no Kenshi")	, _T("1997")	, _T("SNK")					, 0x0234 },		//
 	{ _T("rbff2")		, _T("Real Bout Fatal Fury 2 / Garou Densetsu 2 - Aratanaru Tatakai"), _T("1998"), _T("SNK")			, 0x0240 },		//
 	{ _T("mslug2")		, _T("Metal Slug 2 - Super Vehicle-001/II")					, _T("1998")	, _T("SNK")					, 0x0241 },		//
diff --git a/src/burner/win32/resource.h b/src/burner/win32/resource.h
index 7ef8758c9..d2b39c5b8 100644
--- a/src/burner/win32/resource.h
+++ b/src/burner/win32/resource.h
@@ -685,6 +685,31 @@
 #define MENU_CLRMAME_PRO_XML_FDS_ONLY       10736
 #define MENU_CLRMAME_PRO_XML_NGP_ONLY		10737
 
+// Add Codes (DsNo)
+#define MENU_CLRMAME_PRO_XML_CAPCOM_ONLY    10738
+#define MENU_CLRMAME_PRO_XML_CPS1_ONLY      10739
+#define MENU_CLRMAME_PRO_XML_CPS2_ONLY      10740
+#define MENU_CLRMAME_PRO_XML_CPS3_ONLY      10741
+#define MENU_CLRMAME_PRO_XML_CAVE_ONLY      10742
+#define MENU_CLRMAME_PRO_XML_DATAEAST_ONLY  10743
+#define MENU_CLRMAME_PRO_XML_GALAXIAN_ONLY  10744
+#define MENU_CLRMAME_PRO_XML_IREM_ONLY      10745
+#define MENU_CLRMAME_PRO_XML_KANEKO_ONLY    10746
+#define MENU_CLRMAME_PRO_XML_KONAMI_ONLY    10747
+#define MENU_CLRMAME_PRO_XML_MIDWAY_ONLY    10748
+#define MENU_CLRMAME_PRO_XML_SNK_ONLY       10749
+#define MENU_CLRMAME_PRO_XML_PACMAN_ONLY    10750
+#define MENU_CLRMAME_PRO_XML_PGM_ONLY       10751
+#define MENU_CLRMAME_PRO_XML_PSIKYO_ONLY    10752
+#define MENU_CLRMAME_PRO_XML_SEGA_ONLY      10753
+#define MENU_CLRMAME_PRO_XML_SETA_ONLY      10754
+#define MENU_CLRMAME_PRO_XML_TAITO_ONLY     10755
+#define MENU_CLRMAME_PRO_XML_TECHNOS_ONLY   10756
+#define MENU_CLRMAME_PRO_XML_TOAPLAN_ONLY   10757
+#define MENU_CLRMAME_PRO_XML_PRE90S_ONLY    10758
+#define MENU_CLRMAME_PRO_XML_POST90S_ONLY   10759
+// Add Codes (DsNo)
+
 #define MENU_BASIC_NORMAL          	    	11001
 #define MENU_BASIC_SCAN                	    11002
 #define MENU_SCAN50                     	11003
diff --git a/src/burner/win32/scrn.cpp b/src/burner/win32/scrn.cpp
index 552fd48d8..ec9697ea3 100644
--- a/src/burner/win32/scrn.cpp
+++ b/src/burner/win32/scrn.cpp
@@ -334,6 +334,30 @@ int CreateDatfileWindows(int bType)
 	if (bType == DAT_NES_ONLY) _sntprintf(szConsoleString, 64, _T(", NES Games only"));
 	if (bType == DAT_FDS_ONLY) _sntprintf(szConsoleString, 64, _T(", FDS Games only"));
 	if (bType == DAT_NGP_ONLY) _sntprintf(szConsoleString, 64, _T(", NeoGeo Pocket Games only"));
+// Add Codes (DsNo)
+	if (bType == DAT_CAPCOM_ONLY) _sntprintf(szConsoleString, 64, _T(", Capcom Misc only"));
+	if (bType == DAT_CPS1_ONLY) _sntprintf(szConsoleString, 64, _T(", CPS-1 only"));
+	if (bType == DAT_CPS2_ONLY) _sntprintf(szConsoleString, 64, _T(", CPS-2 only"));
+	if (bType == DAT_CPS3_ONLY) _sntprintf(szConsoleString, 64, _T(", CPS-3 only"));
+	if (bType == DAT_CAVE_ONLY) _sntprintf(szConsoleString, 64, _T(", Cave only"));
+	if (bType == DAT_DATAEAST_ONLY) _sntprintf(szConsoleString, 64, _T(", Data East only"));
+	if (bType == DAT_GALAXIAN_ONLY) _sntprintf(szConsoleString, 64, _T(", Galaxian only"));
+	if (bType == DAT_IREM_ONLY) _sntprintf(szConsoleString, 64, _T(", Irem only"));
+	if (bType == DAT_KANEKO_ONLY) _sntprintf(szConsoleString, 64, _T(", Kaneko only"));
+	if (bType == DAT_KONAMI_ONLY) _sntprintf(szConsoleString, 64, _T(", Konami only"));
+	if (bType == DAT_MIDWAY_ONLY) _sntprintf(szConsoleString, 64, _T(", Midway only"));
+	if (bType == DAT_SNK_ONLY) _sntprintf(szConsoleString, 64, _T(", Neogeo only"));
+	if (bType == DAT_PACMAN_ONLY) _sntprintf(szConsoleString, 64, _T(", Pacman only"));
+	if (bType == DAT_PGM_ONLY) _sntprintf(szConsoleString, 64, _T(", PGM only"));
+	if (bType == DAT_PSIKYO_ONLY) _sntprintf(szConsoleString, 64, _T(", Psikyo only"));
+	if (bType == DAT_SEGA_ONLY) _sntprintf(szConsoleString, 64, _T(", Sega only"));
+	if (bType == DAT_SETA_ONLY) _sntprintf(szConsoleString, 64, _T(", Seta only"));
+	if (bType == DAT_TAITO_ONLY) _sntprintf(szConsoleString, 64, _T(", Taito only"));
+	if (bType == DAT_TECHNOS_ONLY) _sntprintf(szConsoleString, 64, _T(", Technos only"));
+	if (bType == DAT_TOAPLAN_ONLY) _sntprintf(szConsoleString, 64, _T(", Toaplan only"));
+	if (bType == DAT_PRE90S_ONLY) _sntprintf(szConsoleString, 64, _T(", Pre90s only"));
+	if (bType == DAT_POST90S_ONLY) _sntprintf(szConsoleString, 64, _T(", Post90s only"));
+// Add Codes (DsNo)
 
 	TCHAR szProgramString[25];
 	_sntprintf(szProgramString, 25, _T("ClrMame Pro XML"));
@@ -449,6 +473,74 @@ int CreateAllDatfilesWindows()
 	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Neo Geo Pocket Games only"));
 	create_datfile(szFilename, DAT_NGP_ONLY);
 
+// Add Codes (DsNo)
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Capcom Misc only"));
+	create_datfile(szFilename, DAT_CAPCOM_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", CPS-1 only"));
+	create_datfile(szFilename, DAT_CPS1_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", CPS-2 only"));
+	create_datfile(szFilename, DAT_CPS2_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", CPS-3 only"));
+	create_datfile(szFilename, DAT_CPS3_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Cave only"));
+	create_datfile(szFilename, DAT_CAVE_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Data East only"));
+	create_datfile(szFilename, DAT_DATAEAST_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Galaxian only"));
+	create_datfile(szFilename, DAT_GALAXIAN_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Irem only"));
+	create_datfile(szFilename, DAT_IREM_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Kaneko only"));
+	create_datfile(szFilename, DAT_KANEKO_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Konami only"));
+	create_datfile(szFilename, DAT_KONAMI_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Midway only"));
+	create_datfile(szFilename, DAT_MIDWAY_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Neogeo only"));
+	create_datfile(szFilename, DAT_SNK_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Pacman only"));
+	create_datfile(szFilename, DAT_PACMAN_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", PGM only"));
+	create_datfile(szFilename, DAT_PGM_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Psikyo only"));
+	create_datfile(szFilename, DAT_PSIKYO_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Sega only"));
+	create_datfile(szFilename, DAT_SEGA_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Seta only"));
+	create_datfile(szFilename, DAT_SETA_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Taito only"));
+	create_datfile(szFilename, DAT_TAITO_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Technos only"));
+	create_datfile(szFilename, DAT_TECHNOS_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Toaplan only"));
+	create_datfile(szFilename, DAT_TOAPLAN_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Pre90s only"));
+	create_datfile(szFilename, DAT_PRE90S_ONLY);
+
+	_sntprintf(szFilename, MAX_PATH, _T("%s") _T(APP_TITLE) _T(" v%.20s (%s%s).dat"), buffer, szAppBurnVer, szProgramString, _T(", Post90s only"));
+	create_datfile(szFilename, DAT_POST90S_ONLY);
+// Add Codes (DsNo)
+
 	return nRet;
 }
 
@@ -2335,6 +2427,140 @@ static void OnCommand(HWND /*hDlg*/, int id, HWND /*hwndCtl*/, UINT codeNotify)
 			}
 			break;
 
+// Add Codes (DsNo)
+		case MENU_CLRMAME_PRO_XML_CAPCOM_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_CAPCOM_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_CPS1_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_CPS1_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_CPS2_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_CPS2_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_CPS3_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_CPS3_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_CAVE_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_CAVE_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_DATAEAST_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_DATAEAST_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_GALAXIAN_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_GALAXIAN_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_IREM_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_IREM_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_KANEKO_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_KANEKO_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_KONAMI_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_KONAMI_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_MIDWAY_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_MIDWAY_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_SNK_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_SNK_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_PACMAN_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_PACMAN_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_PGM_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_PGM_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_PSIKYO_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_PSIKYO_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_SEGA_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_SEGA_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_SETA_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_SETA_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_TAITO_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_TAITO_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_TECHNOS_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_TECHNOS_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_TOAPLAN_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_TOAPLAN_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_PRE90S_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_PRE90S_ONLY);
+			}
+			break;
+
+		case MENU_CLRMAME_PRO_XML_POST90S_ONLY:
+			if (UseDialogs()) {
+				CreateDatfileWindows(DAT_POST90S_ONLY);
+			}
+			break;
+// Add Codes (DsNo)
+
 		case MENU_CLRMAME_PRO_ALL_DATS:
 			if (UseDialogs()) {
 				CreateAllDatfilesWindows();
diff --git a/src/dep/generated/driverlist.h b/src/dep/generated/driverlist.h
index 9f49c8b80..cd2eddf74 100644
--- a/src/dep/generated/driverlist.h
+++ b/src/dep/generated/driverlist.h
@@ -1,4 +1,4 @@
-// This file was generated by ../../dep/scripts/gamelist.pl (perl 5.030003)
+// This file was generated by gamelist.pl (perl 5.032000)
 
 // Declaration of all drivers
 #define DRV extern struct BurnDriver
@@ -486,6 +486,7 @@ DRV		BurnSpecAliensneo;
 DRV		BurnSpecAliensuk;
 DRV		BurnSpecAliensus;
 DRV		BurnDrvmd_alisiad;
+DRV		BurnDrvmd_alisiadk;
 DRV		BurnDrvmd_alisiads;
 DRV		BurnDrvmd_alisiadj;
 DRV		BurnDrvmd_alisiadu;
@@ -723,15 +724,19 @@ DRV		BurnDrvmd_arrows;
 DRV		BurnDrvmd_arrowp;
 DRV		BurnDrvmd_arrow;
 DRV		BurnDrvmd_artalive;
+DRV		BurnDrvAofb;
 DRV		BurnDrvmd_aof;
 DRV		BurnDrvmd_aofec;
 DRV		BurnDrvmd_aofs;
+DRV		BurnDrvAofk;
 DRV		BurnDrvmd_aofp;
 DRV		BurnDrvmd_aofu;
 DRV		BurnDrvAof;
+DRV		BurnDrvAof2b;
 DRV		BurnDrvAof2bh;
 DRV		BurnDrvAof2a;
 DRV		BurnDrvAof2;
+DRV		BurnDrvAof3b;
 DRV		BurnDrvAof3k;
 DRV		BurnDrvAof3bh;
 DRV		BurnDrvAof3;
@@ -1018,6 +1023,7 @@ DRV		BurnDrvnes_bandikinancchi;
 DRV		BurnSpecBandito;
 DRV		BurnDrvBangball;
 DRV		BurnDrvb2b;
+DRV		BurnDrvbangbnd;
 DRV		BurnDrvbangbedp;
 DRV		BurnDrvbangbead;
 DRV		BurnDrvBang;
@@ -1142,6 +1148,7 @@ DRV		BurnDrvBattlex;
 DRV		BurnDrvBcruzm12;
 DRV		BurnDrvBtlfieldb;
 DRV		BurnDrvBtlfield;
+DRV		BurnDrvflipshtk;
 DRV		BurnDrvflipshot;
 DRV		BurnDrvnes_battleformula;
 DRV		BurnDrvBgareghk;
@@ -1387,6 +1394,7 @@ DRV		BurnDrvsms_blackblt;
 DRV		BurnDrvnes_blackboxcha;
 DRV		BurnDrvBlkdrgonb;
 DRV		BurnDrvBlkdrgon;
+DRV		BurnDrvBlkdrgnk;
 DRV		BurnDrvBlkheartj;
 DRV		BurnDrvBlkheart;
 DRV		BurnDrvBlkhole;
@@ -1695,6 +1703,8 @@ DRV		BurnDrvMSX_breakout;
 DRV		BurnDrvMSX_breakoutt;
 DRV		BurnDrvBrkthru;
 DRV		BurnDrvMSX_breaker;
+DRV		BurnDrvbreakerb;
+DRV		BurnDrvbreakreb;
 DRV		BurnDrvbreakrevbh;
 DRV		BurnDrvbrkrevext;
 DRV		BurnDrvbreakrev;
@@ -2016,6 +2026,7 @@ DRV		BurnDrvCpsCaptcommu;
 DRV		BurnDrvCpsCaptcommr1;
 DRV		BurnDrvCpsCaptcommj;
 DRV		BurnDrvCpsCaptcomm;
+DRV		BurnDrvCpsCaptcommv4;
 DRV		BurnDrvCpsCaptcommb;
 DRV		BurnDrvCpsCaptcommb2;
 DRV		BurnDrvCpsCaptcommb3;
@@ -2651,6 +2662,7 @@ DRV		BurnDrvmd_contras;
 DRV		BurnDrvmd_contra;
 DRV		BurnDrvnes_contrredfalwar;
 DRV		BurnDrvnes_contrrevredfal;
+DRV		BurnDrvmd_contrak;
 DRV		BurnDrvmd_contraj;
 DRV		BurnDrvnes_contra168in1;
 DRV		BurnDrvnes_contraforcec;
@@ -3568,9 +3580,7 @@ DRV		BurnDrvDdragon;
 DRV		BurnDrvMSX_ddragon;
 DRV		BurnDrvsms_ddragonk;
 DRV		BurnDrvdoubledr;
-#if defined FBNEO_DEBUG
-DRV		BurnDrvdoubledrsp;		// no comment
-#endif
+DRV		BurnDrvdoubledrsp;
 DRV		BurnDrvDdragonu;
 DRV		BurnDrvDdragoua;
 DRV		BurnDrvDdragoub;
@@ -3848,6 +3858,7 @@ DRV		BurnDrvCpsDdsomr1;
 DRV		BurnDrvCpsDdsomh;
 DRV		BurnDrvCpsDdsomjr2;
 DRV		BurnDrvCpsDdsoma;
+DRV		BurnDrvCpsDdsomav4;
 DRV		BurnDrvCpsDdsom;
 DRV		BurnDrvCpsDdsomj;
 DRV		BurnDrvCpsDdsomud;
@@ -4020,11 +4031,13 @@ DRV		BurnDrvEightman;
 DRV		BurnDrvEfdt;
 DRV		BurnDrvMSX_sideral;
 DRV		BurnDrvMSX_mundoper;
+DRV		BurnDrvmd_elvientok;
 DRV		BurnDrvmd_elvientos;
 DRV		BurnDrvmd_elvientoj;
 DRV		BurnDrvmd_elviento;
 DRV		BurnDrvfds_electrician1;
 DRV		BurnDrvfds_electrician;
+DRV		BurnDrvmd_elemastk;
 DRV		BurnDrvmd_elemastj;
 DRV		BurnDrvmd_elemast;
 DRV		BurnDrvElevator;
@@ -4170,6 +4183,7 @@ DRV		BurnDrvMSX_exerion2a;
 DRV		BurnDrvExerizrb;
 DRV		BurnDrvExerizer;
 DRV		BurnDrvmd_exile;
+DRV		BurnDrvmd_exilek;
 DRV		BurnDrvmd_exilej;
 DRV		BurnDrvmd_exosquad;
 DRV		BurnDrvmd_exosquadu;
@@ -4360,6 +4374,7 @@ DRV		BurnDrvpce_fantzone;
 DRV		BurnDrvtg_fantzone;
 DRV		BurnDrvFantazia;
 DRV		BurnDrvkabukiklb;
+DRV		BurnDrvkabukikb;
 DRV		BurnDrvkabukikl;
 #if defined FBNEO_DEBUG
 DRV		BurnDrvFarwest;			// no comment [NOT WORKING]
@@ -4378,16 +4393,20 @@ DRV		BurnDrvSqbert;
 DRV		BurnDrvmd_fastest1;
 DRV		BurnDrvmd_fatfury;
 DRV		BurnDrvmd_fatfuryu;
+DRV		BurnDrvFatFur1h;
 DRV		BurnDrvFatfury1bh;
 DRV		BurnDrvFatFury1;
 DRV		BurnDrvmd_fatfury2ec;
+DRV		BurnDrvFatfur2h;
 DRV		BurnDrvmd_fatfury2;
 DRV		BurnDrvFatfury2;
 DRV		BurnDrvFatfury2a;
+DRV		BurnDrvFatfur3b;
 DRV		BurnDrvFatfury3bh;
 DRV		BurnDrvFatfury3a;
 DRV		BurnDrvFatfury3;
 DRV		BurnDrvgg_fatfursp;
+DRV		BurnDrvFatfursh;
 DRV		BurnDrvgg_fatfurspu;
 DRV		BurnDrvFatfurspbs;
 DRV		BurnDrvFatfursp;
@@ -4445,6 +4464,7 @@ DRV		BurnDrvmd_fifa96;
 DRV		BurnDrvmd_fifa99;
 DRV		BurnDrvmd_fifa2k10;
 DRV		BurnDrvmd_fifa2k2;
+DRV		BurnDrvfightfeb;
 DRV		BurnDrvfightfev;
 DRV		BurnDrvfightfeva;
 DRV		BurnDrvFghthistjb;
@@ -4502,10 +4522,12 @@ DRV		BurnDrvCpsFfightj2;
 DRV		BurnDrvCpsFfightj3;
 DRV		BurnDrvCpsFfightub;
 DRV		BurnDrvCpsFfightj4;
+DRV		BurnDrvCpsFfgtj4v2;
 DRV		BurnDrvCpsFfightuc;
 DRV		BurnDrvCpsFfightbl;
 DRV		BurnDrvCpsFfightbla;
 DRV		BurnDrvCpsFfightj;
+DRV		BurnDrvCpsFfgtj2sp;
 DRV		BurnDrvCpsFfightu;
 DRV		BurnDrvCpsFfightu1;
 DRV		BurnDrvCpsFfightu2;
@@ -4957,6 +4979,7 @@ DRV		BurnDrvGalturbo;
 DRV		BurnDrvcv_galaxian;
 DRV		BurnDrvnes_galaxy5000;
 DRV		BurnDrvGalemp;
+DRV		BurnDrvgalaxyfh;
 DRV		BurnDrvgalaxyfg;
 DRV		BurnDrvsms_gforce;
 DRV		BurnDrvsms_gforceu;
@@ -5048,6 +5071,7 @@ DRV		BurnDrvGangwarsu;
 DRV		BurnDrvGangwars;
 DRV		BurnDrvsms_robocop;
 DRV		BurnDrvsms_gangster;
+DRV		BurnDrvganryund;
 DRV		BurnDrvganryu;
 DRV		BurnDrvnes_gansosaij;
 DRV		BurnDrvnes_gansosai;
@@ -5071,6 +5095,7 @@ DRV		BurnDrvmd_gargoyle;
 DRV		BurnDrvGarogun;
 DRV		BurnDrvgaroubl;
 DRV		BurnDrvGaroub;
+DRV		BurnDrvGaround;
 DRV		BurnDrvgarouha;
 DRV		BurnDrvgarouh;
 DRV		BurnDrvGarou;
@@ -5247,6 +5272,7 @@ DRV		BurnDrvGigasm2;
 DRV		BurnDrvGigasm2b;
 DRV		BurnDrvnes_gimmick;
 DRV		BurnDrvfds_gingaden;
+DRV		BurnDrvGinganink;
 DRV		BurnDrvGinganin;
 DRV		BurnDrvGinganina;
 DRV		BurnDrvGteikokub;
@@ -5263,6 +5289,7 @@ DRV		BurnDrvGlass10a;
 DRV		BurnDrvGlasskr;
 DRV		BurnDrvGlass;
 DRV		BurnDrvmd_gleylance;
+DRV		BurnDrvmd_gleylanck;
 DRV		BurnDrvmd_gleylanc;
 DRV		BurnDrvMSX_glider;
 DRV		BurnDrvMSX_glidera;
@@ -5637,6 +5664,7 @@ DRV		BurnDrvGunnailp;
 DRV		BurnDrvmd_gunship;
 DRV		BurnSpecgunship;
 DRV		BurnDrvmd_gunstar;
+DRV		BurnDrvmd_gunstark;
 DRV		BurnDrvmd_gunstars;
 DRV		BurnDrvgg_gunstar;
 DRV		BurnDrvmd_gunstarj;
@@ -5948,6 +5976,7 @@ DRV		BurnDrvHoneydol;
 DRV		BurnDrvRedfoxwp2;
 DRV		BurnDrvRedfoxwp2a;
 DRV		BurnDrvsms_hongkildong;
+DRV		BurnDrvmd_ddanpeik;
 DRV		BurnDrvgg_ddanpei;
 DRV		BurnDrvmd_ddanpei;
 DRV		BurnDrvpce_ddanpei;
@@ -6079,6 +6108,7 @@ DRV		BurnDrvHypsptsp;
 DRV		BurnDrvHyperspt;
 DRV		BurnSpecHypersports;
 DRV		BurnDrvCpsHsf2j1;
+DRV		BurnDrvCpsHsf2jh;
 DRV		BurnDrvCpsHsf2d;
 DRV		BurnDrvCpsHsf2da;
 DRV		BurnDrvCpsHsf2a;
@@ -6666,6 +6696,7 @@ DRV		BurnDrvKarnovj;
 DRV		BurnDrvKarnova;
 DRV		BurnDrvKarnov;
 DRV		BurnDrvnes_karnov;
+DRV		BurnDrvkarnovrb;
 DRV		BurnDrvkarnovr;
 DRV		BurnSpecKarnov;
 DRV		BurnDrvnes_kartfighter;
@@ -6838,6 +6869,7 @@ DRV		BurnDrvnes_kiterdai;
 DRV		BurnDrvKittenk;
 DRV		BurnDrvnes_kittyscatch;
 DRV		BurnDrvnes_kiwikra;
+DRV		BurnDrvkizunab;
 DRV		BurnDrvKizuna;
 DRV		BurnDrvnes_klashball;
 DRV		BurnDrvMSX_klax;
@@ -6880,6 +6912,7 @@ DRV		BurnDrvsms_knightm2;
 DRV		BurnDrvMSX_knightm3;
 DRV		BurnDrvsg1k_moyuchua;
 DRV		BurnDrvCpsKnights;
+DRV		BurnDrvCpsKnightj3;
 DRV		BurnDrvCpsKnightsja;
 DRV		BurnDrvCpsKnightsj;
 DRV		BurnDrvCpsKnightsu;
@@ -7123,6 +7156,7 @@ DRV		BurnDrvsms_landill;
 DRV		BurnDrvgg_landill;
 DRV		BurnDrvLsasquad;
 DRV		BurnDrvmd_landstlkg;
+DRV		BurnDrvmd_landstlkk;
 DRV		BurnDrvmd_landstlkj;
 DRV		BurnDrvmd_landstlkc;
 DRV		BurnDrvmd_landstlkf;
@@ -7743,6 +7777,7 @@ DRV		BurnDrvCpsMshu;
 DRV		BurnDrvCpsMshb;
 DRV		BurnDrvCpsMshh;
 DRV		BurnDrvCpsMshj;
+DRV		BurnDrvCpsMshjh;
 DRV		BurnDrvCpsMshvsfa1;
 DRV		BurnDrvCpsMshvsfa;
 DRV		BurnDrvCpsMshvsfb1;
@@ -7753,6 +7788,7 @@ DRV		BurnDrvCpsMshvsfu1d;
 DRV		BurnDrvCpsMshvsfu1;
 DRV		BurnDrvCpsMshvsfj1;
 DRV		BurnDrvCpsMshvsfj;
+DRV		BurnDrvCpsMshvsfjh;
 DRV		BurnDrvCpsMshvsfb;
 DRV		BurnDrvCpsMshvsfu;
 DRV		BurnDrvCpsMvscur1;
@@ -7806,6 +7842,8 @@ DRV		BurnDrvmd_maten;
 DRV		BurnDrvnes_matendouji;
 DRV		BurnDrvmd_mathblst;
 DRV		BurnDrvfds_matounohou;
+DRV		BurnDrvmatrimdh;
+DRV		BurnDrvmatrimnd;
 DRV		BurnDrvmatrimbl;
 DRV		BurnDrvMatrimbh;
 DRV		BurnDrvmatrim;
@@ -7977,17 +8015,20 @@ DRV		BurnDrvmslug;
 DRV		BurnDrvmslug2dg;
 DRV		BurnDrvMSlug2;
 DRV		BurnDrvMSlug2t;
+DRV		BurnDrvmslug3nd;
 DRV		BurnDrvmslug3g;
 DRV		BurnDrvmslug3v;
 DRV		BurnDrvmslug3h;
 DRV		BurnDrvmslug3;
 DRV		BurnDrvmslug3a;
+DRV		BurnDrvmslug4nd;
 DRV		BurnDrvmslug4dg;
 DRV		BurnDrvmslug4h;
 DRV		BurnDrvmslug4;
 DRV		BurnDrvms4plus;
 DRV		BurnDrvmslug5b;
 DRV		BurnDrvmslug5b2;
+DRV		BurnDrvmslug5nd;
 DRV		BurnDrvms5pcb;
 DRV		BurnDrvmslug5g;
 DRV		BurnDrvMslug5w;
@@ -8545,6 +8586,7 @@ DRV		BurnDrvMSX_unleashed;
 DRV		BurnDrvmsx_msx;
 DRV		BurnDrvrocktrv2;
 DRV		BurnDrvMugsmash;
+DRV		BurnDrvmd_valisk;
 DRV		BurnDrvmd_valisj;
 DRV		BurnDrvMSX_valis;
 DRV		BurnDrvMSX_valisk;
@@ -8579,6 +8621,7 @@ DRV		BurnDrvCpsMbombrdj;
 DRV		BurnDrvCpsMbombrd;
 DRV		BurnDrvmd_mushas;
 DRV		BurnDrvmd_musha;
+DRV		BurnDrvmd_mushak;
 DRV		BurnDrvmd_mushaj;
 DRV		BurnDrvsg1k_musicj;
 DRV		BurnDrvMusicbal;
@@ -8851,6 +8894,7 @@ DRV		BurnDrvNsmb;
 DRV		BurnDrvsyscheck;
 DRV		BurnDrvneothndr;
 DRV		BurnDrvturfmast;
+DRV		BurnDrvNeocu98k;
 DRV		BurnDrvNeocup98;
 DRV		BurnDrvneotet;
 DRV		BurnDrvneo3ddmo;
@@ -9031,6 +9075,7 @@ DRV		BurnDrvmd_ncirc;
 DRV		BurnDrvmd_ncirc1;
 DRV		BurnDrvmd_ncircp;
 DRV		BurnDrvnitdbl;
+DRV		BurnDrvnitdnd;
 DRV		BurnDrvnitd;
 DRV		BurnDrvnes_nightonelmstra;
 DRV		BurnDrvnes_nightshade;
@@ -9073,6 +9118,7 @@ DRV		BurnDrvMSX_ninjajajk;
 DRV		BurnDrvKazan;
 DRV		BurnDrvnes_ninjakid;
 DRV		BurnSpecNinjamassacre;
+DRV		BurnDrvninjamab;
 DRV		BurnDrvNinjamasha;
 DRV		BurnDrvninjamas;
 DRV		BurnDrvNprinces;
@@ -9668,6 +9714,7 @@ DRV		BurnDrvsms_pstarj;
 DRV		BurnDrvsms_pstarjmd;
 DRV		BurnDrvsms_pstarje;
 DRV		BurnDrvsms_pstark;
+DRV		BurnDrvmd_pstar4k;
 DRV		BurnDrvmd_pstar4j;
 DRV		BurnDrvmd_pstar4;
 DRV		BurnDrvmd_pstar4p5;
@@ -9688,6 +9735,7 @@ DRV		BurnDrvmd_ps2abe;
 DRV		BurnDrvmd_ps2ab;
 DRV		BurnDrvmd_ps2ace;
 DRV		BurnDrvmd_ps2ac;
+DRV		BurnDrvmd_pstar2k;
 DRV		BurnDrvmd_pstar2j;
 DRV		BurnDrvmd_ps2ade;
 DRV		BurnDrvmd_ps2ad;
@@ -9868,6 +9916,7 @@ DRV		BurnDrvCpsPnickj;
 DRV		BurnDrvnes_popoteam;
 DRV		BurnDrvmd_pocahont;
 DRV		BurnDrvmd_pocahontu;
+DRV		BurnDrvpnyaand;
 DRV		BurnDrvpnyaaa;
 DRV		BurnDrvpnyaa;
 DRV		BurnDrvngpc_neo21;
@@ -10054,6 +10103,7 @@ DRV		BurnDrvgg_predatr2;
 DRV		BurnDrvmd_predatr2s;
 DRV		BurnSpecPredator2;
 DRV		BurnSpecPredator;
+DRV		BurnDrvpisle2nd;
 DRV		BurnDrvpreisle2;
 DRV		BurnDrvPrehislk;
 DRV		BurnDrvPrehislu;
@@ -10284,6 +10334,8 @@ DRV		BurnDrvPuzlclub;
 DRV		BurnDrvPclubys;
 DRV		BurnDrvPclubysa;
 DRV		BurnDrvPzlbowl;
+DRV		BurnDrvpuzzldpk;
+DRV		BurnDrvpuzzldrk;
 DRV		BurnDrvpuzzldpr;
 DRV		BurnDrvpuzzledp;
 DRV		BurnDrvPuzzlekg;
@@ -10499,6 +10551,8 @@ DRV		BurnDrvmd_radrexp;
 DRV		BurnDrvmd_radrexu;
 DRV		BurnDrvnes_rafworld;
 DRV		BurnDrvRaflesia;
+DRV		BurnDrvrotdbh;
+DRV		BurnDrvrotdnd;
 DRV		BurnDrvrotdh;
 DRV		BurnDrvrotd;
 DRV		BurnDrvmd_ragnacenk;
@@ -10656,10 +10710,12 @@ DRV		BurnDrvrbff1a;
 DRV		BurnDrvrbff1k;
 DRV		BurnDrvrbff1ka;
 DRV		BurnDrvrbff1;
+DRV		BurnDrvrbff2hb;
 DRV		BurnDrvrbff2k;
 DRV		BurnDrvrbff2h;
 DRV		BurnDrvrbff2;
 DRV		BurnDrvrbff2bh;
+DRV		BurnDrvrbffspeh;
 DRV		BurnDrvrbffspbh;
 DRV		BurnDrvrbffspeck;
 DRV		BurnDrvrbffspec;
@@ -11144,6 +11200,7 @@ DRV		BurnDrvSamuraiA;
 DRV		BurnDrvTsamuraih;
 DRV		BurnDrvTsamurai;
 DRV		BurnDrvTsamurai2;
+DRV		BurnDrvSamShob;
 DRV		BurnDrvmd_samsho;
 DRV		BurnDrvmd_samshoec;
 DRV		BurnDrvmd_samshos;
@@ -11152,17 +11209,23 @@ DRV		BurnDrvmd_samshou;
 DRV		BurnDrvSamShoh;
 DRV		BurnDrvSamsho;
 DRV		BurnDrvSamShoa;
+DRV		BurnDrvSamSho2b;
 DRV		BurnDrvSamsho2;
 DRV		BurnDrvSamsho2sp;
+DRV		BurnDrvSamSho3b;
 DRV		BurnDrvSamSho3h;
 DRV		BurnDrvSamSho3;
+DRV		BurnDrvSamSho4b;
 DRV		BurnDrvSamSho4;
 DRV		BurnDrvSamSho4sp;
+DRV		BurnDrvsamsh5ndb;
+DRV		BurnDrvsamsho5nd;
 DRV		BurnDrvsamsho5b;
 DRV		BurnDrvsamsho5x;
 DRV		BurnDrvsamsho5h;
 DRV		BurnDrvsamsho5;
 DRV		BurnDrvsamsho5a;
+DRV		BurnDrvssh5spnd;
 DRV		BurnDrvsamsh5spho;
 DRV		BurnDrvsamsh5sph;
 DRV		BurnDrvsamsh5fe;
@@ -11250,6 +11313,7 @@ DRV		BurnSpecsavage1;
 DRV		BurnSpecsavage2;
 DRV		BurnSpecsavage3;
 DRV		BurnDrvSavgbees;
+DRV		BurnDrvsavagerb;
 DRV		BurnDrvSavagereb;
 DRV		BurnDrvSavagere;
 DRV		BurnSpecSavingkong;
@@ -11308,6 +11372,7 @@ DRV		BurnDrvSdgndmps;
 DRV		BurnDrvGrainbow;
 DRV		BurnDrvGrainbowk;
 DRV		BurnDrvfds_sdgunworgacsescwa;
+DRV		BurnDrvmd_sdvalisk;
 DRV		BurnDrvmd_sdvalis;
 DRV		BurnDrvsms_sdi;
 DRV		BurnDrvSdibl;
@@ -11384,6 +11449,8 @@ DRV		BurnDrvSengekisj;
 DRV		BurnDrvSengokuh;
 DRV		BurnDrvSengoku;
 DRV		BurnDrvSengoku2;
+DRV		BurnDrvSengo3nd;
+DRV		BurnDrvsengo3nh;
 DRV		BurnDrvSengoku3s;
 DRV		BurnDrvsengoku3fs;
 DRV		BurnDrvSengoku3;
@@ -11500,10 +11567,12 @@ DRV		BurnDrvmd_ragnacen;
 DRV		BurnDrvmd_ragnacenp;
 DRV		BurnDrvmd_ragnacenc;
 DRV		BurnDrvTshingen;
+DRV		BurnDrvmd_shindarkk;
 DRV		BurnDrvmd_shindarkj;
 DRV		BurnDrvmd_shinfrces;
 DRV		BurnDrvmd_shinfrce;
 DRV		BurnDrvmd_shinfrcep;
+DRV		BurnDrvmd_shinfrcek;
 DRV		BurnDrvmd_shinfrcej;
 DRV		BurnDrvgg_shinfrcg;
 DRV		BurnDrvgg_shinfrgfe;
@@ -11513,6 +11582,7 @@ DRV		BurnDrvmd_shinfrc2;
 DRV		BurnDrvmd_shinfrc2u;
 DRV		BurnDrvmd_shinfrc2p2;
 DRV		BurnDrvmd_shinfrc2p1;
+DRV		BurnDrvmd_shinfrc2k;
 DRV		BurnDrvmd_shinfrc2j;
 DRV		BurnDrvmd_shinfrc2c;
 DRV		BurnDrvgg_shinfrc2;
@@ -11814,9 +11884,11 @@ DRV		BurnDrvngpc_svccardcj;
 DRV		BurnDrvngpc_svccardsja;
 DRV		BurnDrvngpc_svccardsj;
 DRV		BurnDrvsvcboot;
+DRV		BurnDrvsvcnd;
 DRV		BurnDrvsvcpcb;
 DRV		BurnDrvsvcpcba;
 DRV		BurnDrvsvc;
+DRV		BurnDrvsvcndps2;
 DRV		BurnDrvsvcplus;
 DRV		BurnDrvsvcplusa;
 DRV		BurnDrvsvcsplus;
@@ -12566,6 +12638,7 @@ DRV		BurnDrvCpsSf2jf;
 DRV		BurnDrvCpsSf2uf;
 DRV		BurnDrvCpsSf2ef;
 DRV		BurnDrvCpsSf2jh;
+DRV		BurnDrvCpsSf2jhpp;
 DRV		BurnDrvCpsSf2ug;
 DRV		BurnDrvCpsSf2uh;
 DRV		BurnDrvCpsSf2ui;
@@ -12712,6 +12785,7 @@ DRV		BurnDrvCpsSfzjr1;
 DRV		BurnDrvCpsSfzh;
 DRV		BurnDrvCpsSfzbr1;
 DRV		BurnDrvCpsSfzj;
+DRV		BurnDrvCpsSfzjh;
 DRV		BurnDrvCpsSfzb;
 DRV		BurnDrvCpsSfzcha;
 //		BurnDrvCpsSfzbch;		// no comment
@@ -12723,12 +12797,14 @@ DRV		BurnDrvCpsSfz2ad;
 DRV		BurnDrvCpsSfz2a;
 DRV		BurnDrvCpsSfz2jd;
 DRV		BurnDrvCpsSfz2jr1;
+DRV		BurnDrvCpsSfz2jr1h;
 DRV		BurnDrvCpsSfz2n;
 DRV		BurnDrvCpsSfz2br1;
 DRV		BurnDrvCpsSfz2h;
 DRV		BurnDrvCpsSfz2j;
 DRV		BurnDrvCpsSfz2b;
 DRV		BurnDrvCpsSfz2alj;
+DRV		BurnDrvCpsSfz2aljh;
 DRV		BurnDrvCpsSfz2alb;
 DRV		BurnDrvCpsSfz2alh;
 DRV		BurnDrvCpsSfz2ald;
@@ -12740,6 +12816,7 @@ DRV		BurnDrvCpsSfz3ar1;
 DRV		BurnDrvCpsSfz3jr1;
 DRV		BurnDrvCpsSfz3a;
 DRV		BurnDrvCpsSfz3j;
+DRV		BurnDrvCpsSfz3jh;
 DRV		BurnDrvSftm110;
 DRV		BurnDrvSftm111;
 DRV		BurnDrvSftm;
@@ -12836,6 +12913,7 @@ DRV		BurnDrvS1945;
 DRV		BurnDrvS1945n;
 DRV		BurnDrvS1945iii;
 DRV		BurnDrvS1945ii;
+DRV		BurnDrvs1945pnd;
 DRV		BurnDrvs1945p;
 DRV		BurnDrvpce_stripf2;
 DRV		BurnDrvStrongx;
@@ -13031,6 +13109,7 @@ DRV		BurnDrvMSX_supdrink;
 DRV		BurnDrvSupduck;
 DRV		BurnDrvUsg32;
 DRV		BurnDrvmd_sfzone;
+DRV		BurnDrvmd_sfzonek;
 DRV		BurnDrvmd_sfzones;
 DRV		BurnDrvmd_sfzonej;
 DRV		BurnDrvSformula;
@@ -13280,6 +13359,8 @@ DRV		BurnDrvCpsSsf2th;
 DRV		BurnDrvCpsSsf2tur1;
 DRV		BurnDrvCpsSsf2tu;
 DRV		BurnDrvCpsSsf2tnl;
+DRV		BurnDrvCpsSsf2xjh;
+DRV		BurnDrvCpsSsf2xjr1dt;
 DRV		BurnDrvCpsSsf2xjr1d;
 DRV		BurnDrvCpsSsf2xjr1r;
 DRV		BurnDrvCpsSsf2xjr1;
@@ -13694,7 +13775,9 @@ DRV		BurnDrvMSX_temptations;
 DRV		BurnDrvCpsDynwarjr;
 DRV		BurnDrvCpsDynwarj;
 DRV		BurnDrvnes_tenchiwokurau;
+DRV		BurnDrvCpsWofj103;
 DRV		BurnDrvCpsWofj;
+DRV		BurnDrvCpsWofch3p;
 DRV		BurnDrvCpsWofch;
 DRV		BurnDrvCpsWofjh;
 DRV		BurnDrvCpsWofjdr;
@@ -13986,6 +14069,7 @@ DRV		BurnDrvmd_hybridfp;
 DRV		BurnDrvmd_hybridfc;
 DRV		BurnDrvMSX_iceking;
 DRV		BurnDrvmd_immortal;
+DRV		BurnDrvmd_immortalk;
 DRV		BurnDrvmd_immortals;
 DRV		BurnDrvsms_crashdum;
 DRV		BurnDrvmd_crashdum;
@@ -14021,8 +14105,10 @@ DRV		BurnDrvCpsKodu;
 DRV		BurnDrvCpsKodr1;
 DRV		BurnDrvCpsKod;
 DRV		BurnDrvKof94rz;
+DRV		BurnDrvKof94kr;
 DRV		BurnDrvKof94;
 DRV		BurnDrvKof95b;
+DRV		BurnDrvKof95kr;
 DRV		BurnDrvKof95h;
 DRV		BurnDrvKof95a;
 DRV		BurnDrvKof95;
@@ -14030,6 +14116,7 @@ DRV		BurnDrvKof95sp;
 DRV		BurnDrvkof96ae;
 DRV		BurnDrvkof96ep;
 DRV		BurnDrvkof96cn;
+DRV		BurnDrvKof96kr;
 DRV		BurnDrvKof96h;
 DRV		BurnDrvKof96;
 DRV		BurnDrvKof96a;
@@ -14038,6 +14125,8 @@ DRV		BurnDrvkof97cn;
 DRV		BurnDrvKof97ps;
 DRV		BurnDrvkof97invplus;
 DRV		BurnDrvKof97k;
+DRV		BurnDrvkof97ps;
+DRV		BurnDrvKof97kr;
 DRV		BurnDrvKof97h;
 DRV		BurnDrvKof97;
 DRV		BurnDrvkof97t2020;
@@ -14051,11 +14140,15 @@ DRV		BurnDrvkof97rc;
 DRV		BurnDrvKof97oro;
 DRV		BurnDrvKof97pls;
 DRV		BurnDrvkof97pla;
+DRV		BurnDrvKof97ts;
 DRV		BurnDrvkof98ae2016;
 DRV		BurnDrvkof98ae;
 DRV		BurnDrvkof98cps;
 DRV		BurnDrvkof98cb;
+DRV		BurnDrvKof98kr;
+DRV		BurnDrvKof98cd;
 DRV		BurnDrvkof98pfe;
+DRV		BurnDrvKof98bf;
 DRV		BurnDrvkof98ult;
 DRV		BurnDrvKof98k;
 DRV		BurnDrvKof98ka;
@@ -14065,10 +14158,13 @@ DRV		BurnDrvKof98a;
 DRV		BurnDrvkof98eck20;
 DRV		BurnDrvkof98eckvs;
 DRV		BurnDrvKof98mix;
+DRV		BurnDrvkof99ae2016;
 DRV		BurnDrvmd_kof99a;
 DRV		BurnDrvkof99e;
+DRV		BurnDrvkof99nd;
 DRV		BurnDrvkof99k;
 DRV		BurnDrvkof99ka;
+DRV		BurnDrvkof99kr;
 DRV		BurnDrvkof99h;
 DRV		BurnDrvkof99;
 DRV		BurnDrvkof99p;
@@ -14083,16 +14179,22 @@ DRV		BurnDrvkof10thd;
 DRV		BurnDrvkf2k5uni;
 DRV		BurnDrvkof10thuo;
 DRV		BurnDrvkf10thep;
+DRV		BurnDrvkof2knd;
+DRV		BurnDrvkof2kkr;
 DRV		BurnDrvkof2000;
 DRV		BurnDrvkof2000n;
 DRV		BurnDrvkof2000otc;
 DRV		BurnDrvkof2000ps2;
+DRV		BurnDrvkof2k1nd;
 DRV		BurnDrvkof2001h;
 DRV		BurnDrvkof2001;
+DRV		BurnDrvkof2k1ps2;
 DRV		BurnDrvkf2k1pkz;
 DRV		BurnDrvkf2k1pls;
 DRV		BurnDrvkf2k1pa;
 DRV		BurnDrvkof2002b;
+DRV		BurnDrvkof2k2nd;
+DRV		BurnDrvkof2k2kh;
 DRV		BurnDrvkof2002;
 DRV		BurnDrvkof2k2omg;
 DRV		BurnDrvkof2k2omg8;
@@ -14103,15 +14205,18 @@ DRV		BurnDrvkf2k2ps2;
 DRV		BurnDrvkf2k2ps2b;
 DRV		BurnDrvkof2k2plus;
 DRV		BurnDrvkf2k23rd;
+DRV		BurnDrvkof2k2cm;
 DRV		BurnDrvkf2k2mp;
 DRV		BurnDrvkf2k2mp2;
 DRV		BurnDrvkf2k2pls;
 DRV		BurnDrvkf2k2pla;
 DRV		BurnDrvkf2k2plb;
+DRV		BurnDrvkf2k2pls2017;
 DRV		BurnDrvkf2k2ru35;
 DRV		BurnDrvkf2k2plc;
 DRV		BurnDrvkf2k3bl;
 DRV		BurnDrvkf2k3bla;
+DRV		BurnDrvkof2k3nd;
 DRV		BurnDrvkf2k3pcb;
 DRV		BurnDrvkof2003h;
 DRV		BurnDrvkof2003;
@@ -14122,10 +14227,13 @@ DRV		BurnDrvkof2k4se;
 DRV		BurnDrvkf2k4pls;
 DRV		BurnDrvpce_kungfu;
 DRV		BurnDrvngpc_lastblad;
+DRV		BurnDrvlastbladb;
 DRV		BurnDrvlastbladh;
 DRV		BurnDrvlastblad;
 DRV		BurnDrvlastblada;
 DRV		BurnDrvlastbladsp;
+DRV		BurnDrvlastbl2h;
+DRV		BurnDrvlastbl2f;
 DRV		BurnDrvLb2b;
 DRV		BurnDrvDlastbld2eh;
 DRV		BurnDrvlastbld2;
@@ -14304,9 +14412,11 @@ DRV		BurnDrvmd_thors;
 DRV		BurnDrvmd_thorp2;
 DRV		BurnDrvmd_thorp1;
 DRV		BurnDrvmd_thorf;
+DRV		BurnDrvmd_thork2;
 DRV		BurnDrvmd_thorj;
 DRV		BurnDrvmd_thorc;
 DRV		BurnDrvmd_supshin;
+DRV		BurnDrvmd_supshin2k;
 DRV		BurnDrvmd_supshin2;
 DRV		BurnDrvmd_supshin2p1;
 DRV		BurnDrvmd_supshin2p2;
@@ -14871,8 +14981,10 @@ DRV		BurnDrvsg1k_sxpao;
 DRV		BurnDrvnes_twinb3;
 DRV		BurnDrvTwinkle;
 DRV		BurnDrvTwinklea;
+DRV		BurnDrvtwinsprh;
 DRV		BurnDrvtwinspri;
 DRV		BurnDrvmd_twinklete;
+DRV		BurnDrvmd_twinkletk;
 DRV		BurnDrvmd_twinklet;
 DRV		BurnDrvMSX_twinlight;
 DRV		BurnDrvCpsMtwinsb;
@@ -15017,6 +15129,7 @@ DRV		BurnDrvvliner;
 DRV		BurnDrvvliner7e;
 DRV		BurnDrvmd_valis;
 DRV		BurnDrvnes_valis;
+DRV		BurnDrvmd_valis3k;
 DRV		BurnDrvmd_valis3j;
 DRV		BurnDrvmd_valis3;
 DRV		BurnDrvMSX_valkyr;
@@ -15035,6 +15148,7 @@ DRV		BurnDrvgg_vampire;
 DRV		BurnDrvCpsVampjr1;
 DRV		BurnDrvCpsVampj;
 DRV		BurnDrvCpsVampja;
+DRV		BurnDrvCpsVampjh;
 DRV		BurnDrvCpsVhuntjr2;
 DRV		BurnDrvCpsVhuntjr1s;
 DRV		BurnDrvCpsVhuntjr1;
@@ -15049,6 +15163,7 @@ DRV		BurnDrvCpsVsav;
 DRV		BurnDrvCpsVsavh;
 DRV		BurnDrvCpsVsavj;
 DRV		BurnDrvCpsVsavu;
+DRV		BurnDrvCpsVsavdt;
 DRV		BurnDrvCpsVsav2d;
 DRV		BurnDrvCpsVsav2;
 DRV		BurnSpecvampveng;
@@ -15224,6 +15339,7 @@ DRV		BurnDrvMSX_volguard;
 DRV		BurnDrvnes_volguardii;
 DRV		BurnDrvfds_volleyball;
 DRV		BurnDrvnes_volleyball;
+DRV		BurnDrvgowcaizb;
 DRV		BurnDrvgowcaizr;
 DRV		BurnDrvMSX_vortraid;
 DRV		BurnDrvsms_voyage;
@@ -15272,6 +15388,7 @@ DRV		BurnDrvnes_waiwaiwor2;
 DRV		BurnDrvsms_waimanu;
 DRV		BurnDrvMj4simai;
 DRV		BurnDrvwakuwak7bh;
+DRV		BurnDrvwakuwa7h;
 DRV		BurnDrvwakuwak7;
 DRV		BurnDrvUltracin;
 DRV		BurnDrvfds_wakusatogai;
@@ -15432,6 +15549,7 @@ DRV		BurnDrvmd_wimbledu;
 DRV		BurnDrvmd_wimbledup;
 DRV		BurnDrvsms_wimbled2;
 DRV		BurnDrvnes_winlosordra;
+DRV		BurnDrvwjammerk;
 DRV		BurnDrvwjammers;
 DRV		BurnDrvWingforc;
 DRV		BurnDrvMSX_wingman2;
@@ -15638,6 +15756,7 @@ DRV		BurnDrvsms_worldgpu;
 DRV		BurnDrvsms_worldgpp;
 DRV		BurnDrvwh1h;
 DRV		BurnDrvwh1;
+DRV		BurnDrvwh1b;
 DRV		BurnDrvmd_whj;
 DRV		BurnDrvmd_whjp5;
 DRV		BurnDrvmd_whjp4;
@@ -15661,8 +15780,11 @@ DRV		BurnDrvmd_whp01;
 DRV		BurnDrvmd_whp02;
 DRV		BurnDrvwh2h;
 DRV		BurnDrvwh2;
+DRV		BurnDrvwh2b;
 DRV		BurnDrvwh2j;
 DRV		BurnDrvwh2ja;
+DRV		BurnDrvwh2jb;
+DRV		BurnDrvwhpb;
 DRV		BurnDrvwhp;
 DRV		BurnDrvpce_wjockey;
 DRV		BurnDrvmd_worldillj;
@@ -15801,6 +15923,7 @@ DRV		BurnDrvCpsXmcotaar2;
 DRV		BurnDrvCpsXmcotaj3;
 DRV		BurnDrvCpsXmcotaar1;
 DRV		BurnDrvCpsXmcotaj2;
+DRV		BurnDrvCpsXmcotaj2h;
 DRV		BurnDrvCpsXmcotaj1;
 DRV		BurnDrvCpsXmcotaa;
 DRV		BurnDrvCpsXmcotar1d;
@@ -15986,6 +16109,7 @@ DRV		BurnDrvnes_ys;
 DRV		BurnDrvsms_ysd;
 DRV		BurnDrvsms_ys;
 DRV		BurnDrvsms_ysfm;
+DRV		BurnDrvmd_ys3k;
 DRV		BurnDrvmd_ys3j;
 DRV		BurnDrvnes_ysiij;
 DRV		BurnDrvnes_ysii;
@@ -16145,6 +16269,7 @@ DRV		BurnDrvgg_zoopp;
 DRV		BurnDrvmd_zouzou;
 DRV		BurnSpecZub;
 DRV		BurnDrvnes_zunousengal;
+DRV		BurnDrvZupapand;
 DRV		BurnDrvZupapa;
 DRV		BurnSpecSpec128BIOS;
 DRV		BurnSpecSpec128;
@@ -16642,6 +16767,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecAliensuk,			// Aliens UK
 	&BurnSpecAliensus,			// Aliens US
 	&BurnDrvmd_alisiad,			// Alisia Dragoon (Euro)
+	&BurnDrvmd_alisiadk,		// Alisia Dragoon (Hack, Korean)
 	&BurnDrvmd_alisiads,		// Alisia Dragoon (Hack, Spanish)
 	&BurnDrvmd_alisiadj,		// Alisia Dragoon (Jpn)
 	&BurnDrvmd_alisiadu,		// Alisia Dragoon (USA)
@@ -16879,15 +17005,19 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_arrowp,			// Arrow Flash (USA, Prototype)
 	&BurnDrvmd_arrow,			// Arrow Flash (World)
 	&BurnDrvmd_artalive,		// Art Alive (World)
+	&BurnDrvAofb,				// Art of Fighting (Boss Hack)
 	&BurnDrvmd_aof,				// Art of Fighting (Euro)
 	&BurnDrvmd_aofec,			// Art of Fighting (Hack, Enhanced Colors)
 	&BurnDrvmd_aofs,			// Art Of Fighting (Hack, Spanish)
+	&BurnDrvAofk,				// Art of Fighting (Korean Patch, Boss Hack)
 	&BurnDrvmd_aofp,			// Art of Fighting (Prototype, 19940711)
 	&BurnDrvmd_aofu,			// Art of Fighting (USA)
 	&BurnDrvAof,				// Art of Fighting / Ryuuko no Ken (NGM-044)(NGH-044)
+	&BurnDrvAof2b,				// Art of Fighting 2 (Boss Hack)
 	&BurnDrvAof2bh,				// Art of Fighting 2 / Ryuuko no Ken 2 (Enable hidden characters V2)
 	&BurnDrvAof2a,				// Art of Fighting 2 / Ryuuko no Ken 2 (NGH-056)
 	&BurnDrvAof2,				// Art of Fighting 2 / Ryuuko no Ken 2 (NGM-056)
+	&BurnDrvAof3b,				// Art of Fighting 3 - The Path of the Warrior (Boss Hack)
 	&BurnDrvAof3k,				// Art of Fighting 3 - The Path of the Warrior (Korean release)
 	&BurnDrvAof3bh,				// Art of Fighting 3 - The Path of the Warrior / Art of Fighting - Ryuuko no Ken Gaiden (Enable Hidden Characters V2)
 	&BurnDrvAof3,				// Art of Fighting 3 - The Path of the Warrior / Art of Fighting - Ryuuko no Ken Gaiden
@@ -17174,6 +17304,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecBandito,			// Bandito (HB)
 	&BurnDrvBangball,			// Bang Bang Ball (v1.05)
 	&BurnDrvb2b,				// Bang Bang Busters (2010 NCI release)
+	&BurnDrvbangbnd,			// Bang Bead (Fully Decrypted)
 	&BurnDrvbangbedp,			// Bang Bead (Prototype?)
 	&BurnDrvbangbead,			// Bang Bead
 	&BurnDrvBang,				// Bang!
@@ -17298,6 +17429,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvBcruzm12,			// Battle Cruiser M-12
 	&BurnDrvBtlfieldb,			// Battle Field (bootleg)
 	&BurnDrvBtlfield,			// Battle Field (Japan)
+	&BurnDrvflipshtk,			// Battle Flip Shot (Korean)
 	&BurnDrvflipshot,			// Battle Flip Shot
 	&BurnDrvnes_battleformula,	// Battle Formula (Japan)
 	&BurnDrvBgareghk,			// Battle Garegga (Austria / Hong Kong) (Sat Feb 3 1996)
@@ -17543,6 +17675,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_blackboxcha,	// Black Box Challenge (HB)
 	&BurnDrvBlkdrgonb,			// Black Dragon (bootleg)
 	&BurnDrvBlkdrgon,			// Black Dragon (Japan)
+	&BurnDrvBlkdrgnk,			// Black Dragon (Korean)
 	&BurnDrvBlkheartj,			// Black Heart (Japan)
 	&BurnDrvBlkheart,			// Black Heart
 	&BurnDrvBlkhole,			// Black Hole
@@ -17851,6 +17984,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_breakoutt,		// Break Out!
 	&BurnDrvBrkthru,			// Break Thru (US)
 	&BurnDrvMSX_breaker,		// Breaker Breaker (Euro)
+	&BurnDrvbreakerb,			// Breakers (Boss Hack)
+	&BurnDrvbreakreb,			// Breakers Revenge (Boss Hack)
 	&BurnDrvbreakrevbh,			// Breakers Revenge - Boss Hack (Bai-Hu)
 	&BurnDrvbrkrevext,			// Breakers Revenge - Extra Mode (Hack)
 	&BurnDrvbreakrev,			// Breakers Revenge
@@ -18172,6 +18307,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsCaptcommr1,		// Captain Commando (911014 World)
 	&BurnDrvCpsCaptcommj,		// Captain Commando (911202 Japan)
 	&BurnDrvCpsCaptcomm,		// Captain Commando (911202 World)
+	&BurnDrvCpsCaptcommv4,		// Captain Commando (911202 World, 1 vs 4 Hack)
 	&BurnDrvCpsCaptcommb,		// Captain Commando (bootleg set 1, 911014 other country)
 	&BurnDrvCpsCaptcommb2,		// Captain Commando (bootleg set 2 (with 2xMSM5205), 911014 other country) [unemulated graphics, NOT WORKING]
 	&BurnDrvCpsCaptcommb3,		// Captain Commando (bootleg set 3 (with YM2151 + 2xMSM5205), 911014 other country)
@@ -18807,6 +18943,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_contra,			// Contra - Hard Corps (USA, Kor)
 	&BurnDrvnes_contrredfalwar,	// Contra - Red Falcon War (USA)
 	&BurnDrvnes_contrrevredfal,	// Contra - Revenge of the Red Falcon (USA)
+	&BurnDrvmd_contrak,			// Contra - The Hard Corps (Hack, Korean)
 	&BurnDrvmd_contraj,			// Contra - The Hard Corps (Jpn)
 	&BurnDrvnes_contra168in1,	// Contra 168-in-1 (Unl)
 	&BurnDrvnes_contraforcec,	// Contra Force (2nd option, T-Chi)
@@ -18872,10 +19009,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_cosmoexp,		// Cosmo-Explorer (Jpn)
 	&BurnDrvMSX_cosmoexpa,		// Cosmo-Explorer (Jpn, Alt)
 	&BurnDrvCottong,			// Cotocoto Cottong
-	&BurnDrvCottonjad,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted))
-	&BurnDrvCottonja,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a))
-	&BurnDrvCottonjd,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted))
-	&BurnDrvCottonj,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b))
+	&BurnDrvCottonjad,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted)
+	&BurnDrvCottonja,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a)
+	&BurnDrvCottonjd,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted)
+	&BurnDrvCottonj,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b)
 	&BurnDrvCottonud,			// Cotton (set 2, US, FD1094 317-0180 decrypted)
 	&BurnDrvCottonu,			// Cotton (set 2, US, FD1094 317-0180)
 	&BurnDrvCottond,			// Cotton (set 3, World, FD1094 317-0181a decrypted)
@@ -19724,9 +19861,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_ddragon,		// Double Dragon (Kor)
 	&BurnDrvsms_ddragonk,		// Double Dragon (Kor)
 	&BurnDrvdoubledr,			// Double Dragon (Neo-Geo)
-#if defined FBNEO_DEBUG
-	&BurnDrvdoubledrsp,			// Double Dragon (Special 2017, hack) [no comment]
-#endif
+	&BurnDrvdoubledrsp,			// Double Dragon (Special 2017, hack)
 	&BurnDrvDdragonu,			// Double Dragon (US set 1)
 	&BurnDrvDdragoua,			// Double Dragon (US set 2)
 	&BurnDrvDdragoub,			// Double Dragon (US set 3)
@@ -20004,6 +20139,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsDdsomh,			// Dungeons & Dragons - shadow over mystara (960223 Hispanic)
 	&BurnDrvCpsDdsomjr2,		// Dungeons & Dragons - shadow over mystara (960223 Japan)
 	&BurnDrvCpsDdsoma,			// Dungeons & Dragons - shadow over mystara (960619 Asia)
+	&BurnDrvCpsDdsomav4,		// Dungeons & Dragons - shadow over mystara (960619 Asia, 1 vs 4 Hack)
 	&BurnDrvCpsDdsom,			// Dungeons & Dragons - shadow over mystara (960619 Euro)
 	&BurnDrvCpsDdsomj,			// Dungeons & Dragons - shadow over mystara (960619 Japan)
 	&BurnDrvCpsDdsomud,			// Dungeons & Dragons - shadow over mystara (960619 USA Phoenix Edition)
@@ -20176,11 +20312,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvEfdt,				// El Fin Del Tiempo
 	&BurnDrvMSX_sideral,		// El Motorista Sideral (Spa)
 	&BurnDrvMSX_mundoper,		// El Mundo Perdido (Spa)
+	&BurnDrvmd_elvientok,		// El Viento (Hack, Korean)
 	&BurnDrvmd_elvientos,		// El Viento (Hack, Spanish)
 	&BurnDrvmd_elvientoj,		// El Viento (Jpn)
 	&BurnDrvmd_elviento,		// El Viento (USA)
 	&BurnDrvfds_electrician1,	// Electrician (Japan)
 	&BurnDrvfds_electrician,	// Electrician (T-eng)
+	&BurnDrvmd_elemastk,		// Elemental Master (Hack, Korean)
 	&BurnDrvmd_elemastj,		// Elemental Master (Jpn)
 	&BurnDrvmd_elemast,			// Elemental Master (USA)
 	&BurnDrvElevator,			// Elevator Action (BA3, 4 pcb version, 1.1)
@@ -20326,6 +20464,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvExerizrb,			// Exerizer (Japan) (bootleg)
 	&BurnDrvExerizer,			// Exerizer (Japan)
 	&BurnDrvmd_exile,			// Exile (USA)
+	&BurnDrvmd_exilek,			// Exile - Toki no Hazama e (Hack, Korean)
 	&BurnDrvmd_exilej,			// Exile - Toki no Hazama e (Jpn)
 	&BurnDrvmd_exosquad,		// Exo Squad (Euro)
 	&BurnDrvmd_exosquadu,		// Exo Squad (USA)
@@ -20516,6 +20655,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvtg_fantzone,		// Fantasy Zone
 	&BurnDrvFantazia,			// Fantazia (bootleg?)
 	&BurnDrvkabukiklb,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Add hidden characters)
+	&BurnDrvkabukikb,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)
 	&BurnDrvkabukikl,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den
 #if defined FBNEO_DEBUG
 	&BurnDrvFarwest,			// Far West [no comment, NOT WORKING]
@@ -20534,16 +20674,20 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_fastest1,		// Fastest 1 (Jpn)
 	&BurnDrvmd_fatfury,			// Fatal Fury (Euro, Kor)
 	&BurnDrvmd_fatfuryu,		// Fatal Fury (USA)
+	&BurnDrvFatFur1h,			// Fatal Fury - King of Fighters (Hidden Hack)
 	&BurnDrvFatfury1bh,			// Fatal Fury - King of Fighters / Garou Densetsu - shukumei no tatakai (Boss Hack by Yumeji)
 	&BurnDrvFatFury1,			// Fatal Fury - King of Fighters / Garou Densetsu - shukumei no tatakai (NGM-033)(NGH-033)
 	&BurnDrvmd_fatfury2ec,		// Fatal Fury 2 (Hack, Enhanced Colors v4.0)
+	&BurnDrvFatfur2h,			// Fatal Fury 2 (Hidden Hack)
 	&BurnDrvmd_fatfury2,		// Fatal Fury 2 (USA, Kor)
 	&BurnDrvFatfury2,			// Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (NGM-047)(NGH-047)
 	&BurnDrvFatfury2a,			// Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (NGM-047)
+	&BurnDrvFatfur3b,			// Fatal Fury 3 - Road to the Final Victory (Boss Hack)
 	&BurnDrvFatfury3bh,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (Ancient Battles Resurgence 2015-03-13)
 	&BurnDrvFatfury3a,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (NGM-069)(NGH-069) (alternate set)
 	&BurnDrvFatfury3,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (NGM-069)(NGH-069)
 	&BurnDrvgg_fatfursp,		// Fatal Fury Special (Euro)
+	&BurnDrvFatfursh,			// Fatal Fury Special (Hidden Hack)
 	&BurnDrvgg_fatfurspu,		// Fatal Fury Special (USA)
 	&BurnDrvFatfurspbs,			// Fatal Fury Special / Garou Densetsu Special (Optional Hidden Character Third Edition)
 	&BurnDrvFatfursp,			// Fatal Fury Special / Garou Densetsu Special (set 1)(NGM-058)(NGH-058)
@@ -20601,6 +20745,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_fifa99,			// FIFA Soccer 99 (Pirate)
 	&BurnDrvmd_fifa2k10,		// FIFA World Cup - South Africa 2010 (Rus)
 	&BurnDrvmd_fifa2k2,			// FIFA World Cup 2002 (Rus)
+	&BurnDrvfightfeb,			// Fight Fever (Boss Hack)
 	&BurnDrvfightfev,			// Fight Fever (set 1)
 	&BurnDrvfightfeva,			// Fight Fever (set 2)
 	&BurnDrvFghthistjb,			// Fighter's History (Japan ver 41-04, DE-0380-1 PCB)
@@ -20658,10 +20803,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsFfightj3,		// Final Fight (900405 Japan)
 	&BurnDrvCpsFfightub,		// Final Fight (900424 USA)
 	&BurnDrvCpsFfightj4,		// Final Fight (900613 Japan)
+	&BurnDrvCpsFfgtj4v2,		// Final Fight (900613 Japan, 1 vs 2 Hack)
 	&BurnDrvCpsFfightuc,		// Final Fight (900613 USA)
 	&BurnDrvCpsFfightbl,		// Final Fight (bootleg set 1 (with 2xYM2203 + 2xMSM5205), World)
 	&BurnDrvCpsFfightbla,		// Final Fight (bootleg set 2 (with 2xYM2203 + 2xMSM5205), World))
 	&BurnDrvCpsFfightj,			// Final Fight (Japan)
+	&BurnDrvCpsFfgtj2sp,		// Final Fight (Super Plus Hack, 900305 Japan)
 	&BurnDrvCpsFfightu,			// Final Fight (USA, set 1)
 	&BurnDrvCpsFfightu1,		// Final Fight (USA, set 2)
 	&BurnDrvCpsFfightu2,		// Final Fight (USA, set 3)
@@ -20805,7 +20952,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_flea,			// FLEA! (HB)
 	&BurnDrvnes_fleademo,		// FLEA! demo (HB)
 	&BurnDrvFlicky,				// Flicky (128k Version, 315-5051)
-	&BurnDrvFlickya,			// Flicky (128k Version, 315-5051, larger roms))
+	&BurnDrvFlickya,			// Flicky (128k Version, 315-5051, larger roms)
 	&BurnDrvFlickys2,			// Flicky (128k Version, not encrypted)
 	&BurnDrvFlickyg,			// Flicky (128k Version, System 2, 315-5051, alt graphics)
 	&BurnDrvFlickys2g,			// Flicky (128k Version, System 2, not encrypted, alt graphics)
@@ -21113,6 +21260,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvcv_galaxian,		// Galaxian
 	&BurnDrvnes_galaxy5000,		// Galaxy 5000 (USA)
 	&BurnDrvGalemp,				// Galaxy Empire (bootleg?)
+	&BurnDrvgalaxyfh,			// Galaxy Fight - Universal Warriors (Hidden Hack)
 	&BurnDrvgalaxyfg,			// Galaxy Fight - Universal Warriors
 	&BurnDrvsms_gforce,			// Galaxy Force (Euro, Bra)
 	&BurnDrvsms_gforceu,		// Galaxy Force (USA)
@@ -21204,6 +21352,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGangwars,			// Gang Wars
 	&BurnDrvsms_robocop,		// Gangcheol RoboCop (Kor)
 	&BurnDrvsms_gangster,		// Gangster Town (Euro, USA, Bra)
+	&BurnDrvganryund,			// Ganryu (Fully Decrypted)
 	&BurnDrvganryu,				// Ganryu / Musashi Ganryuki
 	&BurnDrvnes_gansosaij,		// Ganso Saiyuuki - Super Monkey Daibouken (Japan)
 	&BurnDrvnes_gansosai,		// Ganso Saiyuuki - Super Monkey Daibouken (T-Eng)
@@ -21227,6 +21376,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGarogun,			// Garogun Seroyang (Korea)
 	&BurnDrvgaroubl,			// Garou - Mark of the Wolves (bootleg)
 	&BurnDrvGaroub,				// Garou - Mark of the Wolves (Enable hidden characters)
+	&BurnDrvGaround,			// Garou - Mark of the Wolves (Fully Decrypted)
 	&BurnDrvgarouha,			// Garou - Mark of the Wolves (NGH-2530)
 	&BurnDrvgarouh,				// Garou - Mark of the Wolves (NGM-2530) (NGH-2530)
 	&BurnDrvGarou,				// Garou - Mark of the Wolves (NGM-2530)
@@ -21403,6 +21553,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGigasm2b,			// Gigas Mark II
 	&BurnDrvnes_gimmick,		// Gimmick! (Japan)
 	&BurnDrvfds_gingaden,		// Ginga Denshou - Galaxy Odyssey (Japan)
+	&BurnDrvGinganink,			// Ginga NinkyouDen (Korean)
 	&BurnDrvGinganin,			// Ginga NinkyouDen (set 1)
 	&BurnDrvGinganina,			// Ginga NinkyouDen (set 2)
 	&BurnDrvGteikokub,			// Gingateikoku No Gyakushu (bootleg set 1)
@@ -21419,6 +21570,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGlasskr,			// Glass (Ver 1.1, Break Edition, Version 1994) (censored, unprotected)
 	&BurnDrvGlass,				// Glass (Ver 1.1, Break Edition, Version 1994)
 	&BurnDrvmd_gleylance,		// GleyLancer (Hack, English)
+	&BurnDrvmd_gleylanck,		// GleyLancer (Hack, Korean)
 	&BurnDrvmd_gleylanc,		// GleyLancer (Jpn)
 	&BurnDrvMSX_glider,			// Glider (Jpn)
 	&BurnDrvMSX_glidera,		// Glider (Jpn, Alt)
@@ -21793,6 +21945,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_gunship,			// Gunship (Euro)
 	&BurnSpecgunship,			// Gunship
 	&BurnDrvmd_gunstar,			// Gunstar Heroes (Euro)
+	&BurnDrvmd_gunstark,		// Gunstar Heroes (Hack, Korean)
 	&BurnDrvmd_gunstars,		// Gunstar Heroes (Hack, Spanish)
 	&BurnDrvgg_gunstar,			// Gunstar Heroes (Jpn)
 	&BurnDrvmd_gunstarj,		// Gunstar Heroes (Jpn)
@@ -21855,7 +22008,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpechammerboy2,		// Hammer Boy (Part 2 of 2) (128K)
 	&BurnDrvMSX_hammboy,		// Hammer Boy (Spa)
 	&BurnDrvHharryu,			// Hammerin' Harry (US, M84 hardware)
-	&BurnDrvHharry,				// Hammerin' Harry (World, M81 hardware))
+	&BurnDrvHharry,				// Hammerin' Harry (World, M81 hardware)
 	&BurnDrvHharryb,			// Hammerin' Harry (World, M84 hardware bootleg)
 	&BurnDrvpce_hanataka,		// Hana Taaka Daka!?
 	&BurnDrvsms_hangon,			// Hang-On (Euro, Bra, Aus)
@@ -22104,6 +22257,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvRedfoxwp2,			// Hong Hu Zhanji II (China, set 1)
 	&BurnDrvRedfoxwp2a,			// Hong Hu Zhanji II (China, set 2)
 	&BurnDrvsms_hongkildong,	// Hong Kil Dong (Kor)
+	&BurnDrvmd_ddanpeik,		// Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)
 	&BurnDrvgg_ddanpei,			// Honoo no Toukyuuji - Dodge Danpei (Jpn)
 	&BurnDrvmd_ddanpei,			// Honoo no Toukyuuji - Dodge Danpei (Jpn)
 	&BurnDrvpce_ddanpei,		// Honoo no Toukyuuji - Dodge Danpei
@@ -22235,6 +22389,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvHyperspt,			// Hyper Sports
 	&BurnSpecHypersports,		// Hyper Sports
 	&BurnDrvCpsHsf2j1,			// Hyper Street Fighter II: The Anniversary Edition (031222 Japan)
+	&BurnDrvCpsHsf2jh,			// Hyper Street Fighter II: The Anniversary Edition (031222 Japan, Hidden Hack)
 	&BurnDrvCpsHsf2d,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia Phoenix Edition)
 	&BurnDrvCpsHsf2da,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia Phoenix Edition, alt)
 	&BurnDrvCpsHsf2a,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia)
@@ -22822,6 +22977,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKarnova,			// Karnov (US, rev 5)
 	&BurnDrvKarnov,				// Karnov (US, rev 6)
 	&BurnDrvnes_karnov,			// Karnov (USA)
+	&BurnDrvkarnovrb,			// Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)
 	&BurnDrvkarnovr,			// Karnov's Revenge / Fighter's History Dynamite
 	&BurnSpecKarnov,			// Karnov
 	&BurnDrvnes_kartfighter,	// Kart Fighter (Unl)
@@ -22994,6 +23150,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKittenk,			// Kitten Kaboodle
 	&BurnDrvnes_kittyscatch,	// Kitty's Catch (USA)
 	&BurnDrvnes_kiwikra,		// Kiwi Kraze - A Bird-Brained Adventure! (USA)
+	&BurnDrvkizunab,			// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)
 	&BurnDrvKizuna,				// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle
 	&BurnDrvnes_klashball,		// KlashBall (USA)
 	&BurnDrvMSX_klax,			// Klax (Euro)
@@ -23036,6 +23193,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_knightm3,		// Knightmare III - Shalom (Jpn)
 	&BurnDrvsg1k_moyuchua,		// Knightmare, Moyu Chuanqi (Tw)
 	&BurnDrvCpsKnights,			// Knights of the Round (911127 etc)
+	&BurnDrvCpsKnightj3,		// Knights of the Round (911127 Japan, 1 vs 3 Hack)
 	&BurnDrvCpsKnightsja,		// Knights of the Round (911127 Japan, B-Board 89625B-1)
 	&BurnDrvCpsKnightsj,		// Knights of the Round (911127 Japan, B-Board 91634B-2)
 	&BurnDrvCpsKnightsu,		// Knights of the Round (911127 USA)
@@ -23279,6 +23437,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvgg_landill,			// Land of Illusion Starring Mickey Mouse (Euro, USA)
 	&BurnDrvLsasquad,			// Land Sea Air Squad / Riku Kai Kuu Saizensen
 	&BurnDrvmd_landstlkg,		// Landstalker - Die Schatze von Konig Nolo (Ger)
+	&BurnDrvmd_landstlkk,		// Landstalker - Koutei no Zaihou (Hack, Korean)
 	&BurnDrvmd_landstlkj,		// Landstalker - Koutei no Zaihou (Jpn)
 	&BurnDrvmd_landstlkc,		// Landstalker - Koutei no Zaihou (T-Chi)
 	&BurnDrvmd_landstlkf,		// Landstalker - Le Tresor du Roi Nole (Fra)
@@ -23899,6 +24058,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMshb,			// Marvel Super Heroes (951117 Brazil)
 	&BurnDrvCpsMshh,			// Marvel Super Heroes (951117 Hispanic)
 	&BurnDrvCpsMshj,			// Marvel Super Heroes (951117 Japan)
+	&BurnDrvCpsMshjh,			// Marvel Super Heroes (951117 Japan, Hidden Hack)
 	&BurnDrvCpsMshvsfa1,		// Marvel Super Heroes vs Street Fighter (970620 Asia)
 	&BurnDrvCpsMshvsfa,			// Marvel Super Heroes vs Street Fighter (970625 Asia)
 	&BurnDrvCpsMshvsfb1,		// Marvel Super Heroes vs Street Fighter (970625 Brazil)
@@ -23909,6 +24069,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMshvsfu1,		// Marvel Super Heroes vs Street Fighter (970625 USA)
 	&BurnDrvCpsMshvsfj1,		// Marvel Super Heroes vs Street Fighter (970702 Japan)
 	&BurnDrvCpsMshvsfj,			// Marvel Super Heroes vs Street Fighter (970707 Japan)
+	&BurnDrvCpsMshvsfjh,		// Marvel Super Heroes vs Street Fighter (970707 Japan, Hidden Hack)
 	&BurnDrvCpsMshvsfb,			// Marvel Super Heroes vs Street Fighter (970827 Brazil)
 	&BurnDrvCpsMshvsfu,			// Marvel Super Heroes vs Street Fighter (970827 USA)
 	&BurnDrvCpsMvscur1,			// Marvel vs Capcom - clash of super heroes (971222 USA)
@@ -23962,6 +24123,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_matendouji,		// Matendouji (Japan)
 	&BurnDrvmd_mathblst,		// Math Blaster - Episode 1 (USA)
 	&BurnDrvfds_matounohou,		// Matou no Houkai - The Hero of Babel (Japan)
+	&BurnDrvmatrimdh,			// Matrimelee (Boss Hack)
+	&BurnDrvmatrimnd,			// Matrimelee (Fully Decrypted)
 	&BurnDrvmatrimbl,			// Matrimelee / Shin Gouketsuji Ichizoku Toukon (bootleg)
 	&BurnDrvMatrimbh,			// Matrimelee / Shin Gouketsuji Ichizoku Toukon (Enable Hidden Characters V2)
 	&BurnDrvmatrim,				// Matrimelee / Shin Gouketsuji Ichizoku Toukon (NGM-2660) (NGH-2660)
@@ -24133,17 +24296,20 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmslug2dg,			// Metal Slug 2 - Super Vehicle-001/II (Multifunction Hack, 20170509)
 	&BurnDrvMSlug2,				// Metal Slug 2 - Super Vehicle-001/II (NGM-2410) (NGH-2410)
 	&BurnDrvMSlug2t,			// Metal Slug 2 Turbo (NGM-9410)
+	&BurnDrvmslug3nd,			// Metal Slug 3 (Fully Decrypted)
 	&BurnDrvmslug3g,			// Metal Slug 3 (Multifunction Hack, 20190119)
 	&BurnDrvmslug3v,			// Metal Slug 3 (NGH-2560) (Enhanced Violence Version, hack by EEZEZY)
 	&BurnDrvmslug3h,			// Metal Slug 3 (NGH-2560)
 	&BurnDrvmslug3,				// Metal Slug 3 (NGM-2560)
 	&BurnDrvmslug3a,			// Metal Slug 3 (NGM-2560, earlier)
+	&BurnDrvmslug4nd,			// Metal Slug 4 (Fully Decrypted)
 	&BurnDrvmslug4dg,			// Metal Slug 4 (Multifunction Hack, 20171225)
 	&BurnDrvmslug4h,			// Metal Slug 4 (NGH-2630)
 	&BurnDrvmslug4,				// Metal Slug 4 (NGM-2630)
 	&BurnDrvms4plus,			// Metal Slug 4 Plus (bootleg)
 	&BurnDrvmslug5b,			// Metal Slug 5 (bootleg, set 1)
 	&BurnDrvmslug5b2,			// Metal Slug 5 (bootleg, set 2)
+	&BurnDrvmslug5nd,			// Metal Slug 5 (Fully Decrypted)
 	&BurnDrvms5pcb,				// Metal Slug 5 (JAMMA PCB)
 	&BurnDrvmslug5g,			// Metal Slug 5 (Multifunction Hack, 20170523)
 	&BurnDrvMslug5w,			// Metal Slug 5 (New Campaign, 2016-03-10)
@@ -24701,6 +24867,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmsx_msx,			// MSX1 System BIOS [BIOS only, NOT WORKING]
 	&BurnDrvrocktrv2,			// MTV Rock-N-Roll Trivia (Part 2)
 	&BurnDrvMugsmash,			// Mug Smashers
+	&BurnDrvmd_valisk,			// Mugen Senshi Valis (Hack, Korean)
 	&BurnDrvmd_valisj,			// Mugen Senshi Valis (Jpn)
 	&BurnDrvMSX_valis,			// Mugen Senshi Valis (Jpn)
 	&BurnDrvMSX_valisk,			// Mugen Senshi Valis (Kor)
@@ -24735,6 +24902,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMbombrd,			// Muscle Bomber Duo - ultimate team battle (931206 World)
 	&BurnDrvmd_mushas,			// Musha - Metallic Uniframe Super Hybrid Armor (Hack, Spanish)
 	&BurnDrvmd_musha,			// MUSHA - Metallic Uniframe Super Hybrid Armor (USA)
+	&BurnDrvmd_mushak,			// Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)
 	&BurnDrvmd_mushaj,			// Musha Aleste - Full Metal Fighter Ellinor (Jpn)
 	&BurnDrvsg1k_musicj,		// Music (Jpn)
 	&BurnDrvMusicbal,			// Music Ball
@@ -25007,6 +25175,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsyscheck,			// Neo System Check (ver 1.0b)
 	&BurnDrvneothndr,			// Neo Thunder
 	&BurnDrvturfmast,			// Neo Turf Masters / Big Tournament Golf
+	&BurnDrvNeocu98k,			// Neo-Geo Cup '98 - The Road to the Victory (Korean)
 	&BurnDrvNeocup98,			// Neo-Geo Cup '98 - The Road to the Victory
 	&BurnDrvneotet,				// NeoGeo 2-Player Tetris
 	&BurnDrvneo3ddmo,			// NeoGeo 3D! Demo
@@ -25187,6 +25356,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ncirc1,			// Nightmare Circus (Bra, Alt)
 	&BurnDrvmd_ncircp,			// Nightmare Circus (Prototype)
 	&BurnDrvnitdbl,				// Nightmare in the Dark (bootleg)
+	&BurnDrvnitdnd,				// Nightmare in the Dark (Fully Decrypted)
 	&BurnDrvnitd,				// Nightmare in the Dark
 	&BurnDrvnes_nightonelmstra,	// Nightmare on Elm Street, A (USA)
 	&BurnDrvnes_nightshade,		// Nightshade (USA)
@@ -25229,6 +25399,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKazan,				// Ninja Kazan (World)
 	&BurnDrvnes_ninjakid,		// Ninja Kid (USA)
 	&BurnSpecNinjamassacre,		// Ninja Massacre
+	&BurnDrvninjamab,			// Ninja Master's - haoh-ninpo-cho (Boss Hack)
 	&BurnDrvNinjamasha,			// Ninja Master's - haoh-ninpo-cho (Plus)
 	&BurnDrvninjamas,			// Ninja Master's - haoh-ninpo-cho
 	&BurnDrvNprinces,			// Ninja Princess (315-5051, 64k Ver. bootleg?)
@@ -25824,6 +25995,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_pstarjmd,		// Phantasy Star (Jpn, MD)
 	&BurnDrvsms_pstarje,		// Phantasy Star (Jpn, T-Eng v2.00)
 	&BurnDrvsms_pstark,			// Phantasy Star (Kor)
+	&BurnDrvmd_pstar4k,			// Phantasy Star - Sennenki no Owari ni (Hack, Korean)
 	&BurnDrvmd_pstar4j,			// Phantasy Star - Sennenki no Owari ni (Jpn)
 	&BurnDrvmd_pstar4,			// Phantasy Star - The End of the Millennium (Euro)
 	&BurnDrvmd_pstar4p5,		// Phantasy Star - The End of the Millennium (Prototype, 19940530)
@@ -25844,6 +26016,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ps2ab,			// Phantasy Star II - Anne's Adventure (Jpn, SegaNet)
 	&BurnDrvmd_ps2ace,			// Phantasy Star II - Huey's Adventure (Hack, English)
 	&BurnDrvmd_ps2ac,			// Phantasy Star II - Huey's Adventure (Jpn, SegaNet)
+	&BurnDrvmd_pstar2k,			// Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)
 	&BurnDrvmd_pstar2j,			// Phantasy Star II - Kaerazaru Toki no Owari ni (Jpn)
 	&BurnDrvmd_ps2ade,			// Phantasy Star II - Kinds's Adventure (Hack, English)
 	&BurnDrvmd_ps2ad,			// Phantasy Star II - Kinds's Adventure (Jpn, SegaNet)
@@ -26024,6 +26197,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_popoteam,		// Po Po Team (Taiwan)
 	&BurnDrvmd_pocahont,		// Pocahontas (Euro)
 	&BurnDrvmd_pocahontu,		// Pocahontas (USA)
+	&BurnDrvpnyaand,			// Pochi and Nyaa (Fully Decrypted)
 	&BurnDrvpnyaaa,				// Pochi and Nyaa (Ver 2.00)
 	&BurnDrvpnyaa,				// Pochi and Nyaa (Ver 2.02)
 	&BurnDrvngpc_neo21,			// Pocket Casino Series - Neo 21 (Euro, USA)
@@ -26170,7 +26344,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPowerinb,			// Power Instinct (USA, bootleg set 2)
 	&BurnDrvPowerinsc,			// Power Instinct (USA, bootleg set 3) [no comment, NOT WORKING]
 	&BurnDrvPowerinspu,			// Power Instinct (USA, prototype)
-	&BurnDrvPwrinst2k,			// Power instinct 2 (Korea, ver. 94/04/08)
+	&BurnDrvPwrinst2k,			// Power Instinct 2 (Korea, ver. 94/04/08)
 	&BurnDrvPwrinst2,			// Power Instinct 2 (USA, ver. 94/04/08)
 	&BurnDrvpce_pleag93,		// Power League '93
 	&BurnDrvpce_pleagas,		// Power League (All Star Version)
@@ -26210,6 +26384,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_predatr2s,		// Predator 2 (Hack, Spanish)
 	&BurnSpecPredator2,			// Predator 2
 	&BurnSpecPredator,			// Predator
+	&BurnDrvpisle2nd,			// Prehistoric Isle 2 (Fully Decrypted)
 	&BurnDrvpreisle2,			// Prehistoric Isle 2
 	&BurnDrvPrehislk,			// Prehistoric Isle in 1930 (Korea)
 	&BurnDrvPrehislu,			// Prehistoric Isle in 1930 (US)
@@ -26440,6 +26615,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPclubys,			// Puzzle Club (Yun Sung, set 1)
 	&BurnDrvPclubysa,			// Puzzle Club (Yun Sung, set 2)
 	&BurnDrvPzlbowl,			// Puzzle De Bowling (Japan)
+	&BurnDrvpuzzldpk,			// Puzzle De Pon! (Korean)
+	&BurnDrvpuzzldrk,			// Puzzle De Pon! R! (Korean)
 	&BurnDrvpuzzldpr,			// Puzzle De Pon! R!
 	&BurnDrvpuzzledp,			// Puzzle De Pon!
 	&BurnDrvPuzzlekg,			// Puzzle King (Dance & Puzzle)
@@ -26655,6 +26832,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_radrexu,			// Radical Rex (USA)
 	&BurnDrvnes_rafworld,		// Raf World (Japan)
 	&BurnDrvRaflesia,			// Rafflesia (315-5162)
+	&BurnDrvrotdbh,				// Rage of the Dragons (Boss Hack)
+	&BurnDrvrotdnd,				// Rage of the Dragons (Fully Decrypted)
 	&BurnDrvrotdh,				// Rage of the Dragons (NGH-2640)
 	&BurnDrvrotd,				// Rage of the Dragons (NGM-264?)
 	&BurnDrvmd_ragnacenk,		// Ragnacenty (Kor)
@@ -26812,10 +26991,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvrbff1k,				// Real Bout Fatal Fury / Real Bout Garou Densetsu (Korean release)
 	&BurnDrvrbff1ka,			// Real Bout Fatal Fury / Real Bout Garou Densetsu (Korean release, bug fix revision)
 	&BurnDrvrbff1,				// Real Bout Fatal Fury / Real Bout Garou Densetsu (NGM-095)(NGH-095)
+	&BurnDrvrbff2hb,			// Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)
 	&BurnDrvrbff2k,				// Real Bout Fatal Fury 2 - The Newcomers (Korean release)
 	&BurnDrvrbff2h,				// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (NGH-2400)
 	&BurnDrvrbff2,				// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (NGM-2400)
 	&BurnDrvrbff2bh,			// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (Secret Character Hack)
+	&BurnDrvrbffspeh,			// Real Bout Fatal Fury Special (Hidden Hack)
 	&BurnDrvrbffspbh,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special (Boss Hack)
 	&BurnDrvrbffspeck,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special (Korean release)
 	&BurnDrvrbffspec,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special
@@ -27300,6 +27481,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvTsamuraih,			// Samurai Nihon-Ichi (bootleg, harder)
 	&BurnDrvTsamurai,			// Samurai Nihon-Ichi (set 1)
 	&BurnDrvTsamurai2,			// Samurai Nihon-Ichi (set 2)
+	&BurnDrvSamShob,			// Samurai Shodown (Boss Hack)
 	&BurnDrvmd_samsho,			// Samurai Shodown (Euro)
 	&BurnDrvmd_samshoec,		// Samurai Shodown (Hack, Enhanced Colors v2.0)
 	&BurnDrvmd_samshos,			// Samurai Shodown (Hack, Spanish)
@@ -27308,17 +27490,23 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSamShoh,			// Samurai Shodown / Samurai Spirits (NGH-045)
 	&BurnDrvSamsho,				// Samurai Shodown / Samurai Spirits (NGM-045)
 	&BurnDrvSamShoa,			// Samurai Shodown / Samurai Spirits (NGM-045, alternate board)
+	&BurnDrvSamSho2b,			// Samurai Shodown II (Boss Hack)
 	&BurnDrvSamsho2,			// Samurai Shodown II / Shin Samurai Spirits - Haohmaru jigokuhen (NGM-063)(NGH-063)
 	&BurnDrvSamsho2sp,			// Samurai Shodown II / Shin Samurai Spirits - Haohmaru jigokuhen (Special 2017, hack)
+	&BurnDrvSamSho3b,			// Samurai Shodown III (Boss Hack)
 	&BurnDrvSamSho3h,			// Samurai Shodown III / Samurai Spirits - Zankurou Musouken (NGH-087)
 	&BurnDrvSamSho3,			// Samurai Shodown III / Samurai Spirits - Zankurou Musouken (NGM-087)
+	&BurnDrvSamSho4b,			// Samurai Shodown IV - Amakusa's Revenge (Boss Hack)
 	&BurnDrvSamSho4,			// Samurai Shodown IV - Amakusa's Revenge / Samurai Spirits - Amakusa Kourin (NGM-222)(NGH-222)
 	&BurnDrvSamSho4sp,			// Samurai Shodown IV - Amakusa's Revenge / Samurai Spirits - Amakusa Kourin (Special 2017, hack)
+	&BurnDrvsamsh5ndb,			// Samurai Shodown V (Boss Hack)
+	&BurnDrvsamsho5nd,			// Samurai Shodown V (Fully Decrypted)
 	&BurnDrvsamsho5b,			// Samurai Shodown V / Samurai Spirits Zero (bootleg)
 	&BurnDrvsamsho5x,			// Samurai Shodown V / Samurai Spirits Zero (hack of XBOX version)
 	&BurnDrvsamsho5h,			// Samurai Shodown V / Samurai Spirits Zero (NGH-2700)
 	&BurnDrvsamsho5,			// Samurai Shodown V / Samurai Spirits Zero (NGM-2700, set 1)
 	&BurnDrvsamsho5a,			// Samurai Shodown V / Samurai Spirits Zero (NGM-2700, set 2)
+	&BurnDrvssh5spnd,			// Samurai Shodown V Special (Fully Decrypted)
 	&BurnDrvsamsh5spho,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGH-2720) (1st release, censored)
 	&BurnDrvsamsh5sph,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGH-2720) (2nd release, less censored)
 	&BurnDrvsamsh5fe,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGM-272) (NGH-272) (Final Edition, location test version)
@@ -27406,6 +27594,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecsavage2,			// Savage (Part 2 of 3) (48K)
 	&BurnSpecsavage3,			// Savage (Part 3 of 3) (48K)
 	&BurnDrvSavgbees,			// Savage Bees
+	&BurnDrvsavagerb,			// Savage Reign (Boss Hack)
 	&BurnDrvSavagereb,			// Savage Reign / Fu'un Mokushiroku - kakutou sousei (Boss Hack)
 	&BurnDrvSavagere,			// Savage Reign / Fu'un Mokushiroku - kakutou sousei
 	&BurnSpecSavingkong,		// Saving Kong (HB)
@@ -27464,6 +27653,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGrainbow,			// SD Gundam Sangokushi Rainbow Tairiku Senki (Japan)
 	&BurnDrvGrainbowk,			// SD Gundam Sangokushi Rainbow Tairiku Senki (Korea)
 	&BurnDrvfds_sdgunworgacsescwa,// SD Gundam World - Gachapon Senshi - Scramble Wars (Japan)
+	&BurnDrvmd_sdvalisk,		// SD Valis (Hack, Korean)
 	&BurnDrvmd_sdvalis,			// SD Valis (Jpn)
 	&BurnDrvsms_sdi,			// SDI (Jpn)
 	&BurnDrvSdibl,				// SDI - Strategic Defense Initiative (bootleg, original hardware)
@@ -27540,6 +27730,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSengokuh,			// Sengoku / Sengoku Denshou (NGH-017)(US)
 	&BurnDrvSengoku,			// Sengoku / Sengoku Denshou (NGM-017)(NGH-017)
 	&BurnDrvSengoku2,			// Sengoku 2 / Sengoku Denshou 2
+	&BurnDrvSengo3nd,			// Sengoku 3 (Fully Decrypted)
+	&BurnDrvsengo3nh,			// Sengoku 3 (Hidden Hack)
 	&BurnDrvSengoku3s,			// Sengoku 3 / Sengoku Densho 2001 (Evolution 1.0, FCHT hack)
 	&BurnDrvsengoku3fs,			// Sengoku 3 / Sengoku Densho 2001 (Feng Shen Edition, Hack)
 	&BurnDrvSengoku3,			// Sengoku 3 / Sengoku Densho 2001 (set 1)
@@ -27656,10 +27848,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ragnacenp,		// Shin Souseiki Ragnacenty (Jpn, Prototype)
 	&BurnDrvmd_ragnacenc,		// Shin Souseiki Ragnacenty (T-Chi)
 	&BurnDrvTshingen,			// Shingen Samurai-Fighter (Japan, English) [Game crashes in level 2, play tshingena instead!, NOT WORKING]
+	&BurnDrvmd_shindarkk,		// Shining and the Darkness (Hack, Korean)
 	&BurnDrvmd_shindarkj,		// Shining and the Darkness (Jpn)
 	&BurnDrvmd_shinfrces,		// Shining Force (Hack, Spanish)
 	&BurnDrvmd_shinfrce,		// Shining Force (USA)
 	&BurnDrvmd_shinfrcep,		// Shining Force (USA, Prototype)
+	&BurnDrvmd_shinfrcek,		// Shining Force - Kamigami no Isan (Hack, Korean)
 	&BurnDrvmd_shinfrcej,		// Shining Force - Kamigami no Isan (Jpn)
 	&BurnDrvgg_shinfrcg,		// Shining Force Gaiden - Ensei, Jashin no Kuni e (Jpn)
 	&BurnDrvgg_shinfrgfe,		// Shining Force Gaiden - Final Conflict (Hack, English)
@@ -27669,6 +27863,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_shinfrc2u,		// Shining Force II (USA)
 	&BurnDrvmd_shinfrc2p2,		// Shining Force II (USA, Prototype, 19940404)
 	&BurnDrvmd_shinfrc2p1,		// Shining Force II (USA, Prototype, 19940607)
+	&BurnDrvmd_shinfrc2k,		// Shining Force II - Koe no Fuuin (Hack, Korean)
 	&BurnDrvmd_shinfrc2j,		// Shining Force II - Koe no Fuuin (Jpn)
 	&BurnDrvmd_shinfrc2c,		// Shining Force II - Koe no Fuuin (T-Chi, v2)
 	&BurnDrvgg_shinfrc2,		// Shining Force II - The Sword of Hajya (Euro, USA)
@@ -27970,9 +28165,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvngpc_svccardsja,	// SNK vs. Capcom - Gekitotsu Card Fighters - SNK Supporters Version (Jpn, v6)
 	&BurnDrvngpc_svccardsj,		// SNK vs. Capcom - Gekitotsu Card Fighters - SNK Supporters Version (Jpn, v7)
 	&BurnDrvsvcboot,			// SNK vs. Capcom - SVC Chaos (bootleg)
+	&BurnDrvsvcnd,				// SNK vs. Capcom - SVC Chaos (Fully Decrypted)
 	&BurnDrvsvcpcb,				// SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 1)
 	&BurnDrvsvcpcba,			// SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 2)
 	&BurnDrvsvc,				// SNK vs. Capcom - SVC Chaos (NGM-2690)(NGH-2690)
+	&BurnDrvsvcndps2,			// SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)
 	&BurnDrvsvcplus,			// SNK vs. Capcom - SVC Chaos Plus (bootleg set 1)
 	&BurnDrvsvcplusa,			// SNK vs. Capcom - SVC Chaos Plus (bootleg set 2)
 	&BurnDrvsvcsplus,			// SNK vs. Capcom - SVC Chaos Super Plus (bootleg)
@@ -28722,6 +28919,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSf2uf,			// Street Fighter II - The World Warrior (910411 USA)
 	&BurnDrvCpsSf2ef,			// Street Fighter II - The World Warrior (910411 World)
 	&BurnDrvCpsSf2jh,			// Street Fighter II - The World Warrior (910522 Japan)
+	&BurnDrvCpsSf2jhpp,			// Street Fighter II - The World Warrior (910522 Japan, Plus Plus Hack)
 	&BurnDrvCpsSf2ug,			// Street Fighter II - The World Warrior (910522 USA, rev G)
 	&BurnDrvCpsSf2uh,			// Street Fighter II - The World Warrior (910522 USA, rev H)
 	&BurnDrvCpsSf2ui,			// Street Fighter II - The World Warrior (910522 USA, rev I)
@@ -28868,6 +29066,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfzh,			// Street Fighter Zero (950718 Hispanic)
 	&BurnDrvCpsSfzbr1,			// Street Fighter Zero (950727 Brazil)
 	&BurnDrvCpsSfzj,			// Street Fighter Zero (950727 Japan)
+	&BurnDrvCpsSfzjh,			// Street Fighter Zero (950727 Japan, Hidden Hack)
 	&BurnDrvCpsSfzb,			// Street Fighter Zero (951109 Brazil)
 	&BurnDrvCpsSfzcha,			// Street Fighter Zero (CPS Changer, 040820 Japan)
 //	&BurnDrvCpsSfzbch,			// Street Fighter Zero (CPS Changer, 950727 Brazil) [no comment]
@@ -28879,12 +29078,14 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfz2a,			// Street Fighter Zero 2 (960227 Asia)
 	&BurnDrvCpsSfz2jd,			// Street Fighter Zero 2 (960227 Japan Phoenix Edition)
 	&BurnDrvCpsSfz2jr1,			// Street Fighter Zero 2 (960227 Japan)
+	&BurnDrvCpsSfz2jr1h,		// Street Fighter Zero 2 (960227 Japan, Hidden Hack)
 	&BurnDrvCpsSfz2n,			// Street Fighter Zero 2 (960229 Oceania)
 	&BurnDrvCpsSfz2br1,			// Street Fighter Zero 2 (960304 Brazil)
 	&BurnDrvCpsSfz2h,			// Street Fighter Zero 2 (960304 Hispanic)
 	&BurnDrvCpsSfz2j,			// Street Fighter Zero 2 (960430 Japan)
 	&BurnDrvCpsSfz2b,			// Street Fighter Zero 2 (960531 Brazil)
 	&BurnDrvCpsSfz2alj,			// Street Fighter Zero 2 Alpha (960805 Japan)
+	&BurnDrvCpsSfz2aljh,		// Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack)
 	&BurnDrvCpsSfz2alb,			// Street Fighter Zero 2 Alpha (960813 Brazil)
 	&BurnDrvCpsSfz2alh,			// Street Fighter Zero 2 Alpha (960813 Hispanic)
 	&BurnDrvCpsSfz2ald,			// Street Fighter Zero 2 Alpha (960826 Asia Phoenix Edition)
@@ -28896,6 +29097,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfz3jr1,			// Street Fighter Zero 3 (980727 Japan)
 	&BurnDrvCpsSfz3a,			// Street Fighter Zero 3 (980904 Asia)
 	&BurnDrvCpsSfz3j,			// Street Fighter Zero 3 (980904 Japan)
+	&BurnDrvCpsSfz3jh,			// Street Fighter Zero 3 (980904 Japan, Hidden Hack)
 	&BurnDrvSftm110,			// Street Fighter: The Movie (v1.10)
 	&BurnDrvSftm111,			// Street Fighter: The Movie (v1.11)
 	&BurnDrvSftm,				// Street Fighter: The Movie (v1.12)
@@ -28992,6 +29194,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvS1945n,				// Strikers 1945 (World, unprotected)
 	&BurnDrvS1945iii,			// Strikers 1945 III (World) / Strikers 1999 (Japan)
 	&BurnDrvS1945ii,			// Strikers 1945 II
+	&BurnDrvs1945pnd,			// Strikers 1945 Plus (Fully Decrypted)
 	&BurnDrvs1945p,				// Strikers 1945 Plus
 	&BurnDrvpce_stripf2,		// Strip Fighter II
 	&BurnDrvStrongx,			// Strong X
@@ -29187,6 +29390,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSupduck,			// Super Duck
 	&BurnDrvUsg32,				// Super Duper Casino (California V3.2)
 	&BurnDrvmd_sfzone,			// Super Fantasy Zone (Euro)
+	&BurnDrvmd_sfzonek,			// Super Fantasy Zone (Hack, Korean)
 	&BurnDrvmd_sfzones,			// Super Fantasy Zone (Hack, Spanish)
 	&BurnDrvmd_sfzonej,			// Super Fantasy Zone (Jpn)
 	&BurnDrvSformula,			// Super Formula (Japan)
@@ -29436,6 +29640,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSsf2tur1,		// Super Street Fighter II Turbo (super street fighter 2 X 940223 USA)
 	&BurnDrvCpsSsf2tu,			// Super Street Fighter II Turbo (super street fighter 2 X 940323 USA)
 	&BurnDrvCpsSsf2tnl,			// Super Street Fighter II Turbo New Legacy v0.4 (Beta) (Hack by Born2SPD)
+	&BurnDrvCpsSsf2xjh,			// Super Street Fighter II X - grand master challenge (940223 Japan, Hidden Hack)
+	&BurnDrvCpsSsf2xjr1dt,		// Super Street Fighter II X - grand master challenge (Phoenix Edition, Training Hack)
 	&BurnDrvCpsSsf2xjr1d,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan Phoenix Edition)
 	&BurnDrvCpsSsf2xjr1r,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan rent version)
 	&BurnDrvCpsSsf2xjr1,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan)
@@ -29850,7 +30056,9 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsDynwarjr,		// Tenchi wo Kurau (Japan Resale Ver.)
 	&BurnDrvCpsDynwarj,			// Tenchi wo Kurau (Japan)
 	&BurnDrvnes_tenchiwokurau,	// Tenchi wo Kurau (Japan)
+	&BurnDrvCpsWofj103,			// Tenchi wo Kurau II - Counter Attack of Mei Sisters (921031 Japan, Hack)
 	&BurnDrvCpsWofj,			// Tenchi wo Kurau II - Sekiheki no Tatakai (921031 Japan)
+	&BurnDrvCpsWofch3p,			// Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer 3P Ura Mode Hack, 921031 Japan)
 	&BurnDrvCpsWofch,			// Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer, 921031 Japan)
 	&BurnDrvCpsWofjh,			// Tenchi wo Kurau II - Sekiheki no Tatakai (hack, 921031 Japan)
 	&BurnDrvCpsWofjdr,			// Tenchi wo Kurau II - Sekiheki no Tatakai (Master Edition, Hack)
@@ -30142,6 +30350,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_hybridfc,		// The Hybrid Front (T-Chi)
 	&BurnDrvMSX_iceking,		// The Ice King (Euro)
 	&BurnDrvmd_immortal,		// The Immortal (Euro, USA)
+	&BurnDrvmd_immortalk,		// The Immortal (Hack, Korean)
 	&BurnDrvmd_immortals,		// The Immortal (Hack, Spanish)
 	&BurnDrvsms_crashdum,		// The Incredible Crash Dummies (Euro, Bra)
 	&BurnDrvmd_crashdum,		// The Incredible Crash Dummies (Euro, USA)
@@ -30177,8 +30386,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsKodr1,			// The King of Dragons (World 910711)
 	&BurnDrvCpsKod,				// The King of Dragons (World 910805)
 	&BurnDrvKof94rz,			// The King of Fighters '94 (Hack Boss Remixed)
+	&BurnDrvKof94kr,			// The King of Fighters '94 (Korean, Boss Hack)
 	&BurnDrvKof94,				// The King of Fighters '94 (NGM-055)(NGH-055)
 	&BurnDrvKof95b,				// The King of Fighters '95 (Enable Hidden Characters V.[?])
+	&BurnDrvKof95kr,			// The King of Fighters '95 (Korean, NeoGeo CD Hack)
 	&BurnDrvKof95h,				// The King of Fighters '95 (NGH-084)
 	&BurnDrvKof95a,				// The King of Fighters '95 (NGH-084, alternate board)
 	&BurnDrvKof95,				// The King of Fighters '95 (NGM-084)
@@ -30186,6 +30397,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkof96ae,			// The King of Fighters '96 (Anniversary Edition, EGHT hack)
 	&BurnDrvkof96ep,			// The King of Fighters '96 (bootleg / hack)
 	&BurnDrvkof96cn,			// The King of Fighters '96 (Chinese Edition ver 1.0, hack)
+	&BurnDrvKof96kr,			// The King of Fighters '96 (Korean, Add Practice Mode)
 	&BurnDrvKof96h,				// The King of Fighters '96 (NGH-214)
 	&BurnDrvKof96,				// The King of Fighters '96 (NGM-214)
 	&BurnDrvKof96a,				// The King of Fighters '96 (NGM-214, alternate board)
@@ -30194,6 +30406,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKof97ps,			// The King of Fighters '97 (Imitation Playstation final improved version 2016-10-29)
 	&BurnDrvkof97invplus,		// The King of Fighters '97 (Invincible Plus)
 	&BurnDrvKof97k,				// The King of Fighters '97 (Korean release)
+	&BurnDrvkof97ps,			// The King of Fighters '97 (Korean, PlayStation Hack)
+	&BurnDrvKof97kr,			// The King of Fighters '97 (Korean, Practice Mode, Boss Hack)
 	&BurnDrvKof97h,				// The King of Fighters '97 (NGH-2320)
 	&BurnDrvKof97,				// The King of Fighters '97 (NGM-2320)
 	&BurnDrvkof97t2020,			// The King of Fighters '97 (Optimised Edition 2020)
@@ -30207,11 +30421,15 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKof97oro,			// The King of Fighters '97 oroshi plus 2003
 	&BurnDrvKof97pls,			// The King of Fighters '97 Plus (bootleg)
 	&BurnDrvkof97pla,			// The King of Fighters '97 Plus 2003 (bootleg / hack)
+	&BurnDrvKof97ts,			// The King of Fighters '97 Tu She Edition (v1.2, Hack)
 	&BurnDrvkof98ae2016,		// The King of Fighters '98 (Anniversary Edition build 1.2.0827)
 	&BurnDrvkof98ae,			// The King of Fighters '98 (Anniversary Edition, EGHT hack)
 	&BurnDrvkof98cps,			// The King of Fighters '98 (Combo Plus)
 	&BurnDrvkof98cb,			// The King of Fighters '98 (Combo, hack)
+	&BurnDrvKof98kr,			// The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)
+	&BurnDrvKof98cd,			// The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)
 	&BurnDrvkof98pfe,			// The King of Fighters '98 (Plus Final Edition 2017-07-23)
+	&BurnDrvKof98bf,			// The King of Fighters '98 (System Bugs Fix)
 	&BurnDrvkof98ult,			// The King of Fighters '98 (Ultimate Match)
 	&BurnDrvKof98k,				// The King of Fighters '98 - The Slugfest / King of Fighters '98 - dream match never ends (Korean board, set 1)
 	&BurnDrvKof98ka,			// The King of Fighters '98 - The Slugfest / King of Fighters '98 - dream match never ends (Korean board, set 2)
@@ -30221,10 +30439,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkof98eck20,			// The King of Fighters '98 Easy Combo King (YZKOF Version, Hack)
 	&BurnDrvkof98eckvs,			// The King of Fighters '98 Easy Combo King 2014 (Versus Version, Hack)
 	&BurnDrvKof98mix,			// The King of Fighters '98 Mix (2015-12-29)
+	&BurnDrvkof99ae2016,		// The King of Fighters '99 (15th Anniversary Edition 2016)
 	&BurnDrvmd_kof99a,			// The King of Fighters '99 (Alt)
 	&BurnDrvkof99e,				// The King of Fighters '99 - Millennium Battle (earlier)
+	&BurnDrvkof99nd,			// The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)
 	&BurnDrvkof99k,				// The King of Fighters '99 - Millennium Battle (Korean release)
 	&BurnDrvkof99ka,			// The King of Fighters '99 - Millennium Battle (Korean release, non-encrypted program)
+	&BurnDrvkof99kr,			// The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)
 	&BurnDrvkof99h,				// The King of Fighters '99 - Millennium Battle (NGH-2510)
 	&BurnDrvkof99,				// The King of Fighters '99 - Millennium Battle (NGM-2510)
 	&BurnDrvkof99p,				// The King of Fighters '99 - Millennium Battle (prototype)
@@ -30239,16 +30460,22 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k5uni,			// The King of Fighters 10th Anniversary 2005 Unique (bootleg)
 	&BurnDrvkof10thuo,			// The King of Fighters 10th Anniversary 2019 (Optimized version 2019, hack)
 	&BurnDrvkf10thep,			// The King of Fighters 10th Anniversary Extra Plus (bootleg)
+	&BurnDrvkof2knd,			// The King of Fighters 2000 (Fully Decrypted)
+	&BurnDrvkof2kkr,			// The King of Fighters 2000 (Korean, PlayStation 2 Hack)
 	&BurnDrvkof2000,			// The King of Fighters 2000 (NGM-2570) (NGH-2570)
 	&BurnDrvkof2000n,			// The King of Fighters 2000 (not encrypted)
 	&BurnDrvkof2000otc,			// The King of Fighters 2000 (OTC, hack)
 	&BurnDrvkof2000ps2,			// The King of Fighters 2000 (Playstation 2 ver. , EGHT hack)
+	&BurnDrvkof2k1nd,			// The King of Fighters 2001 (Fully Decrypted)
 	&BurnDrvkof2001h,			// The King of Fighters 2001 (NGH-2621)
 	&BurnDrvkof2001,			// The King of Fighters 2001 (NGM-262?)
+	&BurnDrvkof2k1ps2,			// The King of Fighters 2001 (PlayStation 2 Hack)
 	&BurnDrvkf2k1pkz,			// The King of Fighters 2001 (PS2 Krizalid Edition)
 	&BurnDrvkf2k1pls,			// The King of Fighters 2001 Plus (set 1, bootleg / hack)
 	&BurnDrvkf2k1pa,			// The King of Fighters 2001 Plus (set 2, bootleg / hack)
 	&BurnDrvkof2002b,			// The King of Fighters 2002 (bootleg)
+	&BurnDrvkof2k2nd,			// The King of Fighters 2002 (Fully Decrypted)
+	&BurnDrvkof2k2kh,			// The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)
 	&BurnDrvkof2002,			// The King of Fighters 2002 (NGM-2650)(NGH-2650)
 	&BurnDrvkof2k2omg,			// The King of Fighters 2002 (Omega v.0?)
 	&BurnDrvkof2k2omg8,			// The King of Fighters 2002 (Omega v0.8)
@@ -30259,15 +30486,18 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k2ps2b,			// The King of Fighters 2002 (PlayStation 2, Hack)
 	&BurnDrvkof2k2plus,			// The King of Fighters 2002 (Plus 2017, Hack)
 	&BurnDrvkf2k23rd,			// The King of Fighters 2002 - 3rd Strike of Orochi (Hack by EGCG/EGHT)
+	&BurnDrvkof2k2cm,			// The King of Fighters 2002 CLIMAX (Hack)
 	&BurnDrvkf2k2mp,			// The King of Fighters 2002 Magic Plus (bootleg)
 	&BurnDrvkf2k2mp2,			// The King of Fighters 2002 Magic Plus II (bootleg)
 	&BurnDrvkf2k2pls,			// The King of Fighters 2002 Plus (bootleg set 1)
 	&BurnDrvkf2k2pla,			// The King of Fighters 2002 Plus (bootleg set 2)
 	&BurnDrvkf2k2plb,			// The King of Fighters 2002 Plus (bootleg set 3)
+	&BurnDrvkf2k2pls2017,		// The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)
 	&BurnDrvkf2k2ru35,			// The King of Fighters 2002 Remix Ultra 3.5 (Hack By FCHT)
 	&BurnDrvkf2k2plc,			// The King of Fighters 2002 Super (bootleg)
 	&BurnDrvkf2k3bl,			// The King of Fighters 2003 (bootleg set 1)
 	&BurnDrvkf2k3bla,			// The King of Fighters 2003 (bootleg set 2)
+	&BurnDrvkof2k3nd,			// The King of Fighters 2003 (Fully Decrypted)
 	&BurnDrvkf2k3pcb,			// The King of Fighters 2003 (Japan, JAMMA PCB)
 	&BurnDrvkof2003h,			// The King of Fighters 2003 (NGH-2710)
 	&BurnDrvkof2003,			// The King of Fighters 2003 (NGM-2710)
@@ -30278,10 +30508,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k4pls,			// The King of Fighters Special Edition 2004 Plus (bootleg)
 	&BurnDrvpce_kungfu,			// The Kung Fu
 	&BurnDrvngpc_lastblad,		// The Last Blade - Beyond the Destiny (Euro)
+	&BurnDrvlastbladb,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)
 	&BurnDrvlastbladh,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGH-2340)
 	&BurnDrvlastblad,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGM-2340)
 	&BurnDrvlastblada,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGM-2340, alternate board)
 	&BurnDrvlastbladsp,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Special 2017, hack)
+	&BurnDrvlastbl2h,			// The Last Blade 2 (Hidden Hack)
+	&BurnDrvlastbl2f,			// The Last Blade 2 (System Bugs Fix)
 	&BurnDrvLb2b,				// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (Enable Hidden Characters V4)
 	&BurnDrvDlastbld2eh,		// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (Enhanced Hack)
 	&BurnDrvlastbld2,			// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (NGM-2430)(NGH-2430)
@@ -30460,9 +30693,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_thorp2,			// The Story of Thor (USA, Prototype, 19941004)
 	&BurnDrvmd_thorp1,			// The Story of Thor (USA, Prototype, 19941017)
 	&BurnDrvmd_thorf,			// The Story of Thor - A Successor of The Light (Fra)
+	&BurnDrvmd_thork2,			// The Story of Thor - Hikari o Tsugumono (Hack, Korean)
 	&BurnDrvmd_thorj,			// The Story of Thor - Hikari o Tsugumono (Jpn)
 	&BurnDrvmd_thorc,			// The Story of Thor - Hikari o Tsugumono (T-Chi)
 	&BurnDrvmd_supshin,			// The Super Shinobi (Jpn)
+	&BurnDrvmd_supshin2k,		// The Super Shinobi II (Hack, Korean)
 	&BurnDrvmd_supshin2,		// The Super Shinobi II (Jpn, Kor)
 	&BurnDrvmd_supshin2p1,		// The Super Shinobi II (Jpn, Prototype)
 	&BurnDrvmd_supshin2p2,		// The Super Shinobi II (Jpn, Prototype, Earlier)
@@ -31027,8 +31262,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_twinb3,			// TwinBee 3 - Poko Poko Daimaou (Japan)
 	&BurnDrvTwinkle,			// Twinkle (set 1)
 	&BurnDrvTwinklea,			// Twinkle (set 2)
+	&BurnDrvtwinsprh,			// Twinkle Star Sprites (Hidden Hack)
 	&BurnDrvtwinspri,			// Twinkle Star Sprites
 	&BurnDrvmd_twinklete,		// Twinkle Tale (Hack, English)
+	&BurnDrvmd_twinkletk,		// Twinkle Tale (Hack, Korean)
 	&BurnDrvmd_twinklet,		// Twinkle Tale (Jpn)
 	&BurnDrvMSX_twinlight,		// Twinlight (HB)
 	&BurnDrvCpsMtwinsb,			// Twins (bootleg of Mega Twins)
@@ -31173,6 +31410,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvvliner7e,			// V-Liner (v0.7e)
 	&BurnDrvmd_valis,			// Valis (USA)
 	&BurnDrvnes_valis,			// Valis - The Fantastic Soldier (Japan)
+	&BurnDrvmd_valis3k,			// Valis III (Hack, Korean)
 	&BurnDrvmd_valis3j,			// Valis III (Jpn, Rev. A)
 	&BurnDrvmd_valis3,			// Valis III (USA)
 	&BurnDrvMSX_valkyr,			// Valkyr (Euro)
@@ -31191,6 +31429,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsVampjr1,			// Vampire - the night warriors (940630 Japan)
 	&BurnDrvCpsVampj,			// Vampire - the night warriors (940705 Japan)
 	&BurnDrvCpsVampja,			// Vampire - the night warriors (940705 Japan, alt)
+	&BurnDrvCpsVampjh,			// Vampire - the night warriors (940705 Japan, Hidden Hack)
 	&BurnDrvCpsVhuntjr2,		// Vampire Hunter - darkstalkers' revenge (950302 Japan)
 	&BurnDrvCpsVhuntjr1s,		// Vampire Hunter - darkstalkers' revenge (950307 Japan stop version)
 	&BurnDrvCpsVhuntjr1,		// Vampire Hunter - darkstalkers' revenge (950307 Japan)
@@ -31205,6 +31444,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsVsavh,			// Vampire Savior - the lord of vampire (970519 Hispanic)
 	&BurnDrvCpsVsavj,			// Vampire Savior - the lord of vampire (970519 Japan)
 	&BurnDrvCpsVsavu,			// Vampire Savior - the lord of vampire (970519 USA)
+	&BurnDrvCpsVsavdt,			// Vampire Savior - the lord of vampire (Phoenix Edition, Training Hack)
 	&BurnDrvCpsVsav2d,			// Vampire Savior 2 - the lord of vampire (970913 Japan Phoenix Edition)
 	&BurnDrvCpsVsav2,			// Vampire Savior 2 - the lord of vampire (970913 Japan)
 	&BurnSpecvampveng,			// Vampire Vengeance (HB, v1.1)
@@ -31380,6 +31620,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_volguardii,		// Volguard II (Japan)
 	&BurnDrvfds_volleyball,		// Volleyball (Japan)
 	&BurnDrvnes_volleyball,		// Volleyball (USA)
+	&BurnDrvgowcaizb,			// Voltage Fighter - Gowcaizer (Boss Hack)
 	&BurnDrvgowcaizr,			// Voltage Fighter - Gowcaizer / Choujin Gakuen Gowcaizer
 	&BurnDrvMSX_vortraid,		// Vortex Raider (Euro)
 	&BurnDrvsms_voyage,			// Voyage - A Sorceress Vacation (HB, v1.03)
@@ -31428,6 +31669,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_waimanu,		// Waimanu: Scary Monsters Saga (HB)
 	&BurnDrvMj4simai,			// Wakakusamonogatari Mahjong Yonshimai (Japan)
 	&BurnDrvwakuwak7bh,			// Waku Waku 7 (Boss Hack)
+	&BurnDrvwakuwa7h,			// Waku Waku 7 (Hidden Hack)
 	&BurnDrvwakuwak7,			// Waku Waku 7
 	&BurnDrvUltracin,			// Waku Waku Ultraman Racing
 	&BurnDrvfds_wakusatogai,	// Wakusei Aton Gaiden (Japan)
@@ -31588,6 +31830,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_wimbledup,		// Wimbledon Championship Tennis (USA, Prototype)
 	&BurnDrvsms_wimbled2,		// Wimbledon II (Euro, Bra)
 	&BurnDrvnes_winlosordra,	// Win, Lose or Draw (USA)
+	&BurnDrvwjammerk,			// Windjammers / Flying Power Disc (Korean)
 	&BurnDrvwjammers,			// Windjammers / Flying Power Disc
 	&BurnDrvWingforc,			// Wing Force (Japan, prototype)
 	&BurnDrvMSX_wingman2,		// Wing Man 2 - Kitakura no Fukkatsu (Jpn)
@@ -31794,6 +32037,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_worldgpp,		// World Grand Prix (USA, Prototype)
 	&BurnDrvwh1h,				// World Heroes (ALH-005)
 	&BurnDrvwh1,				// World Heroes (ALM-005)
+	&BurnDrvwh1b,				// World Heroes (Boss Hack)
 	&BurnDrvmd_whj,				// World Heroes (Jpn)
 	&BurnDrvmd_whjp5,			// World Heroes (Jpn, Prototype, 19940330)
 	&BurnDrvmd_whjp4,			// World Heroes (Jpn, Prototype, 19940408)
@@ -31817,8 +32061,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_whp02,			// World Heroes (USA, Prototype, 19940331-B)
 	&BurnDrvwh2h,				// World Heroes 2 (ALH-006)
 	&BurnDrvwh2,				// World Heroes 2 (ALM-006)(ALH-006)
+	&BurnDrvwh2b,				// World Heroes 2 (Boss Hack)
 	&BurnDrvwh2j,				// World Heroes 2 Jet (ADM-007)(ADH-007)
 	&BurnDrvwh2ja,				// World Heroes 2 Jet (ADM-007)
+	&BurnDrvwh2jb,				// World Heroes 2 Jet (Boss Hack)
+	&BurnDrvwhpb,				// World Heroes Perfect (Boss Hack)
 	&BurnDrvwhp,				// World Heroes Perfect
 	&BurnDrvpce_wjockey,		// World Jockey
 	&BurnDrvmd_worldillj,		// World of Illusion - Fushigi na Magic Box (Jpn)
@@ -31957,6 +32204,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsXmcotaj3,		// X-Men - children of the atom (941217 Japan)
 	&BurnDrvCpsXmcotaar1,		// X-Men - children of the atom (941219 Asia)
 	&BurnDrvCpsXmcotaj2,		// X-Men - children of the atom (941219 Japan)
+	&BurnDrvCpsXmcotaj2h,		// X-Men - children of the atom (941219 Japan, Hidden Hack)
 	&BurnDrvCpsXmcotaj1,		// X-Men - children of the atom (941222 Japan)
 	&BurnDrvCpsXmcotaa,			// X-Men - children of the atom (950105 Asia)
 	&BurnDrvCpsXmcotar1d,		// X-Men - children of the atom (950105 Euro Phoenix Edition)
@@ -32142,6 +32390,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_ysd,			// Ys (USA, Demo)
 	&BurnDrvsms_ys,				// Ys - The Vanished Omens (Euro, USA, Bra)
 	&BurnDrvsms_ysfm,			// Ys - The Vanished Omens (FM Mod, v1.2)
+	&BurnDrvmd_ys3k,			// Ys - Wanderers from Ys (Hack, Korean)
 	&BurnDrvmd_ys3j,			// Ys - Wanderers from Ys (Jpn)
 	&BurnDrvnes_ysiij,			// Ys II - Ancient Ys Vanished - The Final Chapter (Japan)
 	&BurnDrvnes_ysii,			// Ys II - Ancient Ys Vanished - The Final Chapter (T-eng)
@@ -32301,6 +32550,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_zouzou,			// Zou! Zou! Zou! Rescue Daisakusen (Jpn)
 	&BurnSpecZub,				// Zub
 	&BurnDrvnes_zunousengal,	// Zunou Senkan Galg (Japan)
+	&BurnDrvZupapand,			// Zupapa! (Fully Decrypted)
 	&BurnDrvZupapa,				// Zupapa!
 	&BurnSpecSpec128BIOS,		// ZX Spectrum 128 [BIOS Only, NOT WORKING]
 	&BurnSpecSpec128,			// ZX Spectrum 128
