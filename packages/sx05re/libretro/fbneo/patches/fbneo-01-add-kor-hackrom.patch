diff --git a/gamelist.txt b/gamelist.txt
index 260612e80..1e25652d0 100644
--- a/gamelist.txt
+++ b/gamelist.txt
@@ -1,6 +1,6 @@
 This list contains all games supported by FinalBurn Neo.
 
-17040 games supported in total; X = excluded from build; D = included in debug build only; NW = not working
+17118 games supported in total; X = excluded from build; D = included in debug build only; NW = not working
 
   name		  status  full name						  parent	  year	  company	  hardware	  remarks
 +---------------+-------+-------------------------------------------------------+---------------+-------+---------------+---------------+---------------------------------------+
@@ -470,7 +470,6 @@ This list contains all games supported by FinalBurn Neo.
 | spec_alienevolution|  	| Alien Evolution					| 		| 1987	| Gremlin	| ZX Spectrum	| 					|
 | spec_aliengirldemo|  	| Alien Girl - 48k Demo (HB)				| 		| 2020	| Javier Fopiani| ZX Spectrum	| 					|
 | alinvade	|  	| Alien Invaders					| 		| 198?	| Forbes?	| Miscellaneous	| preliminary sound			|
-| chf_alieninv	|  	| Alien Invasion					| 		| 1981	| Zircon	| Channel F	| 					|
 | alienres	|  	| Alien Rescue (Homebrew, Test Build July 2019)		| 		| 2019	| MonstersGoBoom| Pac-man	| monstersgoboom.itch.io		|
 | aliensec	|  	| Alien Sector						| 		| 1985	| Namco		| Miscellaneous	| 					|
 | md_aliensol	|  	| Alien Soldier (Euro)					| 		| 1995	| Sega		| Sega Megadrive| 					|
@@ -529,6 +528,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_aliensuk	|  	| Aliens UK						| 		| 1986	| Electric Dream| ZX Spectrum	| 					|
 | spec_aliensus	|  	| Aliens US						| 		| 1987	| Electric Dream| ZX Spectrum	| 					|
 | md_alisiad	|  	| Alisia Dragoon (Euro)					| 		| 1992	| Sega		| Sega Megadrive| 					|
+| md_alisiadk	|  	| Alisia Dragoon (Hack, Korean)				| md_alisiad	| 2013	| Game Arts	| Sega Megadrive| 					|
 | md_alisiads	|  	| Alisia Dragoon (Hack, Spanish)			| md_alisiad	| 2018	| Sega		| Sega Megadrive| 					|
 | md_alisiadj	|  	| Alisia Dragoon (Jpn)					| md_alisiad	| 1992	| Game Arts	| Sega Megadrive| 					|
 | md_alisiadu	|  	| Alisia Dragoon (USA)					| md_alisiad	| 1992	| Sega		| Sega Megadrive| 					|
@@ -773,15 +773,19 @@ This list contains all games supported by FinalBurn Neo.
 | md_arrowp	|  	| Arrow Flash (USA, Prototype)				| md_arrow	| 1990	| Renovation	| Sega Megadrive| 					|
 | md_arrow	|  	| Arrow Flash (World)					| 		| 1990	| Sega		| Sega Megadrive| 					|
 | md_artalive	|  	| Art Alive (World)					| 		| 1991	| Sega		| Sega Megadrive| 					|
+| aofb		|  	| Art of Fighting (Boss Hack)				| aof		| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_aof	|  	| Art of Fighting (Euro)				| 		| 1994	| Sega		| Sega Megadrive| 					|
 | md_aofec	|  	| Art of Fighting (Hack, Enhanced Colors)		| md_aof	| 2015	| Sega - Pyron	| Sega Megadrive| 					|
 | md_aofs	|  	| Art Of Fighting (Hack, Spanish)			| md_aof	| 2019	| SNK		| Sega Megadrive| 					|
+| aofk		|  	| Art of Fighting (Korean Patch, Boss Hack)		| aof		| 2016	| SNK		| Neo Geo MVS	| 					|
 | md_aofp	|  	| Art of Fighting (Prototype, 19940711)			| md_aof	| 1994	| Sega		| Sega Megadrive| 					|
 | md_aofu	|  	| Art of Fighting (USA)					| md_aof	| 1994	| Sega		| Sega Megadrive| 					|
 | aof		|  	| Art of Fighting / Ryuuko no Ken (NGM-044)(NGH-044)	| 		| 1992	| SNK		| Neo Geo MVS	| 					|
+| aof2b		|  	| Art of Fighting 2 (Boss Hack)				| aof2		| 1994	| SNK		| Neo Geo MVS	| 					|
 | aof2bh	|  	| Art of Fighting 2 / Ryuuko no Ken 2 (Enable hidden cha| aof2		| 1994	| Yumeji	| Neo Geo MVS	| 					|
 | aof2a		|  	| Art of Fighting 2 / Ryuuko no Ken 2 (NGH-056)		| aof2		| 1994	| SNK		| Neo Geo MVS	| 					|
 | aof2		|  	| Art of Fighting 2 / Ryuuko no Ken 2 (NGM-056)		| 		| 1994	| SNK		| Neo Geo MVS	| 					|
+| aof3b		|  	| Art of Fighting 3 - The Path of the Warrior (Boss Hack| aof3		| 1996	| SNK		| Neo Geo MVS	| 					|
 | aof3k		|  	| Art of Fighting 3 - The Path of the Warrior (Korean re| aof3		| 1996	| SNK		| Neo Geo MVS	| 					|
 | aof3bh	|  	| Art of Fighting 3 - The Path of the Warrior / Art of F| aof3		| 1996	| Yumeji	| Neo Geo MVS	| 					|
 | aof3		|  	| Art of Fighting 3 - The Path of the Warrior / Art of F| 		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -1018,7 +1022,6 @@ This list contains all games supported by FinalBurn Neo.
 | md_backtof3u	|  	| Back to the Future Part III (USA)			| md_backtof3	| 1991	| Arena Entertai| Sega Megadrive| 					|
 | backfire	|  	| Backfire! (set 1)					| 		| 1995	| Data East Corp| DECO IC16	| 					|
 | backfirea	| D NW	| Backfire! (set 2)					| backfire	| 1995	| Data East Corp| DECO IC16	| Set inputs to \"Joystick\" in test mod|
-| chf_backgamm	|  	| Backgammon / Acey-Deucey				| 		| 1977	| Fairchild	| Channel F	| 					|
 | md_badapple	|  	| Bad Apple (HB, Tech-Demo)				| 		| 2012	| Stef_D	| Sega Megadrive| 64 Mbit (8MB) cartridge		|
 | nes_badapple	|  	| Bad Apple (HB, Tech-Demo)				| 		| 2015	| Little Limit	| Miscellaneous	| 					|
 | sms_badapple	|  	| Bad Apple (HB, Tech-Demo)				| 		| 2017	| SMS Power!	| Sega Master Sy| 					|
@@ -1080,6 +1083,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_bandito	|  	| Bandito (HB)						| 		| 2020	| Andy McDermott| ZX Spectrum	| 					|
 | bangball	|  	| Bang Bang Ball (v1.05)				| 		| 1996	| Banpresto / Ku| Miscellaneous	| 					|
 | b2b		|  	| Bang Bang Busters (2010 NCI release)			| 		| 2000	| Visco		| Neo Geo MVS	| 					|
+| bangbnd	|  	| Bang Bead (Fully Decrypted)				| bangbead	| 2000	| Visco		| Neo Geo MVS	| 					|
 | bangbedp	|  	| Bang Bead (Prototype?)				| bangbead	| 2000	| Visco		| Neo Geo MVS	| 					|
 | bangbead	|  	| Bang Bead						| 		| 2000	| Visco		| Neo Geo MVS	| 					|
 | bang		|  	| Bang!							| 		| 1998	| Gaelco	| Miscellaneous	| 					|
@@ -1139,7 +1143,6 @@ This list contains all games supported by FinalBurn Neo.
 | nes_basebstaii|  	| Baseball Stars II (USA)				| 		| 1992	| Romstar	| Miscellaneous	| 					|
 | bstarsh	|  	| Baseball Stars Professional (NGH-002)			| bstars	| 1990	| SNK		| Neo Geo MVS	| 					|
 | bstars	|  	| Baseball Stars Professional (NGM-002)			| 		| 1990	| SNK		| Neo Geo MVS	| 					|
-| chf_baseball	|  	| Baseball						| 		| 1977	| Fairchild	| Channel F	| 					|
 | nes_basesloaded|  	| Bases Loaded (USA)					| 		| 1988	| Jaleco	| Miscellaneous	| 					|
 | nes_basesloaded3|  	| Bases Loaded 3 (USA)					| 		| 1991	| Jaleco	| Miscellaneous	| 					|
 | nes_basesloaded4|  	| Bases Loaded 4 (USA)					| 		| 1993	| Jaleco	| Miscellaneous	| 					|
@@ -1218,6 +1221,7 @@ This list contains all games supported by FinalBurn Neo.
 | bcruzm12	|  	| Battle Cruiser M-12					| 		| 1983	| Sigma Enterpri| Miscellaneous	| 					|
 | btlfieldb	|  	| Battle Field (bootleg)				| timesold	| 1987	| bootleg	| Alpha 68k	| no-rotation joystick ver		|
 | btlfield	|  	| Battle Field (Japan)					| timesold	| 1987	| Alpha Denshi C| Alpha 68k	| 					|
+| flipshtk	|  	| Battle Flip Shot (Korean)				| flipshot	| 2005	| Visco		| Neo Geo MVS	| 					|
 | flipshot	|  	| Battle Flip Shot					| 		| 1998	| Visco		| Neo Geo MVS	| 					|
 | nes_battleformula|  	| Battle Formula (Japan)				| 		| 1991	| Sunsoft	| Miscellaneous	| 					|
 | bgareggahk	|  	| Battle Garegga (Austria / Hong Kong) (Sat Feb 3 1996)	| bgaregga	| 1996	| Raizing / 8ing| Toaplan GP9001| 					|
@@ -1464,6 +1468,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_blackboxcha|  	| Black Box Challenge (HB)				| 		| 2017	| Sly Dog Studio| Miscellaneous	| 					|
 | blkdrgonb	|  	| Black Dragon (bootleg)				| blktiger	| 1987	| bootleg	| Miscellaneous	| 					|
 | blkdrgon	|  	| Black Dragon (Japan)					| blktiger	| 1987	| Capcom	| Miscellaneous	| 					|
+| blkdrgnk	|  	| Black Dragon (Korean)					| blktiger	| 1987	| Capcom	| Miscellaneous	| 					|
 | blkheartj	|  	| Black Heart (Japan)					| blkheart	| 1991	| UPL		| NMK16		| 					|
 | blkheart	|  	| Black Heart						| 		| 1991	| UPL		| NMK16		| 					|
 | nes_blackhol	|  	| Black Hole - Czarna Dziura (HB, v0.20)		| 		| 2021	| Siudym	| Miscellaneous	| 					|
@@ -1755,7 +1760,6 @@ This list contains all games supported by FinalBurn Neo.
 | msx_bounder	|  	| Bounder (Euro)					| 		| 1987	| Gremlin Graphi| MSX		| 					|
 | spec_bountyhunter|  	| Bounty Hunter (128K)					| 		| 1989	| Codemasters	| ZX Spectrum	| 					|
 | bowlrama	|  	| Bowl-O-Rama						| 		| 1991	| P&P Marketing	| Miscellaneous	| 					|
-| chf_bowling	|  	| Bowling						| 		| 1978	| Fairchil	| Channel F	| 					|
 | nes_bowsette2	|  	| Bowsette 2 (Hack, Red version)			| nes_smb2	| 2019	| hack		| Miscellaneous	| 					|
 | spec_boxreload|  	| Box Reloaded (48K) (HB)				| 		| 2010	| Beiker Soft	| ZX Spectrum	| 					|
 | md_boxinglg	|  	| Boxing Legends of the Ring (USA)			| 		| 1993	| Electro Brain	| Sega Megadrive| 					|
@@ -1783,6 +1787,8 @@ This list contains all games supported by FinalBurn Neo.
 | msx_breakoutt	|  	| Break Out!						| 		| 1985	| Toshiba-EMI	| MSX		| 					|
 | brkthru	|  	| Break Thru (US)					| 		| 1986	| Data East USA	| Miscellaneous	| 					|
 | msx_breaker	|  	| Breaker Breaker (Euro)				| 		| 1988	| Eurosoft	| MSX		| 					|
+| breakerb	|  	| Breakers (Boss Hack)					| breakers	| 1996	| Visco		| Neo Geo MVS	| 					|
+| breakreb	|  	| Breakers Revenge (Boss Hack)				| breakrev	| 1998	| Visco		| Neo Geo MVS	| 					|
 | breakrevbh	|  	| Breakers Revenge (Boss Hack)				| breakrev	| 1998	| hack		| Neo Geo MVS	| 					|
 | brkrevext	|  	| Breakers Revenge - Extra Mode (Hack)			| breakrev	| 2018	| Visco		| Neo Geo MVS	| 					|
 | breakrev	|  	| Breakers Revenge					| 		| 1998	| Visco		| Neo Geo MVS	| 					|
@@ -2121,6 +2127,7 @@ This list contains all games supported by FinalBurn Neo.
 | captcommr1	|  	| Captain Commando (911014 World)			| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcommj	|  	| Captain Commando (911202 Japan)			| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcomm	|  	| Captain Commando (911202 World)			| 		| 1991	| Capcom	| CPS1		| 					|
+| captcommv4	|  	| Captain Commando (911202 World, 1 vs 4 Hack)		| captcomm	| 1991	| Capcom	| CPS1		| 					|
 | captcommb	|  	| Captain Commando (bootleg set 1, 911014 other country)| captcomm	| 1991	| bootleg	| CPS1		| 					|
 | captcommb2	|   NW	| Captain Commando (bootleg set 2 (with 2xMSM5205), 9110| captcomm	| 1991	| bootleg	| CPS1		| unemulated graphics			|
 | captcommb3	|  	| Captain Commando (bootleg set 3 (with YM2151 + 2xMSM52| captcomm	| 1991	| bootleg	| CPS1		| 					|
@@ -2183,7 +2190,6 @@ This list contains all games supported by FinalBurn Neo.
 | sms_casino	|  	| Casino Games (Euro, USA)				| 		| 1989	| Sega		| Sega Master Sy| 					|
 | nes_casinokid	|  	| Casino Kid (USA)					| 		| 1989	| Sofel		| Miscellaneous	| 					|
 | nes_casinokid2|  	| Casino Kid 2 (USA)					| 		| 1993	| Sofel		| Miscellaneous	| 					|
-| chf_casinop	|  	| Casino Poker						| 		| 1980	| Zircon	| Channel F	| 					|
 | msx_wrldopen	|  	| Casio Worldopen (Jpn)					| 		| 1985	| Casio		| MSX		| 					|
 | msx_wrldopenk	|  	| Casio Worldopen (Kor)					| msx_wrldopen	| 1986	| Boram Soft	| MSX		| 					|
 | spec_castaway	|  	| Castaway 48K (HB)					| 		| 2016	| usebox.net	| ZX Spectrum	| 					|
@@ -2322,8 +2328,6 @@ This list contains all games supported by FinalBurn Neo.
 | cairblad	|  	| Change Air Blade (Japan)				| 		| 1999	| Sammy		| SSV		| 					|
 | changesa	|  	| Changes (EME license)					| changes	| 1982	| Orca (Eastern | Miscellaneous	| 					|
 | changes	|  	| Changes						| 		| 1982	| Orca		| Miscellaneous	| 					|
-| chf_multicrt	|  	| Channel F Multi-Cart (Final)				| 		| 2004	| homebrew	| Channel F	| 					|
-| chf_multicrto	|  	| Channel F Multi-Cart (Older)				| chf_multicrt	| 2004	| homebrew	| Channel F	| 					|
 | md_cjfuweng	|  	| Chao Ji Da Fu Weng (Chi)				| 		| 199?	| Gametec?	| Sega Megadrive| 					|
 | md_chaojimah	|  	| Chao Ji Mahjong Club					| 		| 199?	| Unlicensed	| Sega Megadrive| 					|
 | md_chaojipok	|  	| Chao Ji Poker						| 		| 199?	| Unlicensed	| Sega Megadrive| 					|
@@ -2359,7 +2363,6 @@ This list contains all games supported by FinalBurn Neo.
 | checkmanj	|  	| Check Man (Japan)					| checkman	| 1982	| Jaleco	| Galaxian	| 					|
 | checkman	|  	| Check Man						| 		| 1982	| Zilex-Zenitone| Galaxian	| 					|
 | msx_tantan	|  	| Checkers in Tan Tan Tanuki (Jpn)			| 		| 1985	| Pony Canyon	| MSX		| 					|
-| chf_checkers	|  	| Checkers						| 		| 1978	| Zircon	| Channel F	| 					|
 | cheekyms	|  	| Cheeky Mouse						| 		| 1980	| Universal	| Miscellaneous	| 					|
 | gg_cheese	|  	| Cheese Cat-astrophe Starring Speedy Gonzales (Euro)	| 		| 1995	| Sega		| Sega Game Gear| 					|
 | md_cheese	|  	| Cheese Cat-Astrophe Starring Speedy Gonzales (Euro)	| 		| 1995	| Sega		| Sega Megadrive| 					|
@@ -2661,7 +2664,6 @@ This list contains all games supported by FinalBurn Neo.
 | msx_colball	|  	| Color Ball (Jpn)					| 		| 1984	| Hudson Soft	| MSX		| 					|
 | msx_colballb	|  	| Color Ball (Jpn, Alt 2)				| msx_colball	| 1984	| Hudson Soft	| MSX		| 					|
 | msx_colballa	|  	| Color Ball (Jpn, Alt)					| msx_colball	| 1984	| Hudson Soft	| MSX		| 					|
-| chf_clrorgan	|  	| Color Organ (Prototype)				| 		| 19??	| Zircon	| Channel F	| 					|
 | spec_coloristic|  	| Coloristic (HB)					| 		| 2020	| Martin Borik	| ZX Spectrum	| 					|
 | msx_colt36	|  	| Colt 36 (Spa)						| 		| 1987	| Topo Soft	| MSX		| 					|
 | gg_columns	|  	| Columns (Euro, USA, Bra)				| 		| 1990	| Sega		| Sega Game Gear| 					|
@@ -2783,6 +2785,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_contra	|  	| Contra - Hard Corps (USA, Kor)			| 		| 1994	| Konami	| Sega Megadrive| 					|
 | nes_contrredfalwar|  	| Contra - Red Falcon War (USA)				| nes_contra	| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_contrrevredfal|  	| Contra - Revenge of the Red Falcon (USA)		| nes_contra	| 1989?	| Nintendo	| Miscellaneous	| 					|
+| md_contrak	|  	| Contra - The Hard Corps (Hack, Korean)		| md_contra	| 2013	| Konami	| Sega Megadrive| 					|
 | md_contraj	|  	| Contra - The Hard Corps (Jpn)				| md_contra	| 1994	| Konami	| Sega Megadrive| 					|
 | nes_contra168in1|  	| Contra 168-in-1 (Unl)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_contraforcec|  	| Contra Force (2nd option, T-Chi)			| nes_contraforce| 2018	| Konami	| Miscellaneous	| 					|
@@ -2850,9 +2853,9 @@ This list contains all games supported by FinalBurn Neo.
 | msx_cosmoexpa	|  	| Cosmo-Explorer (Jpn, Alt)				| msx_cosmoexp	| 1985	| Sony		| MSX		| 					|
 | cottong	|  	| Cotocoto Cottong					| locomotn	| 1982	| bootleg	| Miscellaneous	| 					|
 | cottonjad	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypte| cotton	| 1991	| Success / Sega| System 16B	| 					|
-| cottonja	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a))	| cotton	| 1991	| Success / Sega| System 16B	| 					|
+| cottonja	|  	| Cotton (set 1, Japan, Rev A, FD1094 317-0179a)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonjd	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypte| cotton	| 1991	| Success / Sega| System 16B	| 					|
-| cottonj	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b))	| cotton	| 1991	| Success / Sega| System 16B	| 					|
+| cottonj	|  	| Cotton (set 2, Japan, Rev B, FD1094 317-0179b)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonud	|  	| Cotton (set 2, US, FD1094 317-0180 decrypted)		| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottonu	|  	| Cotton (set 2, US, FD1094 317-0180)			| cotton	| 1991	| Success / Sega| System 16B	| 					|
 | cottond	|  	| Cotton (set 3, World, FD1094 317-0181a decrypted)	| cotton	| 1991	| Success / Sega| System 16B	| 					|
@@ -3324,8 +3327,6 @@ This list contains all games supported by FinalBurn Neo.
 | deluxe5	|  	| Deluxe 5 (ver. 0107, 07/01/2000, set 1)		| 		| 2000	| ESD		| Miscellaneous	| 					|
 | deluxe5a	|  	| Deluxe 5 (ver. 0107, 07/01/2000, set 2)		| deluxe5	| 2000	| ESD		| Miscellaneous	| 					|
 | deluxe5b	|  	| Deluxe 5 (ver. 0107, 07/01/2000, set 3)		| deluxe5	| 2000	| ESD		| Miscellaneous	| 					|
-| chf_democrt1	|  	| Democart 1						| 		| 1977	| Fairchild	| Channel F	| 					|
-| chf_democrt2	|  	| Democart 2						| 		| 197?	| Fairchild	| Channel F	| 					|
 | demoderbc	|  	| Demolition Derby (cocktail)				| demoderb	| 1984	| Bally Midway	| Miscellaneous	| 					|
 | demoderm	|  	| Demolition Derby (MCR-3 Mono Board Version)		| demoderb	| 1984	| Bally Midway	| MCR3		| 					|
 | demoderb	|  	| Demolition Derby					| 		| 1984	| Bally Midway	| Miscellaneous	| 					|
@@ -3374,7 +3375,6 @@ This list contains all games supported by FinalBurn Neo.
 | md_desrtdemp3	|  	| Desert Demolition (Prototype, 19941215)		| md_desrtdem	| 1994	| Sega		| Sega Megadrive| 					|
 | md_desrtdemp2	|  	| Desert Demolition (Prototype, 19941216)		| md_desrtdem	| 1994	| Sega		| Sega Megadrive| 					|
 | md_desrtdemp1	|  	| Desert Demolition (Prototype, 19941219)		| md_desrtdem	| 1994	| Sega		| Sega Megadrive| 					|
-| chf_dsrtfox	|  	| Desert Fox / Shooting Gallery				| 		| 1976	| Fairchild	| Channel F	| 					|
 | gg_desert	|  	| Desert Speedtrap Starring Road Runner and Wile E. Coyo| 		| 1994	| Sega		| Sega Game Gear| 					|
 | sms_desert	|  	| Desert Speedtrap Starring Road Runner and Wile E. Coyo| 		| 1993	| Sega		| Sega Master Sy| 					|
 | gg_desertu	|  	| Desert Speedtrap Starring Road Runner and Wile E. Coyo| gg_desert	| 1994	| Sega		| Sega Game Gear| 					|
@@ -3583,7 +3583,6 @@ This list contains all games supported by FinalBurn Neo.
 | spec_djpuff	|  	| DJ Puff						| 		| 1992	| Codemasters	| ZX Spectrum	| 					|
 | dorunrun	|  	| Do! Run Run (set 1)					| 		| 1984	| Universal	| Miscellaneous	| 					|
 | dockman	|  	| Dock Man						| 		| 1982	| Taito Corporat| Miscellaneous	| 					|
-| chf_dodgeit	|  	| Dodge It						| 		| 1978	| Fairchild	| Channel F	| 					|
 | dodgeman	|  	| Dodge Man						| 		| 1983	| Omori Electric| Miscellaneous	| 					|
 | msx_dgnraven	|  	| Dodgin Raven (HB)					| 		| 2009	| Karoshi Corp.	| MSX		| 					|
 | ddonpacha	|  	| DoDonPachi (Arrange Mode version 1.1, hack by Trap15)	| ddonpach	| 2012	| hack / Trap15	| Cave		| 					|
@@ -3821,7 +3820,6 @@ This list contains all games supported by FinalBurn Neo.
 | msx_draconic	|  	| Draconic Throne (HB, v1.1.2)				| 		| 2017	| GW's Workshop	| MSX		| 					|
 | spec_draconus	|  	| Draconus (48K)					| 		| 1988	| Zeppelin Games| ZX Spectrum	| Press Enter for game menu		|
 | fds_dracuii	|  	| Dracula II - Noroi no Fuuin (Japan)			| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
-| chf_dragrace	|  	| Drag Race						| 		| 1977	| Fairchild	| Channel F	| 					|
 | gg_dragon	|  	| Dragon - The Bruce Lee Story (Euro)			| 		| 1994	| Virgin Interac| Sega Game Gear| 					|
 | md_dragon	|  	| Dragon - The Bruce Lee Story (Euro)			| 		| 1993	| Virgin Interac| Sega Megadrive| 					|
 | sms_dragon	|  	| Dragon - The Bruce Lee Story (Euro)			| 		| 1994	| Virgin Interac| Sega Master Sy| 					|
@@ -3953,7 +3951,6 @@ This list contains all games supported by FinalBurn Neo.
 | drktnjr	|  	| Drakton (DKJr conversion)				| drakton	| 1984	| Epos Corporati| Miscellaneous	| No sound				|
 | keithlcy	|  	| Dramatic Adventure Quiz Keith & Lucy (Japan)		| 		| 1993	| Visco		| SSV		| 					|
 | dpoker	| D NW	| Draw Poker (Bally, 03-20)				| 		| 1985	| Bally		| Miscellaneous	| 					|
-| chf_drawpkr	|  	| Draw Poker (Prototype)				| chf_casinop	| 1980	| Zircon	| Channel F	| 					|
 | dreambal	|  	| Dream Ball (Japan V2.4)				| 		| 1993	| NDK / Data Eas| DECO IC16	| 					|
 | dland		|  	| Dream Land / Super Dream Land (bootleg of Bubble Bobbl| bublbobl	| 1987	| bootleg	| Taito Misc	| 					|
 | dremshpr	|  	| Dream Shopper						| 		| 1982	| Sanritsu	| Pac-man	| 					|
@@ -4035,6 +4032,7 @@ This list contains all games supported by FinalBurn Neo.
 | ddsomh	|  	| Dungeons & Dragons - shadow over mystara (960223 Hispa| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsomjr2	|  	| Dungeons & Dragons - shadow over mystara (960223 Japan| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsoma	|  	| Dungeons & Dragons - shadow over mystara (960619 Asia)| ddsom		| 1996	| Capcom	| CPS2		| 					|
+| ddsomav4	|  	| Dungeons & Dragons - shadow over mystara (960619 Asia,| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsom		|  	| Dungeons & Dragons - shadow over mystara (960619 Euro)| 		| 1996	| Capcom	| CPS2		| 					|
 | ddsomj	|  	| Dungeons & Dragons - shadow over mystara (960619 Japan| ddsom		| 1996	| Capcom	| CPS2		| 					|
 | ddsomud	|  	| Dungeons & Dragons - shadow over mystara (960619 USA P| ddsom		| 1996	| bootleg	| CPS2		| 					|
@@ -4221,11 +4219,13 @@ This list contains all games supported by FinalBurn Neo.
 | efdt		|  	| El Fin Del Tiempo					| 		| 1981	| Niemer	| Miscellaneous	| 					|
 | msx_sideral	|  	| El Motorista Sideral (Spa)				| 		| 1986	| Anaya Multimed| MSX		| 					|
 | msx_mundoper	|  	| El Mundo Perdido (Spa)				| 		| 1988	| Topo Soft	| MSX		| 					|
+| md_elvientok	|  	| El Viento (Hack, Korean)				| md_elviento	| 2009	| Wolf Team	| Sega Megadrive| 					|
 | md_elvientos	|  	| El Viento (Hack, Spanish)				| md_elviento	| 2018	| Wolf Team	| Sega Megadrive| 					|
 | md_elvientoj	|  	| El Viento (Jpn)					| md_elviento	| 1991	| Wolf Team	| Sega Megadrive| 					|
 | md_elviento	|  	| El Viento (USA)					| 		| 1991	| Renovation	| Sega Megadrive| 					|
 | fds_electrician1|  	| Electrician (Japan)					| fds_electrician| 1989?	| Nintendo	| Miscellaneous	| 					|
 | fds_electrician|  	| Electrician (T-eng)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| md_elemastk	|  	| Elemental Master (Hack, Korean)			| md_elemast	| 2013	| Technosoft	| Sega Megadrive| 					|
 | md_elemastj	|  	| Elemental Master (Jpn)				| md_elemast	| 1990	| Technosoft	| Sega Megadrive| 					|
 | md_elemast	|  	| Elemental Master (USA)				| 		| 1993	| Renovation	| Sega Megadrive| 					|
 | elevator	|  	| Elevator Action (BA3, 4 pcb version, 1.1)		| 		| 1983	| Taito Corporat| Taito SJ Syste| 					|
@@ -4383,6 +4383,7 @@ This list contains all games supported by FinalBurn Neo.
 | exerizerb	|  	| Exerizer (Japan) (bootleg)				| skyfox	| 1987	| Jaleco	| Miscellaneous	| 					|
 | exerizer	|  	| Exerizer (Japan)					| skyfox	| 1987	| Jaleco	| Miscellaneous	| 					|
 | md_exile	|  	| Exile (USA)						| 		| 1991	| Renovation	| Sega Megadrive| 					|
+| md_exilek	|  	| Exile - Toki no Hazama e (Hack, Korean)		| md_exile	| 2018	| Riot		| Sega Megadrive| 					|
 | md_exilej	|  	| Exile - Toki no Hazama e (Jpn)			| md_exile	| 1991	| Riot		| Sega Megadrive| 					|
 | md_exosquad	|  	| Exo Squad (Euro)					| 		| 1995	| Virgin Interac| Sega Megadrive| 					|
 | md_exosquadu	|  	| Exo Squad (USA)					| md_exosquad	| 1995	| Playmates Inte| Sega Megadrive| 					|
@@ -4496,7 +4497,6 @@ This list contains all games supported by FinalBurn Neo.
 | spec_factdaze	|  	| Factory Daze (HB)					| 		| 2009	| Bob Smith	| ZX Spectrum	| 					|
 | msx_factory	|  	| Factory Infection (HB)				| 		| 2004	| Karoshi Corpor| MSX		| 					|
 | gg_factoryp	|  	| Factory Panic (Euro, Bra)				| 		| 1991	| Sega		| Sega Game Gear| 					|
-| chf_channelf	|   NW	| Fairchild Channel F (Bios)				| 		| 1976	| Fairchild	| Channel F	| BIOS only				|
 | spec_fairlight128|  	| Fairlight - A Prelude (128K)				| 		| 1985	| The Edge	| ZX Spectrum	| Press 9 to select Joystick		|
 | spec_fairlight48|  	| Fairlight - A Prelude (48K)				| spec_fairlight128| 1985	| The Edge	| ZX Spectrum	| Press 9 to select Joystick		|
 | spec_fairlight2|  	| Fairlight II (128K)					| 		| 1986	| The Edge	| ZX Spectrum	| Press 9 to select Joystick		|
@@ -4590,6 +4590,7 @@ This list contains all games supported by FinalBurn Neo.
 | tg_fantzone	|  	| Fantasy Zone						| 		| 1989	| NEC		| TurboGrafx 16	| 					|
 | fantazia	|  	| Fantazia (bootleg?)					| mooncrst	| 1980	| bootleg (Subel| Galaxian	| 					|
 | kabukiklb	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| kabukikl	| 1995	| Ydmis / Creamy| Neo Geo MVS	| 					|
+| kabukikb	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| kabukikl	| 1995	| Hudson	| Neo Geo MVS	| 					|
 | kabukikl	|  	| Far East of Eden - Kabuki Klash / Tengai Makyou - Shin| 		| 1995	| Hudson	| Neo Geo MVS	| 					|
 | farwest	| D NW	| Far West						| ironhors	| 1986	| bootleg?	| GX560		| 					|
 | nes_faria	|  	| Faria - A World of Mystery & Danger! (USA)		| 		| 1991	| Nexoft	| Miscellaneous	| 					|
@@ -4608,16 +4609,20 @@ This list contains all games supported by FinalBurn Neo.
 | md_fastest1	|  	| Fastest 1 (Jpn)					| 		| 1991	| Human Entertai| Sega Megadrive| 					|
 | md_fatfury	|  	| Fatal Fury (Euro, Kor)				| 		| 1993	| Sega		| Sega Megadrive| 					|
 | md_fatfuryu	|  	| Fatal Fury (USA)					| md_fatfury	| 1993	| Takara	| Sega Megadrive| 					|
+| fatfur1h	|  	| Fatal Fury - King of Fighters (Hidden Hack)		| fatfury1	| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury1bh	|  	| Fatal Fury - King of Fighters / Garou Densetsu - shuku| fatfury1	| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury1	|  	| Fatal Fury - King of Fighters / Garou Densetsu - shuku| 		| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_fatfury2ec	|  	| Fatal Fury 2 (Hack, Enhanced Colors v4.0)		| md_fatfury2	| 2015	| Takara - Pyron| Sega Megadrive| 					|
+| fatfur2h	|  	| Fatal Fury 2 (Hidden Hack)				| fatfury2	| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_fatfury2	|  	| Fatal Fury 2 (USA, Kor)				| 		| 1994	| Takara	| Sega Megadrive| 					|
 | fatfury2	|  	| Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (| 		| 1992	| SNK		| Neo Geo MVS	| 					|
 | fatfury2a	|  	| Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (| fatfury2	| 1992	| SNK		| Neo Geo MVS	| 					|
+| fatfur3b	|  	| Fatal Fury 3 - Road to the Final Victory (Boss Hack)	| fatfury3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | fatfury3bh	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| fatfury3	| 1995	| Yumeji	| Neo Geo MVS	| 					|
 | fatfury3a	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| fatfury3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | fatfury3	|  	| Fatal Fury 3 - Road to the Final Victory / Garou Dense| 		| 1995	| SNK		| Neo Geo MVS	| 					|
 | gg_fatfursp	|  	| Fatal Fury Special (Euro)				| 		| 1994	| Takara	| Sega Game Gear| 					|
+| fatfursh	|  	| Fatal Fury Special (Hidden Hack)			| fatfursp	| 1993	| SNK		| Neo Geo MVS	| 					|
 | gg_fatfurspu	|  	| Fatal Fury Special (USA)				| gg_fatfursp	| 1994	| Takara	| Sega Game Gear| 					|
 | fatfurspbs	|  	| Fatal Fury Special / Garou Densetsu Special (Optional | fatfursp	| 1993	| Yumeji	| Neo Geo MVS	| 					|
 | fatfursp	|  	| Fatal Fury Special / Garou Densetsu Special (set 1)(NG| 		| 1993	| SNK		| Neo Geo MVS	| 					|
@@ -4676,6 +4681,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_fifa99	|  	| FIFA Soccer 99 (Pirate)				| md_fifa96	| 199?	| <unlicensed>	| Sega Megadrive| 					|
 | md_fifa2k10	|  	| FIFA World Cup - South Africa 2010 (Rus)		| md_fifa	| 199?	| <unknown>	| Sega Megadrive| 					|
 | md_fifa2k2	|  	| FIFA World Cup 2002 (Rus)				| md_wcs2	| 199?	| Glorysun	| Sega Megadrive| 					|
+| fightfeb	|  	| Fight Fever (Boss Hack)				| fightfev	| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fightfev	|  	| Fight Fever (set 1)					| 		| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fightfeva	|  	| Fight Fever (set 2)					| fightfev	| 1994	| Viccom	| Neo Geo MVS	| 					|
 | fghtatck	|  	| Fighter & Attacker (US)				| 		| 1992	| Namco		| NA-1 / NA-2	| 					|
@@ -4737,10 +4743,12 @@ This list contains all games supported by FinalBurn Neo.
 | ffightj3	|  	| Final Fight (900405 Japan)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightub	|  	| Final Fight (900424 USA)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightj4	|  	| Final Fight (900613 Japan)				| ffight	| 1989	| Capcom	| CPS1		| 					|
+| ffgtj4v2	|  	| Final Fight (900613 Japan, 1 vs 2 Hack)		| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightuc	|  	| Final Fight (900613 USA)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightbl	|  	| Final Fight (bootleg set 1 (with 2xYM2203 + 2xMSM5205)| ffight	| 1990	| bootleg	| CPS1		| 					|
 | ffightbla	|  	| Final Fight (bootleg set 2 (with 2xYM2203 + 2xMSM5205)| ffight	| 1990	| bootleg	| CPS1		| 					|
 | ffightj	|  	| Final Fight (Japan)					| ffight	| 1989	| Capcom	| CPS1		| 					|
+| ffgtj2sp	|  	| Final Fight (Super Plus Hack, 900305 Japan)		| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu	|  	| Final Fight (USA, set 1)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu1	|  	| Final Fight (USA, set 2)				| ffight	| 1989	| Capcom	| CPS1		| 					|
 | ffightu2	|  	| Final Fight (USA, set 3)				| ffight	| 1989	| Capcom	| CPS1		| 					|
@@ -4940,7 +4948,6 @@ This list contains all games supported by FinalBurn Neo.
 | foodf1	|  	| Food Fight (rev 1)					| foodf		| 1982	| General Comput| Miscellaneous	| 					|
 | foodf2	|  	| Food Fight (rev 2)					| foodf		| 1982	| General Comput| Miscellaneous	| 					|
 | foodf		|  	| Food Fight (rev 3)					| 		| 1982	| General Comput| Miscellaneous	| 					|
-| chf_football	|  	| Football (Prototype)					| chf_pfootbll	| 1981	| Zircon	| Channel F	| 					|
 | footchmp	|  	| Football Champ (World)				| 		| 1990	| Taito Corporat| Taito F2	| 					|
 | spec_footdire	|  	| Football Director (48K)				| 		| 1986	| D&H Games	| ZX Spectrum	| 					|
 | fbfrenzy	|  	| Football Frenzy (NGM-034)(NGH-034)			| 		| 1992	| SNK		| Neo Geo MVS	| 					|
@@ -5139,8 +5146,6 @@ This list contains all games supported by FinalBurn Neo.
 | sms_gboogers	|  	| Galactic Boogers (HB)					| 		| 2020	| YETI		| Sega Master Sy| 					|
 | nes_galaccru	|  	| Galactic Crusader (USA) (Unl)				| 		| 1990	| Sachen / Joy V| Miscellaneous	| 					|
 | sms_galactpr	|  	| Galactic Protector (Jpn)				| 		| 1988	| Sega		| Sega Master Sy| 					|
-| chf_galacticp	|  	| Galactic Space Wars (Prototype)			| chf_galactic	| 1980	| Zircon	| Channel F	| 					|
-| chf_galactic	|  	| Galactic Space Wars / Lunar Lander			| 		| 1980	| Zircon	| Channel F	| 					|
 | galastrm	|  	| Galactic Storm (Japan)				| 		| 1992	| Taito Corporat| Miscellaneous	| 					|
 | gwarrior	|  	| Galactic Warriors					| 		| 1985	| Konami	| GX578		| 					|
 | galaga88a	|  	| Galaga '88 (02-03-88)					| galaga88	| 1987	| Namco		| System 1	| 					|
@@ -5202,6 +5207,7 @@ This list contains all games supported by FinalBurn Neo.
 | cv_galaxian	|  	| Galaxian						| 		| 1983	| Atarisoft	| ColecoVision	| 					|
 | nes_galaxy5000|  	| Galaxy 5000 (USA)					| 		| 1991	| Activision	| Miscellaneous	| 					|
 | galemp	|  	| Galaxy Empire (bootleg?)				| uniwars	| 1980	| bootleg (Taito| Galaxian	| 					|
+| galaxyfh	|  	| Galaxy Fight - Universal Warriors (Hidden Hack)	| galaxyfg	| 1995	| Sunsoft	| Neo Geo MVS	| 					|
 | galaxyfg	|  	| Galaxy Fight - Universal Warriors			| 		| 1995	| Sunsoft	| Neo Geo MVS	| 					|
 | sms_gforce	|  	| Galaxy Force (Euro, Bra)				| 		| 1989	| Sega		| Sega Master Sy| 					|
 | sms_gforceu	|  	| Galaxy Force (USA)					| sms_gforce	| 1989	| Activision	| Sega Master Sy| 					|
@@ -5295,6 +5301,7 @@ This list contains all games supported by FinalBurn Neo.
 | gangwars	|  	| Gang Wars						| 		| 1989	| Alpha Denshi C| Alpha 68k	| 					|
 | sms_robocop	|  	| Gangcheol RoboCop (Kor)				| 		| 1992	| Sieco		| Sega Master Sy| 					|
 | sms_gangster	|  	| Gangster Town (Euro, USA, Bra)			| 		| 1987	| Sega		| Sega Master Sy| Light Phaser game			|
+| ganryund	|  	| Ganryu (Fully Decrypted)				| ganryu	| 1999	| Visco		| Neo Geo MVS	| 					|
 | ganryu	|  	| Ganryu / Musashi Ganryuki				| 		| 1999	| Visco		| Neo Geo MVS	| 					|
 | nes_gansosaij	|  	| Ganso Saiyuuki - Super Monkey Daibouken (Japan)	| nes_gansosai	| 1986	| Vap		| Miscellaneous	| 					|
 | nes_gansosai	|  	| Ganso Saiyuuki - Super Monkey Daibouken (T-Eng)	| 		| 1986	| Vap		| Miscellaneous	| 					|
@@ -5318,6 +5325,7 @@ This list contains all games supported by FinalBurn Neo.
 | garogun	|  	| Garogun Seroyang (Korea)				| 		| 2000	| Yun Sung	| Miscellaneous	| 					|
 | garoubl	|  	| Garou - Mark of the Wolves (bootleg)			| garou		| 1999	| bootleg	| Neo Geo MVS	| 					|
 | garoub	|  	| Garou - Mark of the Wolves (Enable hidden characters)	| garou		| 1999	| Ydmis		| Neo Geo MVS	| 					|
+| garound	|  	| Garou - Mark of the Wolves (Fully Decrypted)		| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garouha	|  	| Garou - Mark of the Wolves (NGH-2530)			| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garouh	|  	| Garou - Mark of the Wolves (NGM-2530) (NGH-2530)	| garou		| 1999	| SNK		| Neo Geo MVS	| 					|
 | garou		|  	| Garou - Mark of the Wolves (NGM-2530)			| 		| 1999	| SNK		| Neo Geo MVS	| 					|
@@ -5501,6 +5509,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_gimmebright|  	| Gimme Bright (48K) (HB, v2.0)				| 		| 2011	| Climacus	| ZX Spectrum	| 					|
 | nes_gimmick	|  	| Gimmick! (Japan)					| 		| 1992	| Sunsoft	| Miscellaneous	| 					|
 | fds_gingaden	|  	| Ginga Denshou - Galaxy Odyssey (Japan)		| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| ginganink	|  	| Ginga NinkyouDen (Korean)				| ginganin	| 1987	| Jaleco	| Miscellaneous	| 					|
 | ginganin	|  	| Ginga NinkyouDen (set 1)				| 		| 1987	| Jaleco	| Miscellaneous	| 					|
 | ginganina	|  	| Ginga NinkyouDen (set 2)				| ginganin	| 1987	| Jaleco	| Miscellaneous	| 					|
 | gteikokub	|  	| Gingateikoku No Gyakushu (bootleg set 1)		| uniwars	| 1980	| bootleg	| Galaxian	| 					|
@@ -5517,6 +5526,7 @@ This list contains all games supported by FinalBurn Neo.
 | glasskr	|  	| Glass (Ver 1.1, Break Edition, Version 1994) (censored| glass		| 1994	| OMK / Gaelco (| Miscellaneous	| 					|
 | glass		|  	| Glass (Ver 1.1, Break Edition, Version 1994)		| 		| 1994	| OMK / Gaelco	| Miscellaneous	| 					|
 | md_gleylance	|  	| GleyLancer (Hack, English)				| md_gleylanc	| 2007	| NCS		| Sega Megadrive| 					|
+| md_gleylanck	|  	| GleyLancer (Hack, Korean)				| md_gleylanc	| 2013	| NCS		| Sega Megadrive| 					|
 | md_gleylanc	|  	| GleyLancer (Jpn)					| 		| 1992	| NCS		| Sega Megadrive| 					|
 | msx_glider	|  	| Glider (Jpn)						| 		| 1985	| ZAP		| MSX		| 					|
 | msx_glidera	|  	| Glider (Jpn, Alt)					| msx_glider	| 1985	| ZAP		| MSX		| 					|
@@ -5922,6 +5932,7 @@ This list contains all games supported by FinalBurn Neo.
 | spec_gunship	|  	| Gunship						| 		| 1987	| MicroProse Sof| ZX Spectrum	| 					|
 | spec_gunstar	|  	| Gunstar (48K)						| 		| 1987	| Firebird	| ZX Spectrum	| 					|
 | md_gunstar	|  	| Gunstar Heroes (Euro)					| 		| 1993	| Sega		| Sega Megadrive| 					|
+| md_gunstark	|  	| Gunstar Heroes (Hack, Korean)				| md_gunstar	| 2017	| Sega		| Sega Megadrive| 					|
 | md_gunstars	|  	| Gunstar Heroes (Hack, Spanish)			| md_gunstar	| 2017	| Treasure	| Sega Megadrive| 					|
 | gg_gunstar	|  	| Gunstar Heroes (Jpn)					| 		| 1995	| Sega		| Sega Game Gear| 					|
 | md_gunstarj	|  	| Gunstar Heroes (Jpn)					| md_gunstar	| 1993	| Sega		| Sega Megadrive| 					|
@@ -5987,7 +5998,7 @@ This list contains all games supported by FinalBurn Neo.
 | msx_hammboy	|  	| Hammer Boy (Spa)					| 		| 1991	| Dinamic Softwa| MSX		| Keyboard control only			|
 | spec_hammerfist|  	| Hammerfist (48K)					| 		| 1990	| Activision	| ZX Spectrum	| 					|
 | hharryu	|  	| Hammerin' Harry (US, M84 hardware)			| hharry	| 1990	| Irem America	| Irem M82	| 					|
-| hharry	|  	| Hammerin' Harry (World, M81 hardware))		| 		| 1990	| Irem		| Irem M82	| 					|
+| hharry	|  	| Hammerin' Harry (World, M81 hardware)			| 		| 1990	| Irem		| Irem M82	| 					|
 | hharryb	|  	| Hammerin' Harry (World, M84 hardware bootleg)		| hharry	| 1990	| bootleg	| Irem M82	| 					|
 | pce_hanataka	|  	| Hana Taaka Daka!?					| 		| 1991	| Taito		| PC Engine	| 					|
 | md_handyharvy	|  	| Handy Harvy (HB)					| 		| 2018	| 2nd Dimension	| Sega Megadrive| 					|
@@ -6009,7 +6020,6 @@ This list contains all games supported by FinalBurn Neo.
 | hangly	|  	| Hangly-Man (set 1)					| puckman	| 1981	| hack		| Pac-man	| 					|
 | hangly2	|  	| Hangly-Man (set 2)					| puckman	| 1981	| hack		| Pac-man	| 					|
 | hangly3	|  	| Hangly-Man (set 3)					| puckman	| 1981	| hack		| Pac-man	| 					|
-| chf_hangman	|  	| Hangman						| 		| 1978	| Fairchild	| Channel F	| 					|
 | hangzo	|  	| Hangzo (Japan, prototype)				| 		| 1992	| Hot-B		| DECO IC16	| 					|
 | pce_haniisky	|  	| Hanii in the Sky					| 		| 1989	| Face		| PC Engine	| 					|
 | pce_haniirod	|  	| Hanii on the Road					| 		| 1990	| Face		| PC Engine	| 					|
@@ -6221,7 +6231,6 @@ This list contains all games supported by FinalBurn Neo.
 | spec_hobbit	|  	| Hobbit, The v1.2 (48K)				| 		| 1982	| Melbourne Hous| ZX Spectrum	| 					|
 | hoccer	|  	| Hoccer (set 1)					| 		| 1983	| Eastern Micro | Miscellaneous	| 					|
 | hoccer2	|  	| Hoccer (set 2)					| hoccer	| 1983	| Eastern Micro | Miscellaneous	| 					|
-| chf_builtin	|  	| Hockey + Tennis					| 		| 1976	| Fairchild	| Channel F	| Channel F built-in games		|
 | nes_hogansalley|  	| Hogan's Alley (USA)					| 		| 1984	| Nintendo	| Miscellaneous	| 					|
 | nes_hokutonoken|  	| Hokuto no Ken (Japan)					| 		| 1986	| Toei Animation| Miscellaneous	| 					|
 | sms_hokuto	|  	| Hokuto no Ken (Jpn)					| sms_blackblt	| 1986	| Sega		| Sega Master Sy| 					|
@@ -6257,6 +6266,7 @@ This list contains all games supported by FinalBurn Neo.
 | redfoxwp2a	|  	| Hong Hu Zhanji II (China, set 2)			| grdnstrm	| 1998	| Afega		| NMK16		| 					|
 | sms_hongkildong|  	| Hong Kil Dong (Kor)					| 		| 1991	| Clover	| Sega Master Sy| 					|
 | spec_hkphooey	|  	| Hong Kong Phooey (48K)				| 		| 1990	| Hi-Tec	| ZX Spectrum	| 					|
+| md_ddanpeik	|  	| Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)	| md_ddanpei	| 1992	| Sega		| Sega Megadrive| 					|
 | gg_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei (Jpn)		| 		| 1992	| Sega		| Sega Game Gear| 					|
 | md_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei (Jpn)		| 		| 1992	| Sega		| Sega Megadrive| 					|
 | pce_ddanpei	|  	| Honoo no Toukyuuji - Dodge Danpei			| 		| 1992	| Hudson	| PC Engine	| 					|
@@ -6388,6 +6398,7 @@ This list contains all games supported by FinalBurn Neo.
 | hyperspt	|  	| Hyper Sports						| 		| 1984	| Konami (Centur| GX330		| 					|
 | spec_hypersports|  	| Hyper Sports						| 		| 1985	| Imagine	| ZX Spectrum	| 					|
 | hsf2j1	|  	| Hyper Street Fighter II: The Anniversary Edition (0312| hsf2		| 2004	| Capcom	| CPS2		| 					|
+| hsf2jh	|  	| Hyper Street Fighter II: The Anniversary Edition (0312| hsf2		| 2004	| Capcom	| CPS2		| 					|
 | hsf2d		|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| bootleg	| CPS2		| 					|
 | hsf2da	|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| bootleg	| CPS2		| 					|
 | hsf2a		|  	| Hyper Street Fighter II: The Anniversary Edition (0402| hsf2		| 2004	| Capcom	| CPS2		| 					|
@@ -7005,6 +7016,7 @@ This list contains all games supported by FinalBurn Neo.
 | karnova	|  	| Karnov (US, rev 5)					| karnov	| 1987	| Data East USA	| Miscellaneous	| 					|
 | karnov	|  	| Karnov (US, rev 6)					| 		| 1987	| Data East USA	| Miscellaneous	| 					|
 | nes_karnov	|  	| Karnov (USA)						| 		| 1988	| Data East	| Miscellaneous	| 					|
+| karnovrb	|  	| Karnov's Revenge / Fighter's History Dynamite (Hidden | karnovr	| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | karnovr	|  	| Karnov's Revenge / Fighter's History Dynamite		| 		| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | spec_karnov	|  	| Karnov						| 		| 1988	| Electric Dream| ZX Spectrum	| 					|
 | nes_kartfighter|  	| Kart Fighter (Unl)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
@@ -7175,6 +7187,7 @@ This list contains all games supported by FinalBurn Neo.
 | kittenk	|  	| Kitten Kaboodle					| 		| 1988	| Konami	| GX712		| 					|
 | nes_kittyscatch|  	| Kitty's Catch (USA)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_kiwikra	|  	| Kiwi Kraze - A Bird-Brained Adventure! (USA)		| 		| 1991	| Taito		| Miscellaneous	| 					|
+| kizunab	|  	| Kizuna Encounter - Super Tag Battle / Fu'un Super Tag | kizuna	| 1996	| SNK		| Neo Geo MVS	| 					|
 | kizuna	|  	| Kizuna Encounter - Super Tag Battle / Fu'un Super Tag | 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | nes_klashball	|  	| KlashBall (USA)					| 		| 1991	| Sofel		| Miscellaneous	| 					|
 | spec_klax	|  	| Klax (128K)						| 		| 1990	| Domark	| ZX Spectrum	| 					|
@@ -7221,6 +7234,7 @@ This list contains all games supported by FinalBurn Neo.
 | msx_knightm3	|  	| Knightmare III - Shalom (Jpn)				| 		| 1987	| Konami	| MSX		| 					|
 | sg1k_moyuchua	|  	| Knightmare, Moyu Chuanqi (Tw)				| 		| 1986?	| Jumbo		| Sega SG-1000	| 					|
 | knights	|  	| Knights of the Round (911127 etc)			| 		| 1991	| Capcom	| CPS1		| 					|
+| knightj3	|  	| Knights of the Round (911127 Japan, 1 vs 3 Hack)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsja	|  	| Knights of the Round (911127 Japan, B-Board 89625B-1)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsj	|  	| Knights of the Round (911127 Japan, B-Board 91634B-2)	| knights	| 1991	| Capcom	| CPS1		| 					|
 | knightsu	|  	| Knights of the Round (911127 USA)			| knights	| 1991	| Capcom	| CPS1		| 					|
@@ -7473,6 +7487,7 @@ This list contains all games supported by FinalBurn Neo.
 | gg_landill	|  	| Land of Illusion Starring Mickey Mouse (Euro, USA)	| 		| 1993	| Sega		| Sega Game Gear| 					|
 | lsasquad	|  	| Land Sea Air Squad / Riku Kai Kuu Saizensen		| 		| 1986	| Taito		| Miscellaneous	| 					|
 | md_landstlkg	|  	| Landstalker - Die Schatze von Konig Nolo (Ger)	| md_landstlk	| 1993	| Sega		| Sega Megadrive| 					|
+| md_landstlkk	|  	| Landstalker - Koutei no Zaihou (Hack, Korean)		| md_landstlk	| 2013	| Sega		| Sega Megadrive| 					|
 | md_landstlkj	|  	| Landstalker - Koutei no Zaihou (Jpn)			| md_landstlk	| 1992	| Sega		| Sega Megadrive| 					|
 | md_landstlkc	|  	| Landstalker - Koutei no Zaihou (T-Chi)		| md_landstlk	| 2007	| Sega		| Sega Megadrive| 					|
 | md_landstlkf	|  	| Landstalker - Le Tresor du Roi Nole (Fra)		| md_landstlk	| 1993	| Sega		| Sega Megadrive| 					|
@@ -7660,7 +7675,6 @@ This list contains all games supported by FinalBurn Neo.
 | lgtnfghtu	|  	| Lightning Fighters (US)				| lgtnfght	| 1990	| Konami	| GX939		| 					|
 | lgtnfght	|  	| Lightning Fighters (World)				| 		| 1990	| Konami	| GX939		| 					|
 | ltswords	|  	| Lightning Swords					| 		| 1991	| Irem		| Irem M84?	| 					|
-| chf_lightsout	|  	| Lights Out (HB)					| 		| 2004	| Sean Riddle	| Channel F	| 					|
 | shangonleeh	|  	| Limited Edition Hang-On (Enhanced Edition v2.0.2)	| shangon	| 2014	| hack (Chris Wh| Out Run	| 					|
 | shangonle	|  	| Limited Edition Hang-On				| shangon	| 1991	| Sega		| Out Run	| 					|
 | spec_linefire	|  	| Line of Fire (48K)					| 		| 1990	| U.S. Gold	| ZX Spectrum	| 					|
@@ -7905,7 +7919,6 @@ This list contains all games supported by FinalBurn Neo.
 | nes_magickidgoogoo|  	| Magic Kid GooGoo (Unl)				| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | gg_rayearth	|  	| Magic Knight Rayearth (Jpn)				| 		| 1994	| Sega		| Sega Game Gear| 					|
 | gg_rayeart2	|  	| Magic Knight Rayearth 2 - Making of Magic Knight (Jpn)| 		| 1995	| Sega		| Sega Game Gear| 					|
-| chf_magicnum	|  	| Magic Numbers / Mind Reader / Nim			| 		| 1977	| Fairchild	| Channel F	| 					|
 | nes_magicschc	|  	| Magic of Scheherazade, The (USA) - Castellano v0.99	| nes_magicsch	| 1989 ?| Nintendo	| Miscellaneous	| 					|
 | nes_magicsch	|  	| Magic of Scheherazade, The (USA)			| 		| 1989	| Culture Brain	| Miscellaneous	| 					|
 | md_magicpockets|  	| Magic Pockets (HB)					| 		| 2018	| The Bitmap Bro| Sega Megadrive| 					|
@@ -8144,6 +8157,7 @@ This list contains all games supported by FinalBurn Neo.
 | mshb		|  	| Marvel Super Heroes (951117 Brazil)			| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshh		|  	| Marvel Super Heroes (951117 Hispanic)			| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshj		|  	| Marvel Super Heroes (951117 Japan)			| msh		| 1995	| Capcom	| CPS2		| 					|
+| mshjh		|  	| Marvel Super Heroes (951117 Japan, Hidden Hack)	| msh		| 1995	| Capcom	| CPS2		| 					|
 | mshvsfa1	|  	| Marvel Super Heroes vs Street Fighter (970620 Asia)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfa	|  	| Marvel Super Heroes vs Street Fighter (970625 Asia)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfb1	|  	| Marvel Super Heroes vs Street Fighter (970625 Brazil)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
@@ -8154,6 +8168,7 @@ This list contains all games supported by FinalBurn Neo.
 | mshvsfu1	|  	| Marvel Super Heroes vs Street Fighter (970625 USA)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfj1	|  	| Marvel Super Heroes vs Street Fighter (970702 Japan)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfj	|  	| Marvel Super Heroes vs Street Fighter (970707 Japan)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
+| mshvsfjh	|  	| Marvel Super Heroes vs Street Fighter (970707 Japan, H| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfb	|  	| Marvel Super Heroes vs Street Fighter (970827 Brazil)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mshvsfu	|  	| Marvel Super Heroes vs Street Fighter (970827 USA)	| mshvsf	| 1997	| Capcom	| CPS2		| 					|
 | mvscur1	|  	| Marvel vs Capcom - clash of super heroes (971222 USA)	| mvsc		| 1998	| Capcom	| CPS2		| 					|
@@ -8209,9 +8224,9 @@ This list contains all games supported by FinalBurn Neo.
 | md_maten	|  	| Maten no Soumetsu (Jpn)				| 		| 1993	| Kodansha	| Sega Megadrive| 					|
 | nes_matendouji|  	| Matendouji (Japan)					| 		| 1990	| Bothtec (Quest| Miscellaneous	| 					|
 | md_mathblst	|  	| Math Blaster - Episode 1 (USA)			| 		| 1994	| Davidson & Ass| Sega Megadrive| 					|
-| chf_mthquiz1	|  	| Math Quiz 1						| 		| 1976	| Fairchild	| Channel F	| 					|
-| chf_mthquiz2	|  	| Math Quiz 2						| 		| 1977	| Fairchild	| Channel F	| 					|
 | fds_matounohou|  	| Matou no Houkai - The Hero of Babel (Japan)		| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
+| matrimdh	|  	| Matrimelee (Boss Hack)				| matrim	| 2002	| Noise Factory | Neo Geo MVS	| 					|
+| matrimnd	|  	| Matrimelee (Fully Decrypted)				| matrim	| 2002	| Noise Factory | Neo Geo MVS	| 					|
 | matrimbl	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (bootleg)| matrim	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | matrimbh	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (Enable H| matrim	| 2002	| Creamymami[EGC| Neo Geo MVS	| 					|
 | matrim	|  	| Matrimelee / Shin Gouketsuji Ichizoku Toukon (NGM-2660| 		| 2002	| Noise Factory | Neo Geo MVS	| 					|
@@ -8222,8 +8237,6 @@ This list contains all games supported by FinalBurn Neo.
 | maydaya	|  	| Mayday (set 2)					| mayday	| 1980	| Hoei		| 6809 System	| 					|
 | maydayb	|  	| Mayday (set 3)					| mayday	| 1980	| Hoei		| 6809 System	| 					|
 | msx_mayhem	|  	| Mayhem						| 		| 1985	| Mr. Micro	| MSX		| Uses joyport #2			|
-| chf_mazea	|  	| Maze / Jailbreak / Blind-man's-bluff / Trailblazer (Al| chf_maze	| 1977	| Fairchild	| Channel F	| 					|
-| chf_maze	|  	| Maze / Jailbreak / Blind-man's-bluff / Trailblazer	| 		| 1977	| Fairchild	| Channel F	| 					|
 | sms_mazehunt	|  	| Maze Hunter 3-D (Euro, USA, Bra)			| 		| 1988	| Sega		| Sega Master Sy| 					|
 | msx_mazemax	|  	| Maze Max						| 		| 1985	| Loriciels	| MSX		| 					|
 | mofflott	|  	| Maze of Flott (Japan)					| 		| 1989	| Taito Corporat| Taito Misc	| 					|
@@ -8350,7 +8363,6 @@ This list contains all games supported by FinalBurn Neo.
 | ngp_melonchn	|  	| Melon-chan no Seichou Nikki (Jpn)			| 		| 1998	| SNK		| NeoGeo Pocket	| 					|
 | ngp_memories	|  	| Memories Off - Pure (Jpn)				| 		| 2000	| KID		| NeoGeo Pocket | 					|
 | cv_memmanor	|  	| Memory Manor						| 		| 1984	| Fisher-Price	| ColecoVision	| 					|
-| chf_memory	|  	| Memory Match 1 & 2					| 		| 1978	| Fairchild	| Channel F	| 					|
 | msx_menace	|  	| Menace (HB)						| 		| 2009	| The New Image	| MSX		| 					|
 | nes_menacebeach|  	| Menace Beach (USA) (Unl)				| 		| 1990	| Color Dreams	| Miscellaneous	| 					|
 | msx_mtriton	|  	| Menace from Triton, the (HB, v1.1)			| msx_mtritonc	| 2020	| Brain Games	| MSX		| 					|
@@ -8405,17 +8417,20 @@ This list contains all games supported by FinalBurn Neo.
 | mslug2dg	|  	| Metal Slug 2 - Super Vehicle-001/II (Multifunction Hac| mslug2	| 2017	| hack		| Neo Geo MVS	| 					|
 | mslug2	|  	| Metal Slug 2 - Super Vehicle-001/II (NGM-2410) (NGH-24| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | mslug2t	|  	| Metal Slug 2 Turbo (NGM-9410)				| mslug2	| 2015	| Hack		| Neo Geo MVS	| 					|
+| mslug3nd	|  	| Metal Slug 3 (Fully Decrypted)			| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3g	|  	| Metal Slug 3 (Multifunction Hack, 20190119)		| mslug3	| 2019	| hack		| Neo Geo MVS	| 					|
 | mslug3v	|  	| Metal Slug 3 (NGH-2560) (Enhanced Violence Version, ha| mslug3	| 2012	| hack		| Neo Geo MVS	| 					|
 | mslug3h	|  	| Metal Slug 3 (NGH-2560)				| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3	|  	| Metal Slug 3 (NGM-2560)				| 		| 2000	| SNK		| Neo Geo MVS	| 					|
 | mslug3a	|  	| Metal Slug 3 (NGM-2560, earlier)			| mslug3	| 2000	| SNK		| Neo Geo MVS	| 					|
+| mslug4nd	|  	| Metal Slug 4 (Fully Decrypted)			| mslug4	| 2002	| Mega		| Neo Geo MVS	| 					|
 | mslug4dg	|  	| Metal Slug 4 (Multifunction Hack, 20171225)		| mslug4	| 2017	| hack		| Neo Geo	| 					|
 | mslug4h	|  	| Metal Slug 4 (NGH-2630)				| mslug4	| 2002	| Mega		| Neo Geo MVS	| 					|
 | mslug4	|  	| Metal Slug 4 (NGM-2630)				| 		| 2002	| Mega		| Neo Geo MVS	| 					|
 | ms4plus	|  	| Metal Slug 4 Plus (bootleg)				| mslug4	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | mslug5b	|  	| Metal Slug 5 (bootleg, set 1)				| mslug5	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | mslug5b2	|  	| Metal Slug 5 (bootleg, set 2)				| mslug5	| 2003	| bootleg	| Neo Geo MVS	| 					|
+| mslug5nd	|  	| Metal Slug 5 (Fully Decrypted)			| mslug5	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | ms5pcb	|  	| Metal Slug 5 (JAMMA PCB)				| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | mslug5g	|  	| Metal Slug 5 (Multifunction Hack, 20170523)		| mslug5	| 2017	| hack		| Neo Geo MVS	| 					|
 | mslug5w	|  	| Metal Slug 5 (New Campaign, 2016-03-10)		| mslug5	| 2003	| hack, C.B	| Miscellaneous	| 					|
@@ -9009,8 +9024,8 @@ This list contains all games supported by FinalBurn Neo.
 | msx_unleashed	|  	| MSX Unleashed (HB, Tech-demo)				| 		| 2006	| dvik & joyrex	| MSX		| 					|
 | msx_msx	|   NW	| MSX1 System BIOS					| 		| 1982	| MSX		| MSX		| BIOS only				|
 | rocktrv2	|  	| MTV Rock-N-Roll Trivia (Part 2)			| 		| 1986	| Triumph Softwa| Pac-man	| 					|
-| chf_muehle	|  	| Muehle / Tontauben-Schiessen / Kreatives Malspiel / Vi| chf_tctactoe	| 1978	| SABA		| Channel F	| 					|
 | mugsmash	|  	| Mug Smashers						| 		| 1990?	| Electronic Dev| Miscellaneous	| 					|
+| md_valisk	|  	| Mugen Senshi Valis (Hack, Korean)			| md_valis	| 2009	| Riot		| Sega Megadrive| 					|
 | md_valisj	|  	| Mugen Senshi Valis (Jpn)				| md_valis	| 1991	| Riot		| Sega Megadrive| 					|
 | msx_valis	|  	| Mugen Senshi Valis (Jpn)				| 		| 1986	| Nihon Telenet	| MSX		| 					|
 | msx_valisk	|  	| Mugen Senshi Valis (Kor)				| msx_valis	| 1987	| Zemina	| MSX		| 					|
@@ -9046,6 +9061,7 @@ This list contains all games supported by FinalBurn Neo.
 | mbombrd	|  	| Muscle Bomber Duo - ultimate team battle (931206 World| 		| 1993	| Capcom	| CPS1		| 					|
 | md_mushas	|  	| Musha - Metallic Uniframe Super Hybrid Armor (Hack, Sp| md_musha	| 2017	| Seismic	| Sega Megadrive| 					|
 | md_musha	|  	| MUSHA - Metallic Uniframe Super Hybrid Armor (USA)	| 		| 1990	| Seismic	| Sega Megadrive| 					|
+| md_mushak	|  	| Musha Aleste - Full Metal Fighter Ellinor (Hack, Korea| md_musha	| 2017	| Toaplan	| Sega Megadrive| 					|
 | md_mushaj	|  	| Musha Aleste - Full Metal Fighter Ellinor (Jpn)	| md_musha	| 1990	| Toaplan	| Sega Megadrive| 					|
 | sg1k_musicj	|  	| Music (Jpn)						| sg1k_music	| 1983	| Sega		| Sega SG-1000	| 					|
 | musicbal	|  	| Music Ball						| 		| 1988	| Tecfri / Desys| Miscellaneous	| 					|
@@ -9342,6 +9358,7 @@ This list contains all games supported by FinalBurn Neo.
 | syscheck	|  	| Neo System Check (ver 1.0b)				| 		| ????	| blastar@gmx.ne| Neo Geo MVS	| 					|
 | neothndr	|  	| Neo Thunder						| 		| 2012	| Sebastian Miha| Neo Geo	| sebastianmihai.com			|
 | turfmast	|  	| Neo Turf Masters / Big Tournament Golf		| 		| 1996	| Nazca		| Neo Geo MVS	| 					|
+| neocu98k	|  	| Neo-Geo Cup '98 - The Road to the Victory (Korean)	| neocup98	| 2006	| SNK		| Neo Geo MVS	| 					|
 | neocup98	|  	| Neo-Geo Cup '98 - The Road to the Victory		| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | neotet	|  	| NeoGeo 2-Player Tetris				| 		| 2013	| Crim/Stephen	| Neo Geo	| 					|
 | neo3ddmo	|  	| NeoGeo 3D! Demo					| 		| 2012	| Oxygene	| Neo Geo	| 					|
@@ -9522,6 +9539,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_ncirc1	|  	| Nightmare Circus (Bra, Alt)				| md_ncirc	| 1995	| Tec Toy	| Sega Megadrive| 					|
 | md_ncircp	|  	| Nightmare Circus (Prototype)				| md_ncirc	| 199?	| Sega		| Sega Megadrive| 					|
 | nitdbl	|  	| Nightmare in the Dark (bootleg)			| nitd		| 2001	| bootleg	| Neo Geo MVS	| 					|
+| nitdnd	|  	| Nightmare in the Dark (Fully Decrypted)		| nitd		| 2000	| Eleven / Gavak| Neo Geo MVS	| 					|
 | nitd		|  	| Nightmare in the Dark					| 		| 2000	| Eleven / Gavak| Neo Geo MVS	| 					|
 | nes_nightonelmstra|  	| Nightmare on Elm Street, A (USA)			| 		| 1990	| LJN		| Miscellaneous	| 					|
 | nes_nightshade|  	| Nightshade (USA)					| 		| 1992	| Ultra Games	| Miscellaneous	| 					|
@@ -9565,6 +9583,7 @@ This list contains all games supported by FinalBurn Neo.
 | kazan		|  	| Ninja Kazan (World)					| 		| 1988	| Jaleco	| Mega System 1	| 					|
 | nes_ninjakid	|  	| Ninja Kid (USA)					| 		| 1986	| Bandai	| Miscellaneous	| 					|
 | spec_ninjamassacre|  	| Ninja Massacre (128K)					| 		| 1989	| Codemasters	| ZX Spectrum	| 					|
+| ninjamab	|  	| Ninja Master's - haoh-ninpo-cho (Boss Hack)		| ninjamas	| 1996	| ADK / SNK	| Neo Geo MVS	| 					|
 | ninjamasha	|  	| Ninja Master's - haoh-ninpo-cho (Plus)		| ninjamas	| 1996	| 007325	| Neo Geo MVS	| 					|
 | ninjamas	|  	| Ninja Master's - haoh-ninpo-cho			| 		| 1996	| ADK / SNK	| Neo Geo MVS	| 					|
 | nes_ninja4s	|  	| Ninja of the 4 Seasons (HB)				| 		| 2021	| Kool Doob	| Miscellaneous	| 					|
@@ -9758,7 +9777,6 @@ This list contains all games supported by FinalBurn Neo.
 | orbitron	|  	| Orbitron						| 		| 19??	| Signatron USA	| Galaxian	| 					|
 | orbs		|  	| Orbs (10/7/94 prototype?)				| 		| 1994	| American Sammy| Seta		| 					|
 | tg_griffon	|  	| Order of the Griffon					| 		| 1992	| TTI		| TurboGrafx 16	| 					|
-| chf_ordtvlng	|  	| Ordtavling (Swe)					| chf_hangman	| 1978	| Luxor		| Channel F	| 					|
 | ordynej	|  	| Ordyne (Japan)					| ordyne	| 1988	| Namco		| System 2	| 					|
 | ordyneje	|  	| Ordyne (Japan, English Version)			| ordyne	| 1988	| Namco		| System 2	| 					|
 | ordyne	|  	| Ordyne (World)					| 		| 1988	| Namco		| System 2	| 					|
@@ -9894,8 +9912,6 @@ This list contains all games supported by FinalBurn Neo.
 | pacmanblc	|  	| Pac-Man (Calfesa, Spanish bootleg on Galaxian hardware| puckman	| 1981	| bootleg (Calfe| Galaxian	| 					|
 | pacmanbl	|  	| Pac-Man (Galaxian hardware, set 1)			| puckman	| 1981	| bootleg	| Galaxian	| 					|
 | pacmanbla	|  	| Pac-Man (Galaxian hardware, set 2)			| puckman	| 1981	| bootleg	| Galaxian	| 					|
-| chf_pacman	|  	| Pac-Man (HB)						| 		| 2004	| Blackbird - e5| Channel F	| 					|
-| chf_pacmanv2	|  	| Pac-Man (HB, v2)					| chf_pacman	| 2004	| Blackbird - e5| Channel F	| 					|
 | pacheart	|  	| Pac-Man (Hearts)					| puckman	| 1981	| hack		| Pac-man	| 					|
 | gg_pacmanj	|  	| Pac-Man (Jpn)						| gg_pacman	| 1991	| Namcot	| Sega Game Gear| 					|
 | msx_pacman	|  	| Pac-Man (Jpn)						| 		| 1984	| Namcot	| MSX		| 					|
@@ -10187,6 +10203,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_pstarjmd	|  	| Phantasy Star (Jpn, MD)				| sms_pstar	| 1994	| Sega		| Sega Master Sy| 					|
 | sms_pstarje	|  	| Phantasy Star (Jpn, T-Eng v2.00)			| sms_pstar	| 2020	| Sega - SMS Pow| Sega Master Sy| YM2413 FM sound chip supported	|
 | sms_pstark	|  	| Phantasy Star (Kor)					| sms_pstar	| 1987	| Sega		| Sega Master Sy| 					|
+| md_pstar4k	|  	| Phantasy Star - Sennenki no Owari ni (Hack, Korean)	| md_pstar4	| 2014	| Sega		| Sega Megadrive| 					|
 | md_pstar4j	|  	| Phantasy Star - Sennenki no Owari ni (Jpn)		| md_pstar4	| 1993	| Sega		| Sega Megadrive| 					|
 | md_pstar4	|  	| Phantasy Star - The End of the Millennium (Euro)	| 		| 1994	| Sega		| Sega Megadrive| 					|
 | md_pstar4p5	|  	| Phantasy Star - The End of the Millennium (Prototype, | md_pstar4	| 1994	| Sega		| Sega Megadrive| 					|
@@ -10207,6 +10224,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_ps2ab	|  	| Phantasy Star II - Anne's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
 | md_ps2ace	|  	| Phantasy Star II - Huey's Adventure (Hack, English)	| md_ps2ac	| 2010	| Sega		| Sega Megadrive| 					|
 | md_ps2ac	|  	| Phantasy Star II - Huey's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
+| md_pstar2k	|  	| Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, K| md_pstar2	| 2013	| Sega		| Sega Megadrive| 					|
 | md_pstar2j	|  	| Phantasy Star II - Kaerazaru Toki no Owari ni (Jpn)	| md_pstar2	| 1989	| Sega		| Sega Megadrive| 					|
 | md_ps2ade	|  	| Phantasy Star II - Kinds's Adventure (Hack, English)	| md_ps2ad	| 2010	| Sega		| Sega Megadrive| 					|
 | md_ps2ad	|  	| Phantasy Star II - Kinds's Adventure (Jpn, SegaNet)	| 		| 1991	| Sega		| Sega Megadrive| 					|
@@ -10288,8 +10306,6 @@ This list contains all games supported by FinalBurn Neo.
 | pbaction4	|  	| Pinball Action (set 4, encrypted)			| pbaction	| 1985	| Tehkan	| Miscellaneous	| 					|
 | pbactiont	|  	| Pinball Action (Tecfri License)			| pbaction	| 1985	| Tehkan	| Miscellaneous	| 					|
 | msx_pinblast	|  	| Pinball Blaster (Euro)				| 		| 1988	| Eurosoft	| MSX		| 					|
-| chf_pinballa	|  	| Pinball Challenge (Alt)				| chf_pinball	| 1978	| Fairchild	| Channel F	| 					|
-| chf_pinball	|  	| Pinball Challenge					| 		| 1978	| Fairchild	| Channel F	| 					|
 | nes_pinbacvbyred|  	| Pinball CV by Redrum (Hack)				| nes_pinball	| 1989?	| Nintendo	| Miscellaneous	| 					|
 | gg_pbdreams	|  	| Pinball Dreams (USA)					| 		| 1993	| GameTek	| Sega Game Gear| 					|
 | nes_pinballquest|  	| Pinball Quest (USA)					| 		| 1990	| Jaleco	| Miscellaneous	| 					|
@@ -10401,6 +10417,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_popoteam	|  	| Po Po Team (Taiwan)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | md_pocahont	|  	| Pocahontas (Euro)					| 		| 1996	| Sega		| Sega Megadrive| 					|
 | md_pocahontu	|  	| Pocahontas (USA)					| md_pocahont	| 1996	| Disney Interac| Sega Megadrive| 					|
+| pnyaand	|  	| Pochi and Nyaa (Fully Decrypted)			| pnyaa		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | pnyaaa	|  	| Pochi and Nyaa (Ver 2.00)				| pnyaa		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | pnyaa		|  	| Pochi and Nyaa (Ver 2.02)				| 		| 2003	| Aiky / Taito	| Neo Geo MVS	| 					|
 | ngp_neo21	|  	| Pocket Casino Series - Neo 21 (Euro, USA)		| 		| 2000	| SNK		| NeoGeo Pocket | 					|
@@ -10553,7 +10570,7 @@ This list contains all games supported by FinalBurn Neo.
 | powerinsb	|  	| Power Instinct (USA, bootleg set 2)			| powerins	| 1993	| Atlus		| Miscellaneous	| 					|
 | powerinsc	|   NW	| Power Instinct (USA, bootleg set 3)			| powerins	| 1993	| bootleg	| Miscellaneous	| 					|
 | powerinspu	|  	| Power Instinct (USA, prototype)			| powerins	| 1993	| Atlus		| Miscellaneous	| 					|
-| pwrinst2k	|  	| Power instinct 2 (Korea, ver. 94/04/08)		| pwrinst2	| 1994	| Atlus		| Cave		| 					|
+| pwrinst2k	|  	| Power Instinct 2 (Korea, ver. 94/04/08)		| pwrinst2	| 1994	| Atlus		| Cave		| 					|
 | pwrinst2	|  	| Power Instinct 2 (USA, ver. 94/04/08)			| 		| 1994	| Atlus		| Cave		| 					|
 | pce_pleag93	|  	| Power League '93					| 		| 1993	| Hudson	| PC Engine	| 					|
 | pce_pleagas	|  	| Power League (All Star Version)			| 		| 19??	| Hudson	| PC Engine	| 					|
@@ -10592,6 +10609,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_predatr2s	|  	| Predator 2 (Hack, Spanish)				| md_predatr2	| 2019	| Arena		| Sega Megadrive| 					|
 | spec_predator2|  	| Predator 2						| 		| 1991	| Image Works	| ZX Spectrum	| 					|
 | spec_predator	|  	| Predator						| 		| 1987	| Activision	| ZX Spectrum	| 					|
+| pisle2nd	|  	| Prehistoric Isle 2 (Fully Decrypted)			| preisle2	| 1999	| Yumekobo	| Neo Geo MVS	| 					|
 | preisle2	|  	| Prehistoric Isle 2					| 		| 1999	| Yumekobo	| Neo Geo MVS	| 					|
 | prehislek	|  	| Prehistoric Isle in 1930 (Korea)			| prehisle	| 1989	| SNK (Victor li| Prehistoric Is| 					|
 | prehisleu	|  	| Prehistoric Isle in 1930 (US)				| prehisle	| 1989	| SNK of America| Prehistoric Is| 					|
@@ -10658,7 +10676,6 @@ This list contains all games supported by FinalBurn Neo.
 | md_par2	|  	| Pro Action Replay 2 (Euro)				| 		| 199?	| <unknown>	| Sega Megadrive| 					|
 | md_par2a	|  	| Pro Action Replay 2 (Euro, Alt)			| md_par2	| 199?	| <unknown>	| Sega Megadrive| 					|
 | cprobowl	|  	| Pro Bowling (DECO Cassette) (US)			| 		| 1983	| Data East Corp| Cassette Syste| 					|
-| chf_pfootbll	|  	| Pro Football						| 		| 1981	| Zircon	| Channel F	| 					|
 | spec_progolfsim|  	| Pro Golf Simulator					| 		| 1990	| Codemasters	| ZX Spectrum	| 					|
 | fds_progolsarkagnoto|  	| Pro Golfer Saru - Kage no Tournament (Japan)		| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | kiwame	| D NW	| Pro Mahjong Kiwame					| 		| 1994	| Athena	| Seta		| 					|
@@ -10839,6 +10856,8 @@ This list contains all games supported by FinalBurn Neo.
 | pclubys	|  	| Puzzle Club (Yun Sung, set 1)				| 		| 2000	| Yun Sung	| Miscellaneous	| 					|
 | pclubysa	|  	| Puzzle Club (Yun Sung, set 2)				| pclubys	| 2000	| Yun Sung	| Miscellaneous	| 					|
 | pzlbowl	|  	| Puzzle De Bowling (Japan)				| 		| 1999	| Nihon System /| Newer Seta	| 					|
+| puzzldpk	|  	| Puzzle De Pon! (Korean)				| puzzledp	| 2006	| Taito (Visco l| Neo Geo MVS	| 					|
+| puzzldrk	|  	| Puzzle De Pon! R! (Korean)				| puzzledp	| 2006	| Taito (Visco l| Neo Geo MVS	| 					|
 | puzzldpr	|  	| Puzzle De Pon! R!					| puzzledp	| 1997	| Visco		| Neo Geo MVS	| 					|
 | puzzledp	|  	| Puzzle De Pon!					| 		| 1995	| Visco		| Neo Geo MVS	| 					|
 | puzzlekg	|  	| Puzzle King (Dance & Puzzle)				| 		| 1998	| Eolith	| Miscellaneous	| 					|
@@ -11066,6 +11085,8 @@ This list contains all games supported by FinalBurn Neo.
 | md_radrexu	|  	| Radical Rex (USA)					| md_radrex	| 1994	| Activision	| Sega Megadrive| 					|
 | nes_rafworld	|  	| Raf World (Japan)					| nes_journsil	| 1990	| Sunsoft	| Miscellaneous	| 					|
 | raflesia	|  	| Rafflesia (315-5162)					| 		| 1986	| Coreland / Seg| System 1	| 					|
+| rotdbh	|  	| Rage of the Dragons (Boss Hack)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
+| rotdnd	|  	| Rage of the Dragons (Fully Decrypted)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | rotdh		|  	| Rage of the Dragons (NGH-2640)			| rotd		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | rotd		|  	| Rage of the Dragons (NGM-264?)			| 		| 2002	| Evoga / Playmo| Neo Geo MVS	| 					|
 | spec_ragnablock|  	| Ragnablock (HB)					| 		| 2006	| Computer Emuzo| ZX Spectrum	| 					|
@@ -11255,7 +11276,6 @@ This list contains all games supported by FinalBurn Neo.
 | md_rastan2j	|  	| Rastan Saga II (Jpn)					| md_rastan2	| 1990	| Taito		| Sega Megadrive| 					|
 | md_rastan2	|  	| Rastan Saga II (USA)					| 		| 1990	| Taito		| Sega Megadrive| 					|
 | pce_rastan2	|  	| Rastan Saga II					| 		| 1990	| Taito		| PC Engine	| 					|
-| chf_ratmal	|  	| Rat' Mal (Ger)					| chf_hangman	| 197?	| SABA		| Channel F	| 					|
 | spec_ratatat	|  	| Rat-A-Tat (HB)					| 		| 2020	| JoeSoft	| ZX Spectrum	| 					|
 | msx_raththa	|  	| Rath-Tha (Spa)					| 		| 1989	| Positive	| MSX		| 					|
 | rayforce	|  	| Ray Force (Ver 2.3A 1994/01/20)			| gunlock	| 1993	| Taito Corporat| Taito F3 Syste| 					|
@@ -11267,10 +11287,12 @@ This list contains all games supported by FinalBurn Neo.
 | rbff1k	|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (Korea| rbff1		| 1995	| SNK		| Neo Geo MVS	| 					|
 | rbff1ka	|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (Korea| rbff1		| 1995	| SNK		| Neo Geo MVS	| 					|
 | rbff1		|  	| Real Bout Fatal Fury / Real Bout Garou Densetsu (NGM-0| 		| 1995	| SNK		| Neo Geo MVS	| 					|
+| rbff2hb	|  	| Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)	| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2k	|  	| Real Bout Fatal Fury 2 - The Newcomers (Korean release| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2h	|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| rbff2		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2		|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| 		| 1998	| SNK		| Neo Geo MVS	| 					|
 | rbff2bh	|  	| Real Bout Fatal Fury 2 - The Newcomers / Real Bout Gar| rbff2		| 1998	| hack		| Neo Geo MVS	| 					|
+| rbffspeh	|  	| Real Bout Fatal Fury Special (Hidden Hack)		| rbffspec	| 1996	| SNK		| Neo Geo MVS	| 					|
 | rbffspbh	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| rbffspec	| 1996	| hack		| Neo Geo MVS	| Select Geese Howard with portrait, pre|
 | rbffspeck	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| rbffspec	| 1996	| SNK		| Neo Geo MVS	| 					|
 | rbffspec	|  	| Real Bout Fatal Fury Special / Real Bout Garou Densets| 		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -11526,8 +11548,6 @@ This list contains all games supported by FinalBurn Neo.
 | msx_robofrog	|  	| Robofrog (Jpn)					| 		| 1985	| ASCII		| MSX		| 					|
 | msx_robofroga	|  	| Robofrog (Jpn, Alt)					| msx_robofrog	| 1985	| ASCII		| MSX		| 					|
 | md_robotbat	|  	| Robot Battler (Jpn, SegaNet)				| 		| 1991	| Sega		| Sega Megadrive| 					|
-| chf_robotwarp	|  	| Robot War (Prototype)					| chf_robotwar	| 1977	| Fairchild	| Channel F	| 					|
-| chf_robotwar	|  	| Robot War / Torpedo Alley				| 		| 1977	| Fairchild	| Channel F	| 					|
 | msx_robotwar	|  	| Robot Wars (Euro)					| 		| 1986	| Eaglesoft	| MSX		| 					|
 | md_robowrek	|  	| Robot Wreckage (USA, Prototype)			| 		| 199?	| <unknown>	| Sega Megadrive| 					|
 | robotron87	|  	| Robotron: 2084 (1987 'shot-in-the-corner' bugfix)	| robotron	| 1987	| hack		| 6809 System	| 					|
@@ -11794,6 +11814,7 @@ This list contains all games supported by FinalBurn Neo.
 | tsamuraih	|  	| Samurai Nihon-Ichi (bootleg, harder)			| tsamurai	| 1985	| bootleg	| Miscellaneous	| 					|
 | tsamurai	|  	| Samurai Nihon-Ichi (set 1)				| 		| 1985	| Kaneko / Taito| Miscellaneous	| 					|
 | tsamurai2	|  	| Samurai Nihon-Ichi (set 2)				| tsamurai	| 1985	| Kaneko / Taito| Miscellaneous	| 					|
+| samshob	|  	| Samurai Shodown (Boss Hack)				| samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
 | md_samsho	|  	| Samurai Shodown (Euro)				| 		| 1994	| Takara	| Sega Megadrive| 					|
 | md_samshoec	|  	| Samurai Shodown (Hack, Enhanced Colors v2.0)		| md_samsho	| 2015	| Takara - Pyron| Sega Megadrive| 					|
 | md_samshos	|  	| Samurai Shodown (Hack, Spanish)			| md_samsho	| 2018	| Takara	| Sega Megadrive| 					|
@@ -11802,18 +11823,24 @@ This list contains all games supported by FinalBurn Neo.
 | samshoh	|  	| Samurai Shodown / Samurai Spirits (NGH-045)		| samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
 | samsho	|  	| Samurai Shodown / Samurai Spirits (NGM-045)		| 		| 1993	| SNK		| Neo Geo MVS	| 					|
 | samshoa	|  	| Samurai Shodown / Samurai Spirits (NGM-045, alternate | samsho	| 1993	| SNK		| Neo Geo MVS	| 					|
+| samsho2b	|  	| Samurai Shodown II (Boss Hack)			| samsho2	| 1994	| SNK		| Neo Geo MVS	| 					|
 | samsho2	|  	| Samurai Shodown II / Shin Samurai Spirits - Haohmaru j| 		| 1994	| SNK		| Neo Geo MVS	| 					|
 | samsho2sp	|  	| Samurai Shodown II / Shin Samurai Spirits - Haohmaru j| samsho2	| 2017	| hack		| Neo Geo MVS	| 					|
+| samsho3b	|  	| Samurai Shodown III (Boss Hack)			| samsho3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | samsho3h	|  	| Samurai Shodown III / Samurai Spirits - Zankurou Musou| samsho3	| 1995	| SNK		| Neo Geo MVS	| 					|
 | samsho3	|  	| Samurai Shodown III / Samurai Spirits - Zankurou Musou| 		| 1995	| SNK		| Neo Geo MVS	| 					|
+| samsho4b	|  	| Samurai Shodown IV - Amakusa's Revenge (Boss Hack)	| samsho4	| 1996	| SNK		| Neo Geo MVS	| 					|
 | samsho4	|  	| Samurai Shodown IV - Amakusa's Revenge / Samurai Spiri| 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | samsho4sp	|  	| Samurai Shodown IV - Amakusa's Revenge / Samurai Spiri| samsho4	| 1996	| hack		| Neo Geo MVS	| 					|
+| samsh5ndb	|  	| Samurai Shodown V (Boss Hack)				| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
+| samsho5nd	|  	| Samurai Shodown V (Fully Decrypted)			| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5b	|  	| Samurai Shodown V / Samurai Spirits Zero (bootleg)	| samsho5	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | samsho5x	|  	| Samurai Shodown V / Samurai Spirits Zero (hack of XBOX| samsho5	| 2003	| hack		| Neo Geo MVS	| 					|
 | samsho5h	|  	| Samurai Shodown V / Samurai Spirits Zero (NGH-2700)	| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5	|  	| Samurai Shodown V / Samurai Spirits Zero (NGM-2700, se| 		| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsho5a	|  	| Samurai Shodown V / Samurai Spirits Zero (NGM-2700, se| samsho5	| 2003	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5pf	|  	| Samurai Shodown V Perfect / Samurai Spirits Zero Perfe| samsh5sp	| 2020	| bootleg	| Neo Geo MVS	| 					|
+| ssh5spnd	|  	| Samurai Shodown V Special (Fully Decrypted)		| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5spho	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5sph	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
 | samsh5fe	|  	| Samurai Shodown V Special / Samurai Spirits Zero Speci| samsh5sp	| 2004	| Yuki Enterpris| Neo Geo MVS	| 					|
@@ -11904,13 +11931,13 @@ This list contains all games supported by FinalBurn Neo.
 | spec_savage2	|  	| Savage (Part 2 of 3) (48K)				| spec_savage1	| 1988	| Firebird Softw| ZX Spectrum	| 					|
 | spec_savage3	|  	| Savage (Part 3 of 3) (48K)				| spec_savage1	| 1988	| Firebird Softw| ZX Spectrum	| 					|
 | savgbees	|  	| Savage Bees						| exedexes	| 1985	| Capcom (Memetr| Miscellaneous	| 					|
+| savagerb	|  	| Savage Reign (Boss Hack)				| savagere	| 1995	| SNK		| Neo Geo MVS	| 					|
 | savagereb	|  	| Savage Reign / Fu'un Mokushiroku - kakutou sousei (Bos| savagere	| 1995	| Yumeji, Dodowa| Neo Geo MVS	| 					|
 | savagere	|  	| Savage Reign / Fu'un Mokushiroku - kakutou sousei	| 		| 1995	| SNK		| Neo Geo MVS	| 					|
 | spec_savingkong|  	| Saving Kong (HB)					| 		| 2018	| Gabriel Amore	| ZX Spectrum	| 					|
 | spec_sc0tb0t	|  	| Sc0tb0t (HB)						| 		| 2020	| Dougie mcg	| ZX Spectrum	| 					|
 | msx_scarlet7	|  	| Scarlet 7 - The Mightiest Women (Jpn)			| 		| 1986	| Toshiba EMI	| MSX		| 					|
 | msx_scentipede|  	| Scentipede						| 		| 1986	| Aackosoft	| MSX		| 					|
-| chf_schach	|  	| Schach (Ger)						| 		| 197?	| SABA		| Channel F	| 					|
 | schmeisr	|  	| Schmeiser Robo (Japan)				| 		| 1993	| Hot-B		| DECO IC16	| 					|
 | md_msbp06	|  	| Scholastic's The Magic School Bus (Prototype, 19950331| md_msb	| 1995	| Sega		| Sega Megadrive| 					|
 | md_msbp05	|  	| Scholastic's The Magic School Bus (Prototype, 19950411| md_msb	| 1995	| Sega		| Sega Megadrive| 					|
@@ -11981,6 +12008,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_sdhstang	|  	| SD Hero Soukessen - Taose! Aku no Gundan (Japan)	| 		| 1989 ?| Nintendo	| Miscellaneous	| 					|
 | nes_sdkblade	| D	| SD Keiji - Blader (Japan) [T-Eng]			| 		| 1989 ?| Nintendo	| Miscellaneous	| 					|
 | nes_sdkbladej	| D	| SD Keiji - Blader (Japan)				| nes_sdkblade	| 1989 ?| Nintendo	| Miscellaneous	| 					|
+| md_sdvalisk	|  	| SD Valis (Hack, Korean)				| md_sydvalis	| 2009	| Laser Soft	| Sega Megadrive| 					|
 | md_sdvalis	|  	| SD Valis (Jpn)					| md_sydvalis	| 1992	| Laser Soft	| Sega Megadrive| 					|
 | sms_sdi	|  	| SDI (Jpn)						| sms_globald	| 1987	| Sega		| Sega Master Sy| 					|
 | sdibl		|  	| SDI - Strategic Defense Initiative (bootleg, original | sdi		| 1987	| Sega		| System 16B	| 					|
@@ -12063,6 +12091,8 @@ This list contains all games supported by FinalBurn Neo.
 | sengokuh	|  	| Sengoku / Sengoku Denshou (NGH-017)(US)		| sengoku	| 1991	| SNK		| Neo Geo MVS	| 					|
 | sengoku	|  	| Sengoku / Sengoku Denshou (NGM-017)(NGH-017)		| 		| 1991	| SNK		| Neo Geo MVS	| 					|
 | sengoku2	|  	| Sengoku 2 / Sengoku Denshou 2				| 		| 1993	| SNK		| Neo Geo MVS	| 					|
+| sengo3nd	|  	| Sengoku 3 (Fully Decrypted)				| sengoku3	| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
+| sengo3nh	|  	| Sengoku 3 (Hidden Hack)				| sengoku3	| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
 | sengoku3s	|  	| Sengoku 3 / Sengoku Densho 2001 (Evolution 1.0, FCHT h| sengoku3	| 2001	| hack		| Neo Geo MVS	| 					|
 | sengoku3fs	|  	| Sengoku 3 / Sengoku Densho 2001 (Feng Shen Edition, Ha| sengoku3	| 2020-04-10| Hack		| Neo Geo MVS	| 					|
 | sengoku3	|  	| Sengoku 3 / Sengoku Densho 2001 (set 1)		| 		| 2001	| SNK / Noise Fa| Neo Geo MVS	| 					|
@@ -12181,10 +12211,12 @@ This list contains all games supported by FinalBurn Neo.
 | md_ragnacenp	|  	| Shin Souseiki Ragnacenty (Jpn, Prototype)		| md_soleil	| 1994	| Sega		| Sega Megadrive| 					|
 | md_ragnacenc	|  	| Shin Souseiki Ragnacenty (T-Chi)			| md_soleil	| 1994	| Sega		| Sega Megadrive| 					|
 | tshingen	|   NW	| Shingen Samurai-Fighter (Japan, English)		| 		| 1988	| Jaleco	| Mega System 1	| Game crashes in level 2, play tshingen|
+| md_shindarkk	|  	| Shining and the Darkness (Hack, Korean)		| md_shindark	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shindarkj	|  	| Shining and the Darkness (Jpn)			| md_shindark	| 1991	| Sega		| Sega Megadrive| 					|
 | md_shinfrces	|  	| Shining Force (Hack, Spanish)				| md_shinfrce	| 2020	| Sega		| Sega Megadrive| 					|
 | md_shinfrce	|  	| Shining Force (USA)					| 		| 1992	| Sega		| Sega Megadrive| 					|
 | md_shinfrcep	|  	| Shining Force (USA, Prototype)			| md_shinfrce	| 1992	| Sega		| Sega Megadrive| 					|
+| md_shinfrcek	|  	| Shining Force - Kamigami no Isan (Hack, Korean)	| md_shinfrce	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shinfrcej	|  	| Shining Force - Kamigami no Isan (Jpn)		| md_shinfrce	| 1992	| Sega		| Sega Megadrive| 					|
 | gg_shinfrcg	|  	| Shining Force Gaiden - Ensei, Jashin no Kuni e (Jpn)	| 		| 1992	| Sega		| Sega Game Gear| 					|
 | gg_shinfrgfe	|  	| Shining Force Gaiden - Final Conflict (Hack, English)	| gg_shinfrgf	| 2006	| Sega		| Sega Game Gear| 					|
@@ -12194,6 +12226,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_shinfrc2u	|  	| Shining Force II (USA)				| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2p2	|  	| Shining Force II (USA, Prototype, 19940404)		| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2p1	|  	| Shining Force II (USA, Prototype, 19940607)		| md_shinfrc2	| 1994	| Sega		| Sega Megadrive| 					|
+| md_shinfrc2k	|  	| Shining Force II - Koe no Fuuin (Hack, Korean)	| md_shinfrc2	| 2013	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2j	|  	| Shining Force II - Koe no Fuuin (Jpn)			| md_shinfrc2	| 1993	| Sega		| Sega Megadrive| 					|
 | md_shinfrc2c	|  	| Shining Force II - Koe no Fuuin (T-Chi, v2)		| md_shinfrc2	| 2007-01| Sega		| Sega Megadrive| 					|
 | gg_shinfrc2	|  	| Shining Force II - The Sword of Hajya (Euro, USA)	| 		| 1994	| Sega		| Sega Game Gear| 					|
@@ -12457,7 +12490,6 @@ This list contains all games supported by FinalBurn Neo.
 | slither	|  	| Slither (set 1)					| 		| 1982	| Century II	| Miscellaneous	| Press 'P2 Start' to exit settings scre|
 | slithera	|  	| Slither (set 2)					| slither	| 1982	| Century II	| Miscellaneous	| Press 'P2 Start' to exit settings scre|
 | cv_slither	|  	| Slither						| 		| 1983	| Coleco	| ColecoVision	| 					|
-| chf_slotmchn	|  	| Slot Machine						| 		| 1980	| Zircon	| Channel F	| 					|
 | cv_slurpy	|  	| Slurpy						| 		| 1984	| Xonox		| ColecoVision	| 					|
 | slyspy2	|  	| Sly Spy (US revision 2)				| secretag	| 1989	| Data East USA	| DEC0		| 					|
 | slyspy3	|  	| Sly Spy (US revision 3)				| secretag	| 1989	| Data East USA	| DEC0		| 					|
@@ -12506,9 +12538,11 @@ This list contains all games supported by FinalBurn Neo.
 | ngp_svccardsja|  	| SNK vs. Capcom - Gekitotsu Card Fighters - SNK Support| ngp_svccards	| 1999	| SNK		| NeoGeo Pocket | 					|
 | ngp_svccardsj	|  	| SNK vs. Capcom - Gekitotsu Card Fighters - SNK Support| ngp_svccards	| 1999	| SNK		| NeoGeo Pocket | 					|
 | svcboot	|  	| SNK vs. Capcom - SVC Chaos (bootleg)			| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
+| svcnd		|  	| SNK vs. Capcom - SVC Chaos (Fully Decrypted)		| svc		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcpcb	|  	| SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 1)		| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcpcba	|  	| SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 2)		| svcpcb	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svc		|  	| SNK vs. Capcom - SVC Chaos (NGM-2690)(NGH-2690)	| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
+| svcndps2	|  	| SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)	| svc		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | svcplus	|  	| SNK vs. Capcom - SVC Chaos Plus (bootleg set 1)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
 | svcplusa	|  	| SNK vs. Capcom - SVC Chaos Plus (bootleg set 2)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
 | svcsplus	|  	| SNK vs. Capcom - SVC Chaos Super Plus (bootleg)	| svc		| 2003	| bootleg	| Neo Geo MVS	| 					|
@@ -12586,7 +12620,6 @@ This list contains all games supported by FinalBurn Neo.
 | sonsonj	|  	| Son Son (Japan)					| sonson	| 1984	| Capcom	| Miscellaneous	| 					|
 | pce_sonson2	|  	| Son Son II						| 		| 1989	| NEC		| PC Engine	| 					|
 | sonson	|  	| Son Son						| 		| 1984	| Capcom	| Miscellaneous	| 					|
-| chf_sonrsrch	|  	| Sonar Search						| 		| 1977	| Fairchild	| Channel F	| 					|
 | md_skp12	|  	| Sonic & Knuckles (Prototype 0525, 19940525, 15.28)	| md_sk		| 1994	| Sega		| Sega Megadrive| 					|
 | md_skp10	|  	| Sonic & Knuckles (Prototype 0606, 19940606, 10.02)	| md_sk		| 1994	| Sega		| Sega Megadrive| 					|
 | md_skp08	|  	| Sonic & Knuckles (Prototype 0608, 19940608, 05.03)	| md_sk		| 1994	| Sega		| Sega Megadrive| 					|
@@ -12867,7 +12900,6 @@ This list contains all games supported by FinalBurn Neo.
 | spctrek	|  	| Space Trek (Video Game S.A., Spanish bootleg of Scramb| scramble	| 1981	| bootleg (Video| Galaxian	| 					|
 | msx_spacetrb	|  	| Space Trouble (Jpn)					| 		| 1984	| HAL Kenkyuujo	| MSX		| 					|
 | msx_spacewlk	|  	| Space Walk (Euro)					| 		| 1985	| Mastertronic	| MSX		| 					|
-| chf_spacewar	|  	| Space War						| 		| 1977	| Fairchild	| Channel F	| 					|
 | nes_spacegulls|  	| Spacegulls (HB, v1.1)					| 		| 2021	| Morphcat Games| Miscellaneous	| 					|
 | sparkman	|  	| Spark Man (v2.0, set 1)				| 		| 1989	| SunA		| Miscellaneous	| 					|
 | msx_sparkie	|  	| Sparkie (Jpn)						| 		| 1983	| Sony		| MSX		| 					|
@@ -12953,8 +12985,6 @@ This list contains all games supported by FinalBurn Neo.
 | md_spiritwf	|  	| Spiritual Warfare (USA)				| 		| 1994	| Wisdom Tree	| Sega Megadrive| 					|
 | md_spirou	|  	| Spirou (Euro)						| 		| 1996	| Infogrames	| Sega Megadrive| 					|
 | gg_spirou	|  	| Spirou (Euro, Prototype)				| 		| 1996	| Infogrames	| Sega Game Gear| 					|
-| chf_spitfirep	|  	| Spitfire (Prototype)					| chf_spitfire	| 1976	| Fairchild	| Channel F	| 					|
-| chf_spitfire	|  	| Spitfire						| 		| 1976	| Fairchild	| Channel F	| 					|
 | msx_splash	|  	| Splash (Spa)						| 		| 1986	| Mind Games Esp| MSX		| 					|
 | splat		|  	| Splat!						| 		| 1982	| Williams	| 6809 System	| 					|
 | splatterj	|  	| Splatter House (Japan, SH1)				| splatter	| 1988	| Namco		| System 1	| 					|
@@ -13301,6 +13331,7 @@ This list contains all games supported by FinalBurn Neo.
 | sf2uf		|  	| Street Fighter II - The World Warrior (910411 USA)	| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ef		|  	| Street Fighter II - The World Warrior (910411 World)	| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2jh		|  	| Street Fighter II - The World Warrior (910522 Japan)	| sf2		| 1991	| Capcom	| CPS1		| 					|
+| sf2jhpp	|  	| Street Fighter II - The World Warrior (910522 Japan, P| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ug		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2uh		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
 | sf2ui		|  	| Street Fighter II - The World Warrior (910522 USA, rev| sf2		| 1991	| Capcom	| CPS1		| 					|
@@ -13448,6 +13479,7 @@ This list contains all games supported by FinalBurn Neo.
 | sfzh		|  	| Street Fighter Zero (950718 Hispanic)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzbr1	|  	| Street Fighter Zero (950727 Brazil)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzj		|  	| Street Fighter Zero (950727 Japan)			| sfa		| 1995	| Capcom	| CPS2		| 					|
+| sfzjh		|  	| Street Fighter Zero (950727 Japan, Hidden Hack)	| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzb		|  	| Street Fighter Zero (951109 Brazil)			| sfa		| 1995	| Capcom	| CPS2		| 					|
 | sfzcha	|  	| Street Fighter Zero (CPS Changer, 040820 Japan)	| sfzch		| 2005	| Capcom	| CPS Changer	| 					|
 | sfzbch	| X	| Street Fighter Zero (CPS Changer, 950727 Brazil)	| sfzch		| 1995	| Capcom	| CPS Changer	| 					|
@@ -13459,12 +13491,14 @@ This list contains all games supported by FinalBurn Neo.
 | sfz2a		|  	| Street Fighter Zero 2 (960227 Asia)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2jd	|  	| Street Fighter Zero 2 (960227 Japan Phoenix Edition)	| sfa2		| 1996	| bootleg	| CPS2		| 					|
 | sfz2jr1	|  	| Street Fighter Zero 2 (960227 Japan)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
+| sfz2jr1h	|  	| Street Fighter Zero 2 (960227 Japan, Hidden Hack)	| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2n		|  	| Street Fighter Zero 2 (960229 Oceania)		| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2br1	|  	| Street Fighter Zero 2 (960304 Brazil)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2h		|  	| Street Fighter Zero 2 (960304 Hispanic)		| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2j		|  	| Street Fighter Zero 2 (960430 Japan)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2b		|  	| Street Fighter Zero 2 (960531 Brazil)			| sfa2		| 1996	| Capcom	| CPS2		| 					|
 | sfz2alj	|  	| Street Fighter Zero 2 Alpha (960805 Japan)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
+| sfz2aljh	|  	| Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2alb	|  	| Street Fighter Zero 2 Alpha (960813 Brazil)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2alh	|  	| Street Fighter Zero 2 Alpha (960813 Hispanic)		| sfz2al	| 1996	| Capcom	| CPS2		| 					|
 | sfz2ald	|  	| Street Fighter Zero 2 Alpha (960826 Asia Phoenix Editi| sfz2al	| 1996	| bootleg	| CPS2		| 					|
@@ -13476,6 +13510,7 @@ This list contains all games supported by FinalBurn Neo.
 | sfz3jr1	|  	| Street Fighter Zero 3 (980727 Japan)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sfz3a		|  	| Street Fighter Zero 3 (980904 Asia)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sfz3j		|  	| Street Fighter Zero 3 (980904 Japan)			| sfa3		| 1998	| Capcom	| CPS2		| 					|
+| sfz3jh	|  	| Street Fighter Zero 3 (980904 Japan, Hidden Hack)	| sfa3		| 1998	| Capcom	| CPS2		| 					|
 | sfz3te	|  	| Street Fighter Zero 3 Training Edition v1.1 (980629 Ja| sfa3		| 2020	| hack		| CPS2		| 					|
 | sftm110	|  	| Street Fighter: The Movie (v1.10)			| sftm		| 1995	| Capcom / Incre| Miscellaneous	| 					|
 | sftm111	|  	| Street Fighter: The Movie (v1.11)			| sftm		| 1995	| Capcom / Incre| Miscellaneous	| 					|
@@ -13574,6 +13609,7 @@ This list contains all games supported by FinalBurn Neo.
 | s1945n	|  	| Strikers 1945 (World, unprotected)			| s1945		| 1995	| Psikyo	| Psikyo 68EC020| 					|
 | s1945iii	|  	| Strikers 1945 III (World) / Strikers 1999 (Japan)	| 		| 1999	| Psikyo	| PS5		| 					|
 | s1945ii	|  	| Strikers 1945 II					| 		| 1997	| Psikyo	| PS3-V1	| 					|
+| s1945pnd	|  	| Strikers 1945 Plus (Fully Decrypted)			| s1945p	| 1999	| Psikyo	| Neo Geo MVS	| 					|
 | s1945p	|  	| Strikers 1945 Plus					| 		| 1999	| Psikyo	| Neo Geo MVS	| 					|
 | pce_stripf2	|  	| Strip Fighter II					| 		| 19??	| Game Express	| PC Engine	| 					|
 | strongx	|  	| Strong X						| stratgyx	| 1982	| bootleg	| Galaxian	| 					|
@@ -13764,6 +13800,7 @@ This list contains all games supported by FinalBurn Neo.
 | supduck	|  	| Super Duck						| 		| 1992	| Comad		| Miscellaneous	| 					|
 | usg32		|  	| Super Duper Casino (California V3.2)			| 		| 1987	| U.S. Games	| Miscellaneous	| 					|
 | md_sfzone	|  	| Super Fantasy Zone (Euro)				| 		| 1993	| Sunsoft	| Sega Megadrive| 					|
+| md_sfzonek	|  	| Super Fantasy Zone (Hack, Korean)			| md_sfzone	| 2013	| Sunsoft	| Sega Megadrive| 					|
 | md_sfzones	|  	| Super Fantasy Zone (Hack, Spanish)			| md_sfzone	| 2019	| Sega		| Sega Megadrive| 					|
 | md_sfzonej	|  	| Super Fantasy Zone (Jpn)				| md_sfzone	| 1992	| Sunsoft	| Sega Megadrive| 					|
 | sformula	|  	| Super Formula (Japan)					| tail2nos	| 1989	| V-System Co.	| Miscellaneous	| 					|
@@ -14018,6 +14055,8 @@ This list contains all games supported by FinalBurn Neo.
 | ssf2tur1	|  	| Super Street Fighter II Turbo (super street fighter 2 | ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2tu	|  	| Super Street Fighter II Turbo (super street fighter 2 | ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2tnl	|  	| Super Street Fighter II Turbo New Legacy v0.4 (Beta) (| ssf2t		| 2020	| hack		| CPS2		| 					|
+| ssf2xjh	|  	| Super Street Fighter II X - grand master challenge (94| ssf2t		| 1994	| Capcom	| CPS2		| 					|
+| ssf2xjr1dt	|  	| Super Street Fighter II X - grand master challenge (Ph| ssf2t		| 1994	| bootleg	| CPS2		| 					|
 | ssf2xjr1d	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| bootleg	| CPS2		| 					|
 | ssf2xjr1r	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| Capcom	| CPS2		| 					|
 | ssf2xjr1	|  	| Super Street Fighter II X - grand master challenge (su| ssf2t		| 1994	| Capcom	| CPS2		| 					|
@@ -14449,7 +14488,9 @@ This list contains all games supported by FinalBurn Neo.
 | dynwarjr	|  	| Tenchi wo Kurau (Japan Resale Ver.)			| dynwar	| 1989	| Capcom	| CPS1		| 					|
 | dynwarj	|  	| Tenchi wo Kurau (Japan)				| dynwar	| 1989	| Capcom	| CPS1		| 					|
 | nes_tenchiwokurau|  	| Tenchi wo Kurau (Japan)				| nes_destianemp| 1989	| Capcom	| Miscellaneous	| 					|
+| wofj103	|  	| Tenchi wo Kurau II - Counter Attack of Mei Sisters (92| wof		| 1992	| Capcom	| CPS1 / QSound	| 					|
 | wofj		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (921031 Japan| wof		| 1992	| Capcom	| CPS1 / QSound	| 					|
+| wofch3p	|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer | wofch		| 1992	| Capcom	| CPS Changer 3P| 					|
 | wofch		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer,| 		| 1992	| Capcom	| CPS Changer	| 					|
 | wofjh		|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (hack, 921031| wof		| 1992	| hack		| CPS1 / QSound	| 					|
 | wofjdr	|  	| Tenchi wo Kurau II - Sekiheki no Tatakai (Master Editi| wof		| 2021-02-24| Hack		| CPS1 / QSound	| 					|
@@ -14521,7 +14562,6 @@ This list contains all games supported by FinalBurn Neo.
 | atetrisc2	|  	| Tetris (cocktail set 2)				| atetris	| 1989	| Atari Games	| Miscellaneous	| 					|
 | tetrsark	|  	| Tetris (D.R. Korea)					| 		| 198?	| D.R. Korea	| Arkanoid	| Wrong colors				|
 | md_tetriss	|  	| Tetris (Hack, Spanish)				| md_tetris	| 2019	| Sega		| Sega Megadrive| 					|
-| chf_tetris	|  	| Tetris (HB)						| 		| 2004	| Peter Trauner	| Channel F	| 					|
 | tetrista	|  	| Tetris (Japan, B-System, YM2203)			| tetris	| 1989	| Sega		| Taito B System| 					|
 | tetrist	|  	| Tetris (Japan, B-System, YM2610)			| tetris	| 1989	| Sega		| Taito B System| buggy - use parent!			|
 | tetrisse	|  	| Tetris (Japan, System E)				| 		| 1988	| Sega		| System E	| 					|
@@ -14759,6 +14799,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_hybridfc	|  	| The Hybrid Front (T-Chi)				| md_hybridf	| 1994	| Sega		| Sega Megadrive| 					|
 | msx_iceking	|  	| The Ice King (Euro)					| 		| 1986	| CDS Micro Syst| MSX		| 					|
 | md_immortal	|  	| The Immortal (Euro, USA)				| 		| 1993	| Electronic Art| Sega Megadrive| 					|
+| md_immortalk	|  	| The Immortal (Hack, Korean)				| md_immortal	| 2011	| Electronic Art| Sega Megadrive| 					|
 | md_immortals	|  	| The Immortal (Hack, Spanish)				| md_immortal	| 2020	| Electronic Art| Sega Megadrive| 					|
 | sms_crashdum	|  	| The Incredible Crash Dummies (Euro, Bra)		| 		| 1993	| Flying Edge	| Sega Master Sy| 					|
 | md_crashdum	|  	| The Incredible Crash Dummies (Euro, USA)		| 		| 1993	| Flying Edge	| Sega Megadrive| 					|
@@ -14797,8 +14838,10 @@ This list contains all games supported by FinalBurn Neo.
 | kodr1		|  	| The King of Dragons (World 910711)			| kod		| 1991	| Capcom	| CPS1		| 					|
 | kod		|  	| The King of Dragons (World 910805)			| 		| 1991	| Capcom	| CPS1		| 					|
 | kof94rz	|  	| The King of Fighters '94 (Hack Boss Remixed)		| kof94		| 1994	| ZKW		| Neo Geo MVS	| 					|
+| kof94kr	|  	| The King of Fighters '94 (Korean, Boss Hack)		| kof94		| 2006	| SNK		| Neo Geo MVS	| 					|
 | kof94		|  	| The King of Fighters '94 (NGM-055)(NGH-055)		| 		| 1994	| SNK		| Neo Geo MVS	| 					|
 | kof95b	|  	| The King of Fighters '95 (Enable Hidden Characters V.[| kof95		| 1995	| Ydmis & Creamy| Neo Geo MVS	| 					|
+| kof95kr	|  	| The King of Fighters '95 (Korean, NeoGeo CD Hack)	| kof95		| 2005	| SNK		| Neo Geo MVS	| 					|
 | kof95h	|  	| The King of Fighters '95 (NGH-084)			| kof95		| 1995	| SNK		| Neo Geo MVS	| 					|
 | kof95a	|  	| The King of Fighters '95 (NGH-084, alternate board)	| kof95		| 1995	| SNK		| Neo Geo MVS	| 					|
 | kof95		|  	| The King of Fighters '95 (NGM-084)			| 		| 1995	| SNK		| Neo Geo MVS	| 					|
@@ -14806,6 +14849,7 @@ This list contains all games supported by FinalBurn Neo.
 | kof96ae	|  	| The King of Fighters '96 (Anniversary Edition, EGHT ha| kof96		| 2007	| hack		| Neo Geo MVS	| 					|
 | kof96ep	|  	| The King of Fighters '96 (bootleg / hack)		| kof96		| 1996	| bootleg	| Neo Geo MVS	| 					|
 | kof96cn	|  	| The King of Fighters '96 (Chinese Edition ver 1.0, hac| kof96		| 200?	| hack		| Neo Geo MVS	| 					|
+| kof96kr	|  	| The King of Fighters '96 (Korean, Add Practice Mode)	| kof96		| 2006	| SNK		| Neo Geo AES	| 					|
 | kof96h	|  	| The King of Fighters '96 (NGH-214)			| kof96		| 1996	| SNK		| Neo Geo AES	| 					|
 | kof96		|  	| The King of Fighters '96 (NGM-214)			| 		| 1996	| SNK		| Neo Geo MVS	| 					|
 | kof96a	|  	| The King of Fighters '96 (NGM-214, alternate board)	| kof96		| 1996	| SNK		| Neo Geo MVS	| 					|
@@ -14814,6 +14858,8 @@ This list contains all games supported by FinalBurn Neo.
 | kof97ps	|  	| The King of Fighters '97 (Imitation Playstation final | kof97		| 1997	| Eddids	| Neo Geo MVS	| 					|
 | kof97inv	|  	| The King of Fighters '97 (Invincible Plus)		| kof97		| 2019	| Hack		| Neo Geo MVS	| 					|
 | kof97k	|  	| The King of Fighters '97 (Korean release)		| kof97		| 1997	| SNK		| Neo Geo MVS	| 					|
+| kof97psk	|  	| The King of Fighters '97 (Korean, PlayStation Hack)	| kof97		| 2005	| SNK		| Neo Geo MVS	| 					|
+| kof97kr	|  	| The King of Fighters '97 (Korean, Practice Mode, Boss | kof97		| 2005	| SNK		| Neo Geo MVS	| 					|
 | kof97h	|  	| The King of Fighters '97 (NGH-2320)			| kof97		| 1997	| SNK		| Neo Geo MVS	| 					|
 | kof97		|  	| The King of Fighters '97 (NGM-2320)			| 		| 1997	| SNK		| Neo Geo MVS	| 					|
 | kof97t2020	|  	| The King of Fighters '97 (Optimised Edition 2020)	| kof97		| 2020	| Hack		| Neo Geo MVS	| 					|
@@ -14827,11 +14873,15 @@ This list contains all games supported by FinalBurn Neo.
 | kof97oro	|  	| The King of Fighters '97 oroshi plus 2003		| kof97		| 1997	| bootleg	| Neo Geo MVS	| 					|
 | kof97pls	|  	| The King of Fighters '97 Plus (bootleg)		| kof97		| 1997	| bootleg	| Neo Geo MVS	| 					|
 | kof97pla	|  	| The King of Fighters '97 Plus 2003 (bootleg / hack)	| kof97		| 2003	| bootleg	| Neo Geo MVS	| 					|
+| kof97ts	|  	| The King of Fighters '97 Tu She Edition (v1.2, Hack)	| kof97		| 2019	| SNK		| Neo Geo MVS	| 					|
 | kof98ae2016	|  	| The King of Fighters '98 (Anniversary Edition build 1.| kof98		| 2016	| hack		| Neo Geo MVS	| 					|
 | kof98ae	|  	| The King of Fighters '98 (Anniversary Edition, EGHT ha| kof98		| 2007	| hack		| Neo Geo MVS	| 					|
 | kof98cps	|  	| The King of Fighters '98 (Combo Plus)			| kof98		| 2020	| Hack		| Neo Geo MVS	| 					|
 | kof98cb	|  	| The King of Fighters '98 (Combo, hack)		| kof98		| 2018	| hack		| Neo Geo MVS	| 					|
+| kof98kr	|  	| The King of Fighters '98 (Korean, NeoGeo CD Hack, Syst| kof98		| 2006	| SNK		| Neo Geo MVS	| 					|
+| kof98cd	|  	| The King of Fighters '98 (NeoGeo CD Hack, System Bugs | kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98pfe	|  	| The King of Fighters '98 (Plus Final Edition 2017-07-2| kof98		| 2019-09-10| GSC2007	| Miscellaneous	| 					|
+| kof98bf	|  	| The King of Fighters '98 (System Bugs Fix)		| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98ult	|  	| The King of Fighters '98 (Ultimate Match)		| kof98		| 2020	| hack		| Neo Geo MVS	| 					|
 | kof98k	|  	| The King of Fighters '98 - The Slugfest / King of Figh| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
 | kof98ka	|  	| The King of Fighters '98 - The Slugfest / King of Figh| kof98		| 1998	| SNK		| Neo Geo MVS	| 					|
@@ -14841,10 +14891,13 @@ This list contains all games supported by FinalBurn Neo.
 | kof98eck20	|  	| The King of Fighters '98 Easy Combo King (YZKOF Versio| kof98		| 2020-04-09| hack		| Neo Geo MVS	| 					|
 | kof98eckvs	|  	| The King of Fighters '98 Easy Combo King 2014 (Versus | kof98		| 2019-02-17| hack		| Neo Geo MVS	| 					|
 | kof98mix	|  	| The King of Fighters '98 Mix (2015-12-29)		| kof98		| 2015	| hack		| Miscellaneous	| 					|
+| kof99ae2016	|  	| The King of Fighters '99 (15th Anniversary Edition 201| kof99		| 2015	| SNK		| Neo Geo MVS	| 					|
 | md_kof99a	|  	| The King of Fighters '99 (Alt)			| md_kof99	| 199?	| <unlicensed>	| Sega Megadrive| 					|
 | kof99e	|  	| The King of Fighters '99 - Millennium Battle (earlier)| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
+| kof99nd	|  	| The King of Fighters '99 - Millennium Battle (Fully De| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99k	|  	| The King of Fighters '99 - Millennium Battle (Korean r| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99ka	|  	| The King of Fighters '99 - Millennium Battle (Korean r| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
+| kof99kr	|  	| The King of Fighters '99 - Millennium Battle (Korean, | kof99		| 2006	| SNK		| Neo Geo MVS	| 					|
 | kof99h	|  	| The King of Fighters '99 - Millennium Battle (NGH-2510| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99		|  	| The King of Fighters '99 - Millennium Battle (NGM-2510| 		| 1999	| SNK		| Neo Geo MVS	| 					|
 | kof99p	|  	| The King of Fighters '99 - Millennium Battle (prototyp| kof99		| 1999	| SNK		| Neo Geo MVS	| 					|
@@ -14859,17 +14912,23 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k5uni	|  	| The King of Fighters 10th Anniversary 2005 Unique (boo| kof2002	| 2004	| bootleg	| Neo Geo MVS	| 					|
 | kof10thuo	|  	| The King of Fighters 10th Anniversary 2019 (Optimized | kof2002	| 2020-11-11| Hack		| Miscellaneous	| 					|
 | kf10thep	|  	| The King of Fighters 10th Anniversary Extra Plus (boot| kof2002	| 2005	| bootleg	| Neo Geo MVS	| 					|
+| kof2knd	|  	| The King of Fighters 2000 (Fully Decrypted)		| kof2000	| 2000	| SNK		| Neo Geo MVS	| 					|
+| kof2kkr	|  	| The King of Fighters 2000 (Korean, PlayStation 2 Hack)| kof2000	| 2010	| SNK		| Neo Geo MVS	| 					|
 | kof2000	|  	| The King of Fighters 2000 (NGM-2570) (NGH-2570)	| 		| 2000	| SNK		| Neo Geo MVS	| 					|
 | kof2000n	|  	| The King of Fighters 2000 (not encrypted)		| kof2000	| 2000	| SNK		| Neo Geo MVS	| 					|
 | kof2000otc	|  	| The King of Fighters 2000 (OTC, hack)			| kof2000	| 2020-06-15| hack		| Neo Geo MVS	| ZERO only enabled in AES mode		|
 | kof2000ps2	|  	| The King of Fighters 2000 (Playstation 2 ver. , EGHT h| kof2000	| 2000	| hack		| Neo Geo MVS	| hack only enable in AES mode		|
 | kof2000sp	|  	| The King of Fighters 2000 - Special Edition (Final Ver| kof2000	| 2021	| Hack		| Neo Geo MVS	| 					|
+| kof2k1nd	|  	| The King of Fighters 2001 (Fully Decrypted)		| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kof2001h	|  	| The King of Fighters 2001 (NGH-2621)			| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kof2001	|  	| The King of Fighters 2001 (NGM-262?)			| 		| 2001	| SNK / Eolith	| Neo Geo MVS	| 					|
+| kof2k1ps2	|  	| The King of Fighters 2001 (PlayStation 2 Hack)	| kof2001	| 2001	| SNK / Eolith	| Neo Geo AES	| 					|
 | kf2k1pkz	|  	| The King of Fighters 2001 (PS2 Krizalid Edition)	| kof2001	| 2019-12-12| Hack		| Neo Geo MVS	| hack only enable in AES mode		|
 | kf2k1pls	|  	| The King of Fighters 2001 Plus (set 1, bootleg / hack)| kof2001	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k1pa	|  	| The King of Fighters 2001 Plus (set 2, bootleg / hack)| kof2001	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kof2002b	|  	| The King of Fighters 2002 (bootleg)			| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
+| kof2k2nd	|  	| The King of Fighters 2002 (Fully Decrypted)		| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
+| kof2k2kh	|  	| The King of Fighters 2002 (Korean Font Fix, Nests, Bos| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kof2002	|  	| The King of Fighters 2002 (NGM-2650)(NGH-2650)	| 		| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kof2k2omg	|  	| The King of Fighters 2002 (Omega v.0?)		| kof2002	| 2002	| hack		| KOF-ON Team	| 					|
 | kof2k2omg8	|  	| The King of Fighters 2002 (Omega v0.8)		| kof2002	| 2010	| hack		| KOF-ON Team	| 					|
@@ -14880,15 +14939,18 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k2ps2b	|  	| The King of Fighters 2002 (PlayStation 2, Hack)	| kof2002	| 2018	| Hack		| Neo Geo MVS	| hack only enabled in AES mode		|
 | kof2k2plus	|  	| The King of Fighters 2002 (Plus 2017, Hack)		| kof2002	| 2020-10-22| Hack		| Neo Geo MVS	| 					|
 | kf2k23rd	|  	| The King of Fighters 2002 - 3rd Strike of Orochi (Hack| kof2002	| 2020-06-14| hack		| Miscellaneous	| 					|
+| kof2k2cm	|  	| The King of Fighters 2002 CLIMAX (Hack)		| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kf2k2mp	|  	| The King of Fighters 2002 Magic Plus (bootleg)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2mp2	|  	| The King of Fighters 2002 Magic Plus II (bootleg)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2pls	|  	| The King of Fighters 2002 Plus (bootleg set 1)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2pla	|  	| The King of Fighters 2002 Plus (bootleg set 2)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k2plb	|  	| The King of Fighters 2002 Plus (bootleg set 3)	| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
+| kf2k2pls2017	|  	| The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)| kof2002	| 2002	| Eolith / Playm| Neo Geo MVS	| 					|
 | kf2k2ru35	|  	| The King of Fighters 2002 Remix Ultra 3.5 (Hack By FCH| kof2002	| 2006	| hack		| Neo Geo MVS	| 					|
 | kf2k2plc	|  	| The King of Fighters 2002 Super (bootleg)		| kof2002	| 2002	| bootleg	| Neo Geo MVS	| 					|
 | kf2k3bl	|  	| The King of Fighters 2003 (bootleg set 1)		| kof2003	| 2003	| bootleg	| Neo Geo MVS	| 					|
 | kf2k3bla	|  	| The King of Fighters 2003 (bootleg set 2)		| kof2003	| 2003	| bootleg	| Neo Geo MVS	| 					|
+| kof2k3nd	|  	| The King of Fighters 2003 (Fully Decrypted)		| kof2003	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | kf2k3pcb	|  	| The King of Fighters 2003 (Japan, JAMMA PCB)		| 		| 2003	| Playmore / Cap| dedicated Neo | 					|
 | kof2003h	|  	| The King of Fighters 2003 (NGH-2710)			| kof2003	| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
 | kof2003	|  	| The King of Fighters 2003 (NGM-2710)			| 		| 2003	| SNK Playmore	| Neo Geo MVS	| 					|
@@ -14899,10 +14961,13 @@ This list contains all games supported by FinalBurn Neo.
 | kf2k4pls	|  	| The King of Fighters Special Edition 2004 Plus (bootle| kof2002	| 2004	| bootleg	| Neo Geo MVS	| 					|
 | pce_kungfu	|  	| The Kung Fu						| 		| 1987	| Hudson	| PC Engine	| 					|
 | ngp_lastblad	|  	| The Last Blade - Beyond the Destiny (Euro)		| 		| 2000	| SNK		| NeoGeo Pocket | 					|
+| lastbladb	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hi| lastblad	| 1997	| SNK		| Neo Geo AES	| 					|
 | lastbladh	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| lastblad	| 1997	| SNK		| Neo Geo AES	| 					|
 | lastblad	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| 		| 1997	| SNK		| Neo Geo MVS	| 					|
 | lastblada	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NG| lastblad	| 1997	| SNK		| Neo Geo MVS	| 					|
 | lastbladsp	|  	| The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Sp| lastblad	| 2017	| hack		| Neo Geo MVS	| 					|
+| lastbl2h	|  	| The Last Blade 2 (Hidden Hack)			| lastbld2	| 1998	| SNK		| Neo Geo MVS	| 					|
+| lastbl2f	|  	| The Last Blade 2 (System Bugs Fix)			| lastbld2	| 1998	| SNK		| Neo Geo MVS	| 					|
 | lb2b		|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| lastbld2	| 1998	| Dodowang[EGCG]| Neo Geo MVS	| 					|
 | lastbld2eh	|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| lastbld2	| 1998	| hack		| Neo Geo MVS	| 					|
 | lastbld2	|  	| The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka| 		| 1998	| SNK		| Neo Geo MVS	| 					|
@@ -15086,9 +15151,11 @@ This list contains all games supported by FinalBurn Neo.
 | md_thorp2	|  	| The Story of Thor (USA, Prototype, 19941004)		| md_thor	| 1994	| Sega		| Sega Megadrive| 					|
 | md_thorp1	|  	| The Story of Thor (USA, Prototype, 19941017)		| md_thor	| 1994	| Sega		| Sega Megadrive| 					|
 | md_thorf	|  	| The Story of Thor - A Successor of The Light (Fra)	| md_thor	| 1995	| Sega		| Sega Megadrive| 					|
+| md_thork2	|  	| The Story of Thor - Hikari o Tsugumono (Hack, Korean)	| md_thor	| 2015	| Sega		| Sega Megadrive| 					|
 | md_thorj	|  	| The Story of Thor - Hikari o Tsugumono (Jpn)		| md_thor	| 1995	| Sega		| Sega Megadrive| 					|
 | md_thorc	|  	| The Story of Thor - Hikari o Tsugumono (T-Chi)	| md_thor	| 2004	| YUZO		| Sega Megadrive| 					|
 | md_supshin	|  	| The Super Shinobi (Jpn)				| md_revshin	| 1989	| Sega		| Sega Megadrive| 					|
+| md_supshin2k	|  	| The Super Shinobi II (Hack, Korean)			| md_shinobi3	| 2013	| Sega		| Sega Megadrive| 					|
 | md_supshin2	|  	| The Super Shinobi II (Jpn, Kor)			| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
 | md_supshin2p1	|  	| The Super Shinobi II (Jpn, Prototype)			| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
 | md_supshin2p2	|  	| The Super Shinobi II (Jpn, Prototype, Earlier)	| md_shinobi3	| 1993	| Sega		| Sega Megadrive| 					|
@@ -15220,7 +15287,6 @@ This list contains all games supported by FinalBurn Neo.
 | thunderja	|  	| ThunderJaws (rev 2)					| thunderj	| 1990	| Atari Games	| Miscellaneous	| 					|
 | thunderj	|  	| ThunderJaws (rev 3)					| 		| 1990	| Atari Games	| Miscellaneous	| 					|
 | msx_titipang	|  	| Ti Ti! Pang Pang! (Kor)				| 		| 1989	| Aproman	| MSX		| 					|
-| chf_tctactoe	|  	| Tic-Tac-Toe / Shooting Gallery / Doodle / Quadra-Doodl| 		| 1976	| Fairchild	| Channel F	| 					|
 | tigerhb1	|  	| Tiger Heli (bootleg set 1)				| tigerh	| 1985	| bootleg	| Miscellaneous	| 					|
 | tigerhb2	|  	| Tiger Heli (bootleg set 2)				| tigerh	| 1985	| bootleg	| Miscellaneous	| 					|
 | tigerhb3	|  	| Tiger Heli (bootleg set 3)				| tigerh	| 1985	| bootleg	| Miscellaneous	| 					|
@@ -15697,8 +15763,10 @@ This list contains all games supported by FinalBurn Neo.
 | nes_twinb3	|  	| TwinBee 3 - Poko Poko Daimaou (Japan)			| 		| 1989	| Konami	| Miscellaneous	| 					|
 | twinkle	|  	| Twinkle (set 1)					| 		| 1997	| SemiCom	| Kaneko Pandora| 					|
 | twinklea	|  	| Twinkle (set 2)					| twinkle	| 1997	| SemiCom	| Kaneko Pandora| 					|
+| twinsprh	|  	| Twinkle Star Sprites (Hidden Hack)			| twinspri	| 1996	| ADK		| Neo Geo MVS	| 					|
 | twinspri	|  	| Twinkle Star Sprites					| 		| 1996	| ADK		| Neo Geo MVS	| 					|
 | md_twinklete	|  	| Twinkle Tale (Hack, English)				| md_twinklet	| 2007	| Toyo Records	| Sega Megadrive| 					|
+| md_twinkletk	|  	| Twinkle Tale (Hack, Korean)				| md_twinklet	| 2013	| Toyo Records	| Sega Megadrive| 					|
 | md_twinklets	|  	| Twinkle Tale (Hack, Spanish)				| md_twinklet	| 2018	| Toyo Recording| Sega Megadrive| 					|
 | md_twinklet	|  	| Twinkle Tale (Jpn)					| 		| 1992	| Toyo Records	| Sega Megadrive| 					|
 | spec_twinlight|  	| Twinlight (128K) (HB)					| 		| 2017	| Retrosouls	| ZX Spectrum	| 					|
@@ -15854,6 +15922,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_valiss	|  	| Valis (Hack, Spanish)					| md_valis	| 2017	| Renovation	| Sega Megadrive| 					|
 | md_valis	|  	| Valis (USA)						| 		| 1991	| Renovation	| Sega Megadrive| 					|
 | nes_valis	|  	| Valis - The Fantastic Soldier (Japan)			| 		| 1987	| Tokuma Shoten	| Miscellaneous	| 					|
+| md_valis3k	|  	| Valis III (Hack, Korean)				| md_valis3	| 2008	| Reno		| Sega Megadrive| 					|
 | md_valis3s	|  	| Valis III (Hack, Spanish)				| md_valis3	| 2017	| Renovation	| Sega Megadrive| 					|
 | md_valis3j	|  	| Valis III (Jpn, Rev. A)				| md_valis3	| 1991	| Reno		| Sega Megadrive| 					|
 | md_valis3	|  	| Valis III (USA)					| 		| 1991	| Renovation	| Sega Megadrive| 					|
@@ -15875,6 +15944,7 @@ This list contains all games supported by FinalBurn Neo.
 | vampjr1	|  	| Vampire - the night warriors (940630 Japan)		| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vampj		|  	| Vampire - the night warriors (940705 Japan)		| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vampja	|  	| Vampire - the night warriors (940705 Japan, alt)	| dstlk		| 1994	| Capcom	| CPS2		| 					|
+| vampjh	|  	| Vampire - the night warriors (940705 Japan, Hidden Hac| dstlk		| 1994	| Capcom	| CPS2		| 					|
 | vhuntjr2	|  	| Vampire Hunter - darkstalkers' revenge (950302 Japan)	| nwarr		| 1995	| Capcom	| CPS2		| 					|
 | vhuntjr1s	|  	| Vampire Hunter - darkstalkers' revenge (950307 Japan s| nwarr		| 1995	| Capcom	| CPS2		| 					|
 | vhuntjr1	|  	| Vampire Hunter - darkstalkers' revenge (950307 Japan)	| nwarr		| 1995	| Capcom	| CPS2		| 					|
@@ -15889,6 +15959,7 @@ This list contains all games supported by FinalBurn Neo.
 | vsavh		|  	| Vampire Savior - the lord of vampire (970519 Hispanic)| vsav		| 1997	| Capcom	| CPS2		| 					|
 | vsavj		|  	| Vampire Savior - the lord of vampire (970519 Japan)	| vsav		| 1997	| Capcom	| CPS2		| 					|
 | vsavu		|  	| Vampire Savior - the lord of vampire (970519 USA)	| vsav		| 1997	| Capcom	| CPS2		| 					|
+| vsavdt	|  	| Vampire Savior - the lord of vampire (Phoenix Edition,| vsav		| 1997	| bootleg	| CPS2		| 					|
 | vsav2d	|  	| Vampire Savior 2 - the lord of vampire (970913 Japan P| vsav2		| 1997	| bootleg	| CPS2		| 					|
 | vsav2		|  	| Vampire Savior 2 - the lord of vampire (970913 Japan)	| 		| 1997	| Capcom	| CPS2		| 					|
 | spec_vampveng	|  	| Vampire Vengeance (HB, v1.1)				| 		| 2020	| Poe Games	| ZX Spectrum	| 					|
@@ -15976,7 +16047,6 @@ This list contains all games supported by FinalBurn Neo.
 | pce_victoryr	|  	| Victory Run						| 		| 1987	| Hudson	| PC Engine	| 					|
 | tg_victoryr	|  	| Victory Run						| 		| 1989	| NEC		| TurboGrafx 16	| 					|
 | cv_victory	|  	| Victory						| 		| 1983	| Coleco	| ColecoVision	| 					|
-| chf_vblckjck	|  	| Video Blackjack					| 		| 1976	| Fairchild	| Channel F	| 					|
 | hustlerb	|  	| Video Hustler (bootleg)				| hustler	| 1981	| bootleg	| Galaxian	| 					|
 | msx_hustler	|  	| Video Hustler (Jpn)					| msx_konbill	| 1984	| Konami	| MSX		| 					|
 | msx_hustlera	|  	| Video Hustler (Jpn, Alt)				| msx_konbill	| 1984	| Konami	| MSX		| 					|
@@ -15985,7 +16055,6 @@ This list contains all games supported by FinalBurn Neo.
 | hustler	|  	| Video Hustler						| 		| 1981	| Konami	| Galaxian	| 					|
 | vpool		|  	| Video Pool (bootleg on Moon Cresta hardware)		| hustler	| 1980	| bootleg	| Galaxian	| 					|
 | vidvince	|  	| Video Vince and the Game Factory (prototype)		| 		| 1984	| Mylstar	| Miscellaneous	| 					|
-| chf_whizball	|  	| Video Whizball					| 		| 1978	| Fairchild	| Channel F	| 					|
 | viewpoinp	|  	| Viewpoint (prototype)					| viewpoin	| 1992	| SNK		| Neo Geo MVS	| 					|
 | md_viewpoin	|  	| Viewpoint (USA)					| 		| 1994	| American Sammy| Sega Megadrive| 					|
 | md_viewpoinp	|  	| Viewpoint (USA, Prototype)				| md_viewpoin	| 1994	| American Sammy| Sega Megadrive| 					|
@@ -16081,6 +16150,7 @@ This list contains all games supported by FinalBurn Neo.
 | nes_volguardii|  	| Volguard II (Japan)					| 		| 1985	| dB-SOFT	| Miscellaneous	| 					|
 | fds_volleyball|  	| Volleyball (Japan)					| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
 | nes_volleyball|  	| Volleyball (USA)					| 		| 1987	| Nintendo	| Miscellaneous	| 					|
+| gowcaizb	|  	| Voltage Fighter - Gowcaizer (Boss Hack)		| gowcaizr	| 1995	| Technos	| Neo Geo MVS	| 					|
 | gowcaizr	|  	| Voltage Fighter - Gowcaizer / Choujin Gakuen Gowcaizer| 		| 1995	| Technos	| Neo Geo MVS	| 					|
 | msx_vortraid	|  	| Vortex Raider (Euro)					| 		| 1988	| Eurosoft	| MSX		| 					|
 | sms_voyage	|  	| Voyage - A Sorceress Vacation (HB, v1.03)		| 		| 2020	| SNAGS		| Sega Master Sy| 					|
@@ -16130,6 +16200,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_WaimanuSMS|  	| Waimanu: Scary Monsters Saga (HB)			| 		| 2015	| Disjointed Stu| Sega Master Sy| 					|
 | mj4simai	|  	| Wakakusamonogatari Mahjong Yonshimai (Japan)		| 		| 1996	| Maboroshi Ware| Newer Seta	| 					|
 | wakuwak7bh	|  	| Waku Waku 7 (Boss Hack)				| wakuwak7	| 1996	| hack		| Neo Geo MVS	| 					|
+| wakuwa7h	|  	| Waku Waku 7 (Hidden Hack)				| wakuwak7	| 1996	| Sunsoft	| Neo Geo MVS	| 					|
 | wakuwak7	|  	| Waku Waku 7						| 		| 1996	| Sunsoft	| Neo Geo MVS	| 					|
 | ultracin	|  	| Waku Waku Ultraman Racing				| 		| 1996	| Sega		| System 16B	| Emulation not complete		|
 | fds_wakusatogai|  	| Wakusei Aton Gaiden (Japan)				| 		| 1989?	| Nintendo	| Miscellaneous	| 					|
@@ -16222,7 +16293,6 @@ This list contains all games supported by FinalBurn Neo.
 | sms_wekainvaders10|  	| Weka Invaders (HB, v1.0)				| 		| 2017	| Disjointed Stu| Sega Master Sy| 					|
 | welltrisj	|  	| Welltris - Alexey Pajitnov's (Japan, 2 players)	| welltris	| 1991	| Video System C| Miscellaneous	| 					|
 | welltris	|  	| Welltris - Alexey Pajitnov's (World?, 2 players)	| 		| 1991	| Video System C| Miscellaneous	| 					|
-| chf_werbetxt	|  	| Werbetextcassette					| 		| 198?	| Electronic-Par| Channel F	| 					|
 | nes_werew	|  	| Werewolf - The Last Warrior (USA)			| 		| 1990	| Data East	| Miscellaneous	| 					|
 | weststry	| D NW	| West Story (bootleg of Blood Bros., set 1)		| bloodbro	| 1991	| bootleg (Datsu| Miscellaneous	| 					|
 | weststrya	| D NW	| West Story (bootleg of Blood Bros., set 2)		| bloodbro	| 1991	| bootleg (Datsu| Miscellaneous	| 					|
@@ -16292,6 +16362,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_wimbledup	|  	| Wimbledon Championship Tennis (USA, Prototype)	| md_wimbled	| 1993	| Sega		| Sega Megadrive| 					|
 | sms_wimbled2	|  	| Wimbledon II (Euro, Bra)				| 		| 1993	| Sega		| Sega Master Sy| 					|
 | nes_winlosordra|  	| Win, Lose or Draw (USA)				| 		| 1990	| Hi Tech Expres| Miscellaneous	| 					|
+| wjammerk	|  	| Windjammers / Flying Power Disc (Korean)		| wjammers	| 2005	| Data East Corp| Neo Geo MVS	| 					|
 | wjammers	|  	| Windjammers / Flying Power Disc			| 		| 1994	| Data East Corp| Neo Geo MVS	| 					|
 | wingforc	|  	| Wing Force (Japan, prototype)				| 		| 1993	| A.I (Atlus lic| Kaneko16	| 					|
 | msx_wingman2	|  	| Wing Man 2 - Kitakura no Fukkatsu (Jpn)		| 		| 1987	| Enix		| MSX		| 					|
@@ -16506,6 +16577,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_worldgpp	|  	| World Grand Prix (USA, Prototype)			| sms_worldgp	| 1986	| Sega		| Sega Master Sy| 					|
 | wh1h		|  	| World Heroes (ALH-005)				| wh1		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
 | wh1		|  	| World Heroes (ALM-005)				| 		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
+| wh1b		|  	| World Heroes (Boss Hack)				| wh1		| 1992	| Alpha Denshi C| Neo Geo MVS	| 					|
 | md_whs	|  	| World Heroes (Hack, Spanish)				| md_wh		| 2020	| Sega		| Sega Megadrive| 					|
 | md_whj	|  	| World Heroes (Jpn)					| md_wh		| 199?	| <unknown>	| Sega Megadrive| 					|
 | md_whjp5	|  	| World Heroes (Jpn, Prototype, 19940330)		| md_wh		| 1994	| Sega		| Sega Megadrive| 					|
@@ -16530,8 +16602,11 @@ This list contains all games supported by FinalBurn Neo.
 | md_whp02	|  	| World Heroes (USA, Prototype, 19940331-B)		| md_wh		| 1994	| Sega		| Sega Megadrive| 					|
 | wh2h		|  	| World Heroes 2 (ALH-006)				| wh2		| 1993	| ADK		| Neo Geo MVS	| 					|
 | wh2		|  	| World Heroes 2 (ALM-006)(ALH-006)			| 		| 1993	| ADK		| Neo Geo MVS	| 					|
+| wh2b		|  	| World Heroes 2 (Boss Hack)				| wh2		| 1993	| ADK		| Neo Geo MVS	| 					|
 | wh2j		|  	| World Heroes 2 Jet (ADM-007)(ADH-007)			| 		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
 | wh2ja		|  	| World Heroes 2 Jet (ADM-007)				| wh2j		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
+| wh2jb		|  	| World Heroes 2 Jet (Boss Hack)			| wh2j		| 1994	| ADK / SNK	| Neo Geo MVS	| 					|
+| whpb		|  	| World Heroes Perfect (Boss Hack)			| whp		| 1995	| ADK / SNK	| Neo Geo MVS	| 					|
 | whp		|  	| World Heroes Perfect					| 		| 1995	| ADK / SNK	| Neo Geo MVS	| 					|
 | pce_wjockey	|  	| World Jockey						| 		| 1991	| Namcot	| PC Engine	| 					|
 | md_worldillj	|  	| World of Illusion - Fushigi na Magic Box (Jpn)	| md_worldill	| 1992	| Sega		| Sega Megadrive| 					|
@@ -16668,6 +16743,7 @@ This list contains all games supported by FinalBurn Neo.
 | xmcotaj3	|  	| X-Men - children of the atom (941217 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaar1	|  	| X-Men - children of the atom (941219 Asia)		| xmcota	| 1995	| Capcom	| CPS2		| 					|
 | xmcotaj2	|  	| X-Men - children of the atom (941219 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
+| xmcotaj2h	|  	| X-Men - children of the atom (941219 Japan, Hidden Hac| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaj1	|  	| X-Men - children of the atom (941222 Japan)		| xmcota	| 1994	| Capcom	| CPS2		| 					|
 | xmcotaa	|  	| X-Men - children of the atom (950105 Asia)		| xmcota	| 1995	| Capcom	| CPS2		| 					|
 | xmcotar1d	|  	| X-Men - children of the atom (950105 Euro Phoenix Edit| xmcota	| 1995	| bootleg	| CPS2		| 					|
@@ -16862,6 +16938,7 @@ This list contains all games supported by FinalBurn Neo.
 | sms_ysd	|  	| Ys (USA, Demo)					| sms_ys	| 1988	| Sega		| Sega Master Sy| 					|
 | sms_ys	|  	| Ys - The Vanished Omens (Euro, USA, Bra)		| 		| 1988	| Sega		| Sega Master Sy| 					|
 | sms_ysfm	|  	| Ys - The Vanished Omens (FM Mod, v1.2)		| sms_ys	| 2009	| Sega - SSTrans| Sega Master Sy| YM2413 FM sound chip supported	|
+| md_ys3k	|  	| Ys - Wanderers from Ys (Hack, Korean)			| md_ys3	| 2013	| Reno		| Sega Megadrive| 					|
 | md_ys3j	|  	| Ys - Wanderers from Ys (Jpn)				| md_ys3	| 1991	| Reno		| Sega Megadrive| 					|
 | nes_ysiic	|  	| Ys II - Ancient Ys Vanished - The Final Chapter (Japan| nes_ysii	| 1989 ?| Nintendo	| Miscellaneous	| 					|
 | nes_ysiij	|  	| Ys II - Ancient Ys Vanished - The Final Chapter (Japan| nes_ysii	| 1990	| Victor	| Miscellaneous	| 					|
@@ -17036,6 +17113,7 @@ This list contains all games supported by FinalBurn Neo.
 | md_zouzou	|  	| Zou! Zou! Zou! Rescue Daisakusen (Jpn)		| md_rolo	| 1993	| Electronic Art| Sega Megadrive| 					|
 | spec_zub	|  	| Zub (128K)						| 		| 1986	| Mastertronic A| ZX Spectrum	| 					|
 | nes_zunousengal|  	| Zunou Senkan Galg (Japan)				| 		| 1985	| dB-SOFT	| Miscellaneous	| 					|
+| zupapand	|  	| Zupapa! (Fully Decrypted)				| zupapa	| 2001	| SNK		| Neo Geo MVS	| 					|
 | zupapa	|  	| Zupapa!						| 		| 2001	| SNK		| Neo Geo MVS	| 					|
 | spec_spec128	|   NW	| ZX Spectrum 128					| 		| 1984	| Sinclair Resea| ZX Spectrum	| BIOS Only				|
 | spec_spec128k	|  	| ZX Spectrum 128					| 		| 1984	| Sinclair Resea| ZX Spectrum	| 					|
diff --git a/src/burn/drv/capcom/d_cps1.cpp b/src/burn/drv/capcom/d_cps1.cpp
index c83de6aac..86a3ca0b8 100644
--- a/src/burn/drv/capcom/d_cps1.cpp
+++ b/src/burn/drv/capcom/d_cps1.cpp
@@ -15583,6 +15583,15 @@ static const struct GameConfig ConfigTable[] =
 	{ "sfzech"        , CPS_B_21_DEF, mapper_sfzch , 0, NULL                },
 	{ "sfzhch"        , CPS_B_21_DEF, mapper_sfzch , 0, NULL                },
 
+	// Add Hack Roms
+	{ "captcommv4"    , CPS_B_21_BT3, mapper_CC63B , 0, NULL                },
+	{ "ffgtj4v2"      , CPS_B_05    , mapper_S224B , 0, NULL                },
+	{ "ffgtj2sp"      , CPS_B_02    , mapper_S224B , 0, NULL                },
+	{ "knightj3"      , CPS_B_21_BT4, mapper_KR63B , 0, NULL                },
+	{ "sf2jhpp"       , CPS_B_13    , mapper_STF29 , 0, NULL                },
+	{ "wofj103"       , CPS_B_21_QS1, mapper_TK263B, 0, wof_decode          },
+	{ "wofch3p"       , CPS_B_21_DEF, mapper_sfzch , 0, wof_decode          },
+
 	{ 0               , 0           , 0            , 0, 0                   }
 };
 
@@ -24316,6 +24325,341 @@ struct BurnDriver BurnDrvCpssf2mix = {
 
 #include "d_kenseim.h"
 
+//============================================================
+//  Add Hack Roms
+//============================================================
+
+static struct BurnRomInfo Captcommv4RomDesc[] = {
+	{ "cce_23fv4.8f",  0x080000, 0xaadba6af, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "cc_22f.7f",     0x080000, 0x0fd34195, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "cc_24f.9e",     0x020000, 0x3a794f25, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "cc_28f.9f",     0x020000, 0xfc3c2906, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "cc-5m.3a",      0x080000, 0x7261d8ba, BRF_GRA | CPS1_TILES },
+	{ "cc-7m.5a",      0x080000, 0x6a60f949, BRF_GRA | CPS1_TILES },
+	{ "cc-1m.4a",      0x080000, 0x00637302, BRF_GRA | CPS1_TILES },
+	{ "cc-3m.6a",      0x080000, 0xcc87cf61, BRF_GRA | CPS1_TILES },
+	{ "cc-6m.7a",      0x080000, 0x28718bed, BRF_GRA | CPS1_TILES },
+	{ "cc-8m.9a",      0x080000, 0xd4acc53a, BRF_GRA | CPS1_TILES },
+	{ "cc-2m.8a",      0x080000, 0x0c69f151, BRF_GRA | CPS1_TILES },
+	{ "cc-4m.10a",     0x080000, 0x1f9ebb97, BRF_GRA | CPS1_TILES },
+
+	{ "cc_09.11a",     0x010000, 0x698e8b58, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "cc_18.11c",     0x020000, 0x6de2c2db, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "cc_19.12c",     0x020000, 0xb99091ae, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "cc63b.1a",      0x000117, 0xcae8f0f9, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "ccprg1.11d",    0x000117, 0xe1c225c4, BRF_OPT },
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632b.ic1",     0x000117, 0x0fbd9270, BRF_OPT },
+};
+
+STD_ROM_PICK(Captcommv4)
+STD_ROM_FN(Captcommv4)
+
+static struct BurnRomInfo Ffgtj4v2RomDesc[] = {
+	{ "ff_36v2.12f",   0x020000, 0xa9f3fd1b, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_42v2.12h",  0x020000, 0x75085b57, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_37.13f",     0x020000, 0xdba5a476, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_43.13h",    0x020000, 0xfbeca028, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_34.10f",     0x020000, 0x0c8dc3fc, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_40.10h",    0x020000, 0x8075bab9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_35.11f",     0x020000, 0x4a934121, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_41.11h",    0x020000, 0x2af68154, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "ff_09.4b",      0x020000, 0x5b116d0d, BRF_GRA | CPS1_TILES },
+	{ "ff_01.4a",      0x020000, 0x815b1797, BRF_GRA | CPS1_TILES },
+	{ "ff_13.9b",      0x020000, 0x8721a7da, BRF_GRA | CPS1_TILES },
+	{ "ff_05.9a",      0x020000, 0xd0fcd4b5, BRF_GRA | CPS1_TILES },
+	{ "ff_24.5e",      0x020000, 0xa1ab607a, BRF_GRA | CPS1_TILES },
+	{ "ff_17.5c",      0x020000, 0x2dc18cf4, BRF_GRA | CPS1_TILES },
+	{ "ffj_38.8h",     0x020000, 0x6535a57f, BRF_GRA | CPS1_TILES }, // == ff_38.8h 
+	{ "ff_32.8f",      0x020000, 0xc8bc4a57, BRF_GRA | CPS1_TILES },
+	{ "ff_10.5b",      0x020000, 0x624a924a, BRF_GRA | CPS1_TILES },
+	{ "ff_02.5a",      0x020000, 0x5d91f694, BRF_GRA | CPS1_TILES },
+	{ "ff_14.10b",     0x020000, 0x0a2e9101, BRF_GRA | CPS1_TILES },
+	{ "ff_06.10a",     0x020000, 0x1c18f042, BRF_GRA | CPS1_TILES },
+	{ "ff_25.7e",      0x020000, 0x6e8181ea, BRF_GRA | CPS1_TILES },
+	{ "ff_18.7c",      0x020000, 0xb19ede59, BRF_GRA | CPS1_TILES },
+	{ "ffj_39.9h",     0x020000, 0x9416b477, BRF_GRA | CPS1_TILES }, // == ff_39.9h
+	{ "ff_33.9f",      0x020000, 0x7369fa07, BRF_GRA | CPS1_TILES },
+
+	{ "ff_23.13b",     0x010000, 0xb8367eb5, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "ff_30.12c",     0x020000, 0x375c66e7, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "ff_31.13c",     0x020000, 0x1ef137f9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "s222b.1a",      0x000117, 0x6d86b45e, BRF_OPT }, // b-board PLDs
+	{ "lwio.12e",      0x000117, 0xad52b90c, BRF_OPT },
+};
+
+STD_ROM_PICK(Ffgtj4v2)
+STD_ROM_FN(Ffgtj4v2)
+
+static struct BurnRomInfo Ffgtj2spRomDesc[] = {
+	{ "ffj_36sp.12f",  0x020000, 0x173a79d7, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_42sp.12h",  0x020000, 0x123a7e68, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_37sp.13f",  0x020000, 0x6a12d584, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ffj_43sp.13h",  0x020000, 0x50a0442a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_34.10f",     0x020000, 0x0c8dc3fc, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_40.10h",     0x020000, 0x8075bab9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_35.11f",     0x020000, 0x4a934121, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "ff_41.11h",     0x020000, 0x2af68154, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+
+	{ "ff_09.4b",      0x020000, 0x5b116d0d, BRF_GRA | CPS1_TILES },
+	{ "ff_01.4a",      0x020000, 0x815b1797, BRF_GRA | CPS1_TILES },
+	{ "ff_13.9b",      0x020000, 0x8721a7da, BRF_GRA | CPS1_TILES },
+	{ "ff_05.9a",      0x020000, 0xd0fcd4b5, BRF_GRA | CPS1_TILES },
+	{ "ff_24.5e",      0x020000, 0xa1ab607a, BRF_GRA | CPS1_TILES },
+	{ "ff_17.5c",      0x020000, 0x2dc18cf4, BRF_GRA | CPS1_TILES },
+	{ "ff_38.8h",      0x020000, 0x6535a57f, BRF_GRA | CPS1_TILES },
+	{ "ff_32.8f",      0x020000, 0xc8bc4a57, BRF_GRA | CPS1_TILES },
+	{ "ff_10.5b",      0x020000, 0x624a924a, BRF_GRA | CPS1_TILES },
+	{ "ff_02.5a",      0x020000, 0x5d91f694, BRF_GRA | CPS1_TILES },
+	{ "ff_14.10b",     0x020000, 0x0a2e9101, BRF_GRA | CPS1_TILES },
+	{ "ff_06.10a",     0x020000, 0x1c18f042, BRF_GRA | CPS1_TILES },
+	{ "ff_25.7e",      0x020000, 0x6e8181ea, BRF_GRA | CPS1_TILES },
+	{ "ff_18.7c",      0x020000, 0xb19ede59, BRF_GRA | CPS1_TILES },
+	{ "ff_39.9h",      0x020000, 0x9416b477, BRF_GRA | CPS1_TILES },
+	{ "ff_33.9f",      0x020000, 0x7369fa07, BRF_GRA | CPS1_TILES },
+
+	{ "ff_23.13c",     0x010000, 0xb8367eb5, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "ff_30.12e",     0x020000, 0x375c66e7, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "ff_31.13e",     0x020000, 0x1ef137f9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+
+	A_BOARD_PLDS
+	
+	{ "s222b.1a",      0x000117, 0x6d86b45e, BRF_OPT }, // b-board PLDs
+	{ "lwio.12c",      0x000117, 0xad52b90c, BRF_OPT },
+};
+
+STD_ROM_PICK(Ffgtj2sp)
+STD_ROM_FN(Ffgtj2sp)
+
+static struct BurnRomInfo Knightj3RomDesc[] = {
+	{ "kr_23j_v3.8f",  0x080000, 0xfb95179e, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "kr_22.7f",      0x080000, 0xd0b671a9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "kr_01.3a",      0x080000, 0x9e36c1a4, BRF_GRA | CPS1_TILES },
+	{ "kr_02.4a",      0x080000, 0xc5832cae, BRF_GRA | CPS1_TILES },
+	{ "kr_03.5a",      0x080000, 0xf095be2d, BRF_GRA | CPS1_TILES },
+	{ "kr_04.6a",      0x080000, 0x179dfd96, BRF_GRA | CPS1_TILES },
+	{ "kr_05.7a",      0x080000, 0x1f4298d2, BRF_GRA | CPS1_TILES },
+	{ "kr_06.8a",      0x080000, 0x37fa8751, BRF_GRA | CPS1_TILES },
+	{ "kr_07.9a",      0x080000, 0x0200bc3d, BRF_GRA | CPS1_TILES },
+	{ "kr_08.10a",     0x080000, 0x0bb2b4e7, BRF_GRA | CPS1_TILES },
+
+	{ "kr_09.12a",     0x010000, 0x5e44d9ee, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "kr_18.11c",     0x020000, 0xda69d15f, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	{ "kr_19.12c",     0x020000, 0xbfc654e9, BRF_SND | CPS1_OKIM6295_SAMPLES },
+	
+	A_BOARD_PLDS
+	
+	{ "kr63b.1a",      0x000117, 0xfd5b6522, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },
+};
+
+STD_ROM_PICK(Knightj3)
+STD_ROM_FN(Knightj3)
+
+static struct BurnRomInfo Sf2jhppRomDesc[] = {
+	{ "sf2j_30hp.11e", 0x020000, 0x021594e9, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2e_30g.11e
+	{ "sf2j_37hp.11f", 0x020000, 0x92a5f669, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_31hp.12e", 0x020000, 0x7e4af671, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2e_31g.12e
+	{ "sf2j_38hp.12f", 0x020000, 0x4723f268, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_28hp.9e",  0x020000, 0x3c33abd7, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_35hp.9f",  0x020000, 0x6a6c2e9a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP },
+	{ "sf2j_29ap.10e", 0x020000, 0x0bb77024, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2_29b.10e
+	{ "sf2j_36ap.10f", 0x020000, 0x48256574, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_BYTESWAP }, // == sf2_36b.10f
+
+	{ "sf2_06.8a",     0x080000, 0x22c9cc8e, BRF_GRA | CPS1_TILES },
+	{ "sf2_08.10a",    0x080000, 0x57213be8, BRF_GRA | CPS1_TILES },
+	{ "sf2_05.7a",     0x080000, 0xba529b4f, BRF_GRA | CPS1_TILES },
+	{ "sf2_07.9a",     0x080000, 0x4b1b33a8, BRF_GRA | CPS1_TILES },
+	{ "sf2_15.8c",     0x080000, 0x2c7e2229, BRF_GRA | CPS1_TILES },
+	{ "sf2_17.10c",    0x080000, 0xb5548f17, BRF_GRA | CPS1_TILES },
+	{ "sf2_14.7c",     0x080000, 0x14b84312, BRF_GRA | CPS1_TILES },
+	{ "sf2_16.9c",     0x080000, 0x5e9cd89a, BRF_GRA | CPS1_TILES },
+	{ "sf2_25p.8d",    0x080000, 0x4267b696, BRF_GRA | CPS1_TILES },
+	{ "sf2_27p.10d",   0x080000, 0xdf9b9146, BRF_GRA | CPS1_TILES },
+	{ "sf2_24p.7d",    0x080000, 0xa08a9786, BRF_GRA | CPS1_TILES },
+	{ "sf2_26p.9d",    0x080000, 0x80feac31, BRF_GRA | CPS1_TILES },
+
+	{ "sf2_09.12a",    0x010000, 0xa4823a1b, BRF_PRG | CPS1_Z80_PROGRAM }, // == sf2_9.12a
+
+	{ "sf2_18.11c",    0x020000, 0x7f162009, BRF_SND | CPS1_OKIM6295_SAMPLES },  
+	{ "sf2_19.12c",    0x020000, 0xbeade53f, BRF_SND | CPS1_OKIM6295_SAMPLES },  
+
+	A_BOARD_PLDS
+	
+	{ "stf29.1a",      0x000117, 0x043309c5, BRF_OPT },	// b-board PLDs
+	{ "iob1.11d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },	// c-board PLDs
+};
+
+STD_ROM_PICK(Sf2jhpp)
+STD_ROM_FN(Sf2jhpp)
+
+static struct BurnRomInfo Wofj103RomDesc[] = {
+	{ "tk2j_23m.8f",   0x080000, 0x6dba1d2f, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "tk2j_22m.7f",   0x080000, 0x7630fd8a, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "tk2_01.3a",     0x080000, 0x0d9cb9bf, BRF_GRA | CPS1_TILES },
+	{ "tk2_02.4a",     0x080000, 0x45227027, BRF_GRA | CPS1_TILES },
+	{ "tk2_03.5a",     0x080000, 0xc5ca2460, BRF_GRA | CPS1_TILES },
+	{ "tk2_04.6a",     0x080000, 0xe349551c, BRF_GRA | CPS1_TILES },
+	{ "tk2_05.7a",     0x080000, 0xe4a44d53, BRF_GRA | CPS1_TILES },
+	{ "tk2_06.8a",     0x080000, 0x58066ba8, BRF_GRA | CPS1_TILES },
+	{ "tk2_07.9a",     0x080000, 0xd706568e, BRF_GRA | CPS1_TILES },
+	{ "tk2_08.10a",    0x080000, 0xd4a19a02, BRF_GRA | CPS1_TILES },
+
+	{ "tk2_qa.5k",     0x020000, 0xc9183a0d, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "tk2-q1.1k",     0x080000, 0x611268cf, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q2.2k",     0x080000, 0x20f55ca9, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q3.3k",     0x080000, 0xbfcf6f52, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q4.4k",     0x080000, 0x36642e88, BRF_SND | CPS1_QSOUND_SAMPLES },
+
+	A_BOARD_QSOUND_PLDS
+	
+	{ "tk263b.1a",     0x000117, 0xc4b0349b, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	
+	{ "ioc1.ic1",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	
+	{ "d7l1.7l",       0x000117, 0x27b7410d, BRF_OPT },	// d-board PLDs
+	{ "d8l1.8l",       0x000117, 0x539fc7da, BRF_OPT },
+	{ "d9k1.9k",       0x000117, 0x6c35c805, BRF_OPT },
+	{ "d10f1.10f",     0x000117, 0x6619c494, BRF_OPT },
+};
+
+STD_ROM_PICK(Wofj103)
+STD_ROM_FN(Wofj103)
+
+static struct BurnRomInfo Wofch3pRomDesc[] = {
+	{ "tk23p_23.8f",   0x080000, 0x8a1017a4, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+	{ "tk23p_22.7f",   0x080000, 0x129f2942, BRF_ESS | BRF_PRG | CPS1_68K_PROGRAM_NO_BYTESWAP },
+
+	{ "tk2-1m.3a",     0x080000, 0x0d9cb9bf, BRF_GRA | CPS1_TILES },
+	{ "tk2-3m.5a",     0x080000, 0x45227027, BRF_GRA | CPS1_TILES },
+	{ "tk2-2m.4a",     0x080000, 0xc5ca2460, BRF_GRA | CPS1_TILES },
+	{ "tk2-4m.6a",     0x080000, 0xe349551c, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_05.7a", 0x080000, 0xe4a44d53, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_06.8a", 0x080000, 0x58066ba8, BRF_GRA | CPS1_TILES },
+	{ "tk2(ch)_07.9a", 0x080000, 0xcc9006c9, BRF_GRA | CPS1_TILES }, // 1 byte different from wofj, pcb verified
+	{ "tk2(ch)_08.10a",0x080000, 0xd4a19a02, BRF_GRA | CPS1_TILES },
+
+	{ "tk2_qa.5k",     0x020000, 0xc9183a0d, BRF_PRG | CPS1_Z80_PROGRAM },
+
+	{ "tk2-q1.1k",     0x080000, 0x611268cf, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q2.2k",     0x080000, 0x20f55ca9, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q3.3k",     0x080000, 0xbfcf6f52, BRF_SND | CPS1_QSOUND_SAMPLES },
+	{ "tk2-q4.4k",     0x080000, 0x36642e88, BRF_SND | CPS1_QSOUND_SAMPLES },
+
+	{ "buf1",          0x000117, 0xeb122de7, BRF_OPT }, // a-board PLDs
+	{ "ioa1",          0x000117, 0x59c7ee3b, BRF_OPT },
+	{ "prg2",          0x000117, 0x4386879a, BRF_OPT },
+	{ "rom1",          0x000117, 0x41dc73b9, BRF_OPT },
+	{ "sou1",          0x000117, 0x84f4b2fe, BRF_OPT },
+	
+	{ "tk263b.1a",     0x000117, 0xc4b0349b, BRF_OPT },	// b-board PLDs
+	{ "iob1.12d",      0x000117, 0x3abc0700, BRF_OPT },
+	{ "bprg1.11d",     0x000117, 0x31793da7, BRF_OPT },
+	
+	{ "ioc1.ic7",      0x000104, 0xa399772d, BRF_OPT },	// c-board PLDs
+	{ "c632.ic1",      0x000117, 0x0fbd9270, BRF_OPT },
+	
+	{ "d7l1.7l",       0x000117, 0x27b7410d, BRF_OPT },	// d-board PLDs
+	{ "d8l1.8l",       0x000117, 0x539fc7da, BRF_OPT },
+	{ "d9k1.9k",       0x000117, 0x6c35c805, BRF_OPT },
+	{ "d10f1.10f",     0x000117, 0x6619c494, BRF_OPT },
+};
+
+STD_ROM_PICK(Wofch3p)
+STD_ROM_FN(Wofch3p)
+
+struct BurnDriver BurnDrvCpsCaptcommv4 = {
+	"captcommv4", "captcomm", NULL, NULL, "1991",
+	"Captain Commando (911202 World, 1 vs 4 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 4, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Captcommv4RomInfo, Captcommv4RomName, NULL, NULL, NULL, NULL, CaptcommInputInfo, CaptcommDIPInfo,
+	Cps1RasterInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsFfgtj4v2 = {
+	"ffgtj4v2", "ffight", NULL, NULL, "1989",
+	"Final Fight (900613 Japan, 1 vs 2 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Ffgtj4v2RomInfo, Ffgtj4v2RomName, NULL, NULL, NULL, NULL, FfightInputInfo, FfightDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsFfgtj2sp = {
+	"ffgtj2sp", "ffight", NULL, NULL, "1989",
+	"Final Fight (Super Plus Hack, 900305 Japan)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Ffgtj2spRomInfo, Ffgtj2spRomName, NULL, NULL, NULL, NULL, FfightInputInfo, FfightDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsKnightj3 = {
+	"knightj3", "knights", NULL, NULL, "1991",
+	"Knights of the Round (911127 Japan, 1 vs 3 Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 3, HARDWARE_CAPCOM_CPS1, GBF_SCRFIGHT, 0,
+	NULL, Knightj3RomInfo, Knightj3RomName, NULL, NULL, NULL, NULL, KnightsInputInfo, KnightsDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsSf2jhpp = {
+	"sf2jhpp", "sf2", NULL, NULL, "1991",
+	"Street Fighter II - The World Warrior (910522 Japan, Plus Plus Hack)\0", NULL, "Capcom", "CPS1",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS1, GBF_VSFIGHT, FBF_SF,
+	NULL, Sf2jhppRomInfo, Sf2jhppRomName, NULL, NULL, NULL, NULL, Sf2InputInfo, Sf2jDIPInfo,
+	DrvInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsWofj103 = {
+	"wofj103", "wof", NULL, NULL, "1992",
+	"Tenchi wo Kurau II - Counter Attack of Mei Sisters (921031 Japan, Hack)\0", NULL, "Capcom", "CPS1 / QSound",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 3, HARDWARE_CAPCOM_CPS1_QSOUND, GBF_SCRFIGHT, 0,
+	NULL, Wofj103RomInfo, Wofj103RomName, NULL, NULL, NULL, NULL, WofInputInfo, WofDIPInfo,
+	TwelveMhzInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCpsWofch3p = {
+	"wofch3p", "wofch", NULL, NULL, "1992",
+	"Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer 3P Ura Mode Hack, 921031 Japan)\0", NULL, "Capcom", "CPS Changer 3P Hack",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 3, HARDWARE_CAPCOM_CPSCHANGER, GBF_SCRFIGHT, 0,
+	NULL, Wofch3pRomInfo, Wofch3pRomName, NULL, NULL, NULL, NULL, WofchpInputInfo, NULL,
+	WofchInit, DrvExit, Cps1Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
 #undef CPS1_68K_PROGRAM_BYTESWAP
 #undef CPS1_68K_PROGRAM_NO_BYTESWAP
 #undef CPS1_Z80_PROGRAM
diff --git a/src/burn/drv/capcom/d_cps2.cpp b/src/burn/drv/capcom/d_cps2.cpp
index ea462cebe..1d85cdc90 100644
--- a/src/burn/drv/capcom/d_cps2.cpp
+++ b/src/burn/drv/capcom/d_cps2.cpp
@@ -13924,3 +13924,529 @@ struct BurnDriver BurnDrvCpsGigaman2 = {
 	Gigaman2Init, Gigaman2Exit, Cps2Frame, CpsRedraw, Gigaman2Scan,
 	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
 };
+
+//============================================================
+//  Add Hack Roms
+//============================================================
+
+static struct BurnRomInfo Ddsomav4RomDesc[] = {
+	{ "dd2a_v4.03g",   0x080000, 0xe28c61f2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2a_v4.04g",   0x080000, 0x145efa6f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.05g",       0x080000, 0x5eb1991c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.06g",       0x080000, 0xc26b5e55, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.07",        0x080000, 0x909a0b8b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.08",        0x080000, 0xe53c4d01, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.09",        0x080000, 0x5f86279f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "dd2.10",        0x080000, 0xad954c26, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "dd2.13m",       0x400000, 0xa46b4e6e, CPS2_GFX | BRF_GRA },
+	{ "dd2.15m",       0x400000, 0xd5fc50fc, CPS2_GFX | BRF_GRA },
+	{ "dd2.17m",       0x400000, 0x837c0867, CPS2_GFX | BRF_GRA },
+	{ "dd2.19m",       0x400000, 0xbb0ec21c, CPS2_GFX | BRF_GRA },
+	{ "dd2.14m",       0x200000, 0x6d824ce2, CPS2_GFX | BRF_GRA },
+	{ "dd2.16m",       0x200000, 0x79682ae5, CPS2_GFX | BRF_GRA },
+	{ "dd2.18m",       0x200000, 0xacddd149, CPS2_GFX | BRF_GRA },
+	{ "dd2.20m",       0x200000, 0x117fb0c0, CPS2_GFX | BRF_GRA },
+
+	{ "dd2.01",        0x020000, 0x99d657e5, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "dd2.02",        0x020000, 0x117a3824, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "dd2.11m",       0x200000, 0x98d0c325, CPS2_QSND | BRF_SND },
+	{ "dd2.12m",       0x200000, 0x5ea2e7fa, CPS2_QSND | BRF_SND },
+	
+	{ "ddsoma.key",    0x000014, 0x8c3cc560, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ddsomav4)
+STD_ROM_FN(Ddsomav4)
+
+struct BurnDriver BurnDrvCpsDdsomav4 = {
+	"ddsomav4", "ddsom", NULL, NULL, "1996",
+	"Dungeons & Dragons - shadow over mystara (960619 Asia, 1 vs 4 Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 4, HARDWARE_CAPCOM_CPS2, GBF_SCRFIGHT, 0,
+	NULL, Ddsomav4RomInfo, Ddsomav4RomName, NULL, NULL, NULL, NULL, DdsomInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Ssf2xjhRomDesc[] = {
+	{ "sfxjh.03c",     0x080000, 0x62b59bf0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.04a",      0x080000, 0xaf7767b4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.05",       0x080000, 0xf4ff18f5, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.06b",      0x080000, 0x413477c2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.07a",      0x080000, 0xa18b3d83, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxj.08",       0x080000, 0x2de76f10, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfx.09",        0x080000, 0x642fae3f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfx.13m",       0x200000, 0xcf94d275, CPS2_GFX | BRF_GRA },
+	{ "sfx.15m",       0x200000, 0x5eb703af, CPS2_GFX | BRF_GRA },
+	{ "sfx.17m",       0x200000, 0xffa60e0f, CPS2_GFX | BRF_GRA },
+	{ "sfx.19m",       0x200000, 0x34e825c5, CPS2_GFX | BRF_GRA },
+	{ "sfx.14m",       0x100000, 0xb7cc32e7, CPS2_GFX | BRF_GRA },
+	{ "sfx.16m",       0x100000, 0x8376ad18, CPS2_GFX | BRF_GRA },
+	{ "sfx.18m",       0x100000, 0xf5b1b336, CPS2_GFX | BRF_GRA },
+	{ "sfx.20m",       0x100000, 0x459d5c6b, CPS2_GFX | BRF_GRA },
+	{ "sfx.21m",       0x100000, 0xe32854af, CPS2_GFX | BRF_GRA },
+	{ "sfx.23m",       0x100000, 0x760f2927, CPS2_GFX | BRF_GRA },
+	{ "sfx.25m",       0x100000, 0x1ee90208, CPS2_GFX | BRF_GRA },
+	{ "sfx.27m",       0x100000, 0xf814400f, CPS2_GFX | BRF_GRA },
+
+	{ "sfx.01",        0x020000, 0xb47b8835, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfx.02",        0x020000, 0x0022633f, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfx.11m",       0x200000, 0x9bdbd476, CPS2_QSND | BRF_SND },
+	{ "sfx.12m",       0x200000, 0xa05e3aab, CPS2_QSND | BRF_SND },
+
+	{ "ssf2xj.key",    0x000014, 0x160d1424, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ssf2xjh)
+STD_ROM_FN(Ssf2xjh)
+
+struct BurnDriver BurnDrvCpsSsf2xjh = {
+	"ssf2xjh", "ssf2t", NULL, NULL, "1994",
+	"Super Street Fighter II X - grand master challenge (940223 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Ssf2xjhRomInfo, Ssf2xjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Ssf2xjr1dtRomDesc[] = {
+	{ "sfxjdt.03c",    0x080000, 0x1ba9faa0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjdt.04a",    0x080000, 0xcb0c0151, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.05",      0x080000, 0xc63358d0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.06a",     0x080000, 0xccb29808, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.07",      0x080000, 0x61f94982, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxjd.08",      0x080000, 0xd399c36c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfxd.09",       0x080000, 0x0b3a6196, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfx.13m",       0x200000, 0xcf94d275, CPS2_GFX | BRF_GRA },
+	{ "sfx.15m",       0x200000, 0x5eb703af, CPS2_GFX | BRF_GRA },
+	{ "sfx.17m",       0x200000, 0xffa60e0f, CPS2_GFX | BRF_GRA },
+	{ "sfx.19m",       0x200000, 0x34e825c5, CPS2_GFX | BRF_GRA },
+	{ "sfx.14m",       0x100000, 0xb7cc32e7, CPS2_GFX | BRF_GRA },
+	{ "sfx.16m",       0x100000, 0x8376ad18, CPS2_GFX | BRF_GRA },
+	{ "sfx.18m",       0x100000, 0xf5b1b336, CPS2_GFX | BRF_GRA },
+	{ "sfx.20m",       0x100000, 0x459d5c6b, CPS2_GFX | BRF_GRA },
+	{ "sfx.21m",       0x100000, 0xe32854af, CPS2_GFX | BRF_GRA },
+	{ "sfx.23m",       0x100000, 0x760f2927, CPS2_GFX | BRF_GRA },
+	{ "sfx.25m",       0x100000, 0x1ee90208, CPS2_GFX | BRF_GRA },
+	{ "sfx.27m",       0x100000, 0xf814400f, CPS2_GFX | BRF_GRA },
+
+	{ "sfx.01",        0x020000, 0xb47b8835, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfx.02",        0x020000, 0x0022633f, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfx.11m",       0x200000, 0x9bdbd476, CPS2_QSND | BRF_SND },
+	{ "sfx.12m",       0x200000, 0xa05e3aab, CPS2_QSND | BRF_SND },
+
+	{ "phoenix.key",   0x000014, 0x2cf772b0, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Ssf2xjr1dt)
+STD_ROM_FN(Ssf2xjr1dt)
+
+struct BurnDriver BurnDrvCpsSsf2xjr1dt = {
+	"ssf2xjr1dt", "ssf2t", NULL, NULL, "1994",
+	"Super Street Fighter II X - grand master challenge (Phoenix Edition, Training Hack)\0", NULL, "bootleg", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Ssf2xjr1dtRomInfo, Ssf2xjr1dtRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tPhoenixInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo VampjhRomDesc[] = {
+	{ "vamjh.03a",     0x080000, 0x55c1be82, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamjh.04b",     0x080000, 0x9c12017e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.05a",      0x080000, 0x6c497e92, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.06a",      0x080000, 0xf1bbecb6, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.07a",      0x080000, 0x1067ad84, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.08a",      0x080000, 0x4b89f41f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.09a",      0x080000, 0xfc0a4aac, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vamj.10a",      0x080000, 0x9270c26b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "vam.13m",       0x400000, 0xc51baf99, CPS2_GFX | BRF_GRA },
+	{ "vam.15m",       0x400000, 0x3ce83c77, CPS2_GFX | BRF_GRA },
+	{ "vam.17m",       0x400000, 0x4f2408e0, CPS2_GFX | BRF_GRA },
+	{ "vam.19m",       0x400000, 0x9ff60250, CPS2_GFX | BRF_GRA },
+	{ "vam.14m",       0x100000, 0xbd87243c, CPS2_GFX | BRF_GRA },
+	{ "vam.16m",       0x100000, 0xafec855f, CPS2_GFX | BRF_GRA },
+	{ "vam.18m",       0x100000, 0x3a033625, CPS2_GFX | BRF_GRA },
+	{ "vam.20m",       0x100000, 0x2bff6a89, CPS2_GFX | BRF_GRA },
+
+	{ "vam.01",        0x020000, 0x64b685d5, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "vam.02",        0x020000, 0xcf7c97c7, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "vam.11m",       0x200000, 0x4a39deb2, CPS2_QSND | BRF_SND },
+	{ "vam.12m",       0x200000, 0x1a3e5c03, CPS2_QSND | BRF_SND },
+
+	{ "vampj.key",     0x000014, 0x8418cc6f, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Vampjh)
+STD_ROM_FN(Vampjh)
+
+struct BurnDriver BurnDrvCpsVampjh = {
+	"vampjh", "dstlk", NULL, NULL, "1994",
+	"Vampire - the night warriors (940705 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_DSTLK,
+	NULL, VampjhRomInfo, VampjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Xmcotaj2hRomDesc[] = {
+	{ "xmnjh.03b",     0x080000, 0xbd2f0b84, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmnjh.04b",     0x080000, 0x5de40342, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.05",        0x080000, 0xc3ed62a2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.06",        0x080000, 0xf03c52e1, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.07",        0x080000, 0x325626b1, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.08",        0x080000, 0x7194ea10, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.09",        0x080000, 0xae946df3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "xmn.10",        0x080000, 0x32a6be1d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "xmn.13m",       0x400000, 0xbf4df073, CPS2_GFX | BRF_GRA },
+	{ "xmn.15m",       0x400000, 0x4d7e4cef, CPS2_GFX | BRF_GRA },
+	{ "xmn.17m",       0x400000, 0x513eea17, CPS2_GFX | BRF_GRA },
+	{ "xmn.19m",       0x400000, 0xd23897fc, CPS2_GFX | BRF_GRA },
+	{ "xmn.14m",       0x400000, 0x778237b7, CPS2_GFX | BRF_GRA },
+	{ "xmn.16m",       0x400000, 0x67b36948, CPS2_GFX | BRF_GRA },
+	{ "xmn.18m",       0x400000, 0x015a7c4c, CPS2_GFX | BRF_GRA },
+	{ "xmn.20m",       0x400000, 0x9dde2758, CPS2_GFX | BRF_GRA },
+
+	{ "xmn.01a",       0x020000, 0x40f479ea, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "xmn.02a",       0x020000, 0x39d9b5ad, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "xmn.11m",       0x200000, 0xc848a6bc, CPS2_QSND | BRF_SND },
+	{ "xmn.12m",       0x200000, 0x729c188f, CPS2_QSND | BRF_SND },
+
+	{ "xmcotaj.key",   0x000014, 0xd278b4ac, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Xmcotaj2h)
+STD_ROM_FN(Xmcotaj2h)
+
+struct BurnDriver BurnDrvCpsXmcotaj2h = {
+	"xmcotaj2h", "xmcota", NULL, NULL, "1994",
+	"X-Men - children of the atom (941219 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, 0,
+	NULL, Xmcotaj2hRomInfo, Xmcotaj2hRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	XmcotaInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo SfzjhRomDesc[] = {
+	{ "sfzjh.03c",     0x080000, 0x6b0366bf, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfz.04b",       0x080000, 0x8b73b0e5, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfz.05a",       0x080000, 0x0810544d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sfzh.06",       0x080000, 0xe7bb5d20, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sfz.14m",       0x200000, 0x90fefdb3, CPS2_GFX | BRF_GRA },
+	{ "sfz.16m",       0x200000, 0x5354c948, CPS2_GFX | BRF_GRA },
+	{ "sfz.18m",       0x200000, 0x41a1e790, CPS2_GFX | BRF_GRA },
+	{ "sfz.20m",       0x200000, 0xa549df98, CPS2_GFX | BRF_GRA },
+
+	{ "sfz.01",        0x020000, 0xffffec7d, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sfz.02",        0x020000, 0x45f46a08, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sfz.11m",       0x200000, 0xc4b093cd, CPS2_QSND | BRF_SND },
+	{ "sfz.12m",       0x200000, 0x8bdbc4b4, CPS2_QSND | BRF_SND },
+
+	{ "sfzj.key",      0x000014, 0x355d85b8, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfzjh)
+STD_ROM_FN(Sfzjh)
+
+struct BurnDriver BurnDrvCpsSfzjh = {
+	"sfzjh", "sfa", NULL, NULL, "1995",
+	"Street Fighter Zero (950727 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, SfzjhRomInfo, SfzjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo MshjhRomDesc[] = {
+	{ "mshj.03g",      0x080000, 0x261f4091, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mshjh.04g",     0x080000, 0xd66257ab, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.05a",       0x080000, 0xf37539e6, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.06b",       0x080000, 0x803e3fa4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.07a",       0x080000, 0xc45f8e27, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.08a",       0x080000, 0x9ca6f12c, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.09a",       0x080000, 0x82ec27af, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "msh.10b",       0x080000, 0x8d931196, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "msh.13m",       0x400000, 0x09d14566, CPS2_GFX | BRF_GRA },
+	{ "msh.15m",       0x400000, 0xee962057, CPS2_GFX | BRF_GRA },
+	{ "msh.17m",       0x400000, 0x604ece14, CPS2_GFX | BRF_GRA },
+	{ "msh.19m",       0x400000, 0x94a731e8, CPS2_GFX | BRF_GRA },
+	{ "msh.14m",       0x400000, 0x4197973e, CPS2_GFX | BRF_GRA },
+	{ "msh.16m",       0x400000, 0x438da4a0, CPS2_GFX | BRF_GRA },
+	{ "msh.18m",       0x400000, 0x4db92d94, CPS2_GFX | BRF_GRA },
+	{ "msh.20m",       0x400000, 0xa2b0c6c0, CPS2_GFX | BRF_GRA },
+
+	{ "msh.01",        0x020000, 0xc976e6f9, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "msh.02",        0x020000, 0xce67d0d9, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "msh.11m",       0x200000, 0x37ac6d30, CPS2_QSND | BRF_SND },
+	{ "msh.12m",       0x200000, 0xde092570, CPS2_QSND | BRF_SND },
+
+	{ "mshj.key",      0x000014, 0x888761ac, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Mshjh)
+STD_ROM_FN(Mshjh)
+
+struct BurnDriver BurnDrvCpsMshjh = {
+	"mshjh", "msh", NULL, NULL, "1995",
+	"Marvel Super Heroes (951117 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, 0,
+	NULL, MshjhRomInfo, MshjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz2jr1hRomDesc[] = {
+	{ "sz2jh.03a",     0x080000, 0x4afbba27, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2j.04a",      0x080000, 0xae4851a9, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.05a",       0x080000, 0x98e8e992, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.06",        0x080000, 0x5b1d49c0, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2j.07a",      0x080000, 0xd910b2a2, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz2.08",        0x080000, 0x0fe8585d, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sz2.13m",       0x400000, 0x4d1f1f22, CPS2_GFX | BRF_GRA },
+	{ "sz2.15m",       0x400000, 0x19cea680, CPS2_GFX | BRF_GRA },
+	{ "sz2.17m",       0x400000, 0xe01b4588, CPS2_GFX | BRF_GRA },
+	{ "sz2.19m",       0x400000, 0x0feeda64, CPS2_GFX | BRF_GRA },
+	{ "sz2.14m",       0x100000, 0x0560c6aa, CPS2_GFX | BRF_GRA },
+	{ "sz2.16m",       0x100000, 0xae940f87, CPS2_GFX | BRF_GRA },
+	{ "sz2.18m",       0x100000, 0x4bc3c8bc, CPS2_GFX | BRF_GRA },
+	{ "sz2.20m",       0x100000, 0x39e674c0, CPS2_GFX | BRF_GRA },
+
+	{ "sz2.01a",       0x020000, 0x1bc323cf, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sz2.02a",       0x020000, 0xba6a5013, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sz2.11m",       0x200000, 0xaa47a601, CPS2_QSND | BRF_SND },
+	{ "sz2.12m",       0x200000, 0x2237bc53, CPS2_QSND | BRF_SND },
+
+	{ "sfz2j.key",     0x000014, 0x455bd098, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz2jr1h)
+STD_ROM_FN(Sfz2jr1h)
+
+struct BurnDriver BurnDrvCpsSfz2jr1h = {
+	"sfz2jr1h", "sfa2", NULL, NULL, "1996",
+	"Street Fighter Zero 2 (960227 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz2jr1hRomInfo, Sfz2jr1hRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Sfa2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz2aljhRomDesc[] = {
+	{ "szajh.03a",     0x080000, 0xa4ad2f9e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.04a",      0x080000, 0xe7ca87c7, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.05a",      0x080000, 0xc88ebf88, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.06a",      0x080000, 0x35ed5b7a, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.07a",      0x080000, 0x975dcb3e, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "szaj.08a",      0x080000, 0xdc73f2d7, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sza.13m",       0x400000, 0x4d1f1f22, CPS2_GFX | BRF_GRA },
+	{ "sza.15m",       0x400000, 0x19cea680, CPS2_GFX | BRF_GRA },
+	{ "sza.17m",       0x400000, 0xe01b4588, CPS2_GFX | BRF_GRA },
+	{ "sza.19m",       0x400000, 0x0feeda64, CPS2_GFX | BRF_GRA },
+	{ "sza.14m",       0x100000, 0x0560c6aa, CPS2_GFX | BRF_GRA },
+	{ "sza.16m",       0x100000, 0xae940f87, CPS2_GFX | BRF_GRA },
+	{ "sza.18m",       0x100000, 0x4bc3c8bc, CPS2_GFX | BRF_GRA },
+	{ "sza.20m",       0x100000, 0x39e674c0, CPS2_GFX | BRF_GRA },
+
+	{ "sza.01",        0x020000, 0x1bc323cf, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sza.02",        0x020000, 0xba6a5013, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sza.11m",       0x200000, 0xaa47a601, CPS2_QSND | BRF_SND },
+	{ "sza.12m",       0x200000, 0x2237bc53, CPS2_QSND | BRF_SND },
+
+	{ "sfz2alj.key",   0x000014, 0x4c42320f, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz2aljh)
+STD_ROM_FN(Sfz2aljh)
+
+struct BurnDriver BurnDrvCpsSfz2aljh = {
+	"sfz2aljh", "sfz2al", NULL, NULL, "1996",
+	"Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz2aljhRomInfo, Sfz2aljhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Sfa2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo VsavdtRomDesc[] = {
+	{ "vm3edt.03d",    0x080000, 0xb984f547, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3edt.04d",    0x080000, 0xdbc29f2b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.05a",       0x080000, 0x4118e00f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.06a",       0x080000, 0x2f4fd3a9, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.07b",       0x080000, 0xcbda91b8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.08a",       0x080000, 0x6ca47259, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.09b",       0x080000, 0xf4a339e3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "vm3.10b",       0x080000, 0xfffbb5b8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "vm3.13m",       0x400000, 0xfd8a11eb, CPS2_GFX | BRF_GRA },
+	{ "vm3.15m",       0x400000, 0xdd1e7d4e, CPS2_GFX | BRF_GRA },
+	{ "vm3.17m",       0x400000, 0x6b89445e, CPS2_GFX | BRF_GRA },
+	{ "vm3.19m",       0x400000, 0x3830fdc7, CPS2_GFX | BRF_GRA },
+	{ "vm3.14m",       0x400000, 0xc1a28e6c, CPS2_GFX | BRF_GRA },
+	{ "vm3.16m",       0x400000, 0x194a7304, CPS2_GFX | BRF_GRA },
+	{ "vm3.18m",       0x400000, 0xdf9a9f47, CPS2_GFX | BRF_GRA },
+	{ "vm3.20m",       0x400000, 0xc22fc3d9, CPS2_GFX | BRF_GRA },
+
+	{ "vm3.01",        0x020000, 0xf778769b, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "vm3.02",        0x020000, 0xcc09faa1, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "vm3.11m",       0x400000, 0xe80e956e, CPS2_QSND | BRF_SND },
+	{ "vm3.12m",       0x400000, 0x9cd71557, CPS2_QSND | BRF_SND },
+
+	{ "phoenix.key",   0x000014, 0x2cf772b0, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Vsavdt)
+STD_ROM_FN(Vsavdt)
+
+struct BurnDriver BurnDrvCpsVsavdt = {
+	"vsavdt", "vsav", NULL, NULL, "1997",
+	"Vampire Savior - the lord of vampire (Phoenix Edition, Training Hack)\0", NULL, "bootleg", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_DSTLK,
+	NULL, VsavdtRomInfo, VsavdtRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	PhoenixInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo MshvsfjhRomDesc[] = {
+	{ "mvsjh.03i",     0x080000, 0x54ecd389, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvsjh.04i",     0x080000, 0x6031012f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.05h",       0x080000, 0x77870dc3, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.06a",       0x080000, 0x959f3030, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.07b",       0x080000, 0x7f915bdb, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.08a",       0x080000, 0xc2813884, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.09b",       0x080000, 0x3ba08818, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "mvs.10b",       0x080000, 0xcf0dba98, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "mvs.13m",       0x400000, 0x29b05fd9, CPS2_GFX | BRF_GRA },
+	{ "mvs.15m",       0x400000, 0xfaddccf1, CPS2_GFX | BRF_GRA },
+	{ "mvs.17m",       0x400000, 0x97aaf4c7, CPS2_GFX | BRF_GRA },
+	{ "mvs.19m",       0x400000, 0xcb70e915, CPS2_GFX | BRF_GRA },
+	{ "mvs.14m",       0x400000, 0xb3b1972d, CPS2_GFX | BRF_GRA },
+	{ "mvs.16m",       0x400000, 0x08aadb5d, CPS2_GFX | BRF_GRA },
+	{ "mvs.18m",       0x400000, 0xc1228b35, CPS2_GFX | BRF_GRA },
+	{ "mvs.20m",       0x400000, 0x366cc6c2, CPS2_GFX | BRF_GRA },
+
+	{ "mvs.01",        0x020000, 0x68252324, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "mvs.02",        0x020000, 0xb34e773d, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "mvs.11m",       0x400000, 0x86219770, CPS2_QSND | BRF_SND },
+	{ "mvs.12m",       0x400000, 0xf2fd7f68, CPS2_QSND | BRF_SND },
+
+	{ "mshvsfj.key",   0x000014, 0x565eeebb, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Mshvsfjh)
+STD_ROM_FN(Mshvsfjh)
+
+struct BurnDriver BurnDrvCpsMshvsfjh = {
+	"mshvsfjh", "mshvsf", NULL, NULL, "1997",
+	"Marvel Super Heroes vs Street Fighter (970707 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, MshvsfjhRomInfo, MshvsfjhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Sfz3jhRomDesc[] = {
+	{ "sz3jh.03c",     0x080000, 0xd7eca311, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3jh.04c",     0x080000, 0xee836561, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.05c",       0x080000, 0x57fd0a40, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.06c",       0x080000, 0xf6305f8b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.07c",       0x080000, 0x6eab0f6f, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.08c",       0x080000, 0x910c4a3b, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.09c",       0x080000, 0xb29e5199, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "sz3.10b",       0x080000, 0xdeb2ff52, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "sz3.13m",       0x400000, 0x0f7a60d9, CPS2_GFX | BRF_GRA },
+	{ "sz3.15m",       0x400000, 0x8e933741, CPS2_GFX | BRF_GRA },
+	{ "sz3.17m",       0x400000, 0xd6e98147, CPS2_GFX | BRF_GRA },
+	{ "sz3.19m",       0x400000, 0xf31a728a, CPS2_GFX | BRF_GRA },
+	{ "sz3.14m",       0x400000, 0x5ff98297, CPS2_GFX | BRF_GRA },
+	{ "sz3.16m",       0x400000, 0x52b5bdee, CPS2_GFX | BRF_GRA },
+	{ "sz3.18m",       0x400000, 0x40631ed5, CPS2_GFX | BRF_GRA },
+	{ "sz3.20m",       0x400000, 0x763409b4, CPS2_GFX | BRF_GRA },
+
+	{ "sz3.01",        0x020000, 0xde810084, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "sz3.02",        0x020000, 0x72445dc4, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "sz3.11m",       0x400000, 0x1c89eed1, CPS2_QSND | BRF_SND },
+	{ "sz3.12m",       0x400000, 0xf392b13a, CPS2_QSND | BRF_SND },
+
+	{ "sfz3j.key",     0x000014, 0xd30cca8d, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Sfz3jh)
+STD_ROM_FN(Sfz3jh)
+
+struct BurnDriver BurnDrvCpsSfz3jh = {
+	"sfz3jh", "sfa3", NULL, NULL, "1998",
+	"Street Fighter Zero 3 (980904 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Sfz3jhRomInfo, Sfz3jhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Cps2Init, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
+
+static struct BurnRomInfo Hsf2jhRomDesc[] = {
+	{ "hs2jh.03",      0x080000, 0xbdeebd26, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2jh.04",      0x080000, 0xc46d367a, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.05",        0x080000, 0xdde34a35, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.06",        0x080000, 0xf4e56dda, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.07",        0x080000, 0xee4420fc, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.08",        0x080000, 0xc9441533, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.09",        0x080000, 0x3fc638a8, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+	{ "hs2.10",        0x080000, 0x20d0f9e4, CPS2_PRG_68K | BRF_ESS | BRF_PRG },
+
+	{ "hs2.13m" ,      0x800000, 0xa6ecab17, CPS2_GFX | BRF_GRA },
+	{ "hs2.15m",       0x800000, 0x10a0ae4d, CPS2_GFX | BRF_GRA },
+	{ "hs2.17m",       0x800000, 0xadfa7726, CPS2_GFX | BRF_GRA },
+	{ "hs2.19m",       0x800000, 0xbb3ae322, CPS2_GFX | BRF_GRA },
+
+	{ "hs2.01",        0x020000, 0xc1a13786, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+	{ "hs2.02",        0x020000, 0x2d8794aa, CPS2_PRG_Z80 | BRF_ESS | BRF_PRG },
+
+	{ "hs2.11m",       0x800000, 0x0e15c359, CPS2_QSND | BRF_SND },
+
+	{ "hsf2j.key",     0x000014, 0x19455a93, CPS2_ENCRYPTION_KEY },
+};
+
+STD_ROM_PICK(Hsf2jh)
+STD_ROM_FN(Hsf2jh)
+
+struct BurnDriver BurnDrvCpsHsf2jh = {
+	"hsf2jh", "hsf2", NULL, NULL, "2004",
+	"Hyper Street Fighter II: The Anniversary Edition (031222 Japan, Hidden Hack)\0", NULL, "Capcom", "CPS2",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_HACK, 2, HARDWARE_CAPCOM_CPS2, GBF_VSFIGHT, FBF_SF,
+	NULL, Hsf2jhRomInfo, Hsf2jhRomName, NULL, NULL, NULL, NULL, Cps2FightingInputInfo, NULL,
+	Ssf2tInit, DrvExit, Cps2Frame, CpsRedraw, CpsAreaScan,
+	&CpsRecalcPal, 0x1000, 384, 224, 4, 3
+};
diff --git a/src/burn/drv/cave/d_pwrinst2.cpp b/src/burn/drv/cave/d_pwrinst2.cpp
index 37e7c5ec7..29263c55e 100644
--- a/src/burn/drv/cave/d_pwrinst2.cpp
+++ b/src/burn/drv/cave/d_pwrinst2.cpp
@@ -1,1174 +1,1174 @@
-// pwrinst2
-#include "cave.h"
-#include "msm6295.h"
-#include "burn_ym2203.h"
-#include "nmk112.h"
-#include "bitswap.h"
-
-#define CAVE_VBLANK_LINES 12
-
-static UINT8 DrvJoy1[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
-static UINT8 DrvJoy2[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
-static UINT16 DrvInput[2] = {0x0000, 0x0000};
-
-static UINT8 *Mem = NULL, *MemEnd = NULL;
-static UINT8 *RamStart, *RamEnd;
-static UINT8 *Rom01, *RomZ80;
-static UINT8 *Ram01, *RamZ80;
-
-static UINT8 DrvReset = 0;
-static UINT8 bDrawScreen;
-static bool bVBlank;
-
-static INT8 nVideoIRQ;
-static INT8 nSoundIRQ;
-static INT8 nUnknownIRQ;
-
-static INT8 nIRQPending;
-
-static INT32 nCyclesTotal[2];
-static INT32 nCyclesDone[2];
-
-static INT32 SoundLatch;
-static INT32 SoundLatchReply[48];
-static INT32 SoundLatchStatus;
-
-static INT32 SoundLatchReplyIndex;
-static INT32 SoundLatchReplyMax;
-
-static UINT8 DrvZ80Bank;
-
-static struct BurnInputInfo pwrinst2InputList[] = {
-	{"P1 Coin",		BIT_DIGITAL,	DrvJoy1 + 8,	"p1 coin"},
-	{"P1 Start",	BIT_DIGITAL,	DrvJoy1 + 7,	"p1 start"},
-
-	{"P1 Up",		BIT_DIGITAL,	DrvJoy1 + 0, 	"p1 up"},
-	{"P1 Down",		BIT_DIGITAL,	DrvJoy1 + 1, 	"p1 down"},
-	{"P1 Left",		BIT_DIGITAL,	DrvJoy1 + 2, 	"p1 left"},
-	{"P1 Right",	BIT_DIGITAL,	DrvJoy1 + 3, 	"p1 right"},
-	{"P1 Button 1",	BIT_DIGITAL,	DrvJoy1 + 4,	"p1 fire 1"},
-	{"P1 Button 2",	BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 2"},
-	{"P1 Button 3",	BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 3"},
-	{"P1 Button 4",	BIT_DIGITAL,	DrvJoy1 + 10,	"p1 fire 4"},
-
-	{"P2 Coin",		BIT_DIGITAL,	DrvJoy2 + 8,	"p2 coin"},
-	{"P2 Start",	BIT_DIGITAL,	DrvJoy2 + 7,	"p2 start"},
-
-	{"P2 Up",		BIT_DIGITAL,	DrvJoy2 + 0, 	"p2 up"},
-	{"P2 Down",		BIT_DIGITAL,	DrvJoy2 + 1, 	"p2 down"},
-	{"P2 Left",		BIT_DIGITAL,	DrvJoy2 + 2, 	"p2 left"},
-	{"P2 Right",	BIT_DIGITAL,	DrvJoy2 + 3, 	"p2 right"},
-	{"P2 Button 1",	BIT_DIGITAL,	DrvJoy2 + 4,	"p2 fire 1"},
-	{"P2 Button 2",	BIT_DIGITAL,	DrvJoy2 + 5,	"p2 fire 2"},
-	{"P2 Button 3",	BIT_DIGITAL,	DrvJoy2 + 6,	"p2 fire 3"},
-	{"P2 Button 4",	BIT_DIGITAL,	DrvJoy2 + 10,	"p2 fire 4"},
-
-	{"Reset",		BIT_DIGITAL,	&DrvReset,		"reset"},
-	{"Diagnostics",	BIT_DIGITAL,	DrvJoy1 + 9,	"diag"},
-	{"Service",		BIT_DIGITAL,	DrvJoy2 + 9,	"service"},
-};
-
-STDINPUTINFO(pwrinst2)
-
-static void UpdateIRQStatus()
-{
-	nIRQPending = (nVideoIRQ == 0 || nSoundIRQ == 0 || nUnknownIRQ == 0);
-	SekSetIRQLine(1, nIRQPending ? CPU_IRQSTATUS_ACK : CPU_IRQSTATUS_NONE);
-}
-
-UINT8 __fastcall pwrinst2ReadByte(UINT32 sekAddress)
-{
-	if (sekAddress >= 0x600000 && sekAddress <= 0x6fffff) return 0;
-	
-	switch (sekAddress) {
-		default: {
- 			bprintf(PRINT_NORMAL, _T("Attempt to read byte value of location %x\n"), sekAddress);
-		}
-	}
-	return 0;
-}
-
-void __fastcall pwrinst2WriteByte(UINT32 sekAddress, UINT8 byteValue)
-{
-	switch (sekAddress) {
-		default: {
-			bprintf(PRINT_NORMAL, _T("Attempt to write byte value %x to location %x\n"), byteValue, sekAddress);
-
-		}
-	}
-}
-
-UINT16 __fastcall pwrinst2ReadWord(UINT32 sekAddress)
-{
-	if (sekAddress >= 0x600000 && sekAddress <= 0x6fffff) return 0;
-	
-	switch (sekAddress) {
-		case 0x500000:
-			return DrvInput[0] ^ 0xFFFF;
-		case 0x500002:
-			return (DrvInput[1] ^ 0xF7FF) | (EEPROMRead() << 11);
-			
-		case 0xa80000:
-		case 0xa80002: {
-			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
-			return nRet;
-		}
-
-		case 0xa80004: {
-			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
-			nVideoIRQ = 1;
-			UpdateIRQStatus();
-			return nRet;
-		}
-		case 0xa80006: {
-			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
-			nUnknownIRQ = 1;
-			UpdateIRQStatus();
-			return nRet;
-		}
-		
-		case 0xd80000: {
-			if (SoundLatchReplyIndex > SoundLatchReplyMax) {
-				SoundLatchReplyIndex = 0;
-				SoundLatchReplyMax = -1;
-				return 0;
-			}
-			return SoundLatchReply[SoundLatchReplyIndex++];
-		}
-		
-		case 0xe80000: {
-			return ~8 + ((EEPROMRead() & 1) ? 8 : 0);
-		}
-			
-		default: {
- 			bprintf(PRINT_NORMAL, _T("Attempt to read word value of location %x\n"), sekAddress);
-		}
-	}
-	return 0;
-}
-
-void __fastcall pwrinst2WriteWord(UINT32 sekAddress, UINT16 wordValue)
-{
-	if (sekAddress >= 0xa8000a && sekAddress <= 0xa8007c) return;
-	if (sekAddress >= 0xa80004 && sekAddress <= 0xa80006) return;
-	
-	switch (sekAddress) {
-		case 0x700000:
-			wordValue >>= 8;
-			EEPROMWrite(wordValue & 0x04, wordValue & 0x02, wordValue & 0x08);
-			break;
-			
-		case 0xa80000:
-			nCaveXOffset = wordValue;
-			return;
-		case 0xa80002:
-			nCaveYOffset = wordValue;
-			return;
-			
-		case 0xa80008:
-			CaveSpriteBuffer();
-			nCaveSpriteBank = wordValue;
-			return;
-		
-		case 0xb00000:
-			CaveTileReg[2][0] = wordValue;
-			break;
-		case 0xb00002:
-			CaveTileReg[2][1] = wordValue;
-			break;
-		case 0xb00004: {
-			switch (wordValue & 0x0f) {
-				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
-				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
-				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
-				default:
-				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
-			}
-			CaveTileReg[2][2] = wordValue;
-			break;
-		}
-		
-		case 0xb80000:
-			CaveTileReg[0][0] = wordValue;
-			break;
-		case 0xb80002:
-			CaveTileReg[0][1] = wordValue;
-			break;
-		case 0xb80004: {
-			switch (wordValue & 0x0f) {
-				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
-				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
-				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
-				default:
-				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
-			}
-			CaveTileReg[0][2] = wordValue;
-			break;
-		}
-		
-		case 0xc00000:
-			CaveTileReg[1][0] = wordValue;
-			break;
-		case 0xc00002:
-			CaveTileReg[1][1] = wordValue;
-			break;
-		case 0xc00004: {
-			switch (wordValue & 0x0f) {
-				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
-				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
-				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
-				default:
-				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
-			}
-			CaveTileReg[1][2] = wordValue;
-			break;
-		}
-		
-		case 0xc80000:
-			CaveTileReg[3][0] = wordValue;
-			break;
-		case 0xc80002:
-			CaveTileReg[3][1] = wordValue;
-			break;
-		case 0xc80004: {
-			switch (wordValue & 0x0f) {
-				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
-				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
-				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
-				default:
-				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
-			}
-			CaveTileReg[3][2] = wordValue;
-			break;
-		}
-		
-		case 0xe00000: {
-			SoundLatch = wordValue;
-			SoundLatchStatus |= 0x0C;
-
-			ZetNmi();
-//			nCyclesDone[1] += ZetRun(0x0400);
-			return;
-		}
-			
-		default: {
-			bprintf(PRINT_NORMAL, _T("Attempt to write word value %x to location %x\n"), wordValue, sekAddress);
-
-		}
-	}
-}
-
-UINT8 __fastcall pwrinst2ZIn(UINT16 nAddress)
-{
-	nAddress &= 0xFF;
-
-	switch (nAddress) {
-		case 0x00: {
-			return MSM6295Read(0);
-		}
-		
-		case 0x08: {
-			return MSM6295Read(1);
-		}
-		
-		case 0x40: {
-			return BurnYM2203Read(0, 0);
-		}
-		
-		case 0x41: {
-			return BurnYM2203Read(0, 1);
-		}
-		
-		case 0x60: {
-			SoundLatchStatus |= 0x08;
-			return SoundLatch >> 8;
-		}
-			
-		case 0x70: {
-			SoundLatchStatus |= 0x04;
-			return SoundLatch & 0xFF;
-		}
-			
-		default: {
-			bprintf(PRINT_NORMAL, _T("Z80 Port Read %x\n"), nAddress);
-		}
-	}
-
-	return 0;
-}
-
-void __fastcall pwrinst2ZOut(UINT16 nAddress, UINT8 nValue)
-{
-	nAddress &= 0xFF;
-
-	switch (nAddress) {
-		case 0x00: {
-			MSM6295Write(0, nValue);
-			return;
-		}
-		
-		case 0x08: {
-			MSM6295Write(1, nValue);
-			return;
-		}
-		
-		case 0x10:
-		case 0x11:
-		case 0x12:
-		case 0x13:
-		case 0x14:
-		case 0x15:
-		case 0x16:
-		case 0x17: {
-			NMK112_okibank_write(nAddress & 0x07, nValue);
-			return;
-		}
-		
-		case 0x40: {
-			BurnYM2203Write(0, 0, nValue);
-			return;
-		}
-		
-		case 0x41: {
-			BurnYM2203Write(0, 1, nValue);
-			return;
-		}
-		
-		case 0x50: {
-			if (SoundLatchReplyIndex > SoundLatchReplyMax) {
-				SoundLatchReplyMax = -1;
-				SoundLatchReplyIndex = 0;
-			}
-			SoundLatchReplyMax++;
-			SoundLatchReply[SoundLatchReplyMax] = nValue;
-			return;
-		}
-		
-		case 0x51: {
-			//???
-			return;
-		}
-		
-		case 0x80: {
-			DrvZ80Bank = nValue & 0x07;
-			
-			ZetMapArea(0x8000, 0xbFFF, 0, RomZ80 + (DrvZ80Bank * 0x4000));
-			ZetMapArea(0x8000, 0xbFFF, 2, RomZ80 + (DrvZ80Bank * 0x4000));
-			return;
-		}
-		
-		default: {
-			bprintf(PRINT_NORMAL, _T("Z80 Port Write %x, %x\n"), nAddress, nValue);
-		}
-	}
-}
-
-UINT8 __fastcall pwrinst2ZRead(UINT16 a)
-{
-	switch (a) {
-		default: {
-			bprintf(PRINT_NORMAL, _T("Z80 Read => %04X\n"), a);
-		}
-	}
-
-	return 0;
-}
-
-void __fastcall pwrinst2ZWrite(UINT16 a, UINT8 d)
-{
-	switch (a) {
-		default: {
-			bprintf(PRINT_NORMAL, _T("Z80 Write => %04X, %02X\n"), a, d);
-		}
-	}
-}
-
-static INT32 DrvExit()
-{
-	EEPROMExit();
-
-	MSM6295Exit();
-
-	CaveTileExit();
-	CaveSpriteExit();
-	CavePalExit();
-
-	SekExit();				// Deallocate 68000s
-	ZetExit();
-	
-	BurnYM2203Exit();
-	
-	SoundLatch = 0;
-	DrvZ80Bank = 0;
-
-	BurnFree(Mem);
-
-	return 0;
-}
-
-static INT32 DrvDoReset()
-{
-	SekOpen(0);
-	SekReset();
-	SekClose();
-	
-	ZetOpen(0);
-	ZetReset();
-	ZetClose();
-	
-	BurnYM2203Reset();
-	MSM6295Reset();
-
-	EEPROMReset();
-
-	nVideoIRQ = 1;
-	nSoundIRQ = 1;
-	nUnknownIRQ = 1;
-
-	nIRQPending = 0;
-	
-	SoundLatch = 0;
-	SoundLatchStatus = 0x0C;
-
-	memset(SoundLatchReply, 0, sizeof(SoundLatchReply));
-	SoundLatchReplyIndex = 0;
-	SoundLatchReplyMax = -1;	
-	
-	DrvZ80Bank = 0;
-	NMK112Reset();
-
-	return 0;
-}
-
-inline static UINT32 CalcCol(UINT16 nColour)
-{
-	INT32 r, g, b;
-
-	r = (nColour & 0x03E0) >> 2;	// Red
-	r |= r >> 5;
-	g = (nColour & 0x7C00) >> 7;  	// Green
-	g |= g >> 5;
-	b = (nColour & 0x001F) << 3;	// Blue
-	b |= b >> 5;
-
-	return BurnHighCol(r, g, b, 0);
-}
-
-static void DrvCalcPalette()
-{
-	INT32 i;
-	UINT16* ps;
-	UINT32* pd;
-
-	for (i = 0, ps = (UINT16*)CavePalSrc, pd = CavePalette; i < 0x2800; i++, ps++, pd++) {
-		*pd = CalcCol(BURN_ENDIAN_SWAP_INT16(*ps));
-	}
-}
-
-static INT32 DrvDraw()
-{
-	CavePalUpdate4Bit(0, 128);
-	DrvCalcPalette();
-	
-	CaveClearScreen(CavePalette[0x7f00]);
-
-	if (bDrawScreen) {
-//		CaveGetBitmap();
-
-		CaveTileRender(1);					// Render tiles
-	}
-	
-	return 0;
-}
-
-inline static INT32 CheckSleep(INT32)
-{
-	return 0;
-}
-
-static INT32 DrvFrame()
-{
-	INT32 nCyclesVBlank;
-	INT32 nInterleave = 100;
-
-	INT32 nCyclesSegment;
-
-	if (DrvReset) {														// Reset machine
-		DrvDoReset();
-	}
-	
-	// Compile digital inputs
-	DrvInput[0] = 0x0000;  												// Player 1
-	DrvInput[1] = 0x0000;  												// Player 2
-	for (INT32 i = 0; i < 11; i++) {
-		DrvInput[0] |= (DrvJoy1[i] & 1) << i;
-		DrvInput[1] |= (DrvJoy2[i] & 1) << i;
-	}
-	CaveClearOpposites(&DrvInput[0]);
-	CaveClearOpposites(&DrvInput[1]);
-
-	SekNewFrame();
-	ZetNewFrame();
-	
-	SekOpen(0);
-	ZetOpen(0);
-	
-	nCyclesTotal[0] = (INT32)((INT64)16000000 * nBurnCPUSpeedAdjust / (0x0100 * CAVE_REFRESHRATE));
-	nCyclesTotal[1] = (INT32)(8000000 / CAVE_REFRESHRATE);
-	nCyclesDone[0] = nCyclesDone[1] = 0;
-
-	nCyclesVBlank = nCyclesTotal[0] - (INT32)((nCyclesTotal[0] * CAVE_VBLANK_LINES) / 271.5);
-	bVBlank = false;
-
-	for (INT32 i = 1; i <= nInterleave; i++) {
-    	INT32 nCurrentCPU = 0;
-		INT32 nNext = i * nCyclesTotal[nCurrentCPU] / nInterleave;
-
-		// Run 68000
-
-		// See if we need to trigger the VBlank interrupt
-		if (!bVBlank && nNext > nCyclesVBlank) {
-			if (nCyclesDone[nCurrentCPU] < nCyclesVBlank) {
-				nCyclesSegment = nCyclesVBlank - nCyclesDone[nCurrentCPU];
-				if (!CheckSleep(nCurrentCPU)) {							// See if this CPU is busywaiting
-					nCyclesDone[nCurrentCPU] += SekRun(nCyclesSegment);
-				} else {
-					nCyclesDone[nCurrentCPU] += SekIdle(nCyclesSegment);
-				}
-			}
-
-			if (pBurnDraw != NULL) {
-				DrvDraw();												// Draw screen if needed
-			}
-			
-//			CaveSpriteBuffer();
-
-			bVBlank = true;
-			nVideoIRQ = 0;
-			UpdateIRQStatus();
-		}
-
-		nCyclesSegment = nNext - nCyclesDone[nCurrentCPU];
-		if (!CheckSleep(nCurrentCPU)) {									// See if this CPU is busywaiting
-			nCyclesDone[nCurrentCPU] += SekRun(nCyclesSegment);
-		} else {
-			nCyclesDone[nCurrentCPU] += SekIdle(nCyclesSegment);
-		}
-		
-		BurnTimerUpdate(i * (nCyclesTotal[1] / nInterleave));
-	}
-	
-	SekClose();
-	
-	BurnTimerEndFrame(nCyclesTotal[1]);
-	
-	if (pBurnSoundOut) {
-		BurnYM2203Update(pBurnSoundOut, nBurnSoundLen);
-		MSM6295Render(pBurnSoundOut, nBurnSoundLen);
-	}
-	
-	ZetClose();
-
-	return 0;
-}
-
-// This routine is called first to determine how much memory is needed (MemEnd-(UINT8 *)0),
-// and then afterwards to set up all the pointers
-static INT32 MemIndex()
-{
-	UINT8* Next; Next = Mem;
-	Rom01			= Next; Next += 0x300000;		// 68K program
-	RomZ80			= Next; Next += 0x040000;
-	CaveSpriteROM	= Next; Next += 0x1000000 * 2;
-	CaveTileROM[0]	= Next; Next += 0x400000;		// Tile layer 0
-	CaveTileROM[1]	= Next; Next += 0x400000;		// Tile layer 1
-	CaveTileROM[2]	= Next; Next += 0x400000;		// Tile layer 2
-	CaveTileROM[3]	= Next; Next += 0x200000;		// Tile layer 3
-	MSM6295ROM		= Next; Next += 0x800000;
-	RamStart		= Next;
-	Ram01			= Next; Next += 0x028000;		// CPU #0 work RAM
-	RamZ80			= Next; Next += 0x002000;
-	CaveTileRAM[0]	= Next; Next += 0x008000;
-	CaveTileRAM[1]	= Next; Next += 0x008000;
-	CaveTileRAM[2]	= Next; Next += 0x008000;
-	CaveTileRAM[3]	= Next; Next += 0x008000;
-	CaveSpriteRAM	= Next; Next += 0x008000;
-	CavePalSrc		= Next; Next += 0x005000;		// palette
-	RamEnd			= Next;
-	MemEnd			= Next;
-
-	return 0;
-}
-
-static void NibbleSwap1(UINT8* pData, INT32 nLen)
-{
-	UINT8* pOrg = pData + nLen - 1;
-	UINT8* pDest = pData + ((nLen - 1) << 1);
-
-	for (INT32 i = 0; i < nLen; i++, pOrg--, pDest -= 2) {
-		pDest[0] = *pOrg & 15;
-		pDest[1] = *pOrg >> 4;
-	}
-
-	return;
-}
-
-static void NibbleSwap2(UINT8* pData, INT32 nLen)
-{
-	UINT8* pOrg = pData + nLen - 1;
-	UINT8* pDest = pData + ((nLen - 1) << 1);
-
-	for (INT32 i = 0; i < nLen; i++, pOrg--, pDest -= 2) {
-		pDest[1] = *pOrg & 15;
-		pDest[0] = *pOrg >> 4;
-	}
-
-	return;
-}
-
-static INT32 LoadRoms()
-{
-	BurnLoadRom(Rom01 + 0x000001, 0, 2);
-	BurnLoadRom(Rom01 + 0x000000, 1, 2);
-	BurnLoadRom(Rom01 + 0x100001, 2, 2);
-	BurnLoadRom(Rom01 + 0x100000, 3, 2);
-	
-	BurnLoadRom(RomZ80, 4, 1);
-
-	UINT8 *pTemp = (UINT8*)BurnMalloc(0xe00000);
-	BurnLoadRom(pTemp + 0x000000, 5, 1);
-	BurnLoadRom(pTemp + 0x200000, 6, 1);
-	BurnLoadRom(pTemp + 0x400000, 7, 1);
-	BurnLoadRom(pTemp + 0x600000, 8, 1);
-	BurnLoadRom(pTemp + 0x800000, 9, 1);
-	BurnLoadRom(pTemp + 0xa00000, 10, 1);
-	BurnLoadRom(pTemp + 0xc00000, 11, 1);
-	for (INT32 i = 0; i < 0xe00000; i++) {
-		INT32 j = BITSWAP24(i,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7, 2,4,6,1,5,3, 0);
-		if (((j & 6) == 0) || ((j & 6) == 6)) j ^= 6;
-		CaveSpriteROM[j ^ 7] = (pTemp[i] >> 4) | (pTemp[i] << 4);
-	}
-	BurnFree(pTemp);
-	NibbleSwap1(CaveSpriteROM, 0xe00000);
-
-	BurnLoadRom(CaveTileROM[0], 12, 1);
-	NibbleSwap2(CaveTileROM[0], 0x200000);
-	BurnLoadRom(CaveTileROM[1], 13, 1);
-	NibbleSwap2(CaveTileROM[1], 0x100000);
-	BurnLoadRom(CaveTileROM[2], 14, 1);
-	NibbleSwap2(CaveTileROM[2], 0x100000);
-	BurnLoadRom(CaveTileROM[3], 15, 1);
-	NibbleSwap2(CaveTileROM[3], 0x080000);
-
-	// Load MSM6295 ADPCM data
-	BurnLoadRom(MSM6295ROM + 0x000000, 16, 1);
-	BurnLoadRom(MSM6295ROM + 0x200000, 17, 1);
-	BurnLoadRom(MSM6295ROM + 0x400000, 18, 1);
-	BurnLoadRom(MSM6295ROM + 0x600000, 19, 1);
-
-	return 0;
-}
-
-static INT32 PlegendsLoadRoms()
-{
-	BurnLoadRom(Rom01 + 0x000001, 0, 2);
-	BurnLoadRom(Rom01 + 0x000000, 1, 2);
-	BurnLoadRom(Rom01 + 0x100001, 2, 2);
-	BurnLoadRom(Rom01 + 0x100000, 3, 2);
-	BurnLoadRom(Rom01 + 0x200001, 4, 2);
-	BurnLoadRom(Rom01 + 0x200000, 5, 2);
-	
-	BurnLoadRom(RomZ80, 6, 1);
-
-	UINT8 *pTemp = (UINT8*)BurnMalloc(0x1000000);
-	BurnLoadRom(pTemp + 0x000000, 7, 1);
-	BurnLoadRom(pTemp + 0x200000, 8, 1);
-	BurnLoadRom(pTemp + 0x400000, 9, 1);
-	BurnLoadRom(pTemp + 0x600000, 10, 1);
-	BurnLoadRom(pTemp + 0x800000, 11, 1);
-	BurnLoadRom(pTemp + 0xa00000, 12, 1);
-	BurnLoadRom(pTemp + 0xc00000, 13, 1);
-	BurnLoadRom(pTemp + 0xe00000, 14, 1);
-	for (INT32 i = 0; i < 0x1000000; i++) {
-		INT32 j = BITSWAP24(i,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7, 2,4,6,1,5,3, 0);
-		if (((j & 6) == 0) || ((j & 6) == 6)) j ^= 6;
-		CaveSpriteROM[j ^ 7] = (pTemp[i] >> 4) | (pTemp[i] << 4);
-	}
-	BurnFree(pTemp);
-	NibbleSwap1(CaveSpriteROM, 0x1000000);
-
-	BurnLoadRom(CaveTileROM[0], 15, 1);
-	NibbleSwap2(CaveTileROM[0], 0x200000);
-	BurnLoadRom(CaveTileROM[1], 16, 1);
-	NibbleSwap2(CaveTileROM[1], 0x200000);
-	BurnLoadRom(CaveTileROM[2], 17, 1);
-	NibbleSwap2(CaveTileROM[2], 0x200000);
-	BurnLoadRom(CaveTileROM[3], 18, 1);
-	NibbleSwap2(CaveTileROM[3], 0x080000);
-
-	// Load MSM6295 ADPCM data
-	BurnLoadRom(MSM6295ROM + 0x000000, 19, 1);
-	BurnLoadRom(MSM6295ROM + 0x200000, 20, 1);
-	BurnLoadRom(MSM6295ROM + 0x400000, 21, 1);
-	BurnLoadRom(MSM6295ROM + 0x600000, 22, 1);
-
-	return 0;
-}
-
-// Scan ram
-static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
-{
-	struct BurnArea ba;
-
-	if (pnMin) {						// Return minimum compatible version
-		*pnMin = 0x029719;
-	}
-
-	EEPROMScan(nAction, pnMin);			// Scan EEPROM
-
-	if (nAction & ACB_VOLATILE) {		// Scan volatile ram
-		memset(&ba, 0, sizeof(ba));
-		ba.Data		= RamStart;
-		ba.nLen		= RamEnd - RamStart;
-		ba.szName	= "RAM";
-		BurnAcb(&ba);
-
-		SekScan(nAction);
-		ZetScan(nAction);
-
-		BurnYM2203Scan(nAction, pnMin);
-		MSM6295Scan(nAction, pnMin);
-		NMK112_Scan(nAction);
-
-		SCAN_VAR(nVideoIRQ);
-		SCAN_VAR(nSoundIRQ);
-		SCAN_VAR(nUnknownIRQ);
-		SCAN_VAR(bVBlank);
-
-		CaveScanGraphics();
-
-		SCAN_VAR(DrvInput);
-		SCAN_VAR(SoundLatch);
-		SCAN_VAR(DrvZ80Bank);
-		
-		if (nAction & ACB_WRITE) {
-			ZetOpen(0);
-			ZetMapArea(0x8000, 0xbFFF, 0, RomZ80 + (DrvZ80Bank * 0x4000));
-			ZetMapArea(0x8000, 0xbFFF, 2, RomZ80 + (DrvZ80Bank * 0x4000));
-			ZetClose();
-
-			CaveRecalcPalette = 1;
-		}
-	}
-
-	return 0;
-}
-
-static void DrvFMIRQHandler(INT32, INT32 nStatus)
-{
-	if (nStatus & 1) {
-		ZetSetIRQLine(0xff, CPU_IRQSTATUS_ACK);
-	} else {
-		ZetSetIRQLine(0,    CPU_IRQSTATUS_NONE);
-	}
-}
-
-static INT32 drvZInit()
-{
-	ZetInit(0);
-	ZetOpen(0);
-	ZetSetInHandler(pwrinst2ZIn);
-	ZetSetOutHandler(pwrinst2ZOut);
-	ZetSetReadHandler(pwrinst2ZRead);
-	ZetSetWriteHandler(pwrinst2ZWrite);
-
-	// ROM bank 1
-	ZetMapArea    (0x0000, 0x7FFF, 0, RomZ80 + 0x0000); // Direct Read from ROM
-	ZetMapArea    (0x0000, 0x7FFF, 2, RomZ80 + 0x0000); // Direct Fetch from ROM
-	// ROM bank 2
-	ZetMapArea    (0x8000, 0xbFFF, 0, RomZ80 + 0x8000); // Direct Read from ROM
-	ZetMapArea    (0x8000, 0xbFFF, 2, RomZ80 + 0x8000); //
-	// RAM
-	ZetMapArea    (0xE000, 0xFFFF, 0, RamZ80);			// Direct Read from RAM
-	ZetMapArea    (0xE000, 0xFFFF, 1, RamZ80);			// Direct Write to RAM
-	ZetMapArea    (0xE000, 0xFFFF, 2, RamZ80);			//
-	ZetClose();
-
-	return 0;
-}
-
-static INT32 DrvInit()
-{
-	INT32 nLen;
-
-	BurnSetRefreshRate(CAVE_REFRESHRATE);
-
-	// Find out how much memory is needed
-	Mem = NULL;
-	MemIndex();
-	nLen = MemEnd - (UINT8 *)0;
-	if ((Mem = (UINT8 *)BurnMalloc(nLen)) == NULL) {
-		return 1;
-	}
-	memset(Mem, 0, nLen);										// blank all memory
-	MemIndex();													// Index the allocated memory
-
-	// Load the roms into memory
-	if (LoadRoms()) {
-		return 1;
-	}
-	
-	EEPROMInit(&eeprom_interface_93C46);
-
-	{
-		SekInit(0, 0x68000);													// Allocate 68000
-		SekOpen(0);
-
-		// Map 68000 memory:
-		SekMapMemory(Rom01,				0x000000, 0x1FFFFF, MAP_ROM);	// CPU 0 ROM
-		SekMapMemory(Ram01,				0x400000, 0x40FFFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[2],			0x800000, 0x807FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[0],			0x880000, 0x887FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[1],			0x900000, 0x907FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x980000, 0x983FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x984000, 0x987FFF, MAP_RAM);
-		SekMapMemory(CaveSpriteRAM,			0xa00000, 0xa07FFF, MAP_RAM);
-		SekMapMemory(Ram01 + 0x10000,			0xa08000, 0xa1FFFF, MAP_RAM);
-		SekMapMemory(CavePalSrc,			0xf00000, 0xf04FFF, MAP_RAM);	// Palette RAM
-		SekSetReadWordHandler(0, pwrinst2ReadWord);
-		SekSetWriteWordHandler(0, pwrinst2WriteWord);
-		SekSetReadByteHandler(0, pwrinst2ReadByte);
-		SekSetWriteByteHandler(0, pwrinst2WriteByte);
-		SekClose();
-	}
-	
-	drvZInit();
-
-	CavePalInit(0x8000);
-	CaveTileInit();
-	CaveSpriteInit(3, 0x0e00000 * 2);
-	CaveTileInitLayer(0, 0x400000, 4, 0x0800);
-	CaveTileInitLayer(1, 0x200000, 4, 0x1000);
-	CaveTileInitLayer(2, 0x200000, 4, 0x1800);
-	CaveTileInitLayer(3, 0x100000, 4, 0x2000);
-	
-	nCaveExtraXOffset = -112;
-	nCaveExtraYOffset = 1;
-	
-	BurnYM2203Init(1, 4000000, &DrvFMIRQHandler, 0);
-	BurnTimerAttachZet(8000000);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_YM2203_ROUTE, 0.70, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_1, 0.30, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_2, 0.30, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_3, 0.30, BURN_SND_ROUTE_BOTH);
-	
-	MSM6295Init(0, 3000000 / 165, 1);
-	MSM6295Init(1, 3000000 / 165, 1);
-	MSM6295SetRoute(0, 0.50, BURN_SND_ROUTE_BOTH);
-	MSM6295SetRoute(1, 0.40, BURN_SND_ROUTE_BOTH);
-
-	NMK112_init(0, MSM6295ROM, MSM6295ROM + 0x400000, 0x400000, 0x400000);
-
-	if (!strcmp(BurnDrvGetTextA(DRV_NAME), "pwrinst2")) {
-		UINT16 *rom = (UINT16 *)Rom01;
-		rom[0xD46C/2] = 0xD482;	// kurara dash fix  0xd400 -> 0xd482
-	}
-	
-	bDrawScreen = true;
-
-	DrvDoReset(); // Reset machine
-
-	return 0;
-}
-
-static INT32 PlegendsInit()
-{
-	INT32 nLen;
-
-	BurnSetRefreshRate(CAVE_REFRESHRATE);
-
-	// Find out how much memory is needed
-	Mem = NULL;
-	MemIndex();
-	nLen = MemEnd - (UINT8 *)0;
-	if ((Mem = (UINT8 *)BurnMalloc(nLen)) == NULL) {
-		return 1;
-	}
-	memset(Mem, 0, nLen);										// blank all memory
-	MemIndex();													// Index the allocated memory
-
-	// Load the roms into memory
-	if (PlegendsLoadRoms()) {
-		return 1;
-	}
-	
-	EEPROMInit(&eeprom_interface_93C46);
-
-	{
-		SekInit(0, 0x68000);													// Allocate 68000
-	    SekOpen(0);
-
-		// Map 68000 memory:
-		SekMapMemory(Rom01,				0x000000, 0x1FFFFF, MAP_ROM);	// CPU 0 ROM
-		SekMapMemory(Ram01,				0x400000, 0x40FFFF, MAP_RAM);
-		SekMapMemory(Rom01 + 0x200000,			0x600000, 0x6FFFFF, MAP_ROM);
-		SekMapMemory(CaveTileRAM[2],			0x800000, 0x807FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[0],			0x880000, 0x887FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[1],			0x900000, 0x907FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x980000, 0x983FFF, MAP_RAM);
-		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x984000, 0x987FFF, MAP_RAM);
-		SekMapMemory(CaveSpriteRAM,			0xa00000, 0xa07FFF, MAP_RAM);
-		SekMapMemory(Ram01 + 0x10000,			0xa08000, 0xa1FFFF, MAP_RAM);
-		SekMapMemory(CavePalSrc,			0xf00000, 0xf04FFF, MAP_RAM);	// Palette RAM
-		SekSetReadWordHandler(0, pwrinst2ReadWord);
-		SekSetWriteWordHandler(0, pwrinst2WriteWord);
-		SekSetReadByteHandler(0, pwrinst2ReadByte);
-		SekSetWriteByteHandler(0, pwrinst2WriteByte);
-		SekClose();
-	}
-	
-	drvZInit();
-
-	CavePalInit(0x8000);
-	CaveTileInit();
-	CaveSpriteInit(3, 0x01000000 * 2);
-	CaveTileInitLayer(0, 0x400000, 4, 0x0800);
-	CaveTileInitLayer(1, 0x400000, 4, 0x1000);
-	CaveTileInitLayer(2, 0x400000, 4, 0x1800);
-	CaveTileInitLayer(3, 0x100000, 4, 0x2000);
-	
-	nCaveExtraXOffset = -112;
-	nCaveExtraYOffset = 1;
-	
-	BurnYM2203Init(1, 4000000, &DrvFMIRQHandler, 0);
-	BurnTimerAttachZet(8000000);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_YM2203_ROUTE, 0.70, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_1, 0.30, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_2, 0.30, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_3, 0.30, BURN_SND_ROUTE_BOTH);
-	
-	MSM6295Init(0, 3000000 / 165, 1);
-	MSM6295Init(1, 3000000 / 165, 1);
-	MSM6295SetRoute(0, 0.50, BURN_SND_ROUTE_BOTH);
-	MSM6295SetRoute(1, 0.40, BURN_SND_ROUTE_BOTH);
-
-	NMK112_init(0, MSM6295ROM, MSM6295ROM + 0x400000, 0x400000, 0x400000);
-	
-	bDrawScreen = true;
-
-	DrvDoReset(); // Reset machine
-
-	return 0;
-}
-
-// Rom information
-static struct BurnRomInfo pwrinst2RomDesc[] = {
-	{ "g02.u45",      0x080000, 0x7b33bc43, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
-	{ "g02.u44",      0x080000, 0x8f6f6637, BRF_ESS | BRF_PRG }, //  1
-	{ "g02.u43",      0x080000, 0x178e3d24, BRF_ESS | BRF_PRG }, //  2
-	{ "g02.u42",      0x080000, 0xa0b4ee99, BRF_ESS | BRF_PRG }, //  3
-	
-	{ "g02.u3a",      0x020000, 0xebea5e1e, BRF_ESS | BRF_PRG }, //  4 Z80 Code
-
-	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
-	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
-	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
-	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
-	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
-	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
-	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
-
-	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
-	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
-	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
-	{ "g02.82a",      0x080000, 0x4b3567d6, BRF_GRA },			 //  15 Layer 3 Tile data
-
-	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
-	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
-	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
-	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
-};
-
-
-STD_ROM_PICK(pwrinst2)
-STD_ROM_FN(pwrinst2)
-
-static struct BurnRomInfo pwrinst2jRomDesc[] = {
-	{ "g02j.u45",     0x080000, 0x42d0abd7, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
-	{ "g02j.u44",     0x080000, 0x362b7af3, BRF_ESS | BRF_PRG }, //  1
-	{ "g02j.u43",     0x080000, 0xc94c596b, BRF_ESS | BRF_PRG }, //  2
-	{ "g02j.u42",     0x080000, 0x4f4c8270, BRF_ESS | BRF_PRG }, //  3
-	
-	{ "g02j.u3a",     0x020000, 0xeead01f1, BRF_ESS | BRF_PRG }, //  4 Z80 Code
-
-	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
-	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
-	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
-	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
-	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
-	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
-	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
-
-	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
-	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
-	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
-	{ "g02j.82a",     0x080000, 0x3be86fe1, BRF_GRA },			 //  15 Layer 3 Tile data
-
-	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
-	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
-	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
-	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
-};
-
-
-STD_ROM_PICK(pwrinst2j)
-STD_ROM_FN(pwrinst2j)
-
-static struct BurnRomInfo pwrinst2kRomDesc[] = {
-	{ "g02k.u45",     0x080000, 0x5468cbe5, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
-	{ "g02k.u44",     0x080000, 0x5561f620, BRF_ESS | BRF_PRG }, //  1
-	{ "g02k.u43",     0x080000, 0x5af96f07, BRF_ESS | BRF_PRG }, //  2
-	{ "g02k.u42",     0x080000, 0x56279c1c, BRF_ESS | BRF_PRG }, //  3
-	
-	{ "g02.u3k",  	  0x020000, 0xebea5e1e, BRF_ESS | BRF_PRG }, //  4 Z80 Code
-
-	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
-	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
-	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
-	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
-	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
-	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
-	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
-
-	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
-	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
-	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
-	{ "g02k.82a",     0x080000, 0x4b3567d6, BRF_GRA },			 //  15 Layer 3 Tile data
-
-	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
-	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
-	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
-	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
-};
-
-
-STD_ROM_PICK(pwrinst2k)
-STD_ROM_FN(pwrinst2k)
-
-static struct BurnRomInfo plegendsRomDesc[] = {
-	{ "d12.u45",        0x080000, 0xed8a2e3d, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
-	{ "d13.u44",        0x080000, 0x25821731, BRF_ESS | BRF_PRG }, //  1
-	{ "d14.u2",         0x080000, 0xc2cb1402, BRF_ESS | BRF_PRG }, //  2
-	{ "d16.u3",         0x080000, 0x50a1c63e, BRF_ESS | BRF_PRG }, //  3
-	{ "d15.u4",         0x080000, 0x6352cec0, BRF_ESS | BRF_PRG }, //  4
-	{ "d17.u5",         0x080000, 0x7af810d8, BRF_ESS | BRF_PRG }, //  5
-	
-	{ "d19.u3",         0x040000, 0x47598459, BRF_ESS | BRF_PRG }, //  6 Z80 Code
-
-	{ "g02.u61",        0x200000, 0x91e30398, BRF_GRA },			 //  7 Sprite data
-	{ "g02.u62",        0x200000, 0xd9455dd7, BRF_GRA },			 //  8
-	{ "g02.u63",        0x200000, 0x4d20560b, BRF_GRA },			 //  9
-	{ "g02.u64",        0x200000, 0xb17b9b6e, BRF_GRA },			 //  10
-	{ "g02.u65",        0x200000, 0x08541878, BRF_GRA },			 //  11
-	{ "g02.u66",        0x200000, 0xbecf2a36, BRF_GRA },			 //  12
-	{ "atgs.u1",        0x200000, 0xaa6f34a9, BRF_GRA },			 //  13
-	{ "atgs.u2",        0x200000, 0x553eda27, BRF_GRA },			 //  14
-
-	{ "atgs.u78",       0x200000, 0x16710ecb, BRF_GRA },			 //  15 Layer 0 Tile data
-	{ "atgs.u81",       0x200000, 0xcb2aca91, BRF_GRA },			 //  16 Layer 1 Tile data
-	{ "atgs.u89",       0x200000, 0x65f45a0f, BRF_GRA },			 //  17 Layer 2 Tile data
-	{ "text.u82",       0x080000, 0xf57333ea, BRF_GRA },			 //  18 Layer 3 Tile data
-
-	{ "g02.u53",        0x200000, 0xc4bdd9e0, BRF_SND },			 //  19 MSM6295 #1 ADPCM data
-	{ "g02.u54",        0x200000, 0x1357d50e, BRF_SND },			 //  20
-	{ "g02.u55",        0x200000, 0x2d102898, BRF_SND },			 //  21 MSM6295 #2 ADPCM data
-	{ "g02.u56",        0x200000, 0x9ff50dda, BRF_SND },			 //  22
-};
-
-
-STD_ROM_PICK(plegends)
-STD_ROM_FN(plegends)
-
-static struct BurnRomInfo plegendsjRomDesc[] = {
-	{ "prog.u45",       0x080000, 0x94f53db2, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
-	{ "prog.u44",       0x080000, 0xdb0ad756, BRF_ESS | BRF_PRG }, //  1
-	{ "pr12.u2",        0x080000, 0x0e202559, BRF_ESS | BRF_PRG }, //  2
-	{ "pr12.u3",        0x080000, 0x54742f21, BRF_ESS | BRF_PRG }, //  3
-	{ "d15.u4",         0x080000, 0x6352cec0, BRF_ESS | BRF_PRG }, //  4
-	{ "d17.u5",         0x080000, 0x7af810d8, BRF_ESS | BRF_PRG }, //  5
-	
-	{ "sound.u3",       0x020000, 0x36f71520, BRF_ESS | BRF_PRG }, //  6 Z80 Code
-
-	{ "g02.u61",        0x200000, 0x91e30398, BRF_GRA },			 //  7 Sprite data
-	{ "g02.u62",        0x200000, 0xd9455dd7, BRF_GRA },			 //  8
-	{ "g02.u63",        0x200000, 0x4d20560b, BRF_GRA },			 //  9
-	{ "g02.u64",        0x200000, 0xb17b9b6e, BRF_GRA },			 //  10
-	{ "g02.u65",        0x200000, 0x08541878, BRF_GRA },			 //  11
-	{ "g02.u66",        0x200000, 0xbecf2a36, BRF_GRA },			 //  12
-	{ "atgs.u1",        0x200000, 0xaa6f34a9, BRF_GRA },			 //  13
-	{ "atgs.u2",        0x200000, 0x553eda27, BRF_GRA },			 //  14
-
-	{ "atgs.u78",       0x200000, 0x16710ecb, BRF_GRA },			 //  15 Layer 0 Tile data
-	{ "atgs.u81",       0x200000, 0xcb2aca91, BRF_GRA },			 //  16 Layer 1 Tile data
-	{ "atgs.u89",       0x200000, 0x65f45a0f, BRF_GRA },			 //  17 Layer 2 Tile data
-	{ "text.u82",       0x080000, 0xf57333ea, BRF_GRA },			 //  18 Layer 3 Tile data
-
-	{ "g02.u53",        0x200000, 0xc4bdd9e0, BRF_SND },			 //  19 MSM6295 #1 ADPCM data
-	{ "g02.u54",        0x200000, 0x1357d50e, BRF_SND },			 //  20
-	{ "g02.u55",        0x200000, 0x2d102898, BRF_SND },			 //  21 MSM6295 #2 ADPCM data
-	{ "g02.u56",        0x200000, 0x9ff50dda, BRF_SND },			 //  22
-};
-
-
-STD_ROM_PICK(plegendsj)
-STD_ROM_FN(plegendsj)
-
-struct BurnDriver BurnDrvPwrinst2 = {
-	"pwrinst2", NULL, NULL, NULL, "1994",
-	"Power Instinct 2 (USA, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
-	NULL, pwrinst2RomInfo, pwrinst2RomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
-	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
-};
-
-struct BurnDriver BurnDrvPwrinst2j = {
-	"pwrinst2j", "pwrinst2", NULL, NULL, "1994",
-	"Gouketsuji Ichizoku 2 (Japan, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
-	L"\u8C6A\u8840\u5BFA\u4E00\u65CF \uFF12 (Japan, ver. 94/04/08)\0Gouketsuji Ichizoku 2\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
-	NULL, pwrinst2jRomInfo, pwrinst2jRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
-	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
-};
-
-struct BurnDriver BurnDrvPwrinst2k = {
-	"pwrinst2k", "pwrinst2", NULL, NULL, "1994",
-	"Power instinct 2 (Korea, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
-	NULL, pwrinst2kRomInfo, pwrinst2kRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
-	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
-};
-
-struct BurnDriver BurnDrvPlegends = {
-	"plegends", NULL, NULL, NULL, "1995",
-	"Gouketsuji Gaiden Legends (USA, ver. 95/06/20)\0", NULL, "Atlus / KM International", "Cave",
-	L"\u8C6A\u8840\u5BFA\u5916\u4F1D Gogetsuji Legends (USA, ver. 95/06/20)\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
-	NULL, plegendsRomInfo, plegendsRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
-	PlegendsInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
-	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
-};
-
-struct BurnDriver BurnDrvPlegendsj = {
-	"plegendsj", "plegends", NULL, NULL, "1995",
-	"Gouketsuji Gaiden Saikyou Densetsu (Japan, ver. 95/06/20)\0", NULL, "Atlus", "Cave",
-	L"\u8C6A\u8840\u5BFA\u5916\u4F1D Gogetsuji \u6700\u5F37\u4F1D\u8AAC (Japan, ver. 95/06/20)\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
-	NULL, plegendsjRomInfo, plegendsjRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
-	PlegendsInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
-	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
-};
+// pwrinst2
+#include "cave.h"
+#include "msm6295.h"
+#include "burn_ym2203.h"
+#include "nmk112.h"
+#include "bitswap.h"
+
+#define CAVE_VBLANK_LINES 12
+
+static UINT8 DrvJoy1[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+static UINT8 DrvJoy2[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+static UINT16 DrvInput[2] = {0x0000, 0x0000};
+
+static UINT8 *Mem = NULL, *MemEnd = NULL;
+static UINT8 *RamStart, *RamEnd;
+static UINT8 *Rom01, *RomZ80;
+static UINT8 *Ram01, *RamZ80;
+
+static UINT8 DrvReset = 0;
+static UINT8 bDrawScreen;
+static bool bVBlank;
+
+static INT8 nVideoIRQ;
+static INT8 nSoundIRQ;
+static INT8 nUnknownIRQ;
+
+static INT8 nIRQPending;
+
+static INT32 nCyclesTotal[2];
+static INT32 nCyclesDone[2];
+
+static INT32 SoundLatch;
+static INT32 SoundLatchReply[48];
+static INT32 SoundLatchStatus;
+
+static INT32 SoundLatchReplyIndex;
+static INT32 SoundLatchReplyMax;
+
+static UINT8 DrvZ80Bank;
+
+static struct BurnInputInfo pwrinst2InputList[] = {
+	{"P1 Coin",		BIT_DIGITAL,	DrvJoy1 + 8,	"p1 coin"},
+	{"P1 Start",	BIT_DIGITAL,	DrvJoy1 + 7,	"p1 start"},
+
+	{"P1 Up",		BIT_DIGITAL,	DrvJoy1 + 0, 	"p1 up"},
+	{"P1 Down",		BIT_DIGITAL,	DrvJoy1 + 1, 	"p1 down"},
+	{"P1 Left",		BIT_DIGITAL,	DrvJoy1 + 2, 	"p1 left"},
+	{"P1 Right",	BIT_DIGITAL,	DrvJoy1 + 3, 	"p1 right"},
+	{"P1 Button 1",	BIT_DIGITAL,	DrvJoy1 + 4,	"p1 fire 1"},
+	{"P1 Button 2",	BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 2"},
+	{"P1 Button 3",	BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 3"},
+	{"P1 Button 4",	BIT_DIGITAL,	DrvJoy1 + 10,	"p1 fire 4"},
+
+	{"P2 Coin",		BIT_DIGITAL,	DrvJoy2 + 8,	"p2 coin"},
+	{"P2 Start",	BIT_DIGITAL,	DrvJoy2 + 7,	"p2 start"},
+
+	{"P2 Up",		BIT_DIGITAL,	DrvJoy2 + 0, 	"p2 up"},
+	{"P2 Down",		BIT_DIGITAL,	DrvJoy2 + 1, 	"p2 down"},
+	{"P2 Left",		BIT_DIGITAL,	DrvJoy2 + 2, 	"p2 left"},
+	{"P2 Right",	BIT_DIGITAL,	DrvJoy2 + 3, 	"p2 right"},
+	{"P2 Button 1",	BIT_DIGITAL,	DrvJoy2 + 4,	"p2 fire 1"},
+	{"P2 Button 2",	BIT_DIGITAL,	DrvJoy2 + 5,	"p2 fire 2"},
+	{"P2 Button 3",	BIT_DIGITAL,	DrvJoy2 + 6,	"p2 fire 3"},
+	{"P2 Button 4",	BIT_DIGITAL,	DrvJoy2 + 10,	"p2 fire 4"},
+
+	{"Reset",		BIT_DIGITAL,	&DrvReset,		"reset"},
+	{"Diagnostics",	BIT_DIGITAL,	DrvJoy1 + 9,	"diag"},
+	{"Service",		BIT_DIGITAL,	DrvJoy2 + 9,	"service"},
+};
+
+STDINPUTINFO(pwrinst2)
+
+static void UpdateIRQStatus()
+{
+	nIRQPending = (nVideoIRQ == 0 || nSoundIRQ == 0 || nUnknownIRQ == 0);
+	SekSetIRQLine(1, nIRQPending ? CPU_IRQSTATUS_ACK : CPU_IRQSTATUS_NONE);
+}
+
+UINT8 __fastcall pwrinst2ReadByte(UINT32 sekAddress)
+{
+	if (sekAddress >= 0x600000 && sekAddress <= 0x6fffff) return 0;
+	
+	switch (sekAddress) {
+		default: {
+ 			bprintf(PRINT_NORMAL, _T("Attempt to read byte value of location %x\n"), sekAddress);
+		}
+	}
+	return 0;
+}
+
+void __fastcall pwrinst2WriteByte(UINT32 sekAddress, UINT8 byteValue)
+{
+	switch (sekAddress) {
+		default: {
+			bprintf(PRINT_NORMAL, _T("Attempt to write byte value %x to location %x\n"), byteValue, sekAddress);
+
+		}
+	}
+}
+
+UINT16 __fastcall pwrinst2ReadWord(UINT32 sekAddress)
+{
+	if (sekAddress >= 0x600000 && sekAddress <= 0x6fffff) return 0;
+	
+	switch (sekAddress) {
+		case 0x500000:
+			return DrvInput[0] ^ 0xFFFF;
+		case 0x500002:
+			return (DrvInput[1] ^ 0xF7FF) | (EEPROMRead() << 11);
+			
+		case 0xa80000:
+		case 0xa80002: {
+			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
+			return nRet;
+		}
+
+		case 0xa80004: {
+			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
+			nVideoIRQ = 1;
+			UpdateIRQStatus();
+			return nRet;
+		}
+		case 0xa80006: {
+			UINT16 nRet = (nUnknownIRQ << 1) | nVideoIRQ;
+			nUnknownIRQ = 1;
+			UpdateIRQStatus();
+			return nRet;
+		}
+		
+		case 0xd80000: {
+			if (SoundLatchReplyIndex > SoundLatchReplyMax) {
+				SoundLatchReplyIndex = 0;
+				SoundLatchReplyMax = -1;
+				return 0;
+			}
+			return SoundLatchReply[SoundLatchReplyIndex++];
+		}
+		
+		case 0xe80000: {
+			return ~8 + ((EEPROMRead() & 1) ? 8 : 0);
+		}
+			
+		default: {
+ 			bprintf(PRINT_NORMAL, _T("Attempt to read word value of location %x\n"), sekAddress);
+		}
+	}
+	return 0;
+}
+
+void __fastcall pwrinst2WriteWord(UINT32 sekAddress, UINT16 wordValue)
+{
+	if (sekAddress >= 0xa8000a && sekAddress <= 0xa8007c) return;
+	if (sekAddress >= 0xa80004 && sekAddress <= 0xa80006) return;
+	
+	switch (sekAddress) {
+		case 0x700000:
+			wordValue >>= 8;
+			EEPROMWrite(wordValue & 0x04, wordValue & 0x02, wordValue & 0x08);
+			break;
+			
+		case 0xa80000:
+			nCaveXOffset = wordValue;
+			return;
+		case 0xa80002:
+			nCaveYOffset = wordValue;
+			return;
+			
+		case 0xa80008:
+			CaveSpriteBuffer();
+			nCaveSpriteBank = wordValue;
+			return;
+		
+		case 0xb00000:
+			CaveTileReg[2][0] = wordValue;
+			break;
+		case 0xb00002:
+			CaveTileReg[2][1] = wordValue;
+			break;
+		case 0xb00004: {
+			switch (wordValue & 0x0f) {
+				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
+				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
+				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
+				default:
+				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
+			}
+			CaveTileReg[2][2] = wordValue;
+			break;
+		}
+		
+		case 0xb80000:
+			CaveTileReg[0][0] = wordValue;
+			break;
+		case 0xb80002:
+			CaveTileReg[0][1] = wordValue;
+			break;
+		case 0xb80004: {
+			switch (wordValue & 0x0f) {
+				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
+				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
+				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
+				default:
+				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
+			}
+			CaveTileReg[0][2] = wordValue;
+			break;
+		}
+		
+		case 0xc00000:
+			CaveTileReg[1][0] = wordValue;
+			break;
+		case 0xc00002:
+			CaveTileReg[1][1] = wordValue;
+			break;
+		case 0xc00004: {
+			switch (wordValue & 0x0f) {
+				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
+				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
+				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
+				default:
+				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
+			}
+			CaveTileReg[1][2] = wordValue;
+			break;
+		}
+		
+		case 0xc80000:
+			CaveTileReg[3][0] = wordValue;
+			break;
+		case 0xc80002:
+			CaveTileReg[3][1] = wordValue;
+			break;
+		case 0xc80004: {
+			switch (wordValue & 0x0f) {
+				case 1:	wordValue = (wordValue & ~0x000f) | 0;	break;
+				case 2:	wordValue = (wordValue & ~0x000f) | 1;	break;
+				case 4:	wordValue = (wordValue & ~0x000f) | 2;	break;
+				default:
+				case 8:	wordValue = (wordValue & ~0x000f) | 3;	break;
+			}
+			CaveTileReg[3][2] = wordValue;
+			break;
+		}
+		
+		case 0xe00000: {
+			SoundLatch = wordValue;
+			SoundLatchStatus |= 0x0C;
+
+			ZetNmi();
+//			nCyclesDone[1] += ZetRun(0x0400);
+			return;
+		}
+			
+		default: {
+			bprintf(PRINT_NORMAL, _T("Attempt to write word value %x to location %x\n"), wordValue, sekAddress);
+
+		}
+	}
+}
+
+UINT8 __fastcall pwrinst2ZIn(UINT16 nAddress)
+{
+	nAddress &= 0xFF;
+
+	switch (nAddress) {
+		case 0x00: {
+			return MSM6295Read(0);
+		}
+		
+		case 0x08: {
+			return MSM6295Read(1);
+		}
+		
+		case 0x40: {
+			return BurnYM2203Read(0, 0);
+		}
+		
+		case 0x41: {
+			return BurnYM2203Read(0, 1);
+		}
+		
+		case 0x60: {
+			SoundLatchStatus |= 0x08;
+			return SoundLatch >> 8;
+		}
+			
+		case 0x70: {
+			SoundLatchStatus |= 0x04;
+			return SoundLatch & 0xFF;
+		}
+			
+		default: {
+			bprintf(PRINT_NORMAL, _T("Z80 Port Read %x\n"), nAddress);
+		}
+	}
+
+	return 0;
+}
+
+void __fastcall pwrinst2ZOut(UINT16 nAddress, UINT8 nValue)
+{
+	nAddress &= 0xFF;
+
+	switch (nAddress) {
+		case 0x00: {
+			MSM6295Write(0, nValue);
+			return;
+		}
+		
+		case 0x08: {
+			MSM6295Write(1, nValue);
+			return;
+		}
+		
+		case 0x10:
+		case 0x11:
+		case 0x12:
+		case 0x13:
+		case 0x14:
+		case 0x15:
+		case 0x16:
+		case 0x17: {
+			NMK112_okibank_write(nAddress & 0x07, nValue);
+			return;
+		}
+		
+		case 0x40: {
+			BurnYM2203Write(0, 0, nValue);
+			return;
+		}
+		
+		case 0x41: {
+			BurnYM2203Write(0, 1, nValue);
+			return;
+		}
+		
+		case 0x50: {
+			if (SoundLatchReplyIndex > SoundLatchReplyMax) {
+				SoundLatchReplyMax = -1;
+				SoundLatchReplyIndex = 0;
+			}
+			SoundLatchReplyMax++;
+			SoundLatchReply[SoundLatchReplyMax] = nValue;
+			return;
+		}
+		
+		case 0x51: {
+			//???
+			return;
+		}
+		
+		case 0x80: {
+			DrvZ80Bank = nValue & 0x07;
+			
+			ZetMapArea(0x8000, 0xbFFF, 0, RomZ80 + (DrvZ80Bank * 0x4000));
+			ZetMapArea(0x8000, 0xbFFF, 2, RomZ80 + (DrvZ80Bank * 0x4000));
+			return;
+		}
+		
+		default: {
+			bprintf(PRINT_NORMAL, _T("Z80 Port Write %x, %x\n"), nAddress, nValue);
+		}
+	}
+}
+
+UINT8 __fastcall pwrinst2ZRead(UINT16 a)
+{
+	switch (a) {
+		default: {
+			bprintf(PRINT_NORMAL, _T("Z80 Read => %04X\n"), a);
+		}
+	}
+
+	return 0;
+}
+
+void __fastcall pwrinst2ZWrite(UINT16 a, UINT8 d)
+{
+	switch (a) {
+		default: {
+			bprintf(PRINT_NORMAL, _T("Z80 Write => %04X, %02X\n"), a, d);
+		}
+	}
+}
+
+static INT32 DrvExit()
+{
+	EEPROMExit();
+
+	MSM6295Exit();
+
+	CaveTileExit();
+	CaveSpriteExit();
+	CavePalExit();
+
+	SekExit();				// Deallocate 68000s
+	ZetExit();
+	
+	BurnYM2203Exit();
+	
+	SoundLatch = 0;
+	DrvZ80Bank = 0;
+
+	BurnFree(Mem);
+
+	return 0;
+}
+
+static INT32 DrvDoReset()
+{
+	SekOpen(0);
+	SekReset();
+	SekClose();
+	
+	ZetOpen(0);
+	ZetReset();
+	ZetClose();
+	
+	BurnYM2203Reset();
+	MSM6295Reset();
+
+	EEPROMReset();
+
+	nVideoIRQ = 1;
+	nSoundIRQ = 1;
+	nUnknownIRQ = 1;
+
+	nIRQPending = 0;
+	
+	SoundLatch = 0;
+	SoundLatchStatus = 0x0C;
+
+	memset(SoundLatchReply, 0, sizeof(SoundLatchReply));
+	SoundLatchReplyIndex = 0;
+	SoundLatchReplyMax = -1;	
+	
+	DrvZ80Bank = 0;
+	NMK112Reset();
+
+	return 0;
+}
+
+inline static UINT32 CalcCol(UINT16 nColour)
+{
+	INT32 r, g, b;
+
+	r = (nColour & 0x03E0) >> 2;	// Red
+	r |= r >> 5;
+	g = (nColour & 0x7C00) >> 7;  	// Green
+	g |= g >> 5;
+	b = (nColour & 0x001F) << 3;	// Blue
+	b |= b >> 5;
+
+	return BurnHighCol(r, g, b, 0);
+}
+
+static void DrvCalcPalette()
+{
+	INT32 i;
+	UINT16* ps;
+	UINT32* pd;
+
+	for (i = 0, ps = (UINT16*)CavePalSrc, pd = CavePalette; i < 0x2800; i++, ps++, pd++) {
+		*pd = CalcCol(BURN_ENDIAN_SWAP_INT16(*ps));
+	}
+}
+
+static INT32 DrvDraw()
+{
+	CavePalUpdate4Bit(0, 128);
+	DrvCalcPalette();
+	
+	CaveClearScreen(CavePalette[0x7f00]);
+
+	if (bDrawScreen) {
+//		CaveGetBitmap();
+
+		CaveTileRender(1);					// Render tiles
+	}
+	
+	return 0;
+}
+
+inline static INT32 CheckSleep(INT32)
+{
+	return 0;
+}
+
+static INT32 DrvFrame()
+{
+	INT32 nCyclesVBlank;
+	INT32 nInterleave = 100;
+
+	INT32 nCyclesSegment;
+
+	if (DrvReset) {														// Reset machine
+		DrvDoReset();
+	}
+	
+	// Compile digital inputs
+	DrvInput[0] = 0x0000;  												// Player 1
+	DrvInput[1] = 0x0000;  												// Player 2
+	for (INT32 i = 0; i < 11; i++) {
+		DrvInput[0] |= (DrvJoy1[i] & 1) << i;
+		DrvInput[1] |= (DrvJoy2[i] & 1) << i;
+	}
+	CaveClearOpposites(&DrvInput[0]);
+	CaveClearOpposites(&DrvInput[1]);
+
+	SekNewFrame();
+	ZetNewFrame();
+	
+	SekOpen(0);
+	ZetOpen(0);
+	
+	nCyclesTotal[0] = (INT32)((INT64)16000000 * nBurnCPUSpeedAdjust / (0x0100 * CAVE_REFRESHRATE));
+	nCyclesTotal[1] = (INT32)(8000000 / CAVE_REFRESHRATE);
+	nCyclesDone[0] = nCyclesDone[1] = 0;
+
+	nCyclesVBlank = nCyclesTotal[0] - (INT32)((nCyclesTotal[0] * CAVE_VBLANK_LINES) / 271.5);
+	bVBlank = false;
+
+	for (INT32 i = 1; i <= nInterleave; i++) {
+    	INT32 nCurrentCPU = 0;
+		INT32 nNext = i * nCyclesTotal[nCurrentCPU] / nInterleave;
+
+		// Run 68000
+
+		// See if we need to trigger the VBlank interrupt
+		if (!bVBlank && nNext > nCyclesVBlank) {
+			if (nCyclesDone[nCurrentCPU] < nCyclesVBlank) {
+				nCyclesSegment = nCyclesVBlank - nCyclesDone[nCurrentCPU];
+				if (!CheckSleep(nCurrentCPU)) {							// See if this CPU is busywaiting
+					nCyclesDone[nCurrentCPU] += SekRun(nCyclesSegment);
+				} else {
+					nCyclesDone[nCurrentCPU] += SekIdle(nCyclesSegment);
+				}
+			}
+
+			if (pBurnDraw != NULL) {
+				DrvDraw();												// Draw screen if needed
+			}
+			
+//			CaveSpriteBuffer();
+
+			bVBlank = true;
+			nVideoIRQ = 0;
+			UpdateIRQStatus();
+		}
+
+		nCyclesSegment = nNext - nCyclesDone[nCurrentCPU];
+		if (!CheckSleep(nCurrentCPU)) {									// See if this CPU is busywaiting
+			nCyclesDone[nCurrentCPU] += SekRun(nCyclesSegment);
+		} else {
+			nCyclesDone[nCurrentCPU] += SekIdle(nCyclesSegment);
+		}
+		
+		BurnTimerUpdate(i * (nCyclesTotal[1] / nInterleave));
+	}
+	
+	SekClose();
+	
+	BurnTimerEndFrame(nCyclesTotal[1]);
+	
+	if (pBurnSoundOut) {
+		BurnYM2203Update(pBurnSoundOut, nBurnSoundLen);
+		MSM6295Render(pBurnSoundOut, nBurnSoundLen);
+	}
+	
+	ZetClose();
+
+	return 0;
+}
+
+// This routine is called first to determine how much memory is needed (MemEnd-(UINT8 *)0),
+// and then afterwards to set up all the pointers
+static INT32 MemIndex()
+{
+	UINT8* Next; Next = Mem;
+	Rom01			= Next; Next += 0x300000;		// 68K program
+	RomZ80			= Next; Next += 0x040000;
+	CaveSpriteROM	= Next; Next += 0x1000000 * 2;
+	CaveTileROM[0]	= Next; Next += 0x400000;		// Tile layer 0
+	CaveTileROM[1]	= Next; Next += 0x400000;		// Tile layer 1
+	CaveTileROM[2]	= Next; Next += 0x400000;		// Tile layer 2
+	CaveTileROM[3]	= Next; Next += 0x200000;		// Tile layer 3
+	MSM6295ROM		= Next; Next += 0x800000;
+	RamStart		= Next;
+	Ram01			= Next; Next += 0x028000;		// CPU #0 work RAM
+	RamZ80			= Next; Next += 0x002000;
+	CaveTileRAM[0]	= Next; Next += 0x008000;
+	CaveTileRAM[1]	= Next; Next += 0x008000;
+	CaveTileRAM[2]	= Next; Next += 0x008000;
+	CaveTileRAM[3]	= Next; Next += 0x008000;
+	CaveSpriteRAM	= Next; Next += 0x008000;
+	CavePalSrc		= Next; Next += 0x005000;		// palette
+	RamEnd			= Next;
+	MemEnd			= Next;
+
+	return 0;
+}
+
+static void NibbleSwap1(UINT8* pData, INT32 nLen)
+{
+	UINT8* pOrg = pData + nLen - 1;
+	UINT8* pDest = pData + ((nLen - 1) << 1);
+
+	for (INT32 i = 0; i < nLen; i++, pOrg--, pDest -= 2) {
+		pDest[0] = *pOrg & 15;
+		pDest[1] = *pOrg >> 4;
+	}
+
+	return;
+}
+
+static void NibbleSwap2(UINT8* pData, INT32 nLen)
+{
+	UINT8* pOrg = pData + nLen - 1;
+	UINT8* pDest = pData + ((nLen - 1) << 1);
+
+	for (INT32 i = 0; i < nLen; i++, pOrg--, pDest -= 2) {
+		pDest[1] = *pOrg & 15;
+		pDest[0] = *pOrg >> 4;
+	}
+
+	return;
+}
+
+static INT32 LoadRoms()
+{
+	BurnLoadRom(Rom01 + 0x000001, 0, 2);
+	BurnLoadRom(Rom01 + 0x000000, 1, 2);
+	BurnLoadRom(Rom01 + 0x100001, 2, 2);
+	BurnLoadRom(Rom01 + 0x100000, 3, 2);
+	
+	BurnLoadRom(RomZ80, 4, 1);
+
+	UINT8 *pTemp = (UINT8*)BurnMalloc(0xe00000);
+	BurnLoadRom(pTemp + 0x000000, 5, 1);
+	BurnLoadRom(pTemp + 0x200000, 6, 1);
+	BurnLoadRom(pTemp + 0x400000, 7, 1);
+	BurnLoadRom(pTemp + 0x600000, 8, 1);
+	BurnLoadRom(pTemp + 0x800000, 9, 1);
+	BurnLoadRom(pTemp + 0xa00000, 10, 1);
+	BurnLoadRom(pTemp + 0xc00000, 11, 1);
+	for (INT32 i = 0; i < 0xe00000; i++) {
+		INT32 j = BITSWAP24(i,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7, 2,4,6,1,5,3, 0);
+		if (((j & 6) == 0) || ((j & 6) == 6)) j ^= 6;
+		CaveSpriteROM[j ^ 7] = (pTemp[i] >> 4) | (pTemp[i] << 4);
+	}
+	BurnFree(pTemp);
+	NibbleSwap1(CaveSpriteROM, 0xe00000);
+
+	BurnLoadRom(CaveTileROM[0], 12, 1);
+	NibbleSwap2(CaveTileROM[0], 0x200000);
+	BurnLoadRom(CaveTileROM[1], 13, 1);
+	NibbleSwap2(CaveTileROM[1], 0x100000);
+	BurnLoadRom(CaveTileROM[2], 14, 1);
+	NibbleSwap2(CaveTileROM[2], 0x100000);
+	BurnLoadRom(CaveTileROM[3], 15, 1);
+	NibbleSwap2(CaveTileROM[3], 0x080000);
+
+	// Load MSM6295 ADPCM data
+	BurnLoadRom(MSM6295ROM + 0x000000, 16, 1);
+	BurnLoadRom(MSM6295ROM + 0x200000, 17, 1);
+	BurnLoadRom(MSM6295ROM + 0x400000, 18, 1);
+	BurnLoadRom(MSM6295ROM + 0x600000, 19, 1);
+
+	return 0;
+}
+
+static INT32 PlegendsLoadRoms()
+{
+	BurnLoadRom(Rom01 + 0x000001, 0, 2);
+	BurnLoadRom(Rom01 + 0x000000, 1, 2);
+	BurnLoadRom(Rom01 + 0x100001, 2, 2);
+	BurnLoadRom(Rom01 + 0x100000, 3, 2);
+	BurnLoadRom(Rom01 + 0x200001, 4, 2);
+	BurnLoadRom(Rom01 + 0x200000, 5, 2);
+	
+	BurnLoadRom(RomZ80, 6, 1);
+
+	UINT8 *pTemp = (UINT8*)BurnMalloc(0x1000000);
+	BurnLoadRom(pTemp + 0x000000, 7, 1);
+	BurnLoadRom(pTemp + 0x200000, 8, 1);
+	BurnLoadRom(pTemp + 0x400000, 9, 1);
+	BurnLoadRom(pTemp + 0x600000, 10, 1);
+	BurnLoadRom(pTemp + 0x800000, 11, 1);
+	BurnLoadRom(pTemp + 0xa00000, 12, 1);
+	BurnLoadRom(pTemp + 0xc00000, 13, 1);
+	BurnLoadRom(pTemp + 0xe00000, 14, 1);
+	for (INT32 i = 0; i < 0x1000000; i++) {
+		INT32 j = BITSWAP24(i,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7, 2,4,6,1,5,3, 0);
+		if (((j & 6) == 0) || ((j & 6) == 6)) j ^= 6;
+		CaveSpriteROM[j ^ 7] = (pTemp[i] >> 4) | (pTemp[i] << 4);
+	}
+	BurnFree(pTemp);
+	NibbleSwap1(CaveSpriteROM, 0x1000000);
+
+	BurnLoadRom(CaveTileROM[0], 15, 1);
+	NibbleSwap2(CaveTileROM[0], 0x200000);
+	BurnLoadRom(CaveTileROM[1], 16, 1);
+	NibbleSwap2(CaveTileROM[1], 0x200000);
+	BurnLoadRom(CaveTileROM[2], 17, 1);
+	NibbleSwap2(CaveTileROM[2], 0x200000);
+	BurnLoadRom(CaveTileROM[3], 18, 1);
+	NibbleSwap2(CaveTileROM[3], 0x080000);
+
+	// Load MSM6295 ADPCM data
+	BurnLoadRom(MSM6295ROM + 0x000000, 19, 1);
+	BurnLoadRom(MSM6295ROM + 0x200000, 20, 1);
+	BurnLoadRom(MSM6295ROM + 0x400000, 21, 1);
+	BurnLoadRom(MSM6295ROM + 0x600000, 22, 1);
+
+	return 0;
+}
+
+// Scan ram
+static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
+{
+	struct BurnArea ba;
+
+	if (pnMin) {						// Return minimum compatible version
+		*pnMin = 0x029719;
+	}
+
+	EEPROMScan(nAction, pnMin);			// Scan EEPROM
+
+	if (nAction & ACB_VOLATILE) {		// Scan volatile ram
+		memset(&ba, 0, sizeof(ba));
+		ba.Data		= RamStart;
+		ba.nLen		= RamEnd - RamStart;
+		ba.szName	= "RAM";
+		BurnAcb(&ba);
+
+		SekScan(nAction);
+		ZetScan(nAction);
+
+		BurnYM2203Scan(nAction, pnMin);
+		MSM6295Scan(nAction, pnMin);
+		NMK112_Scan(nAction);
+
+		SCAN_VAR(nVideoIRQ);
+		SCAN_VAR(nSoundIRQ);
+		SCAN_VAR(nUnknownIRQ);
+		SCAN_VAR(bVBlank);
+
+		CaveScanGraphics();
+
+		SCAN_VAR(DrvInput);
+		SCAN_VAR(SoundLatch);
+		SCAN_VAR(DrvZ80Bank);
+		
+		if (nAction & ACB_WRITE) {
+			ZetOpen(0);
+			ZetMapArea(0x8000, 0xbFFF, 0, RomZ80 + (DrvZ80Bank * 0x4000));
+			ZetMapArea(0x8000, 0xbFFF, 2, RomZ80 + (DrvZ80Bank * 0x4000));
+			ZetClose();
+
+			CaveRecalcPalette = 1;
+		}
+	}
+
+	return 0;
+}
+
+static void DrvFMIRQHandler(INT32, INT32 nStatus)
+{
+	if (nStatus & 1) {
+		ZetSetIRQLine(0xff, CPU_IRQSTATUS_ACK);
+	} else {
+		ZetSetIRQLine(0,    CPU_IRQSTATUS_NONE);
+	}
+}
+
+static INT32 drvZInit()
+{
+	ZetInit(0);
+	ZetOpen(0);
+	ZetSetInHandler(pwrinst2ZIn);
+	ZetSetOutHandler(pwrinst2ZOut);
+	ZetSetReadHandler(pwrinst2ZRead);
+	ZetSetWriteHandler(pwrinst2ZWrite);
+
+	// ROM bank 1
+	ZetMapArea    (0x0000, 0x7FFF, 0, RomZ80 + 0x0000); // Direct Read from ROM
+	ZetMapArea    (0x0000, 0x7FFF, 2, RomZ80 + 0x0000); // Direct Fetch from ROM
+	// ROM bank 2
+	ZetMapArea    (0x8000, 0xbFFF, 0, RomZ80 + 0x8000); // Direct Read from ROM
+	ZetMapArea    (0x8000, 0xbFFF, 2, RomZ80 + 0x8000); //
+	// RAM
+	ZetMapArea    (0xE000, 0xFFFF, 0, RamZ80);			// Direct Read from RAM
+	ZetMapArea    (0xE000, 0xFFFF, 1, RamZ80);			// Direct Write to RAM
+	ZetMapArea    (0xE000, 0xFFFF, 2, RamZ80);			//
+	ZetClose();
+
+	return 0;
+}
+
+static INT32 DrvInit()
+{
+	INT32 nLen;
+
+	BurnSetRefreshRate(CAVE_REFRESHRATE);
+
+	// Find out how much memory is needed
+	Mem = NULL;
+	MemIndex();
+	nLen = MemEnd - (UINT8 *)0;
+	if ((Mem = (UINT8 *)BurnMalloc(nLen)) == NULL) {
+		return 1;
+	}
+	memset(Mem, 0, nLen);										// blank all memory
+	MemIndex();													// Index the allocated memory
+
+	// Load the roms into memory
+	if (LoadRoms()) {
+		return 1;
+	}
+	
+	EEPROMInit(&eeprom_interface_93C46);
+
+	{
+		SekInit(0, 0x68000);													// Allocate 68000
+		SekOpen(0);
+
+		// Map 68000 memory:
+		SekMapMemory(Rom01,				0x000000, 0x1FFFFF, MAP_ROM);	// CPU 0 ROM
+		SekMapMemory(Ram01,				0x400000, 0x40FFFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[2],			0x800000, 0x807FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[0],			0x880000, 0x887FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[1],			0x900000, 0x907FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x980000, 0x983FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x984000, 0x987FFF, MAP_RAM);
+		SekMapMemory(CaveSpriteRAM,			0xa00000, 0xa07FFF, MAP_RAM);
+		SekMapMemory(Ram01 + 0x10000,			0xa08000, 0xa1FFFF, MAP_RAM);
+		SekMapMemory(CavePalSrc,			0xf00000, 0xf04FFF, MAP_RAM);	// Palette RAM
+		SekSetReadWordHandler(0, pwrinst2ReadWord);
+		SekSetWriteWordHandler(0, pwrinst2WriteWord);
+		SekSetReadByteHandler(0, pwrinst2ReadByte);
+		SekSetWriteByteHandler(0, pwrinst2WriteByte);
+		SekClose();
+	}
+	
+	drvZInit();
+
+	CavePalInit(0x8000);
+	CaveTileInit();
+	CaveSpriteInit(3, 0x0e00000 * 2);
+	CaveTileInitLayer(0, 0x400000, 4, 0x0800);
+	CaveTileInitLayer(1, 0x200000, 4, 0x1000);
+	CaveTileInitLayer(2, 0x200000, 4, 0x1800);
+	CaveTileInitLayer(3, 0x100000, 4, 0x2000);
+	
+	nCaveExtraXOffset = -112;
+	nCaveExtraYOffset = 1;
+	
+	BurnYM2203Init(1, 4000000, &DrvFMIRQHandler, 0);
+	BurnTimerAttachZet(8000000);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_YM2203_ROUTE, 0.70, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_1, 0.30, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_2, 0.30, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_3, 0.30, BURN_SND_ROUTE_BOTH);
+	
+	MSM6295Init(0, 3000000 / 165, 1);
+	MSM6295Init(1, 3000000 / 165, 1);
+	MSM6295SetRoute(0, 0.50, BURN_SND_ROUTE_BOTH);
+	MSM6295SetRoute(1, 0.40, BURN_SND_ROUTE_BOTH);
+
+	NMK112_init(0, MSM6295ROM, MSM6295ROM + 0x400000, 0x400000, 0x400000);
+
+	if (!strcmp(BurnDrvGetTextA(DRV_NAME), "pwrinst2")) {
+		UINT16 *rom = (UINT16 *)Rom01;
+		rom[0xD46C/2] = 0xD482;	// kurara dash fix  0xd400 -> 0xd482
+	}
+	
+	bDrawScreen = true;
+
+	DrvDoReset(); // Reset machine
+
+	return 0;
+}
+
+static INT32 PlegendsInit()
+{
+	INT32 nLen;
+
+	BurnSetRefreshRate(CAVE_REFRESHRATE);
+
+	// Find out how much memory is needed
+	Mem = NULL;
+	MemIndex();
+	nLen = MemEnd - (UINT8 *)0;
+	if ((Mem = (UINT8 *)BurnMalloc(nLen)) == NULL) {
+		return 1;
+	}
+	memset(Mem, 0, nLen);										// blank all memory
+	MemIndex();													// Index the allocated memory
+
+	// Load the roms into memory
+	if (PlegendsLoadRoms()) {
+		return 1;
+	}
+	
+	EEPROMInit(&eeprom_interface_93C46);
+
+	{
+		SekInit(0, 0x68000);													// Allocate 68000
+	    SekOpen(0);
+
+		// Map 68000 memory:
+		SekMapMemory(Rom01,				0x000000, 0x1FFFFF, MAP_ROM);	// CPU 0 ROM
+		SekMapMemory(Ram01,				0x400000, 0x40FFFF, MAP_RAM);
+		SekMapMemory(Rom01 + 0x200000,			0x600000, 0x6FFFFF, MAP_ROM);
+		SekMapMemory(CaveTileRAM[2],			0x800000, 0x807FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[0],			0x880000, 0x887FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[1],			0x900000, 0x907FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x980000, 0x983FFF, MAP_RAM);
+		SekMapMemory(CaveTileRAM[3] + 0x4000,		0x984000, 0x987FFF, MAP_RAM);
+		SekMapMemory(CaveSpriteRAM,			0xa00000, 0xa07FFF, MAP_RAM);
+		SekMapMemory(Ram01 + 0x10000,			0xa08000, 0xa1FFFF, MAP_RAM);
+		SekMapMemory(CavePalSrc,			0xf00000, 0xf04FFF, MAP_RAM);	// Palette RAM
+		SekSetReadWordHandler(0, pwrinst2ReadWord);
+		SekSetWriteWordHandler(0, pwrinst2WriteWord);
+		SekSetReadByteHandler(0, pwrinst2ReadByte);
+		SekSetWriteByteHandler(0, pwrinst2WriteByte);
+		SekClose();
+	}
+	
+	drvZInit();
+
+	CavePalInit(0x8000);
+	CaveTileInit();
+	CaveSpriteInit(3, 0x01000000 * 2);
+	CaveTileInitLayer(0, 0x400000, 4, 0x0800);
+	CaveTileInitLayer(1, 0x400000, 4, 0x1000);
+	CaveTileInitLayer(2, 0x400000, 4, 0x1800);
+	CaveTileInitLayer(3, 0x100000, 4, 0x2000);
+	
+	nCaveExtraXOffset = -112;
+	nCaveExtraYOffset = 1;
+	
+	BurnYM2203Init(1, 4000000, &DrvFMIRQHandler, 0);
+	BurnTimerAttachZet(8000000);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_YM2203_ROUTE, 0.70, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_1, 0.30, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_2, 0.30, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetRoute(0, BURN_SND_YM2203_AY8910_ROUTE_3, 0.30, BURN_SND_ROUTE_BOTH);
+	
+	MSM6295Init(0, 3000000 / 165, 1);
+	MSM6295Init(1, 3000000 / 165, 1);
+	MSM6295SetRoute(0, 0.50, BURN_SND_ROUTE_BOTH);
+	MSM6295SetRoute(1, 0.40, BURN_SND_ROUTE_BOTH);
+
+	NMK112_init(0, MSM6295ROM, MSM6295ROM + 0x400000, 0x400000, 0x400000);
+	
+	bDrawScreen = true;
+
+	DrvDoReset(); // Reset machine
+
+	return 0;
+}
+
+// Rom information
+static struct BurnRomInfo pwrinst2RomDesc[] = {
+	{ "g02.u45",      0x080000, 0x7b33bc43, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
+	{ "g02.u44",      0x080000, 0x8f6f6637, BRF_ESS | BRF_PRG }, //  1
+	{ "g02.u43",      0x080000, 0x178e3d24, BRF_ESS | BRF_PRG }, //  2
+	{ "g02.u42",      0x080000, 0xa0b4ee99, BRF_ESS | BRF_PRG }, //  3
+	
+	{ "g02.u3a",      0x020000, 0xebea5e1e, BRF_ESS | BRF_PRG }, //  4 Z80 Code
+
+	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
+	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
+	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
+	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
+	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
+	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
+	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
+
+	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
+	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
+	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
+	{ "g02.82a",      0x080000, 0x4b3567d6, BRF_GRA },			 //  15 Layer 3 Tile data
+
+	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
+	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
+	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
+	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
+};
+
+
+STD_ROM_PICK(pwrinst2)
+STD_ROM_FN(pwrinst2)
+
+static struct BurnRomInfo pwrinst2jRomDesc[] = {
+	{ "g02j.u45",     0x080000, 0x42d0abd7, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
+	{ "g02j.u44",     0x080000, 0x362b7af3, BRF_ESS | BRF_PRG }, //  1
+	{ "g02j.u43",     0x080000, 0xc94c596b, BRF_ESS | BRF_PRG }, //  2
+	{ "g02j.u42",     0x080000, 0x4f4c8270, BRF_ESS | BRF_PRG }, //  3
+	
+	{ "g02j.u3a",     0x020000, 0xeead01f1, BRF_ESS | BRF_PRG }, //  4 Z80 Code
+
+	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
+	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
+	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
+	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
+	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
+	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
+	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
+
+	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
+	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
+	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
+	{ "g02j.82a",     0x080000, 0x3be86fe1, BRF_GRA },			 //  15 Layer 3 Tile data
+
+	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
+	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
+	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
+	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
+};
+
+
+STD_ROM_PICK(pwrinst2j)
+STD_ROM_FN(pwrinst2j)
+
+static struct BurnRomInfo pwrinst2kRomDesc[] = {
+	{ "g02k.u45",     0x080000, 0x5468cbe5, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
+	{ "g02k.u44",     0x080000, 0x5561f620, BRF_ESS | BRF_PRG }, //  1
+	{ "g02k.u43",     0x080000, 0x5af96f07, BRF_ESS | BRF_PRG }, //  2
+	{ "g02k.u42",     0x080000, 0x56279c1c, BRF_ESS | BRF_PRG }, //  3
+	
+	{ "g02.u3k",  	  0x020000, 0xebea5e1e, BRF_ESS | BRF_PRG }, //  4 Z80 Code
+
+	{ "g02.u61",      0x200000, 0x91e30398, BRF_GRA },			 //  5 Sprite data
+	{ "g02.u62",      0x200000, 0xd9455dd7, BRF_GRA },			 //  6
+	{ "g02.u63",      0x200000, 0x4d20560b, BRF_GRA },			 //  7
+	{ "g02.u64",      0x200000, 0xb17b9b6e, BRF_GRA },			 //  8
+	{ "g02.u65",      0x200000, 0x08541878, BRF_GRA },			 //  9
+	{ "g02.u66",      0x200000, 0xbecf2a36, BRF_GRA },			 //  10
+	{ "g02.u67",      0x200000, 0x52fe2b8b, BRF_GRA },			 //  11
+
+	{ "g02.u78",      0x200000, 0x1eca63d2, BRF_GRA },			 //  12 Layer 0 Tile data
+	{ "g02.u81",      0x100000, 0x8a3ff685, BRF_GRA },			 //  13 Layer 1 Tile data
+	{ "g02.u89",      0x100000, 0x373e1f73, BRF_GRA },			 //  14 Layer 2 Tile data
+	{ "g02k.82a",     0x080000, 0x4b3567d6, BRF_GRA },			 //  15 Layer 3 Tile data
+
+	{ "g02.u53",      0x200000, 0xc4bdd9e0, BRF_SND },			 //  16 MSM6295 #1 ADPCM data
+	{ "g02.u54",      0x200000, 0x1357d50e, BRF_SND },			 //  17
+	{ "g02.u55",      0x200000, 0x2d102898, BRF_SND },			 //  18 MSM6295 #2 ADPCM data
+	{ "g02.u56",      0x200000, 0x9ff50dda, BRF_SND },			 //  19
+};
+
+
+STD_ROM_PICK(pwrinst2k)
+STD_ROM_FN(pwrinst2k)
+
+static struct BurnRomInfo plegendsRomDesc[] = {
+	{ "d12.u45",        0x080000, 0xed8a2e3d, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
+	{ "d13.u44",        0x080000, 0x25821731, BRF_ESS | BRF_PRG }, //  1
+	{ "d14.u2",         0x080000, 0xc2cb1402, BRF_ESS | BRF_PRG }, //  2
+	{ "d16.u3",         0x080000, 0x50a1c63e, BRF_ESS | BRF_PRG }, //  3
+	{ "d15.u4",         0x080000, 0x6352cec0, BRF_ESS | BRF_PRG }, //  4
+	{ "d17.u5",         0x080000, 0x7af810d8, BRF_ESS | BRF_PRG }, //  5
+	
+	{ "d19.u3",         0x040000, 0x47598459, BRF_ESS | BRF_PRG }, //  6 Z80 Code
+
+	{ "g02.u61",        0x200000, 0x91e30398, BRF_GRA },			 //  7 Sprite data
+	{ "g02.u62",        0x200000, 0xd9455dd7, BRF_GRA },			 //  8
+	{ "g02.u63",        0x200000, 0x4d20560b, BRF_GRA },			 //  9
+	{ "g02.u64",        0x200000, 0xb17b9b6e, BRF_GRA },			 //  10
+	{ "g02.u65",        0x200000, 0x08541878, BRF_GRA },			 //  11
+	{ "g02.u66",        0x200000, 0xbecf2a36, BRF_GRA },			 //  12
+	{ "atgs.u1",        0x200000, 0xaa6f34a9, BRF_GRA },			 //  13
+	{ "atgs.u2",        0x200000, 0x553eda27, BRF_GRA },			 //  14
+
+	{ "atgs.u78",       0x200000, 0x16710ecb, BRF_GRA },			 //  15 Layer 0 Tile data
+	{ "atgs.u81",       0x200000, 0xcb2aca91, BRF_GRA },			 //  16 Layer 1 Tile data
+	{ "atgs.u89",       0x200000, 0x65f45a0f, BRF_GRA },			 //  17 Layer 2 Tile data
+	{ "text.u82",       0x080000, 0xf57333ea, BRF_GRA },			 //  18 Layer 3 Tile data
+
+	{ "g02.u53",        0x200000, 0xc4bdd9e0, BRF_SND },			 //  19 MSM6295 #1 ADPCM data
+	{ "g02.u54",        0x200000, 0x1357d50e, BRF_SND },			 //  20
+	{ "g02.u55",        0x200000, 0x2d102898, BRF_SND },			 //  21 MSM6295 #2 ADPCM data
+	{ "g02.u56",        0x200000, 0x9ff50dda, BRF_SND },			 //  22
+};
+
+
+STD_ROM_PICK(plegends)
+STD_ROM_FN(plegends)
+
+static struct BurnRomInfo plegendsjRomDesc[] = {
+	{ "prog.u45",       0x080000, 0x94f53db2, BRF_ESS | BRF_PRG }, //  0 CPU #0 code
+	{ "prog.u44",       0x080000, 0xdb0ad756, BRF_ESS | BRF_PRG }, //  1
+	{ "pr12.u2",        0x080000, 0x0e202559, BRF_ESS | BRF_PRG }, //  2
+	{ "pr12.u3",        0x080000, 0x54742f21, BRF_ESS | BRF_PRG }, //  3
+	{ "d15.u4",         0x080000, 0x6352cec0, BRF_ESS | BRF_PRG }, //  4
+	{ "d17.u5",         0x080000, 0x7af810d8, BRF_ESS | BRF_PRG }, //  5
+	
+	{ "sound.u3",       0x020000, 0x36f71520, BRF_ESS | BRF_PRG }, //  6 Z80 Code
+
+	{ "g02.u61",        0x200000, 0x91e30398, BRF_GRA },			 //  7 Sprite data
+	{ "g02.u62",        0x200000, 0xd9455dd7, BRF_GRA },			 //  8
+	{ "g02.u63",        0x200000, 0x4d20560b, BRF_GRA },			 //  9
+	{ "g02.u64",        0x200000, 0xb17b9b6e, BRF_GRA },			 //  10
+	{ "g02.u65",        0x200000, 0x08541878, BRF_GRA },			 //  11
+	{ "g02.u66",        0x200000, 0xbecf2a36, BRF_GRA },			 //  12
+	{ "atgs.u1",        0x200000, 0xaa6f34a9, BRF_GRA },			 //  13
+	{ "atgs.u2",        0x200000, 0x553eda27, BRF_GRA },			 //  14
+
+	{ "atgs.u78",       0x200000, 0x16710ecb, BRF_GRA },			 //  15 Layer 0 Tile data
+	{ "atgs.u81",       0x200000, 0xcb2aca91, BRF_GRA },			 //  16 Layer 1 Tile data
+	{ "atgs.u89",       0x200000, 0x65f45a0f, BRF_GRA },			 //  17 Layer 2 Tile data
+	{ "text.u82",       0x080000, 0xf57333ea, BRF_GRA },			 //  18 Layer 3 Tile data
+
+	{ "g02.u53",        0x200000, 0xc4bdd9e0, BRF_SND },			 //  19 MSM6295 #1 ADPCM data
+	{ "g02.u54",        0x200000, 0x1357d50e, BRF_SND },			 //  20
+	{ "g02.u55",        0x200000, 0x2d102898, BRF_SND },			 //  21 MSM6295 #2 ADPCM data
+	{ "g02.u56",        0x200000, 0x9ff50dda, BRF_SND },			 //  22
+};
+
+
+STD_ROM_PICK(plegendsj)
+STD_ROM_FN(plegendsj)
+
+struct BurnDriver BurnDrvPwrinst2 = {
+	"pwrinst2", NULL, NULL, NULL, "1994",
+	"Power Instinct 2 (USA, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, pwrinst2RomInfo, pwrinst2RomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
+	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
+};
+
+struct BurnDriver BurnDrvPwrinst2j = {
+	"pwrinst2j", "pwrinst2", NULL, NULL, "1994",
+	"Gouketsuji Ichizoku 2 (Japan, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
+	L"\u8C6A\u8840\u5BFA\u4E00\u65CF \uFF12 (Japan, ver. 94/04/08)\0Gouketsuji Ichizoku 2\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, pwrinst2jRomInfo, pwrinst2jRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
+	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
+};
+
+struct BurnDriver BurnDrvPwrinst2k = {
+	"pwrinst2k", "pwrinst2", NULL, NULL, "1994",
+	"Power Instinct 2 (Korea, ver. 94/04/08)\0", NULL, "Atlus", "Cave",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, pwrinst2kRomInfo, pwrinst2kRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
+	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
+};
+
+struct BurnDriver BurnDrvPlegends = {
+	"plegends", NULL, NULL, NULL, "1995",
+	"Gouketsuji Gaiden Legends (USA, ver. 95/06/20)\0", NULL, "Atlus / KM International", "Cave",
+	L"\u8C6A\u8840\u5BFA\u5916\u4F1D Gogetsuji Legends (USA, ver. 95/06/20)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, plegendsRomInfo, plegendsRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
+	PlegendsInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
+	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
+};
+
+struct BurnDriver BurnDrvPlegendsj = {
+	"plegendsj", "plegends", NULL, NULL, "1995",
+	"Gouketsuji Gaiden Saikyou Densetsu (Japan, ver. 95/06/20)\0", NULL, "Atlus", "Cave",
+	L"\u8C6A\u8840\u5BFA\u5916\u4F1D Gogetsuji \u6700\u5F37\u4F1D\u8AAC (Japan, ver. 95/06/20)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_16BIT_ONLY, 2, HARDWARE_CAVE_68K_Z80, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, plegendsjRomInfo, plegendsjRomName, NULL, NULL, NULL, NULL, pwrinst2InputInfo, NULL,
+	PlegendsInit, DrvExit, DrvFrame, DrvDraw, DrvScan,
+	&CaveRecalcPalette, 0x8000, 320, 240, 4, 3
+};
diff --git a/src/burn/drv/irem/d_m72.cpp b/src/burn/drv/irem/d_m72.cpp
index 6bc8c984b..d7e406e29 100644
--- a/src/burn/drv/irem/d_m72.cpp
+++ b/src/burn/drv/irem/d_m72.cpp
@@ -1,4283 +1,4283 @@
-// FB Alpha Irem M72 driver module
-// Based on MAME driver by Nicola Salmoria and Nao
-
-#include "tiles_generic.h"
-#include "z80_intf.h"
-#include "burn_ym2151.h"
-#include "nec_intf.h"
-#include "irem_cpu.h"
-#include "dac.h"
-#include "burn_gun.h"
-
-static UINT8 *AllMem;
-static UINT8 *MemEnd;
-static UINT8 *AllRam;
-static UINT8 *RamEnd;
-static UINT8 *DrvV30ROM;
-static UINT8 *DrvZ80ROM;
-static UINT8 *DrvGfxROM0;
-static UINT8 *DrvGfxROM1;
-static UINT8 *DrvGfxROM2;
-static UINT8 *DrvGfxROM3;
-static UINT8 *DrvSndROM;
-static UINT8 *DrvVidRAM0;
-static UINT8 *DrvVidRAM1;
-static UINT8 *DrvV30RAM;
-static UINT8 *DrvZ80RAM;
-static UINT8 *DrvSprRAM;
-static UINT8 *DrvSprBuf;
-static UINT8 *DrvPalRAM;
-static UINT8 *DrvProtRAM;
-static UINT8 *DrvRowScroll;
-static UINT8 *DrvSprRAM2;
-
-static UINT8 *scroll;
-
-static UINT8 *RamPrioBitmap;
-
-static UINT8 *soundlatch;
-static UINT8 *video_disable;
-
-static UINT32 *DrvPalette;
-static UINT8 DrvRecalc;
-static UINT8 irqvector;
-static INT32 sample_address;
-static INT32 irq_raster_position;
-static INT32 z80_reset = 0;
-static INT32 majtitle_rowscroll_enable = 0;
-
-static UINT8 DrvJoy1[8];
-static UINT8 DrvJoy2[8];
-static UINT8 DrvJoy3[8];
-static UINT8 DrvJoy4[8];
-static UINT8 DrvJoy5[8];
-static UINT8 DrvDips[2];
-static UINT8 DrvInputs[5];
-static UINT8 DrvReset;
-static INT16 DrvAnalogPort0 = 0;
-static INT16 DrvAnalogPort1 = 0;
-static INT16 DrvAnalogPort2 = 0;
-static INT16 DrvAnalogPort3 = 0;
-
-static INT32 nExtraCycles;
-static INT32 nCurrentCycles;
-static INT32 nCyclesDone[2];
-static INT32 nCyclesTotal[2];
-
-static INT32 Clock_16mhz = 0;
-static INT32 Kengo = 0;
-static INT32 CosmicCop = 0;
-static INT32 Poundfor = 0;
-static INT32 m72_video_type = 0;
-static INT32 z80_nmi_enable = 0;
-static INT32 enable_z80_reset = 0; // only if z80 is not rom-based!
-static INT32 m72_irq_base = 0;
-static INT32 code_mask[4];
-static INT32 graphics_length[4];
-static INT32 video_offsets[2] = { 0, 0 };
-
-enum { Z80_NO_NMI=0, Z80_REAL_NMI, Z80_FAKE_NMI };
-enum { VECTOR_INIT, YM2151_ASSERT, YM2151_CLEAR, Z80_ASSERT, Z80_CLEAR };
-
-
-static struct BurnInputInfo CommonInputList[] = {
-	{"P1 Coin",		BIT_DIGITAL,	DrvJoy3 + 2,	"p1 coin"	},
-	{"P1 Start",		BIT_DIGITAL,	DrvJoy3 + 0,	"p1 start"	},
-	{"P1 Up",		BIT_DIGITAL,	DrvJoy1 + 3,	"p1 up"		},
-	{"P1 Down",		BIT_DIGITAL,	DrvJoy1 + 2,	"p1 down"	},
-	{"P1 Left",		BIT_DIGITAL,	DrvJoy1 + 1,	"p1 left"	},
-	{"P1 Right",		BIT_DIGITAL,	DrvJoy1 + 0,	"p1 right"	},
-	{"P1 Button 1",		BIT_DIGITAL,	DrvJoy1 + 7,	"p1 fire 1"	},
-	{"P1 Button 2",		BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 2"	},
-	{"P1 Button 3",		BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 3"	},
-	{"P1 Button 4",		BIT_DIGITAL,	DrvJoy1 + 4,	"p1 fire 4"	},
-
-	{"P2 Coin",		BIT_DIGITAL,	DrvJoy3 + 3,	"p2 coin"	},
-	{"P2 Start",		BIT_DIGITAL,	DrvJoy3 + 1,	"p2 start"	},
-	{"P2 Up",		BIT_DIGITAL,	DrvJoy2 + 3,	"p2 up"		},
-	{"P2 Down",		BIT_DIGITAL,	DrvJoy2 + 2,	"p2 down"	},
-	{"P2 Left",		BIT_DIGITAL,	DrvJoy2 + 1,	"p2 left"	},
-	{"P2 Right",		BIT_DIGITAL,	DrvJoy2 + 0,	"p2 right"	},
-	{"P2 Button 1",		BIT_DIGITAL,	DrvJoy2 + 7,	"p2 fire 1"	},
-	{"P2 Button 2",		BIT_DIGITAL,	DrvJoy2 + 6,	"p2 fire 2"	},
-	{"P2 Button 3",		BIT_DIGITAL,	DrvJoy2 + 5,	"p2 fire 3"	},
-	{"P2 Button 4",		BIT_DIGITAL,	DrvJoy2 + 4,	"p2 fire 4"	},
-
-	{"Reset",		BIT_DIGITAL,	&DrvReset,	"reset"		},
-	{"Service",		BIT_DIGITAL,	DrvJoy3 + 4,	"service"	},
-	{"Dip A",		BIT_DIPSWITCH,	DrvDips + 0,	"dip"		},
-	{"Dip B",		BIT_DIPSWITCH,	DrvDips + 1,	"dip"		},
-};
-
-STDINPUTINFO(Common)
-
-#define A(a, b, c, d) {a, b, (UINT8*)(c), d}
-static struct BurnInputInfo PoundforInputList[] = {
-	{"P1 Coin",		    BIT_DIGITAL,	DrvJoy2 + 2,	"p1 coin"},
-	{"P1 Start",		BIT_DIGITAL,	DrvJoy2 + 0,	"p1 start"},
-	{"P1 Button 1",		BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 1"},
-	{"P1 Button 2",		BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 2"},
-	A("P1 Trackball X", BIT_ANALOG_REL, &DrvAnalogPort0,"p1 x-axis" ),
-	A("P1 Trackball Y", BIT_ANALOG_REL, &DrvAnalogPort1,"p1 y-axis" ),
-
-	{"P2 Coin",		    BIT_DIGITAL,	DrvJoy2 + 3,	"p2 coin"},
-	{"P2 Start",		BIT_DIGITAL,	DrvJoy2 + 1,	"p2 start"},
-	{"P2 Button 1",		BIT_DIGITAL,	DrvJoy4 + 6,	"p2 fire 1"},
-	{"P2 Button 2",		BIT_DIGITAL,	DrvJoy4 + 5,	"p2 fire 2"},
-	A("P2 Trackball X", BIT_ANALOG_REL, &DrvAnalogPort2,"p2 x-axis" ),
-	A("P2 Trackball Y", BIT_ANALOG_REL, &DrvAnalogPort3,"p2 y-axis" ),
-
-	{"Reset",		BIT_DIGITAL,	&DrvReset,	"reset"},
-	{"Service",		BIT_DIGITAL,	DrvJoy2 + 4,	"service"},
-	{"Dip A",		BIT_DIPSWITCH,	DrvDips + 0,	"dip"},
-	{"Dip B",		BIT_DIPSWITCH,	DrvDips + 1,	"dip"},
-};
-#undef A
-
-STDINPUTINFO(Poundfor)
-
-static struct BurnDIPInfo Dip2CoinDIPList[]=
-{
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x16, 0x01, 0x40, 0x40, "Off"				},
-	{0x16, 0x01, 0x40, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Service Mode"			},
-	{0x16, 0x01, 0x80, 0x80, "Off"				},
-	{0x16, 0x01, 0x80, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x17, 0x01, 0x01, 0x01, "Off"				},
-	{0x17, 0x01, 0x01, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
-	{0x17, 0x01, 0x08, 0x08, "Mode 1"			},
-	{0x17, 0x01, 0x08, 0x00, "Mode 2"			},
-
-	{0   , 0xfe, 0   ,   16, "Coinage"			},
-	{0x17, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
-	{0x17, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
-	{0x17, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
-	{0x17, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
-	{0x17, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
-	{0x17, 0x01, 0xf0, 0x10, "2 Coins to Start/1 to Cont."	},
-	{0x17, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
-	{0x17, 0x01, 0xf0, 0x20, "4 Coins 3 Credits"		},
-	{0x17, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
-	{0x17, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
-	{0x17, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
-	{0x17, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
-	{0x17, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
-	{0x17, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
-	{0x17, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
-	{0x17, 0x01, 0xf0, 0x00, "Free Play"			},
-};
-
-static struct BurnDIPInfo Dip1CoinDIPList[]=
-{
-	{0   , 0xfe, 0   ,   16, "Coinage"			},
-	{0x16, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
-	{0x16, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
-	{0x16, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
-	{0x16, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
-	{0x16, 0x01, 0xf0, 0x10, "8 Coins 3 Credits"		},
-	{0x16, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
-	{0x16, 0x01, 0xf0, 0x20, "5 Coins 3 Credits"		},
-	{0x16, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
-	{0x16, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
-	{0x16, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
-	{0x16, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
-	{0x16, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
-	{0x16, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
-	{0x16, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
-	{0x16, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
-	{0x16, 0x01, 0xf0, 0x00, "Free Play"			},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x17, 0x01, 0x01, 0x01, "Off"				},
-	{0x17, 0x01, 0x01, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
-	{0x17, 0x01, 0x04, 0x04, "Mode 1"			},
-	{0x17, 0x01, 0x04, 0x00, "Mode 2"			},
-
-	{0   , 0xfe, 0   ,    2, "Stop Mode"			},
-	{0x17, 0x01, 0x20, 0x20, "Off"				},
-	{0x17, 0x01, 0x20, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Service Mode"			},
-	{0x17, 0x01, 0x80, 0x80, "Off"				},
-	{0x17, 0x01, 0x80, 0x00, "On"				},
-};
-
-static struct BurnDIPInfo RtypeDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xfb, NULL				},
-	{0x17, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x16, 0x01, 0x04, 0x04, "Off"				},
-	{0x16, 0x01, 0x04, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Bonus Life"			},
-	{0x16, 0x01, 0x08, 0x00, "50K 150K 250K 400K 600K"	},
-	{0x16, 0x01, 0x08, 0x08, "100K 200K 350K 500K 700K"	},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Difficulty"			},
-	{0x17, 0x01, 0x08, 0x08, "Normal"			},
-	{0x17, 0x01, 0x08, 0x00, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x17, 0x01, 0x10, 0x00, "No"				},
-	{0x17, 0x01, 0x10, 0x10, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
-	{0x17, 0x01, 0x40, 0x40, "Off"				},
-	{0x17, 0x01, 0x40, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Rtype,	Dip1Coin, Rtype	)
-
-static struct BurnDIPInfo RtypepDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xfb, NULL				},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x16, 0x01, 0x04, 0x04, "On"				},
-	{0x16, 0x01, 0x04, 0x00, "Off"				},
-};
-
-STDDIPINFOEXT(Rtypep,	Rtype, Rtypep	)
-
-static struct BurnDIPInfo XmultiplDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xff, NULL				},
-	{0x17, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x03, 0x02, "Very Easy"			},
-	{0x16, 0x01, 0x03, 0x01, "Easy"				},
-	{0x16, 0x01, 0x03, 0x03, "Normal"			},
-	{0x16, 0x01, 0x03, 0x00, "Hard"				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x0c, 0x08, "1"				},
-	{0x16, 0x01, 0x0c, 0x04, "2"				},
-	{0x16, 0x01, 0x0c, 0x0c, "3"				},
-	{0x16, 0x01, 0x0c, 0x00, "4"				},
-
-	{0   , 0xfe, 0   ,    4, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright (single)"		},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright (double) On"		},
-	{0x17, 0x01, 0x02, 0x02, "Upright (double) Off"		},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x17, 0x01, 0x08, 0x00, "Off"				},
-	{0x17, 0x01, 0x08, 0x08, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Upright (double) Mode"	},
-	{0x17, 0x01, 0x10, 0x10, "Off"				},
-	{0x17, 0x01, 0x10, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x17, 0x01, 0x20, 0x00, "No"				},
-	{0x17, 0x01, 0x20, 0x20, "Yes"				},
-};
-
-STDDIPINFOEXT(Xmultipl,	Dip1Coin, Xmultipl	)
-
-static struct BurnDIPInfo DbreedDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xff, NULL				},
-	{0x17, 0xff, 0xff, 0xf5, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x17, 0x01, 0x08, 0x08, "Off"				},
-	{0x17, 0x01, 0x08, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x17, 0x01, 0x10, 0x00, "No"				},
-	{0x17, 0x01, 0x10, 0x10, "Yes"				},
-};
-
-STDDIPINFOEXT(Dbreed,	Dip1Coin, Dbreed	)
-
-static struct BurnDIPInfo BchopperDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xfb, NULL				},
-	{0x17, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x00, "1"				},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x16, 0x01, 0x04, 0x04, "Off"				},
-	{0x16, 0x01, 0x04, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Bonus Life"			},
-	{0x16, 0x01, 0x08, 0x08, "80K 200K 350K"		},
-	{0x16, 0x01, 0x08, 0x00, "100K 250K 400K"		},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Difficulty"			},
-	{0x17, 0x01, 0x08, 0x08, "Normal"			},
-	{0x17, 0x01, 0x08, 0x00, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x17, 0x01, 0x10, 0x00, "No"				},
-	{0x17, 0x01, 0x10, 0x10, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
-	{0x17, 0x01, 0x40, 0x40, "Off"				},
-	{0x17, 0x01, 0x40, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Bchopper,	Dip1Coin, Bchopper	)
-
-static struct BurnDIPInfo NspiritDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xff, NULL				},
-	{0x17, 0xff, 0xff, 0xf5, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-	{0x16, 0x01, 0x0c, 0x00, "Hardest"			},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x17, 0x01, 0x08, 0x08, "Off"				},
-	{0x17, 0x01, 0x08, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x17, 0x01, 0x10, 0x00, "No"				},
-	{0x17, 0x01, 0x10, 0x10, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
-	{0x17, 0x01, 0x40, 0x40, "Off"				},
-	{0x17, 0x01, 0x40, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Nspirit,	Dip1Coin, Nspirit	)
-
-static struct BurnDIPInfo ImgfightDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xff, NULL				},
-	{0x17, 0xff, 0xff, 0xe5, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x08, "Hard"				},
-	{0x16, 0x01, 0x0c, 0x04, "Hardest"			},
-	{0x16, 0x01, 0x0c, 0x00, "Debug Mode 2 lap"		},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x17, 0x01, 0x08, 0x08, "Off"				},
-	{0x17, 0x01, 0x08, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Imgfight,	Dip1Coin, Imgfight	)
-
-static struct BurnDIPInfo Rtype2DIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xff, NULL				},
-	{0x17, 0xff, 0xff, 0xf7, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-	{0x16, 0x01, 0x0c, 0x00, "Hardest"			},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x17, 0x01, 0x02, 0x00, "Off"				},
-	{0x17, 0x01, 0x02, 0x02, "On"				},
-
-	{0   , 0xfe, 0   ,    3, "Cabinet"			},
-	{0x17, 0x01, 0x18, 0x10, "Upright"			},
-	{0x17, 0x01, 0x18, 0x00, "Upright (2P)"			},
-	{0x17, 0x01, 0x18, 0x18, "Cocktail"			},
-};
-
-STDDIPINFOEXT(Rtype2,	Dip1Coin, Rtype2	)
-
-static struct BurnDIPInfo LohtDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xfb, NULL				},
-	{0x17, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x00, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x02, "4"				},
-	{0x16, 0x01, 0x03, 0x01, "5"				},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x16, 0x01, 0x04, 0x04, "Off"				},
-	{0x16, 0x01, 0x04, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x02, 0x00, "Upright"			},
-	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
-	
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x17, 0x01, 0x18, 0x00, "Easy"				},
-	{0x17, 0x01, 0x18, 0x18, "Normal"			},
-	{0x17, 0x01, 0x18, 0x10, "Hard"				},
-	{0x17, 0x01, 0x18, 0x08, "Hardest"			},
-
-	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
-	{0x17, 0x01, 0x40, 0x40, "Off"				},
-	{0x17, 0x01, 0x40, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Loht,	Dip1Coin, Loht		)
-
-static struct BurnDIPInfo AirduelDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xbf, NULL				},
-	{0x17, 0xff, 0xff, 0xff, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x17, 0x01, 0x01, 0x01, "Off"				},
-	{0x17, 0x01, 0x01, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Airduel,	Dip2Coin, Airduel	)
-
-static struct BurnDIPInfo GallopDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xbf, NULL				},
-	{0x17, 0xff, 0xff, 0xf9, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-
-	{0   , 0xfe, 0   ,    0, "Allow Continue"		},
-	{0x16, 0x01, 0x20, 0x00, "No"				},
-	{0x16, 0x01, 0x20, 0x20, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x17, 0x01, 0x01, 0x01, "Off"				},
-	{0x17, 0x01, 0x01, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Cabinet"			},
-	{0x17, 0x01, 0x06, 0x00, "Upright"			},
-	{0x17, 0x01, 0x06, 0x02, "Upright (2P)"			},
-	{0x17, 0x01, 0x06, 0x06, "Cocktail"			},
-};
-
-STDDIPINFOEXT(Gallop,	Dip2Coin, Gallop	)
-
-static struct BurnDIPInfo KengoDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xbf, NULL				},
-	{0x17, 0xff, 0xff, 0xf9, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x16, 0x01, 0x20, 0x00, "No"				},
-	{0x16, 0x01, 0x20, 0x20, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x17, 0x01, 0x01, 0x01, "Off"				},
-	{0x17, 0x01, 0x01, 0x00, "On"				},
-};
-
-STDDIPINFOEXT(Kengo,	Dip2Coin, Kengo	)
-
-static struct BurnDIPInfo HharryDIPList[]=
-{
-	{0x16, 0xff, 0xff, 0xbf, NULL				},
-	{0x17, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Lives"			},
-	{0x16, 0x01, 0x03, 0x02, "2"				},
-	{0x16, 0x01, 0x03, 0x03, "3"				},
-	{0x16, 0x01, 0x03, 0x01, "4"				},
-	{0x16, 0x01, 0x03, 0x00, "5"				},
-	
-	{0   , 0xfe, 0   ,    4, "Difficulty"			},
-	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
-	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
-	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
-	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Continue Limit"		},
-	{0x16, 0x01, 0x10, 0x00, "No"				},
-	{0x16, 0x01, 0x10, 0x10, "Yes"				},
-
-	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
-	{0x16, 0x01, 0x20, 0x00, "No"				},
-	{0x16, 0x01, 0x20, 0x20, "Yes"				},
-
-	{0   , 0xfe, 0   ,    3, "Cabinet"			},
-	{0x17, 0x01, 0x06, 0x04, "Upright"			},
-	{0x17, 0x01, 0x06, 0x00, "Upright (2P)"			},
-	{0x17, 0x01, 0x06, 0x06, "Cocktail"			},
-};
-
-STDDIPINFOEXT(Hharry,	Dip2Coin, Hharry	)
-
-static struct BurnDIPInfo PoundforDIPList[]=
-{
-	{0x0e, 0xff, 0xff, 0xbf, NULL				},
-	{0x0f, 0xff, 0xff, 0xfd, NULL				},
-
-	{0   , 0xfe, 0   ,    4, "Round Time"			},
-	{0x0e, 0x01, 0x03, 0x02, "60"				},
-	{0x0e, 0x01, 0x03, 0x03, "90"				},
-	{0x0e, 0x01, 0x03, 0x01, "120"				},
-	{0x0e, 0x01, 0x03, 0x00, "150"				},
-
-	{0   , 0xfe, 0   ,    2, "Matches/Credit (2P)"		},
-	{0x0e, 0x01, 0x04, 0x04, "1"				},
-	{0x0e, 0x01, 0x04, 0x00, "2"				},
-
-	{0   , 0xfe, 0   ,    2, "Rounds/Match"			},
-	{0x0e, 0x01, 0x08, 0x08, "2"				},
-	{0x0e, 0x01, 0x08, 0x00, "3"				},
-
-	{0   , 0xfe, 0   ,    2, "Difficulty"			},
-	{0x0e, 0x01, 0x10, 0x10, "Normal"			},
-	{0x0e, 0x01, 0x10, 0x00, "Hard"				},
-
-	{0   , 0xfe, 0   ,    2, "Trackball Size"		},
-	{0x0e, 0x01, 0x20, 0x20, "Small"			},
-	{0x0e, 0x01, 0x20, 0x00, "Large"			},
-
-	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
-	{0x0e, 0x01, 0x40, 0x40, "Off"				},
-	{0x0e, 0x01, 0x40, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Service Mode"			},
-	{0x0e, 0x01, 0x80, 0x80, "Off"				},
-	{0x0e, 0x01, 0x80, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
-	{0x0f, 0x01, 0x01, 0x01, "Off"				},
-	{0x0f, 0x01, 0x01, 0x00, "On"				},
-
-	{0   , 0xfe, 0   ,    3, "Cabinet"			},
-	{0x0f, 0x01, 0x06, 0x04, "Upright"			},
-	{0x0f, 0x01, 0x06, 0x02, "Upright (2P)"			},
-	{0x0f, 0x01, 0x06, 0x06, "Cocktail"			},
-
-	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
-	{0x0f, 0x01, 0x08, 0x08, "Mode 1"			},
-	{0x0f, 0x01, 0x08, 0x00, "Mode 2"			},
-
-	{0   , 0xfe, 0   ,    16, "Coinage"			},
-	{0x0f, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x20, "4 Coins 3 Credits"		},
-	{0x0f, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
-	{0x0f, 0x01, 0xf0, 0x10, "1 Coin/1 Credit, 1 Coin/Cont."},
-	{0x0f, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
-	{0x0f, 0x01, 0xf0, 0x00, "Free Play"			},
-};
-
-STDDIPINFO(Poundfor)
-
-//--------------------------------------------------------------------------------------------------------------------------------------------------
-// Protection handlers
-
-static const UINT8 *protection_code = NULL;
-static const UINT8 *protection_crc = NULL;
-static const INT32 *protection_sample_offsets = NULL;
-
-static UINT8 protection_read(INT32 address)
-{
-	if (address == 0xb0ffb) {
-		if (protection_code != NULL) {
-			memcpy (DrvProtRAM, protection_code, 96);
-		}
-	}
-
-	return DrvProtRAM[address & 0xfff];
-}
-
-static void protection_write(INT32 address, UINT8 data)
-{
-	DrvProtRAM[address & 0xfff] = data ^ 0xff;
-
-	if (address == 0xb0fff && data == 0) {
-		if (protection_crc != NULL) {
-			memcpy (DrvProtRAM + 0xfe0, protection_crc, 18);
-		}
-	}
-}
-
-static void protection_sample_offset_write(UINT8 data)
-{
-	if (protection_sample_offsets != NULL) {
-		if (data < protection_sample_offsets[0]) {
-			sample_address = protection_sample_offsets[data+1];
-		}
-	}
-}
-
-static void m72_install_protection(const UINT8 *code, const UINT8 *crc, const INT32 *offs)
-{
-	protection_code = code;
-	protection_crc = crc;
-	protection_sample_offsets = offs;
-}
-
-#define install_protection(name) m72_install_protection(name##_code, name##_crc, name##_sample_offsets)
-
-/* Battle Chopper / Mr. Heli */
-static const INT32 bchopper_sample_offsets[7] = { 6, 0x0000, 0x0010, 0x2510, 0x6510, 0x8510, 0x9310 };
-
-static const UINT8 bchopper_code[96] =
-{
-	0x68,0x00,0xa0,			// push 0a000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x38,0x38,0x53,	// mov [3838h], byte 053h
-	0xc6,0x06,0x3a,0x38,0x41,	// mov [383ah], byte 041h
-	0xc6,0x06,0x3c,0x38,0x4d,	// mov [383ch], byte 04dh
-	0xc6,0x06,0x3e,0x38,0x4f,	// mov [383eh], byte 04fh
-	0xc6,0x06,0x40,0x38,0x54,	// mov [3840h], byte 054h
-	0xc6,0x06,0x42,0x38,0x4f,	// mov [3842h], byte 04fh
-	0x68,0x00,0xb0,			// push 0b000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
-	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
-	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
-	0xc6,0x06,0x00,0x00,0xcb^0xff,	// mov [0000h], byte 0cbh ; retf : bypass protection check during the game
-	0x68,0x00,0xd0,			// push 0d000h
-	0x1f,				// pop ds
-	// the following is for mrheli only, the game checks for
-	// "This game can only be played in Japan..." message in the video text buffer
-	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
-	0xc6,0x06,0x70,0x16,0x77,	// mov [1670h], byte 077h
-	0xea,0x68,0x01,0x40,0x00	// jmp  0040:$0168
-};
-
-static const UINT8 bchopper_crc[18] = {
-	0x1a,0x12,0x5c,0x08,0x84,0xb6,0x73,0xd1,0x54,0x91,0x94,0xeb,0x00,0x00
-};
-
-static const UINT8 mrheli_crc[18] = {
-	0x24,0x21,0x1f,0x14,0xf9,0x28,0xfb,0x47,0x4c,0x77,0x9e,0xc2,0x00,0x00
-};
-
-/* X Multiply */
-static const INT32 xmultiplm72_sample_offsets[4] = { 3, 0x0000, 0x0020, 0x1a40 };
-
-static const UINT8 xmultiplm72_code[96] = {
-	0xea,0x30,0x02,0x00,0x0e	// jmp  0e00:$0230
-};
-
-static const UINT8 xmultiplm72_crc[18] = {
-	0x73,0x82,0x4e,0x3f, 0xfc,0x56,0x59,0x06,0x05,0x48,0xa8,0xf4,0x00,0x00
-};
-
-/* Dragon Breed */
-static const INT32 dbreedm72_sample_offsets[10] = { 9, 0x00000, 0x00020, 0x02c40, 0x08160, 0x0c8c0, 0x0ffe0, 0x13000, 0x15820, 0x15f40 };
-
-static const UINT8 dbreedm72_code[96] = {
-	0xea,0x6c,0x00,0x00,0x00	// jmp  0000:$006c
-};
-
-static const UINT8 dbreedm72_crc[18] ={
-	0xa4,0x96,0x5f,0xc0, 0xab,0x49,0x9f,0x19,0x84,0xe6,0xd6,0xca,0x00,0x00
-};
-
-/* Ninja Spirit */
-static const INT32 nspirit_sample_offsets[10] = { 9, 0x0000, 0x0020, 0x2020, 0, 0x5720, 0, 0x7b60, 0x9b60, 0xc360 };
-
-static const UINT8 nspirit_code[96] =
-{
-	0x68,0x00,0xa0,			// push 0a000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x38,0x38,0x4e,	// mov [3838h], byte 04eh
-	0xc6,0x06,0x3a,0x38,0x49,	// mov [383ah], byte 049h
-	0xc6,0x06,0x3c,0x38,0x4e,	// mov [383ch], byte 04eh
-	0xc6,0x06,0x3e,0x38,0x44,	// mov [383eh], byte 044h
-	0xc6,0x06,0x40,0x38,0x4f,	// mov [3840h], byte 04fh
-	0xc6,0x06,0x42,0x38,0x55,	// mov [3842h], byte 055h
-	0x68,0x00,0xb0,			// push 0b000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
-	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
-	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
-	0x68,0x00,0xd0,			// push 0d000h
-	0x1f,				// pop ds
-	// the following is for nspiritj only, the game checks for
-	// "This game can only be played in Japan..." message in the video text buffer
-	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
-	0xc6,0x06,0x70,0x16,0x57,	// mov [1670h], byte 057h
-	0xc6,0x06,0x71,0x16,0x00,	// mov [1671h], byte 000h
-	0xea,0x00,0x00,0x40,0x00	// jmp  0040:$0000
-};
-
-static const UINT8 nspirit_crc[18] = {
-	0xfe,0x94,0x6e,0x4e, 0xc8,0x33,0xa7,0x2d,0xf2,0xa3,0xf9,0xe1, 0xa9,0x6c,0x02,0x95, 0x00,0x00
-};
-
-static const UINT8 nspiritj_crc[18] = {
-	0x26,0xa3,0xa5,0xe9, 0xc8,0x33,0xa7,0x2d,0xf2,0xa3,0xf9,0xe1, 0xbc,0x6c,0x01,0x95, 0x00,0x00
-};
-
-/* Image Fight */
-static const INT32 imgfight_sample_offsets[8] = { 7, 0x0000, 0x0020, 0x44e0, 0x98a0, 0xc820, 0xf7a0, 0x108c0 };
-
-static const UINT8 imgfight_code[96] =
-{
-	0x68,0x00,0xa0,			// push 0a000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x38,0x38,0x50,	// mov [3838h], byte 050h
-	0xc6,0x06,0x3a,0x38,0x49,	// mov [383ah], byte 049h
-	0xc6,0x06,0x3c,0x38,0x43,	// mov [383ch], byte 043h
-	0xc6,0x06,0x3e,0x38,0x4b,	// mov [383eh], byte 04bh
-	0xc6,0x06,0x40,0x38,0x45,	// mov [3840h], byte 045h
-	0xc6,0x06,0x42,0x38,0x54,	// mov [3842h], byte 054h
-	0x68,0x00,0xb0,			// push 0b000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
-	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
-	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
-	0xc6,0x06,0x20,0x09,0x49^0xff,	// mov [0920h], byte 049h
-	0xc6,0x06,0x21,0x09,0x4d^0xff,	// mov [0921h], byte 04dh
-	0xc6,0x06,0x22,0x09,0x41^0xff,	// mov [0922h], byte 041h
-	0xc6,0x06,0x23,0x09,0x47^0xff,	// mov [0923h], byte 047h
-	0x68,0x00,0xd0,			// push 0d000h
-	0x1f,				// pop ds
-	// the game checks for
-	// "This game can only be played in Japan..." message in the video text buffer
-	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
-	0xc6,0x06,0xb0,0x1c,0x57,	// mov [1cb0h], byte 057h
-	0xea,0x00,0x00,0x40,0x00	// jmp  0040:$0000
-};
-
-static const UINT8 imgfight_crc[18] = {
-	0x7e,0xcc,0xec,0x03, 0x04,0x33,0xb6,0xc5, 0xbf,0x37,0x92,0x94, 0x00,0x00
-};
-
-/* Air Duel */
-static const INT32 airduel_sample_offsets[17] = {
-	16,
-	0x00000, 0x00020, 0x03ec0, 0x05640, 0x06dc0, 0x083a0, 0x0c000, 0x0eb60,
-	0x112e0, 0x13dc0, 0x16520, 0x16d60, 0x18ae0, 0x1a5a0, 0x1bf00, 0x1c340 };
-
-static const UINT8 airduel_code[96] =
-{
-	0x68,0x00,0xd0,			// push 0d000h
-	0x1f,				// pop ds
-	// the game checks for
-	// "This game can only be played in Japan..." message in the video text buffer
-	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
-	0xc6,0x06,0xc0,0x1c,0x57,	// mov [1cc0h], byte 057h
-	0xea,0x69,0x0b,0x00,0x00	// jmp  0000:$0b69
-};
-
-static const UINT8 airduel_crc[18] = {
-	0x72,0x9c,0xca,0x85, 0xc9,0x12,0xcc,0xea, 0x00,0x00
-};
-
-/* Daiku no Gensan */
-static const INT32 dkgenm72_sample_offsets[29] = {
-	28,
-	0x00000, 0x00020, 0x01800, 0x02da0, 0x03be0, 0x05ae0, 0x06100, 0x06de0,
-	0x07260, 0x07a60, 0x08720, 0x0a5c0, 0x0c3c0, 0x0c7a0, 0x0e140, 0x0fb00,
-	0x10fa0, 0x10fc0, 0x10fe0, 0x11f40, 0x12b20, 0x130a0, 0x13c60, 0x14740,
-	0x153c0, 0x197e0, 0x1af40, 0x1c080 };
-
-static const UINT8 dkgenm72_code[96] = {
-	0xea,0x3d,0x00,0x00,0x10	// jmp  1000:$003d
-};
-
-static const UINT8 dkgenm72_crc[18] = {
-	0xc8,0xb4,0xdc,0xf8, 0xd3,0xba,0x48,0xed,0x79,0x08,0x1c,0xb3, 0x00,0x00
-};
-
-/* Legend of Hero Tonma */
-static const INT32 loht_sample_offsets[8] = { 7, 0x0000, 0x0020, 0, 0x2c40, 0x4320, 0x7120, 0xb200 };
-
-static const UINT8 loht_code[96] =
-{
-	0x68,0x00,0xa0,			// push 0a000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x3c,0x38,0x47,	// mov [383ch], byte 047h
-	0xc6,0x06,0x3d,0x38,0x47,	// mov [383dh], byte 047h
-	0xc6,0x06,0x42,0x38,0x44,	// mov [3842h], byte 044h
-	0xc6,0x06,0x43,0x38,0x44,	// mov [3843h], byte 044h
-	0x68,0x00,0xb0,			// push 0b000h
-	0x1f,				// pop ds
-	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
-	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
-	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
-
-	0x68,0x00,0xd0,			// push 0d000h // Japan set only
-	0x1f,				// pop ds // Japan set only
-	0xc6,0x06,0x70,0x16,0x57,	// mov [1670h], byte 057h // Japan set only - checks this (W) of WARNING
-
-	0xea,0x5d,0x01,0x40,0x00	// jmp  0040:$015d
-};
-
-static const UINT8 loht_crc[18] = {
-	0x39,0x00,0x82,0xae, 0x2c,0x9d,0x4b,0x73,0xfb,0xac,0xd4,0x6d, 0x6d,0x5b,0x77,0xc0, 0x00,0x00
-};
-
-/* Gallop - Armed police Unit */
-static const INT32 gallop_sample_offsets[32] = {
-	31,
-	0x00000, 0x00020, 0x00040, 0x01360, 0x02580, 0x04f20, 0x06240, 0x076e0,
-	0x08660, 0x092a0, 0x09ba0, 0x0a560, 0x0cee0, 0x0de20, 0x0e620, 0x0f1c0,
-	0x10200, 0x10220, 0x10240, 0x11380, 0x12760, 0x12780, 0x127a0, 0x13c40,
-	0x140a0, 0x16760, 0x17e40, 0x18ee0, 0x19f60, 0x1bbc0, 0x1cee0 };
-
-//--------------------------------------------------------------------------------------------------------------------------------------------------
-
-
-static void setvector_callback(INT32 param)
-{
-	switch (param)
-	{
-		case VECTOR_INIT:   irqvector  = 0xff; break;
-		case YM2151_ASSERT: irqvector &= 0xef; break;
-		case YM2151_CLEAR:  irqvector |= 0x10; break;
-		case Z80_ASSERT:    irqvector &= 0xdf; break;
-		case Z80_CLEAR:     irqvector |= 0x20; break;
-	}
-
-	if (irqvector == 0xff) {
-		ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
-	} else {
-		ZetSetVector(irqvector);
-		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-	}
-}
-
-static void palette_write(INT32 offset, INT32 offset2)
-{
-	if (offset & 1) return;
-
-	UINT16 *pal = (UINT16*)DrvPalRAM;
-	offset = (offset / 2) & 0x00ff;
-
-	INT32 offset3 = offset;
-	if (offset2) {
-		offset3 |= 0x0100;
-		pal += 0x1000 / 2;
-	}
-
-	INT32 r = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x000]) & 0x1f;
-	INT32 g = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x200]) & 0x1f;
-	INT32 b = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x400]) & 0x1f;
-
-	DrvPalette[offset3] = BurnHighCol((r << 3) | (r >> 2), (g << 3) | (g >> 2), (b << 3) | (b >> 2), 0);
-}
-
-static UINT8 __fastcall m72_main_read(UINT32 address)
-{
-	if ((address & 0xff000) == 0xb0000) {
-		return protection_read(address);
-	}
-
-	return 0;
-}
-
-static void __fastcall m72_main_write(UINT32 address, UINT8 data)
-{
-	if ((address & 0xff000) == 0xb0000) {
-		protection_write(address, data);
-		return;
-	}
-
-	if ((address & 0xff000) == 0xc8000) {
-		if (address & 1) data = 0xff;
-  		DrvPalRAM[(address & 0xdff) | 0x0000] = DrvPalRAM[(address & 0xdff) | 0x0200] = data | 0xe0;
-		palette_write(address, 0);
-		return;
-	}
-
-	if ((address & 0xff000) == 0xcc000) {
-		if (address & 1) data = 0xff;
-  		DrvPalRAM[(address & 0xdff) | 0x1000] = DrvPalRAM[(address & 0xdff) | 0x1200] = data | 0xe0;
-		palette_write(address, 1);
-		return;
-	}
-}
-
-static void __fastcall rtype2_main_write(UINT32 address, UINT8 data)
-{
-	if ((address & 0xff000) == 0xc8000 || (address & 0xff000) == 0xa0000 || (address & 0xff000) == 0xcc000) {
-		if (address & 1) data = 0xff;
-  		DrvPalRAM[(address & 0xdff) | 0x0000] = DrvPalRAM[(address & 0xdff) | 0x0200] = data | 0xe0;
-		palette_write(address, 0);
-		return;
-	}
-
-	if ((address & 0xff000) == 0xd8000 || (address & 0xff000) == 0xa8000 || (address & 0xff000) == 0xa4000) {
-		if (address & 1) data = 0xff;
-  		DrvPalRAM[(address & 0xdff) | 0x1000] = DrvPalRAM[(address & 0xdff) | 0x1200] = data | 0xe0;
-		palette_write(address, 1);
-		return;
-	}
-
-	switch (address)
-	{
-		case 0xb0000:
-		case 0xe0000: // majtitle
-			irq_raster_position = (irq_raster_position & 0xff00) | (data << 0);
-		return;
-
-		case 0xb0001:
-		case 0xe0001: // majtitle
-			irq_raster_position = (irq_raster_position & 0x00ff) | (data << 8);
-		return;
-
-		case 0xbc000:
-	//	case 0xbc001:
-		case 0xec000: // majtitle
-	//	case 0xec001:
-			memcpy (DrvSprBuf, DrvSprRAM, 0x0400);
-		return;
-	}
-}
-
-static void __fastcall m72_main_write_port(UINT32 port, UINT8 data)
-{
-	//if (port!=0) bprintf (0, _T("%2.2x, %2.2x wp\n"), port, data);
-
-	switch (port)
-	{
-		case 0x00:
-			*soundlatch = data;
-			setvector_callback(Z80_ASSERT);
-		return;
-
-		case 0x01:
-		return;
-
-		case 0x02:
-//		case 0x03:
-		{
-			// coin counter = data & 3 (&1 = 0, &2 = 1)
-			// flipscreen = ((data & 0x04) >> 2) ^ ((~input_port_read(space->machine, "DSW") >> 8) & 1);
-
-			video_disable[0] = data & 0x08;
-
-			if (enable_z80_reset) {
-				if (data & 0x10) {
-					z80_reset = 0;
-				} else if (!z80_reset) { // don't reset it if its already resetting - fixes BGM in airduel -dink
-					ZetReset();
-					setvector_callback(VECTOR_INIT);
-					z80_reset = 1;
-				}
-			}
-		}
-		return;
-
-		case 0x04:
-		case 0x05:
-			memcpy (DrvSprBuf, DrvSprRAM, 0x0400);
-		return;
-
-		case 0x06:
-			irq_raster_position = (irq_raster_position & 0xff00) | (data << 0);
-		return;
-
-		case 0x07:
-			irq_raster_position = (irq_raster_position & 0x00ff) | (data << 8);
-		return;
-
-		case 0x40:
-		case 0x41:
-		case 0x43: // nop
-		return;
-
-		case 0x42:
-			if (m72_irq_base == 0) {
-				m72_irq_base = data << 2;
-				//bprintf(0, _T("irq base vector %X.\n"), m72_irq_base);
-			}
-		return;
-
-		case 0x80:
-		case 0x81:// scrolly1
-		case 0x82:
-		case 0x83:// scrollx1
-		case 0x84:
-		case 0x85:// scrolly2
-		case 0x86:
-		case 0x87:// scrollx2
-			scroll[port & 0x07] = data;
-		return;
-
-	//	case 0x8e:
-		case 0x8f:
-			majtitle_rowscroll_enable = data ? 1 : 0;
-		return;
-
-		case 0xc0:
-			protection_sample_offset_write(data);
-		return;
-	}
-}
-
-static UINT16 __fastcall poundfor_trackball_r(INT32 port)
-{
-	static INT32 prev[4] = { 0, 0, 0, 0 };
-	static INT32 diff[4] = { 0, 0, 0, 0 };
-
-	INT32 offset = (port / 2) & 0x03;
-
-	BurnTrackballUpdate(0);
-	BurnTrackballUpdate(1);
-
-	INT16 axis[4] = { (INT16)BurnTrackballReadWord(0, 0), (INT16)BurnTrackballReadWord(0, 1), (INT16)BurnTrackballReadWord(1, 0), (INT16)BurnTrackballReadWord(1, 1) };
-
-	if (port == 8)
-	{
-		INT32 curr;
-
-		for (INT32 i = 0; i < 4; i++)
-		{
-			curr = axis[i];
-			diff[i] = (curr - prev[i]);
-			prev[i] = curr;
-		}
-	}
-	INT32 input = DrvInputs[0] | (DrvInputs[3] << 8);
-
-	switch (offset)
-	{
-		default:
-		case 0:
-			return (diff[0] & 0xff) | ((diff[2] & 0xff) << 8);
-		case 1:
-			return ((diff[0] >> 8) & 0x1f) | (diff[2] & 0x1f00) | (~input & 0xe0e0);
-		case 2:
-			return (diff[1] & 0xff) | ((diff[3] & 0xff) << 8);
-		case 3:
-			return ((diff[1] >> 8) & 0x1f) | (diff[3] & 0x1f00);
-	}
-
-	return 0;
-}
-
-static UINT8 __fastcall m72_main_read_port(UINT32 port)
-{
-	if (Poundfor) {
-		if ((port & 0xf8) == 0x08) {
-			UINT16 ret = poundfor_trackball_r(port);
-			return (ret >> ((port & 1) * 8)) & 0xff;
-		}
-
-		switch (port)
-		{
-			case 0x02: return DrvInputs[1];
-			case 0x03: return 0xff;
-			case 0x04: return DrvDips[0];
-			case 0x05: return DrvDips[1];
-		}
-
-		return 0;
-	}
-
-	switch (port)
-	{
-		case 0x00: return DrvInputs[0];
-		case 0x01: return DrvInputs[1];
-		case 0x02: return DrvInputs[2];
-		case 0x03: return 0xff;
-		case 0x04: return DrvDips[0];
-		case 0x05: return DrvDips[1];
-	}
-
-	return 0;
-}
-
-static void __fastcall m72_sound_write_port(UINT16 port, UINT8 data)
-{
-	switch (port & 0xff)
-	{
-		case 0x00:
-		case 0x40: // poundfor
-			BurnYM2151SelectRegister(data);
-		return;
-
-		case 0x01:
-		case 0x41: // poundfor
-			BurnYM2151WriteRegister(data);
-		return;
-
-		case 0x06:
-		case 0x42: // poundfor
-		case 0x83: // rtype2
-			setvector_callback(Z80_CLEAR);
-		return;
-
-		case 0x10: // poundfor
-			sample_address >>= 4;
-			sample_address = (sample_address & 0xff00) | (data << 0);
-			sample_address <<= 4;
-		return;
-
-		case 0x11: // poundfor
-			sample_address >>= 4;
-			sample_address = (sample_address & 0x00ff) | (data << 8);
-			sample_address <<= 4;
-		return;
-
-		case 0x12: // poundfor "sample end address" - not used
-		case 0x13:
-		return;
-
-		case 0x80: // rtype2
-			sample_address >>= 5;
-			sample_address = (sample_address & 0xff00) | (data << 0);
-			sample_address <<= 5;
-		return;
-
-		case 0x81: // rtype2
-			sample_address >>= 5;
-			sample_address = (sample_address & 0x00ff) | (data << 8);
-			sample_address <<= 5;
-		return;
-
-		case 0x82:
-			DACSignedWrite(0, data);
-			sample_address = (sample_address + 1) & 0x3ffff;
-			if (!DrvSndROM[sample_address]) {
-				DACWrite(0, 0); // clear dac @ end of sample, fixes distortion in rtype2 level4 after death while also killing an air-tank
-			}
-		return;
-	}
-}
-
-static UINT8 __fastcall m72_sound_read_port(UINT16 port)
-{
-	switch (port & 0xff)
-	{
-		case 0x00:
-		case 0x01:
-		case 0x40: // poundfor
-		case 0x41: // poundfor
-			return BurnYM2151Read();
-
-		case 0x80: // rtype2
-		case 0x42: // poundfor
-		case 0x02:
-			return *soundlatch;
-
-		case 0x84:
-			return DrvSndROM[sample_address & 0x3ffff];
-	}
-
-	return 0;
-}
-
-static void m72YM2151IRQHandler(INT32 nStatus)
-{
-	setvector_callback(nStatus ? YM2151_ASSERT : YM2151_CLEAR);
-}
-
-static INT32 DrvDoReset()
-{
-	memset (AllRam, 0, RamEnd - AllRam);
-
-	VezOpen(0);
-	VezReset();
-	VezClose();
-
-	ZetOpen(0);
-	ZetReset();
-	setvector_callback(VECTOR_INIT);
-	z80_reset = (enable_z80_reset) ? 1 : 0;
-	ZetClose();
-
-	BurnYM2151Reset();
-	DACReset();
-
-	HiscoreReset();
-
-	sample_address = 0;
-	irq_raster_position = -1;
-	if (!CosmicCop) m72_irq_base = 0;
-	majtitle_rowscroll_enable = 0;
-
-	nExtraCycles = 0;
-
-	return 0;
-}
-
-static void common_main_cpu_map(INT32 romaddr, INT32 ramaddr)
-{
-	VezInit(0, V30_TYPE);
-
-	VezOpen(0);
-	VezMapArea(0x00000, (romaddr-1), 0, DrvV30ROM + 0x000000);
-	VezMapArea(0x00000, (romaddr-1), 2, DrvV30ROM + 0x000000);
-	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 0, DrvV30RAM);
-	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 1, DrvV30RAM);
-	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 2, DrvV30RAM);
-//	VezMapArea(0xb0000, 0xb0fff, 2, DrvProtRAM);
-	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
-	VezMapArea(0xc8000, 0xc8fff, 0, DrvPalRAM);
-//	VezMapArea(0xc8000, 0xc8fff, 1, DrvPalRAM);
-	VezMapArea(0xc8000, 0xc8fff, 2, DrvPalRAM);
-	VezMapArea(0xcc000, 0xccfff, 0, DrvPalRAM + 0x1000);
-//	VezMapArea(0xcc000, 0xccfff, 1, DrvPalRAM + 0x1000);
-	VezMapArea(0xcc000, 0xccfff, 2, DrvPalRAM + 0x1000);
-	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
-	VezMapArea(0xd8000, 0xdbfff, 0, DrvVidRAM1);
-	VezMapArea(0xd8000, 0xdbfff, 1, DrvVidRAM1);
-	VezMapArea(0xd8000, 0xdbfff, 2, DrvVidRAM1);
-	VezMapArea(0xe0000, 0xeffff, 0, DrvZ80RAM);
-	VezMapArea(0xe0000, 0xeffff, 1, DrvZ80RAM);
-	VezMapArea(0xe0000, 0xeffff, 2, DrvZ80RAM);
-	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
-	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
-	VezSetReadHandler(m72_main_read);
-	VezSetWriteHandler(m72_main_write);
-	VezSetReadPort(m72_main_read_port);
-	VezSetWritePort(m72_main_write_port);
-	VezClose();
-}
-
-static void common_040000_040000() { common_main_cpu_map(0x40000, 0x40000); }
-static void common_080000_080000() { common_main_cpu_map(0x80000, 0x80000); }
-static void common_080000_088000() { common_main_cpu_map(0x80000, 0x88000); }
-static void common_080000_090000() { common_main_cpu_map(0x80000, 0x90000); }
-static void common_080000_09c000() { common_main_cpu_map(0x80000, 0x9c000); }
-static void common_080000_0a0000() { common_main_cpu_map(0x80000, 0xa0000); }
-
-static void rtype2_main_cpu_map()
-{
-	VezInit(0, V30_TYPE);
-
-	VezOpen(0);
-	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
-	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
-	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
-	VezMapArea(0xc8000, 0xc8fff, 0, DrvPalRAM);
-//	VezMapArea(0xc8000, 0xc8fff, 1, DrvPalRAM);
-	VezMapArea(0xc8000, 0xc8fff, 2, DrvPalRAM);
-	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
-	VezMapArea(0xd4000, 0xd7fff, 0, DrvVidRAM1);
-	VezMapArea(0xd4000, 0xd7fff, 1, DrvVidRAM1);
-	VezMapArea(0xd4000, 0xd7fff, 2, DrvVidRAM1);
-	VezMapArea(0xd8000, 0xd8fff, 0, DrvPalRAM + 0x1000);
-//	VezMapArea(0xd8000, 0xd8fff, 1, DrvPalRAM + 0x1000);
-	VezMapArea(0xd8000, 0xd8fff, 2, DrvPalRAM + 0x1000);
-	VezMapArea(0xe0000, 0xe3fff, 0, DrvV30RAM);
-	VezMapArea(0xe0000, 0xe3fff, 1, DrvV30RAM);
-	VezMapArea(0xe0000, 0xe3fff, 2, DrvV30RAM);
-	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
-	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
-	VezSetReadHandler(m72_main_read);
-	VezSetWriteHandler(rtype2_main_write);
-	VezSetReadPort(m72_main_read_port);
-	VezSetWritePort(m72_main_write_port);
-	VezClose();
-}
-
-static void hharryu_main_cpu_map()
-{
-	VezInit(0, V35_TYPE);
-
-	VezOpen(0);
-	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
-	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
-	VezMapArea(0x80000, 0x83fff, 0, DrvVidRAM0); // kengo
-	VezMapArea(0x80000, 0x83fff, 1, DrvVidRAM0);
-	VezMapArea(0x80000, 0x83fff, 2, DrvVidRAM0);
-	VezMapArea(0x84000, 0x87fff, 0, DrvVidRAM1); // kengo
-	VezMapArea(0x84000, 0x87fff, 1, DrvVidRAM1);
-	VezMapArea(0x84000, 0x87fff, 2, DrvVidRAM1);
-	VezMapArea(0xa0000, 0xa0fff, 0, DrvPalRAM);
-//	VezMapArea(0xa0000, 0xa0fff, 1, DrvPalRAM);
-	VezMapArea(0xa0000, 0xa0fff, 2, DrvPalRAM);
-	VezMapArea(0xa8000, 0xa8fff, 0, DrvPalRAM + 0x1000);
-//	VezMapArea(0xa8000, 0xa8fff, 1, DrvPalRAM + 0x1000);
-	VezMapArea(0xa8000, 0xa8fff, 2, DrvPalRAM + 0x1000);
-	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
-	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
-	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
-	VezMapArea(0xd4000, 0xd7fff, 0, DrvVidRAM1);
-	VezMapArea(0xd4000, 0xd7fff, 1, DrvVidRAM1);
-	VezMapArea(0xd4000, 0xd7fff, 2, DrvVidRAM1);
-	VezMapArea(0xe0000, 0xe3fff, 0, DrvV30RAM);
-	VezMapArea(0xe0000, 0xe3fff, 1, DrvV30RAM);
-	VezMapArea(0xe0000, 0xe3fff, 2, DrvV30RAM);
-	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
-	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
-	VezSetReadHandler(m72_main_read);
-	VezSetWriteHandler(rtype2_main_write);
-	VezSetReadPort(m72_main_read_port);
-	VezSetWritePort(m72_main_write_port);
-	VezClose();
-}
-
-static void majtitle_main_cpu_map()
-{
-	VezInit(0, V30_TYPE);
-
-	VezOpen(0);
-	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
-	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
-	VezMapArea(0xa0000, 0xa07ff, 0, DrvRowScroll);
-	VezMapArea(0xa0000, 0xa07ff, 1, DrvRowScroll);
-	VezMapArea(0xa0000, 0xa07ff, 2, DrvRowScroll);
-	VezMapArea(0xa4000, 0xa4fff, 0, DrvPalRAM + 0x1000);
-//	VezMapArea(0xa4000, 0xa4fff, 1, DrvPalRAM + 0x1000);
-	VezMapArea(0xa4000, 0xa4fff, 2, DrvPalRAM + 0x1000);
-	VezMapArea(0xac000, 0xaffff, 0, DrvVidRAM0);
-	VezMapArea(0xac000, 0xaffff, 1, DrvVidRAM0);
-	VezMapArea(0xac000, 0xaffff, 2, DrvVidRAM0);
-	VezMapArea(0xb0000, 0xbffff, 0, DrvVidRAM1);
-	VezMapArea(0xb0000, 0xbffff, 1, DrvVidRAM1);
-	VezMapArea(0xb0000, 0xbffff, 2, DrvVidRAM1);
-	VezMapArea(0xc0000, 0xc07ff, 0, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc07ff, 1, DrvSprRAM);
-	VezMapArea(0xc0000, 0xc07ff, 2, DrvSprRAM);
-	VezMapArea(0xc8000, 0xc87ff, 0, DrvSprRAM2);
-	VezMapArea(0xc8000, 0xc87ff, 1, DrvSprRAM2);
-	VezMapArea(0xc8000, 0xc87ff, 2, DrvSprRAM2);
-	VezMapArea(0xcc000, 0xccfff, 0, DrvPalRAM);
-//	VezMapArea(0xcc000, 0xccfff, 1, DrvPalRAM);
-	VezMapArea(0xcc000, 0xccfff, 2, DrvPalRAM);
-	VezMapArea(0xd0000, 0xd3fff, 0, DrvV30RAM);
-	VezMapArea(0xd0000, 0xd3fff, 1, DrvV30RAM);
-	VezMapArea(0xd0000, 0xd3fff, 2, DrvV30RAM);
-	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
-	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
-	VezSetReadHandler(m72_main_read);
-	VezSetWriteHandler(rtype2_main_write);
-	VezSetReadPort(m72_main_read_port);
-	VezSetWritePort(m72_main_write_port);
-	VezClose();
-}
-
-static void sound_ram_map()
-{
-	ZetInit(0);
-	ZetOpen(0);
-	ZetMapArea(0x0000, 0xffff, 0, DrvZ80RAM);
-	ZetMapArea(0x0000, 0xffff, 1, DrvZ80RAM);
-	ZetMapArea(0x0000, 0xffff, 2, DrvZ80RAM);
-	ZetSetOutHandler(m72_sound_write_port);
-	ZetSetInHandler(m72_sound_read_port);
-	ZetClose();
-
-	enable_z80_reset = 1;
-}
-
-static void sound_rom_map()
-{
-	ZetInit(0);
-	ZetOpen(0);
-	ZetMapArea(0x0000, 0xefff, 0, DrvZ80ROM);
-	ZetMapArea(0x0000, 0xefff, 2, DrvZ80ROM);
-	ZetMapArea(0xf000, 0xffff, 0, DrvZ80RAM);
-	ZetMapArea(0xf000, 0xffff, 1, DrvZ80RAM);
-	ZetMapArea(0xf000, 0xffff, 2, DrvZ80RAM);
-	ZetSetOutHandler(m72_sound_write_port);
-	ZetSetInHandler(m72_sound_read_port);
-	ZetClose();
-
-	enable_z80_reset = 0;
-}
-
-static INT32 DrvGfxDecode(UINT8 *gfx, INT32 len, INT32 type)
-{
-	INT32 Planes[4] = { ((len / 4) * 8) * 3, ((len / 4) * 8) * 2, ((len / 4) * 8) * 1, ((len / 4) * 8) * 0 };
-	INT32 XOffs[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87 };
-	INT32 YOffs[16] = { 0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78 };
-
-	UINT8 *tmp = (UINT8*)BurnMalloc(len);
-	if (tmp == NULL) {
-		return 1;
-	}
-
-	memcpy (tmp, gfx, len);
-
-	if (type) {
-		GfxDecode((len * 2) / ( 8 *  8), 4,  8,  8, Planes, XOffs, YOffs, 0x040, tmp, gfx);
-	} else {
-		GfxDecode((len * 2) / (16 * 16), 4, 16, 16, Planes, XOffs, YOffs, 0x100, tmp, gfx);
-	}
-
-	BurnFree (tmp);
-
-	return 0;
-}
-
-static INT32 GetRoms(INT32 bLoad)
-{
-	char* pRomName;
-	struct BurnRomInfo ri;
-	UINT8 *V30ROM = DrvV30ROM;
-	UINT8 *Z80ROM = DrvZ80ROM;
-	UINT8 *GFXROM0 = DrvGfxROM0;
-	UINT8 *GFXROM1 = DrvGfxROM1;
-	UINT8 *GFXROM2 = DrvGfxROM2;
-	UINT8 *GFXROM3 = DrvGfxROM3;
-	UINT8 *SNDROM = DrvSndROM;
-	INT32 pglen = 0;
-
-	for (INT32 i = 0; !BurnDrvGetRomName(&pRomName, i, 0); i++) {
-
-		BurnDrvGetRomInfo(&ri, i);
-
-		if ((ri.nType & 15) == 1) {
-			if (bLoad) {
-				if (BurnLoadRom(V30ROM + 1, i + 0, 2)) return 1;
-				if (BurnLoadRom(V30ROM + 0, i + 1, 2)) return 1;
-			}
-			V30ROM += ri.nLen * 2;
-			i++;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 6) {
-			if (bLoad) if (BurnLoadRom(Z80ROM , i, 1)) return 1;
-			Z80ROM += ri.nLen;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 2) {
-			if (bLoad) if (BurnLoadRom(GFXROM0, i, 1)) return 1;
-			GFXROM0 += ri.nLen;
-
-			if (pglen == 0x10000 && ri.nLen == 0x8000) {	// rtype fix
-				if (bLoad) if (BurnLoadRom(GFXROM0, i, 1)) return 1;
-				GFXROM0 += ri.nLen;
-			}
-			pglen = ri.nLen;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 3) {
-			if (bLoad) if (BurnLoadRom(GFXROM1, i, 1)) return 1;
-			GFXROM1 += ri.nLen;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 4) {
-			if (bLoad) if (BurnLoadRom(GFXROM2, i, 1)) return 1;
-			GFXROM2 += ri.nLen;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 14) {
-			if (bLoad) if (BurnLoadRom(GFXROM3, i, 1)) return 1;
-			GFXROM3 += ri.nLen;
-			continue;
-		}
-
-		if ((ri.nType & 15) == 5) {
-			if (bLoad) if (BurnLoadRom(SNDROM , i, 1)) return 1;
-			SNDROM += ri.nLen;
-			continue;
-		}
-	}
-
-	if (bLoad) {
-		// copy irq vectors
-		memcpy (DrvV30ROM + 0xffff0, V30ROM - 0x10, 0x010);
-
-		// mirror sound rom
-		INT32 sndlen = SNDROM - DrvSndROM;
-		if (sndlen < 0x40000 && sndlen) {
-			for (INT32 i = 0; i < 0x40000; i++) {
-				DrvSndROM[i] = DrvSndROM[i % sndlen];
-			}
-		}
-
-		DrvGfxDecode(DrvGfxROM0, graphics_length[0], 0);
-		DrvGfxDecode(DrvGfxROM1, graphics_length[1], 1);
-
-		if (graphics_length[2] > 2) {
-			DrvGfxDecode(DrvGfxROM2, graphics_length[2], 1);
-		} else {
-			DrvGfxROM2 = DrvGfxROM1;
-			code_mask[2] = code_mask[1];
-		}
-
-		if (graphics_length[3] > 2) {
-			DrvGfxDecode(DrvGfxROM3, graphics_length[3], 0);
-		} else {
-			code_mask[3] = 0;
-		}
-	} else {
-		graphics_length[0] = GFXROM0 - DrvGfxROM0;
-		graphics_length[1] = GFXROM1 - DrvGfxROM1;
-		graphics_length[2] = GFXROM2 - DrvGfxROM2;
-		graphics_length[3] = GFXROM3 - DrvGfxROM3;
-
-		for (INT32 i = 1, j = 0; j < 4; graphics_length[j] = i, j++, i = 1) {
-			while (i < graphics_length[j]) i <<= 1;
-		}
-
-		code_mask[0] = ((graphics_length[0] * 2) - 1) / (16 * 16);
-		code_mask[1] = ((graphics_length[1] * 2) - 1) / (8 * 8);
-		code_mask[2] = ((graphics_length[2] * 2) - 1) / (8 * 8);
-		code_mask[3] = ((graphics_length[3] * 2) - 1) / (16 * 16);
-	}
-
-	return 0;
-}
-
-static INT32 MemIndex()
-{
-	UINT8 *Next; Next = AllMem;
-
-	DrvV30ROM 	= Next; Next += 0x200000;
-	DrvZ80ROM	= Next; Next += 0x010000;
-	DrvGfxROM0	= Next; Next += graphics_length[0] * 2;
-	DrvGfxROM1	= Next; Next += graphics_length[1] * 2;
-	DrvGfxROM2	= Next; Next += graphics_length[2] * 2;
-	DrvGfxROM3	= Next; Next += graphics_length[3] * 2;
-	DrvSndROM	= Next; Next += 0x040000;
-
-	RamPrioBitmap	= Next; Next += nScreenWidth * nScreenHeight;
-
-	AllRam	= Next;
-
-	DrvZ80RAM	= Next; Next += 0x010000;
-	DrvSprRAM	= Next; Next += 0x001000;
-	DrvSprRAM2	= Next; Next += 0x000800;
-	DrvSprBuf	= Next; Next += 0x001000;
-	DrvVidRAM0	= Next; Next += 0x004000;
-	DrvVidRAM1	= Next; Next += 0x010000;
-	DrvV30RAM	= Next; Next += 0x004000;
-	DrvPalRAM	= Next; Next += 0x002000;
-	DrvProtRAM	= Next; Next += 0x001000;
-	DrvRowScroll	= Next; Next += 0x000800;
-
-	soundlatch	= Next; Next += 0x000004; // 1
-	video_disable	= Next; Next += 0x000004; // 1
-
-	scroll		= Next; Next += 0x000008;
-
-	RamEnd		= Next;
-
-	DrvPalette	= (UINT32 *) Next; Next += 0x200 * sizeof(UINT32);
-
-	MemEnd		= Next;
-
-	return 0;
-}
-
-
-static INT32 DrvInit(void (*pCPUMapCallback)(), void (*pSNDMapCallback)(), INT32 (*pRomLoadCallback)(), INT32 z80_nmi, INT32 video_type)
-{
-	BurnSetRefreshRate(55.00);
-
-	GenericTilesInit();
-
-	GetRoms(0);
-
-	AllMem = NULL;
-	MemIndex();
-	INT32 nLen = MemEnd - (UINT8 *)0;
-	if ((AllMem = (UINT8 *)BurnMalloc(nLen)) == NULL) return 1;
-	memset(AllMem, 0, nLen);
-	MemIndex();
-
-	if (GetRoms(1)) return 1;
-
-	if (pCPUMapCallback) {
-		pCPUMapCallback();
-	}
-
-	if (pSNDMapCallback) {
-		pSNDMapCallback();
-	}
-
-	if (pRomLoadCallback) {
-		if (pRomLoadCallback()) return 1;
-	}
-
-	m72_irq_base = 0; // set by port 42. (programmable interrupt controller)
-	z80_nmi_enable = z80_nmi;
-	m72_video_type = video_type;
-
-	switch (video_type)
-	{	
-		case 0: // m72
-			video_offsets[0] = video_offsets[1] = 0;
-		break;
-
-		case 1: // rtype
-		case 3: // majtitle
-			video_offsets[0] = video_offsets[1] = -4;
-		break;
-
-		case 2: // hharry, xmultipl
-		case 7: // cosmccop (layer offsets of type 2, flipxy of type 1)
-			video_offsets[0] = -4;
-			video_offsets[1] = -6;
-			if (video_type == 7) m72_video_type = 1; // cosmccop: diff flipx/y handling in draw_layer()
-		break;
-
-		case 4: // poundfor
-			video_offsets[0] = video_offsets[1] = -6;
-			m72_video_type = 1; // rtype
-		break;
-
-		case 5: // kengo
-			video_offsets[0] = -3;
-			video_offsets[1] = -6;
-			m72_video_type = 1; // rtype
-		break;
-
-		case 6: // airduel m82
-			video_offsets[0] = -4;
-			video_offsets[1] = -6;
-			m72_video_type = 1; // rtype
-		break;
-	}
-
-	BurnYM2151Init(3579545);
-	YM2151SetIrqHandler(0, &m72YM2151IRQHandler);
-	BurnYM2151SetRoute(BURN_SND_YM2151_YM2151_ROUTE_1, 1.00, BURN_SND_ROUTE_LEFT);
-	BurnYM2151SetRoute(BURN_SND_YM2151_YM2151_ROUTE_2, 1.00, BURN_SND_ROUTE_RIGHT);
-
-	DACInit(0, 0, 1, ZetTotalCycles, 3579545);
-	DACSetRoute(0, 0.40, BURN_SND_ROUTE_BOTH);
-
-	DrvDoReset();
-
-	return 0;
-}
-
-static INT32 DrvExit()
-{
-	GenericTilesExit();
-
-	BurnYM2151Exit();
-	DACExit();
-
-	ZetExit();
-	VezExit();
-
-	BurnFree(AllMem);
-
-	if (Poundfor)
-		BurnTrackballExit();
-
-	m72_video_type = 0;
-	enable_z80_reset = 0;
-	z80_nmi_enable = 0;
-	m72_irq_base = 0;
-	Kengo = 0;
-	CosmicCop = 0;
-	Poundfor = 0;
-	Clock_16mhz = 0;
-
-	m72_install_protection(NULL,NULL,NULL);
-
-	video_offsets[0] = video_offsets[1] = 0;
-
-	return 0;
-}
-
-static void draw_layer(INT32 layer, INT32 forcelayer, INT32 type, INT32 start, INT32 finish) // bg = layer 1, fg = layer 0
-{
-	INT32 codeand = code_mask[1+layer];
-	UINT16 *vram = (UINT16*)(layer ? DrvVidRAM1 : DrvVidRAM0);
-	UINT8  *gfx  = (layer) ? DrvGfxROM2 : DrvGfxROM1;
-
-	//	    layer, prio, forcelayer
-	const UINT16 transmask[2][3][2] = {
-		{ { 0xffff, 0x0001 }, { 0x00ff, 0xff01 }, { 0x0001, 0xffff } },
-		{ { 0xffff, 0x0000 }, { 0x00ff, 0xff00 }, { (type == 0) ? (const UINT16)0x0007 : (const UINT16)0x0001, (type == 0) ? (const UINT16)0xfff8 : (const UINT16)0xfffe } }
-	};
-
-	INT32 scrolly = scroll[layer * 4 + 0] | (scroll[layer * 4 + 1] << 8);
-	INT32 scrollx = scroll[layer * 4 + 2] | (scroll[layer * 4 + 3] << 8);
-
-	scrolly = (scrolly + 128) & 0x1ff;
-	scrollx = (scrollx + 64 + video_offsets[layer]) & ((0x200 << (type == 3 && layer == 1)) - 1);
-
-	UINT16 *xscroll = (UINT16*)DrvRowScroll;
-
-	for (INT32 sy = start; sy < finish; sy++)
-	{
-		UINT16 *dest = pTransDraw + (sy * nScreenWidth);
-		UINT8  *pri  = RamPrioBitmap + (sy * nScreenWidth);
-
-		INT32 scrolly1 = (scrolly + sy) & 0x1ff;
-		INT32 romoff1 = (scrolly1 & 0x07) << 3;
-
-		for (INT32 sx = 0; sx < nScreenWidth + 8; sx+=8)
-		{
-			INT32 flipy, flipx, prio, scrollx1, offs;
-
-			if (majtitle_rowscroll_enable && type == 3 && layer == 1) {
-				scrollx1 = 256 + BURN_ENDIAN_SWAP_INT16(xscroll[scrolly1]) + sx + 64 + video_offsets[1];
-			} else {
-				scrollx1 = scrollx + sx;
-				if (type == 3 && layer == 1) scrollx1 += 256;
-			}
-
-			if (type == 3 && layer == 1) {
-				scrollx1 &= 0x3ff;
-				offs = ((scrolly1 >> 3) << 8) | (scrollx1 >> 3);
-			} else {
-				scrollx1 &= 0x1ff;
-				offs = ((scrolly1 >> 3) << 6) | (scrollx1 >> 3);
-			}
-
-			INT32 code  = BURN_ENDIAN_SWAP_INT16(vram[offs * 2 + 0]);
-			INT32 color = BURN_ENDIAN_SWAP_INT16(vram[offs * 2 + 1]);
-
-			if (type == 1 || type == 3) {
-				flipy = color & 0x0040;
-				flipx = color & 0x0020;
-				prio  = (color & 0x0100) ? 2 : (color & 0x80) ? 1 : 0;
-			} else {
-				flipy = code & 0x8000;
-				flipx = code & 0x4000;
-				prio  = (color & 0x80) ? 2 : ((color & 0x40) ? 1 : 0);
-			}
-
-			INT32 mask = transmask[layer][prio][forcelayer];
-
-			code &= codeand;
-			color = ((color & 0x000f) << 4) | 0x100;
-			prio = 1 << prio;
-
-			{
-				INT32 scrollx0 = scrollx1 & 0x07;
-				INT32 x_xor = 0;
-				INT32 romoff = romoff1;
-				if (flipy) romoff ^= 0x38;
-				if (flipx) x_xor = 7;
-
-				UINT8 *rom = gfx + (code * 0x40) + romoff;
-
-				INT32 xx = sx - scrollx0;
-
-				for (INT32 x = 0; x < 8; x++, xx++) {
-					if (xx < 0 || xx >= nScreenWidth) continue;
-
-					INT32 pxl = rom[x ^ x_xor];
-					if (mask & (1 << pxl)) continue;
-
-					dest[xx] = pxl | color;
-					pri[xx] = prio;
-				}
-			}
-		}
-	}
-}
-
-static void draw_sprites()
-{
-	UINT16 *sprram = (UINT16*)DrvSprBuf;
-
-	for (INT32 offs = 0; offs < 0x400/2;)
-	{
-		INT32 sx    = -256+(BURN_ENDIAN_SWAP_INT16(sprram[offs+3]) & 0x3ff);
-		INT32 attr  = BURN_ENDIAN_SWAP_INT16(sprram[offs+2]);
-		INT32 code  = BURN_ENDIAN_SWAP_INT16(sprram[offs+1]);
-		INT32 sy    =  384-(BURN_ENDIAN_SWAP_INT16(sprram[offs+0]) & 0x1ff);
-
-		INT32 color = attr & 0x0f;
-		INT32 flipx = attr & 0x0800;
-		INT32 flipy = attr & 0x0400;
-
-		INT32 w = 1 << ((attr & 0xc000) >> 14);
-		INT32 h = 1 << ((attr & 0x3000) >> 12);
-		sy -= 16 * h;
-
-		sx -= 64; // ?
-#if 0
-		if (*flipscreen)
-		{
-			sx = 512 - 16*w - sx;
-			sy = 284 - 16*h - sy;
-			flipx = !flipx;
-			flipy = !flipy;
-		}
-#endif
-
-		for (INT32 x = 0;x < w;x++)
-		{
-			for (INT32 y = 0;y < h;y++)
-			{
-				INT32 c = code;
-
-				if (flipx) c += 8*(w-1-x);
-				else c += 8*x;
-				if (flipy) c += h-1-y;
-				else c += y;
-
-				c &= code_mask[0];
-
-				INT32 xx = sx + 16 * x;
-				INT32 yy = sy + 16 * y;
-
-				if (xx < -15 || yy < -15 || xx >= nScreenWidth || yy >= nScreenHeight) continue;
-
-				if (flipy) {
-					if (flipx) {
-						Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
-					} else {
-						Render16x16Tile_Mask_FlipY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
-					}
-				} else {
-					if (flipx) {
-						Render16x16Tile_Mask_FlipX_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
-					} else {
-						Render16x16Tile_Mask_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
-					}
-				}
-			}
-		}
-
-		offs += w*4;
-	}
-}
-
-static void majtitle_draw_sprites()
-{
-	UINT16 *spriteram16_2 = (UINT16*)DrvSprRAM2;
-
-	for (INT32 offs = 0; offs < 0x400; offs += 4)
-	{
-		INT32 code,color,sx,sy,flipx,flipy,w,h,x,y;
-
-		code = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+1]);
-		color = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0f;
-		sx = -256+(BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+3]) & 0x3ff);
-		sy = 384-(BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+0]) & 0x1ff);
-		flipx = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0800;
-		flipy = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0400;
-
-		w = 1;// << ((spriteram16_2[offs+2] & 0xc000) >> 14);
-		h = 1 << ((BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x3000) >> 12);
-		sy -= 16 * h;
-
-		sx -= 64; // ?
-#if 0
-		if (flip_screen_get(machine))
-		{
-			sx = 512 - 16*w - sx;
-			sy = 256 - 16*h - sy;
-			flipx = !flipx;
-			flipy = !flipy;
-		}
-#endif
-
-		for (x = 0;x < w;x++)
-		{
-			for (y = 0;y < h;y++)
-			{
-				INT32 c = code;
-
-				if (flipx) c += 8*(w-1-x);
-				else c += 8*x;
-				if (flipy) c += h-1-y;
-				else c += y;
-
-				c &= code_mask[3];
-
-				INT32 xx = sx + 16 * x;
-				INT32 yy = sy + 16 * y;
-
-				if (xx < -15 || yy < -15 || xx >= nScreenWidth || yy >= nScreenHeight) continue;
-
-				if (flipy) {
-					if (flipx) {
-						Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
-					} else {
-						Render16x16Tile_Mask_FlipY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
-					}
-				} else {
-					if (flipx) {
-						Render16x16Tile_Mask_FlipX_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
-					} else {
-						Render16x16Tile_Mask_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
-					}
-				}
-			}
-		}
-	}
-}
-
-static void dodrawline(INT32 start, INT32 finish)
-{
-	if (*video_disable) return;
-
-	if (nBurnLayer & 1) draw_layer(1, 1, m72_video_type, start, finish);
-	if (nBurnLayer & 2) draw_layer(0, 1, m72_video_type, start, finish);
-
-	GenericTilesSetClip(0, -1, start, finish);
-	if (nSpriteEnable & 1) {
-		if (m72_video_type == 3) majtitle_draw_sprites();
-		draw_sprites();
-	}
-	GenericTilesClearClip();
-
-	if (nBurnLayer & 4) draw_layer(1, 0, m72_video_type, start, finish);
-	if (nBurnLayer & 8) draw_layer(0, 0, m72_video_type, start, finish);
-}
-
-static inline void DrvDrawInitFrame()
-{
-	BurnTransferClear();
-}
-
-static INT32 DrvDraw()
-{
-	if (DrvRecalc) {
-		for (INT32 i = 0; i < 0x200; i++) {
-			palette_write((i & 0xff) * 2, i >> 8);
-		}
-		DrvRecalc = 0;
-	}
-
-	BurnTransferCopy(DrvPalette);
-
-	return 0;
-}
-
-static void compile_inputs()
-{
-	memset (DrvInputs, 0xff, 5);
-
-	for (INT32 i = 0; i < 8; i++) {
-		DrvInputs[0] ^= (DrvJoy1[i] & 1) << i;
-		DrvInputs[1] ^= (DrvJoy2[i] & 1) << i;
-		DrvInputs[2] ^= (DrvJoy3[i] & 1) << i;
-		DrvInputs[3] ^= (DrvJoy4[i] & 1) << i;
-		DrvInputs[4] ^= (DrvJoy5[i] & 1) << i;
-	}
-
-	if (Poundfor) {
-		BurnTrackballConfig(0, AXIS_NORMAL, AXIS_REVERSED);
-		BurnTrackballConfig(1, AXIS_NORMAL, AXIS_REVERSED);
-		BurnTrackballFrame(0, DrvAnalogPort0, DrvAnalogPort1, 5, 8);
-		BurnTrackballFrame(1, DrvAnalogPort2, DrvAnalogPort3, 5, 8);
-		BurnTrackballUpdate(0);
-		BurnTrackballUpdate(1);
-	}
-}
-
-static INT32 nPreviousLine = 0;
-
-static void scanline_interrupts(INT32 scanline)
-{
-	if (scanline == (irq_raster_position - 128) && scanline < 256) {
-		if (nPreviousLine <= scanline && scanline < nScreenHeight) {
-			dodrawline(nPreviousLine, scanline+1);
-			nPreviousLine = scanline + 1;
-		}
-		if (Kengo)
-			VezSetIRQLineAndVector(NEC_INPUT_LINE_INTP2, 0xff, CPU_IRQSTATUS_AUTO);
-		else
-			VezSetIRQLineAndVector(0, (m72_irq_base + 8)/4, CPU_IRQSTATUS_AUTO);
-	}
-	else if (scanline == 255) // vblank
-	{
-		if (nPreviousLine < nScreenHeight) {
-			dodrawline(nPreviousLine, nScreenHeight);
-			nPreviousLine = 0;
-		}
-		if (Kengo)
-			VezSetIRQLineAndVector(NEC_INPUT_LINE_INTP0, 0xff, CPU_IRQSTATUS_AUTO);
-		else
-			VezSetIRQLineAndVector(0, (m72_irq_base + 0)/4, CPU_IRQSTATUS_AUTO);
-	}
-
-	if (nPreviousLine >= nScreenHeight) nPreviousLine = 0;
-}
-
-static INT32 DrvFrame()
-{
-	if (DrvReset) {
-		DrvDoReset();
-	}
-
-	VezNewFrame();
-	ZetNewFrame();
-
-	compile_inputs();
-	
-	INT32 multiplier = 3;
-	INT32 nInterleave = 256 * multiplier;
-	INT32 nSoundBufferPos = 0;
-	INT32 z80samplecount = 0;
-
-	if (Clock_16mhz) // Ken-go, Cosmic Cop
-		nCyclesTotal[0] = (INT32)((INT64)(16000000 / 55) * nBurnCPUSpeedAdjust / 0x0100);
-	else
-		nCyclesTotal[0] = (INT32)((INT64)(8000000 / 55) * nBurnCPUSpeedAdjust / 0x0100);
-	nCyclesTotal[1] = (INT32)((INT64)(3579545 / 55) * nBurnCPUSpeedAdjust / 0x0100);
-	nCyclesDone[0] = 0;
-	nCyclesDone[1] = nExtraCycles;
-
-	if (pBurnDraw) {
-		DrvDrawInitFrame();
-	}
-
-	VezOpen(0);
-	ZetOpen(0);
-
-	for (INT32 i = 0; i < nInterleave; i++)
-	{
-		nCurrentCycles = nCyclesTotal[0] / nInterleave;
-		nCyclesDone[0] += VezRun(nCurrentCycles);
-
-		if ((i%multiplier)==0)
-			scanline_interrupts(i/multiplier);
-
-		if (z80_reset == 0) {
-			nCyclesDone[1] += ZetRun((nCyclesTotal[1] * (i + 1) / nInterleave) - nCyclesDone[1]);
-			if (i%multiplier==2 && i/multiplier & 1 && z80samplecount < 128) {
-				if (z80_nmi_enable == Z80_FAKE_NMI) {
-					z80samplecount++;
-					if (DrvSndROM[sample_address]) {
-						DACSignedWrite(0, DrvSndROM[sample_address]);
-						sample_address = (sample_address + 1) & 0x3ffff;
-					} else {
-						DACWrite(0, 0); // Clear DAC output buffer at end of sample - fixes distortion in Air Duel & second-to-last level of Mr. Heli
-					}
-
-				} else if (z80_nmi_enable == Z80_REAL_NMI) {
-					z80samplecount++;
-					ZetNmi();
-				}
-			}
-		} else {
-			ZetIdle(nCyclesTotal[1] / nInterleave);
-		}
-
-		if ((i%multiplier)==0) {
-			if (pBurnSoundOut) {
-				INT32 nSegmentLength = nBurnSoundLen / (nInterleave / multiplier);
-				INT16* pSoundBuf = pBurnSoundOut + (nSoundBufferPos << 1);
-
-				BurnYM2151Render(pSoundBuf, nSegmentLength);
-
-				nSoundBufferPos += nSegmentLength;
-			}
-		}
-	}
-	nExtraCycles = nCyclesDone[1] - nCyclesTotal[1]; // just for sound
-
-	if (pBurnSoundOut) {
-		INT32 nSegmentLength = nBurnSoundLen - nSoundBufferPos;
-		INT16* pSoundBuf = pBurnSoundOut + (nSoundBufferPos << 1);
-
-		if (nSegmentLength) {
-			BurnYM2151Render(pSoundBuf, nSegmentLength);
-		}
-
-		DACUpdate(pBurnSoundOut, nBurnSoundLen);
-	}
-
-	VezClose();
-	ZetClose();
-
-	if (pBurnDraw) {
-		DrvDraw();
-	}
-
-	return 0;
-}
-
-static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
-{
-	struct BurnArea ba;
-	
-	if (pnMin != NULL) {			// Return minimum compatible version
-		*pnMin = 0x029705;
-	}
-
-	if (nAction & ACB_MEMORY_RAM) {
-		memset(&ba, 0, sizeof(ba));
-		ba.Data	  = AllRam;
-		ba.nLen	  = RamEnd-AllRam;
-		ba.szName = "All Ram";
-		BurnAcb(&ba);
-	}
-
-	if (nAction & ACB_DRIVER_DATA) {
-		ZetScan(nAction);
-		BurnYM2151Scan(nAction, pnMin);
-		DACScan(nAction, pnMin);
-		VezScan(nAction);
-
-		if (Poundfor)
-			BurnTrackballScan();
-
-		SCAN_VAR(irq_raster_position);
-		SCAN_VAR(m72_irq_base);
-
-		SCAN_VAR(sample_address);
-		SCAN_VAR(irqvector);
-		SCAN_VAR(z80_reset);
-		SCAN_VAR(majtitle_rowscroll_enable);
-	}
-
-	return 0;
-}
-
-
-
-// R-Type (World)
-
-static struct BurnRomInfo rtypeRomDesc[] = {
-	{ "rt_r-h0-b.1b",	0x10000, 0x591c7754, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt_r-l0-b.3b",	0x10000, 0xa1928df0, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt_r-h1-b.1c",	0x10000, 0xa9d71eca, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt_r-l1-b.3c",	0x10000, 0x0df3573d, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
-	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
-	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
-	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
-	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
-	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
-	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
-
-	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
-	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
-	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
-
-	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
-	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
-	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
-};
-
-STD_ROM_PICK(rtype)
-STD_ROM_FN(rtype)
-
-static INT32 rtypeInit()
-{
-	return DrvInit(common_040000_040000, sound_ram_map, NULL, Z80_NO_NMI, 0);
-}
-
-struct BurnDriver BurnDrvRtype = {
-	"rtype", NULL, NULL, NULL, "1987",
-	"R-Type (World)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtypeRomInfo, rtypeRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
-	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type (Japan)
-
-static struct BurnRomInfo rtypejRomDesc[] = {
-	{ "rt_r-h0-.1b",	0x10000, 0xc2940df2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt_r-l0-.3b",	0x10000, 0x858cc0f6, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt_r-h1-.1c",	0x10000, 0x5bcededa, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt_r-l1-.3c",	0x10000, 0x4821141c, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
-	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
-	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
-	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
-	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
-	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
-	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
-
-	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
-	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
-	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
-
-	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
-	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
-	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
-};
-
-STD_ROM_PICK(rtypej)
-STD_ROM_FN(rtypej)
-
-struct BurnDriver BurnDrvRtypej = {
-	"rtypej", "rtype", NULL, NULL, "1987",
-	"R-Type (Japan)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtypejRomInfo, rtypejRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
-	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type (Japan prototype)
-
-static struct BurnRomInfo rtypejpRomDesc[] = {
-	{ "db_b1.bin",		0x10000, 0xc1865141, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "db_a1.bin",		0x10000, 0x5ad2bd90, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "db_b2.bin",		0x10000, 0xb4f6407e, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "db_a2.bin",		0x10000, 0x6098d86f, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
-	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
-	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
-	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
-	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
-	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
-	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
-
-	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
-	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
-	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
-
-	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
-	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
-	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
-};
-
-STD_ROM_PICK(rtypejp)
-STD_ROM_FN(rtypejp)
-
-struct BurnDriver BurnDrvRtypejp = {
-	"rtypejp", "rtype", NULL, NULL, "1987",
-	"R-Type (Japan prototype)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtypejpRomInfo, rtypejpRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypepDIPInfo,
-	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type (US)
-
-static struct BurnRomInfo rtypeuRomDesc[] = {
-	{ "rt_r-h0-a.1b",	0x10000, 0x36008a4e, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt_r-l0-a.3b",	0x10000, 0x4aaa668e, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt_r-h1-a.1c",	0x10000, 0x7ebb2a53, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt_r-l1-a.3c",	0x10000, 0xc28b103b, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
-	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
-	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
-	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
-	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
-	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
-	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
-
-	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
-	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
-	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
-
-	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
-	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
-	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
-
-	{ "m72_a-8l-.ic66",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 20 Proms
-	{ "m72_a-9l-.ic75",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 21
-
-	{ "m72_r-3a-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 22 PLDs
-	{ "m72_a-3d-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 23
-	{ "m72_a-4d-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 24
-};
-
-STD_ROM_PICK(rtypeu)
-STD_ROM_FN(rtypeu)
-
-struct BurnDriver BurnDrvRtypeu = {
-	"rtypeu", "rtype", NULL, NULL, "1987",
-	"R-Type (US)\0", NULL, "Irem (Nintendo of America license)", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtypeuRomInfo, rtypeuRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
-	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type (World bootleg)
-
-static struct BurnRomInfo rtypebRomDesc[] = {
-	{ "7.512",		0x10000, 0xeacc8024, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "1.512",		0x10000, 0x2e5fe27b, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "8.512",		0x10000, 0x22cc4950, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "2.512",		0x10000, 0xada7b90e, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
-	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
-	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
-	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
-	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
-	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
-	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
-
-	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
-	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
-	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
-
-	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
-	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
-	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
-};
-
-STD_ROM_PICK(rtypeb)
-STD_ROM_FN(rtypeb)
-
-struct BurnDriver BurnDrvRtypeb = {
-	"rtypeb", "rtype", NULL, NULL, "1987",
-	"R-Type (World bootleg)\0", NULL, "bootleg", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtypebRomInfo, rtypebRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
-	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// X Multiply (World, M81 hardware)
-
-static struct BurnRomInfo xmultiplRomDesc[] = {
-	{ "xm-a-h1-.ic58",	0x20000, 0x449048cf, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "xm-a-l1-.ic67",	0x20000, 0x26ce39b0, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "xm-a-h0-.ic59",	0x10000, 0x509bc970, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "xm-a-l0-.ic68",	0x10000, 0x490a9ebc, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "xm-a-sp-.ic14",	0x10000, 0x006eef56, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "t44.00",		0x20000, 0xdb45186e, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "t45.01",		0x20000, 0x4d0764d4, 0x02 | BRF_GRA },           //  6
-	{ "t46.10",		0x20000, 0xf0c465a4, 0x02 | BRF_GRA },           //  7
-	{ "t47.11",		0x20000, 0x1263b24b, 0x02 | BRF_GRA },           //  8
-	{ "t48.20",		0x20000, 0x4129944f, 0x02 | BRF_GRA },           //  9
-	{ "t49.21",		0x20000, 0x2346e6f9, 0x02 | BRF_GRA },           // 10
-	{ "t50.30",		0x20000, 0xe322543e, 0x02 | BRF_GRA },           // 11
-	{ "t51.31",		0x20000, 0x229bf7b1, 0x02 | BRF_GRA },           // 12
-
-	{ "t53.a0",		0x20000, 0x1a082494, 0x03 | BRF_GRA },           // 13 Foreground Tiles
-	{ "t54.a1",		0x20000, 0x076c16c5, 0x03 | BRF_GRA },           // 14
-	{ "t55.a2",		0x20000, 0x25d877a5, 0x03 | BRF_GRA },           // 15
-	{ "t56.a3",		0x20000, 0x5b1213f5, 0x03 | BRF_GRA },           // 16
-
-	{ "t57.b0",		0x20000, 0x0a84e0c7, 0x04 | BRF_GRA },           // 17 Background Tiles
-	{ "t58.b1",		0x20000, 0xa874121d, 0x04 | BRF_GRA },           // 18
-	{ "t59.b2",		0x20000, 0x69deb990, 0x04 | BRF_GRA },           // 19
-	{ "t60.b3",		0x20000, 0x14c69f99, 0x04 | BRF_GRA },           // 20
-
-	{ "t52.v0",		0x20000, 0x2db1bd80, 0x05 | BRF_SND },           // 21 DAC Samples
-
-	{ "m81_a-9l-.ic72",	0x00100, 0xb460c438, 0x00 | BRF_OPT },       // 22 Proms
-	{ "m81_a-9p-.ic74",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },       // 23
-};
-
-STD_ROM_PICK(xmultipl)
-STD_ROM_FN(xmultipl)
-
-static INT32 xmultiplInit()
-{
-	return DrvInit(common_080000_09c000, sound_rom_map, NULL, Z80_REAL_NMI, 2);
-}
-
-struct BurnDriver BurnDrvXmultipl = {
-	"xmultipl", NULL, NULL, NULL, "1989",
-	"X Multiply (World, M81 hardware)\0", NULL, "Irem", "Irem M81",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, xmultiplRomInfo, xmultiplRomName, NULL, NULL, NULL, NULL, CommonInputInfo, XmultiplDIPInfo,
-	xmultiplInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// X Multiply (Japan, M72 hardware)
-
-static struct BurnRomInfo xmultiplm72RomDesc[] = {
-	{ "xm_c-h3-.ic43",	0x20000, 0x20685021, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "xm_c-l3-.ic34",	0x20000, 0x93fdd200, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "xm_c-h0-.ic40",	0x10000, 0x9438dd8a, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "xm_c-l0-.ic37",	0x10000, 0x06a9e213, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "t44.00.ic53",	0x20000, 0xdb45186e, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "t45.01.ic52",	0x20000, 0x4d0764d4, 0x02 | BRF_GRA },           //  5
-	{ "t46.10.ic51",	0x20000, 0xf0c465a4, 0x02 | BRF_GRA },           //  6
-	{ "t47.11.ic50",	0x20000, 0x1263b24b, 0x02 | BRF_GRA },           //  7
-	{ "t48.20.ic49",	0x20000, 0x4129944f, 0x02 | BRF_GRA },           //  8
-	{ "t49.21.ic48",	0x20000, 0x2346e6f9, 0x02 | BRF_GRA },           //  9
-	{ "t50.30.ic47",	0x20000, 0xe322543e, 0x02 | BRF_GRA },           // 10
-	{ "t51.31.ic46",	0x20000, 0x229bf7b1, 0x02 | BRF_GRA },           // 11
-
-	{ "t53.a0",			0x20000, 0x1a082494, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "t54.a1",			0x20000, 0x076c16c5, 0x03 | BRF_GRA },           // 13
-	{ "t55.a2",			0x20000, 0x25d877a5, 0x03 | BRF_GRA },           // 14
-	{ "t56.a3",			0x20000, 0x5b1213f5, 0x03 | BRF_GRA },           // 15
-
-	{ "t57.b0",			0x20000, 0x0a84e0c7, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "t58.b1",			0x20000, 0xa874121d, 0x04 | BRF_GRA },           // 17
-	{ "t59.b2",			0x20000, 0x69deb990, 0x04 | BRF_GRA },           // 18
-	{ "t60.b3",			0x20000, 0x14c69f99, 0x04 | BRF_GRA },           // 19
-
-	{ "t52.v0.ic44",	0x20000, 0x2db1bd80, 0x05 | BRF_SND },           // 20 DAC Samples
-
-	{ "xm_c-pr-.ic1",	0x01000, 0xc8ceb3cd, 0x00 | BRF_OPT }, 	 	 // 21 i8751 microcontroller
-};
-
-STD_ROM_PICK(xmultiplm72)
-STD_ROM_FN(xmultiplm72)
-
-static INT32 xmultiplm72Init()
-{
-	install_protection(xmultiplm72);
-
-	return DrvInit(common_080000_080000, sound_ram_map, NULL, Z80_REAL_NMI, 0);
-}
-
-struct BurnDriver BurnDrvXmultiplm72 = {
-	"xmultiplm72", "xmultipl", NULL, NULL, "1989",
-	"X Multiply (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, xmultiplm72RomInfo, xmultiplm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, XmultiplDIPInfo,
-	xmultiplm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Dragon Breed (World, M81 hardware)
-
-static struct BurnRomInfo dbreedRomDesc[] = {
-	{ "db-a-h0-.59",	0x20000, 0xe1177267, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "db-a-l0-.68",	0x20000, 0xd82b167e, 0x01 | BRF_PRG | BRF_ESS }, //  1
-
-	{ "db-a-sp-.14",	0x10000, 0x54a61560, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
-
-	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  3 Sprites
-	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  4
-	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  5
-	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  6
-
-	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
-	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  8
-	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           //  9
-	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 10
-
-	{ "db_a-v0.rom",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 11 DAC Samples
-};
-
-STD_ROM_PICK(dbreed)
-STD_ROM_FN(dbreed)
-
-static INT32 dbreedRomLoadCallback()
-{
-	memcpy (DrvV30ROM + 0x60000, DrvV30ROM + 0x20000, 0x20000);
-
-	return 0;
-}
-
-static INT32 dbreedInit()
-{
-	return DrvInit(common_080000_088000, sound_rom_map, dbreedRomLoadCallback, Z80_REAL_NMI, 2);
-}
-
-struct BurnDriver BurnDrvDbreed = {
-	"dbreed", NULL, NULL, NULL, "1989",
-	"Dragon Breed (World, M81 hardware)\0", NULL, "Irem", "Irem M81",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, dbreedRomInfo, dbreedRomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
-	dbreedInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Dragon Breed (World, M72 hardware)
-
-static struct BurnRomInfo dbreedm72RomDesc[] = {
-	{ "db_c-h3-b.ic43",	0x20000, 0x4bf3063c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "db_c-l3-b.ic34",	0x20000, 0xe4b89b79, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "db_c-h0.ic40",	0x10000, 0x5aa79fb2, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "db_c-l0.ic37",	0x10000, 0xed0f5e06, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  5
-	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  6
-	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  7
-
-	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  9
-	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           // 10
-	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 11
-
-	{ "db_k804m.b0",	0x20000, 0x4c83e92e, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "db_k805m.b1",	0x20000, 0x835ef268, 0x04 | BRF_GRA },           // 13
-	{ "db_k806m.b2",	0x20000, 0x5117f114, 0x04 | BRF_GRA },           // 14
-	{ "db_k807m.b3",	0x20000, 0x8eb0c978, 0x04 | BRF_GRA },           // 15
-
-	{ "db_c-v0.ic44",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 16 DAC Samples
-
-	// Requires different currently undumped MCU code - i8751 MCU labeled  DB C-PR-B??
-	{ "db_c-pr-b.ic1",  0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, 			 // 17 i8751 microcontroller
-};
-
-STD_ROM_PICK(dbreedm72)
-STD_ROM_FN(dbreedm72)
-
-static INT32 dbreedm72RomLoadCallback()
-{
-	memmove(DrvV30ROM + 0x60000, DrvV30ROM + 0x40000, 0x20000);
-
-	return 0;
-}
-
-static INT32 dbreedm72Init()
-{
-	install_protection(dbreedm72);
-
-	return DrvInit(common_080000_090000, sound_ram_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 0);
-}
-
-struct BurnDriver BurnDrvDbreedm72 = {
-	"dbreedm72", "dbreed", NULL, NULL, "1989",
-	"Dragon Breed (World, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, dbreedm72RomInfo, dbreedm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
-	dbreedm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Dragon Breed (Japan, M72 harware)
-// with matching i8751 this set boots with a Japanese warning screen
-
-static struct BurnRomInfo dbreedjm72RomDesc[] = {
-	{ "db_c-h3.ic43",	0x20000, 0x43425d67, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "db_c-l3.ic34",	0x20000, 0x9c1abc85, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "db_c-h0.ic40",	0x10000, 0x5aa79fb2, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "db_c-l0.ic37",	0x10000, 0xed0f5e06, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  5
-	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  6
-	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  7
-
-	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  9
-	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           // 10
-	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 11
-
-	{ "db_k804m.b0",	0x20000, 0x4c83e92e, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "db_k805m.b1",	0x20000, 0x835ef268, 0x04 | BRF_GRA },           // 13
-	{ "db_k806m.b2",	0x20000, 0x5117f114, 0x04 | BRF_GRA },           // 14
-	{ "db_k807m.b3",	0x20000, 0x8eb0c978, 0x04 | BRF_GRA },           // 15
-
-	{ "db_c-v0.ic44",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 16 DAC Samples
-
-	{ "db_c-pr-.ic1",	0x01000, 0x8bf2910c, 0x00 | BRF_OPT }, 			 // 17 i8751 microcontroller
-};
-
-STD_ROM_PICK(dbreedjm72)
-STD_ROM_FN(dbreedjm72)
-
-struct BurnDriver BurnDrvDbreedjm72 = {
-	"dbreedjm72", "dbreed", NULL, NULL, "1989",
-	"Dragon Breed (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, dbreedjm72RomInfo, dbreedjm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
-	dbreedm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Battle Chopper (World)
-
-static struct BurnRomInfo bchopperRomDesc[] = {
-	{ "mh_c-h0-b.ic40",		0x10000, 0xf2feab16, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "mh_c-l0-b.ic37",		0x10000, 0x9f887096, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "mh_c-h1-b.ic41",		0x10000, 0xa995d64f, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "mh_c-l1-b.ic36",		0x10000, 0x41dda999, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	{ "mh_c-h3-b.ic43",		0x10000, 0xab9451ca, 0x01 | BRF_PRG | BRF_ESS }, //  4
-	{ "mh_c-l3-b.ic34",		0x10000, 0x11562221, 0x01 | BRF_PRG | BRF_ESS }, //  5
-
-	{ "mh_c-00-a.ic53",		0x10000, 0xf6e6e660, 0x02 | BRF_GRA },           //  6 Sprites
-	{ "mh_c-01-b.ic52",		0x10000, 0x708cdd37, 0x02 | BRF_GRA },           //  7
-	{ "mh_c-10-a.ic51",		0x10000, 0x292c8520, 0x02 | BRF_GRA },           //  8
-	{ "mh_c-11-b.ic50",		0x10000, 0x20904cf3, 0x02 | BRF_GRA },           //  9
-	{ "mh_c-20-a.ic49",		0x10000, 0x1ab50c23, 0x02 | BRF_GRA },           // 10
-	{ "mh_c-21-b.ic48",		0x10000, 0xc823d34c, 0x02 | BRF_GRA },           // 11
-	{ "mh_c-30-a.ic47",		0x10000, 0x11f6c56b, 0x02 | BRF_GRA },           // 12
-	{ "mh_c-31-b.ic46",		0x10000, 0x23134ec5, 0x02 | BRF_GRA },           // 13
-
-	{ "mh_b-a0-b.ic21",		0x10000, 0xe46ed7bf, 0x03 | BRF_GRA },           // 14 Foreground Tiles
-	{ "mh_b-a1-b.ic22",		0x10000, 0x590605ff, 0x03 | BRF_GRA },           // 15
-	{ "mh_b-a2-b.ic20",		0x10000, 0xf8158226, 0x03 | BRF_GRA },           // 16
-	{ "mh_b-a3-b.ic23",		0x10000, 0x0f07b9b7, 0x03 | BRF_GRA },           // 17
-
-	{ "mh_b-b0-.ic26",		0x10000, 0xb5b95776, 0x04 | BRF_GRA },           // 18 Background Tiles
-	{ "mh_b-b1-.ic27",		0x10000, 0x74ca16ee, 0x04 | BRF_GRA },           // 19
-	{ "mh_b-b2-.ic25",		0x10000, 0xb82cca04, 0x04 | BRF_GRA },           // 20
-	{ "mh_b-b3-.ic24",		0x10000, 0xa7afc920, 0x04 | BRF_GRA },           // 21
-
-	{ "mh_c-v0-b.ic44",		0x10000, 0xd0c27e58, 0x05 | BRF_SND },           // 22 DAC Samples
-
-	{ "mh_c-pr-b.ic1",	0x10000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 23 i8751 Code
-};
-
-STD_ROM_PICK(bchopper)
-STD_ROM_FN(bchopper)
-
-static INT32 bchopperInit()
-{
-	install_protection(bchopper);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvBchopper = {
-	"bchopper", NULL, NULL, NULL, "1987",
-	"Battle Chopper (World)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, bchopperRomInfo, bchopperRomName, NULL, NULL, NULL, NULL, CommonInputInfo, BchopperDIPInfo,
-	bchopperInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Mr. HELI no Dai-Bouken
-
-static struct BurnRomInfo mrheliRomDesc[] = {
-	{ "mh_c-h0-.ic40",	0x10000, 0xe2ca5646, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "mh_c-l0-.ic37",	0x10000, 0x643e23cd, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "mh_c-h1-.ic41",	0x10000, 0x8974e84d, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "mh_c-l1-.ic36",	0x10000, 0x5f8bda69, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	{ "mh_c-h3-.ic43",	0x10000, 0x143f596e, 0x01 | BRF_PRG | BRF_ESS }, //  4
-	{ "mh_c-l3-.ic34",	0x10000, 0xc0982536, 0x01 | BRF_PRG | BRF_ESS }, //  5
-
-	{ "mh_c-00.ic53",	0x20000, 0xdec4e121, 0x02 | BRF_GRA },           //  6 Sprites
-	{ "mh_c-10.ic51",	0x20000, 0x7aaa151e, 0x02 | BRF_GRA },           //  7
-	{ "mh_c-20.ic49",	0x20000, 0xeae0de74, 0x02 | BRF_GRA },           //  8
-	{ "mh_c-30.ic47",	0x20000, 0x01d5052f, 0x02 | BRF_GRA },           //  9
-
-	{ "mh_b-a0.ic21",	0x10000, 0x6a0db256, 0x03 | BRF_GRA },           // 10 Foreground Tiles
-	{ "mh_b-a1.ic22",	0x10000, 0x14ec9795, 0x03 | BRF_GRA },           // 11
-	{ "mh_b-a2.ic20",	0x10000, 0xdfcb510e, 0x03 | BRF_GRA },           // 12
-	{ "mh_b-a3.ic23",	0x10000, 0x957e329b, 0x03 | BRF_GRA },           // 13
-
-	{ "mh_b-b0-.ic26",		0x10000, 0xb5b95776, 0x04 | BRF_GRA },           // 14 Background Tiles
-	{ "mh_b-b1-.ic27",		0x10000, 0x74ca16ee, 0x04 | BRF_GRA },           // 15
-	{ "mh_b-b2-.ic25",		0x10000, 0xb82cca04, 0x04 | BRF_GRA },           // 16
-	{ "mh_b-b3-.ic24",		0x10000, 0xa7afc920, 0x04 | BRF_GRA },           // 17
-
-	{ "mh_c-v0-b.ic44",		0x10000, 0xd0c27e58, 0x05 | BRF_SND },           // 18 DAC Samples
-
-	{ "mh_c-pr-.ic1",	0x01000, 0x897dc4ee, 0x00 | BRF_OPT }, 			 // 19 i8751 microcontroller
-};
-
-STD_ROM_PICK(mrheli)
-STD_ROM_FN(mrheli)
-
-static INT32 mrheliInit()
-{
-	m72_install_protection(bchopper_code, mrheli_crc, bchopper_sample_offsets);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvMrheli = {
-	"mrheli", "bchopper", NULL, NULL, "1987",
-	"Mr. HELI no Dai-Bouken\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, mrheliRomInfo, mrheliRomName, NULL, NULL, NULL, NULL, CommonInputInfo, BchopperDIPInfo,
-	mrheliInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Ninja Spirit (World)
-// doesn't wait / check for japan warning string.. fails rom check if used with japanese mcu rom (World version?)
-
-static struct BurnRomInfo nspiritRomDesc[] = {
-	{ "nin_c-h0-b.6h",	0x10000, 0x035692fa, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "nin_c-l0-b.6d",	0x10000, 0x9a405898, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "nin_c-h1.6j",	0x10000, 0xcbc10586, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "nin_c-l1.6c",	0x10000, 0xb75c9a4d, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	{ "nin_c-h2.6l",	0x10000, 0x8ad818fa, 0x01 | BRF_PRG | BRF_ESS }, //  4
-	{ "nin_c-l2.6b",	0x10000, 0xc52ca78c, 0x01 | BRF_PRG | BRF_ESS }, //  5
-	{ "nin_c-h3-b.6m",	0x10000, 0x501104ef, 0x01 | BRF_PRG | BRF_ESS }, //  6
-	{ "nin_c-l3-b.6a",	0x10000, 0xfd7408b8, 0x01 | BRF_PRG | BRF_ESS }, //  7
-
-	{ "nin-r00.7m",		0x20000, 0x5f61d30b, 0x02 | BRF_GRA },           //  8 Sprites
-	{ "nin-r10.7j",		0x20000, 0x0caad107, 0x02 | BRF_GRA },           //  9
-	{ "nin-r20.7f",		0x20000, 0xef3617d3, 0x02 | BRF_GRA },           // 10
-	{ "nin-r30.7d",		0x20000, 0x175d2a24, 0x02 | BRF_GRA },           // 11
-
-	{ "nin_b-a0.4c",	0x10000, 0x63f8f658, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "nin_b-a1.4d",	0x10000, 0x75eb8306, 0x03 | BRF_GRA },           // 13
-	{ "nin_b-a2.4b",	0x10000, 0xdf532172, 0x03 | BRF_GRA },           // 14
-	{ "nin_b-a3.4e",	0x10000, 0x4dedd64c, 0x03 | BRF_GRA },           // 15
-
-	{ "b0.4j",			0x10000, 0x1b0e08a6, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "b1.4k",			0x10000, 0x728727f0, 0x04 | BRF_GRA },           // 17
-	{ "b2.4h",			0x10000, 0xf87efd75, 0x04 | BRF_GRA },           // 18
-	{ "b3.4f",			0x10000, 0x98856cb4, 0x04 | BRF_GRA },           // 19
-
-	{ "nin-v0.7a",		0x10000, 0xa32e8caf, 0x05 | BRF_SND },           // 20 DAC Samples
-
-	{ "nin_c-pr-b.ic1",	0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 21 i8751 microcontroller
-	
-	{ "m72_a-8l.8l",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 22 Proms
-	{ "m72_a-9l.9l",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 23
-
-	{ "nin_c-3f.3f",	0x00100, 0x5402fc07, 0x00 | BRF_OPT }, 			 // 24 PLDs
-	{ "m72_a-3d.3d",	0x00100, 0xde85dac3, 0x00 | BRF_OPT }, 			 // 25
-	{ "m72_a-4d.4d",	0x00100, 0x59676de1, 0x00 | BRF_OPT }, 			 // 26
-};
-
-STD_ROM_PICK(nspirit)
-STD_ROM_FN(nspirit)
-
-static INT32 nspiritInit()
-{
-	install_protection(nspirit);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvNspirit = {
-	"nspirit", NULL, NULL, NULL, "1988",
-	"Ninja Spirit (World)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
-	NULL, nspiritRomInfo, nspiritRomName, NULL, NULL, NULL, NULL, CommonInputInfo, NspiritDIPInfo,
-	nspiritInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Saigo no Nindou (Japan)
-
-static struct BurnRomInfo nspiritjRomDesc[] = {
-	{ "nin_c-h0.6h",	0x10000, 0x8603fab2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "nin_c-l0.6d",	0x10000, 0xe520fa35, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "nin_c-h1.6j",	0x10000, 0xcbc10586, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "nin_c-l1.6c",	0x10000, 0xb75c9a4d, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	{ "nin_c-h2.6l",	0x10000, 0x8ad818fa, 0x01 | BRF_PRG | BRF_ESS }, //  4
-	{ "nin_c-l2.6b",	0x10000, 0xc52ca78c, 0x01 | BRF_PRG | BRF_ESS }, //  5
-	{ "nin_c-h3.6m",	0x10000, 0x95b63a61, 0x01 | BRF_PRG | BRF_ESS }, //  6
-	{ "nin_c-l3.6a",	0x10000, 0xe754a87a, 0x01 | BRF_PRG | BRF_ESS }, //  7
-
-	{ "nin-r00.7m",		0x20000, 0x5f61d30b, 0x02 | BRF_GRA },           //  8 Sprites
-	{ "nin-r10.7j",		0x20000, 0x0caad107, 0x02 | BRF_GRA },           //  9
-	{ "nin-r20.7f",		0x20000, 0xef3617d3, 0x02 | BRF_GRA },           // 10
-	{ "nin-r30.7d",		0x20000, 0x175d2a24, 0x02 | BRF_GRA },           // 11
-
-	{ "nin_b-a0.4c",	0x10000, 0x63f8f658, 0x03 | BRF_GRA },           // 12 Foreground Tiles
-	{ "nin_b-a1.4d",	0x10000, 0x75eb8306, 0x03 | BRF_GRA },           // 13
-	{ "nin_b-a2.4b",	0x10000, 0xdf532172, 0x03 | BRF_GRA },           // 14
-	{ "nin_b-a3.4e",	0x10000, 0x4dedd64c, 0x03 | BRF_GRA },           // 15
-
-	{ "b0.4j",			0x10000, 0x1b0e08a6, 0x04 | BRF_GRA },           // 16 Background Tiles
-	{ "b1.4k",			0x10000, 0x728727f0, 0x04 | BRF_GRA },           // 17
-	{ "b2.4h",			0x10000, 0xf87efd75, 0x04 | BRF_GRA },           // 18
-	{ "b3.4f",			0x10000, 0x98856cb4, 0x04 | BRF_GRA },           // 19
-
-	{ "nin-v0.7a",		0x10000, 0xa32e8caf, 0x05 | BRF_SND },           // 20 DAC Samples
-
-	{ "nin_c-pr-.ic1",	0x01000, 0x802d440a, 0x00 | BRF_OPT },           // 21 i8751 microcontroller
-};
-
-STD_ROM_PICK(nspiritj)
-STD_ROM_FN(nspiritj)
-
-static INT32 nspiritjInit()
-{
-	m72_install_protection(nspirit_code, nspiritj_crc, nspirit_sample_offsets);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvNspiritj = {
-	"nspiritj", "nspirit", NULL, NULL, "1988",
-	"Saigo no Nindou (Japan)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
-	NULL, nspiritjRomInfo, nspiritjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, NspiritDIPInfo,
-	nspiritjInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Image Fight (World)
-
-static struct BurnRomInfo imgfightRomDesc[] = {
-	{ "if-c-h0-a.ic40",	0x10000, 0xf5c94464, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "if-c-l0-a.ic37",	0x10000, 0x87c534fe, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "if-c-h3.ic43",	0x20000, 0xea030541, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "if-c-l3.ic34",	0x20000, 0xc66ae348, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "if-c-00.ic53",	0x20000, 0x745e6638, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "if-c-10.ic51",	0x20000, 0xb7108449, 0x02 | BRF_GRA },           //  5
-	{ "if-c-20.ic49",	0x20000, 0xaef33cba, 0x02 | BRF_GRA },           //  6
-	{ "if-c-30.ic47",	0x20000, 0x1f98e695, 0x02 | BRF_GRA },           //  7
-
-	{ "if-a-a0.ic21",	0x10000, 0x34ee2d77, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "if-a-a1.ic22",	0x10000, 0x6bd2845b, 0x03 | BRF_GRA },           //  9
-	{ "if-a-a2.ic20",	0x10000, 0x090d50e5, 0x03 | BRF_GRA },           // 10
-	{ "if-a-a3.ic23",	0x10000, 0x3a8e3083, 0x03 | BRF_GRA },           // 11
-
-	{ "if-a-b0.ic26",	0x10000, 0xb425c829, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "if-a-b1.ic27",	0x10000, 0xe9bfe23e, 0x04 | BRF_GRA },           // 13
-	{ "if-a-b2.ic25",	0x10000, 0x256e50f2, 0x04 | BRF_GRA },           // 14
-	{ "if-a-b3.ic24",	0x10000, 0x4c682785, 0x04 | BRF_GRA },           // 15
-
-	{ "if-c-v0.ic44",	0x10000, 0xcb64a194, 0x05 | BRF_SND },           // 16 DAC Samples
-	{ "if-c-v1.ic45",	0x10000, 0x45b68bf5, 0x05 | BRF_SND },           // 17
-
-	{ "if_c-pr-a.ic1",  0x01000, 0x55f10458, 0x00 | BRF_OPT },           // 18 i8751 microcontroller
-};
-
-STD_ROM_PICK(imgfight)
-STD_ROM_FN(imgfight)
-
-static INT32 imgfightRomLoadCallback()
-{
-	memmove(DrvV30ROM + 0x40000, DrvV30ROM + 0x20000, 0x40000);
-
-	return 0;
-}
-
-static INT32 imgfightInit()
-{
-	install_protection(imgfight);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, imgfightRomLoadCallback, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvImgfight = {
-	"imgfight", NULL, NULL, NULL, "1988",
-	"Image Fight (World)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, imgfightRomInfo, imgfightRomName, NULL, NULL, NULL, NULL, CommonInputInfo, ImgfightDIPInfo,
-	imgfightInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Image Fight (Japan)
-
-static struct BurnRomInfo imgfightjRomDesc[] = {
-	{ "if-c-h0.ic40",	0x10000, 0x592d2d80, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "if-c-l0.ic37",	0x10000, 0x61f89056, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "if-c-h3.ic43",	0x20000, 0xea030541, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "if-c-l3.ic34",	0x20000, 0xc66ae348, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "if-c-00.ic53",	0x20000, 0x745e6638, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "if-c-10.ic51",	0x20000, 0xb7108449, 0x02 | BRF_GRA },           //  5
-	{ "if-c-20.ic49",	0x20000, 0xaef33cba, 0x02 | BRF_GRA },           //  6
-	{ "if-c-30.ic47",	0x20000, 0x1f98e695, 0x02 | BRF_GRA },           //  7
-
-	{ "if-a-a0.ic21",	0x10000, 0x34ee2d77, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "if-a-a1.ic22",	0x10000, 0x6bd2845b, 0x03 | BRF_GRA },           //  9
-	{ "if-a-a2.ic20",	0x10000, 0x090d50e5, 0x03 | BRF_GRA },           // 10
-	{ "if-a-a3.ic23",	0x10000, 0x3a8e3083, 0x03 | BRF_GRA },           // 11
-
-	{ "if-a-b0.ic26",	0x10000, 0xb425c829, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "if-a-b1.ic27",	0x10000, 0xe9bfe23e, 0x04 | BRF_GRA },           // 13
-	{ "if-a-b2.ic25",	0x10000, 0x256e50f2, 0x04 | BRF_GRA },           // 14
-	{ "if-a-b3.ic24",	0x10000, 0x4c682785, 0x04 | BRF_GRA },           // 15
-
-	{ "if-c-v0.ic44",	0x10000, 0xcb64a194, 0x05 | BRF_SND },           // 16 DAC Samples
-	{ "if-c-v1.ic45",	0x10000, 0x45b68bf5, 0x05 | BRF_SND },           // 17
-
-	{ "if_c-pr-.ic1",	0x01000, 0xef0d5098, 0x00 | BRF_OPT }, 			 // 18 i8751 microcontroller
-};
-
-STD_ROM_PICK(imgfightj)
-STD_ROM_FN(imgfightj)
-
-struct BurnDriver BurnDrvImgfightj = {
-	"imgfightj", "imgfight", NULL, NULL, "1988",
-	"Image Fight (Japan)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, imgfightjRomInfo, imgfightjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, ImgfightDIPInfo,
-	imgfightInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Air Duel (World, M82 hardware)
-
-static struct BurnRomInfo airduelRomDesc[] = {
-	{ "ad_=m82=_a-h0-d.ic52",	0x20000, 0xdbecc726, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ad_=m82=_a-l0-d.ic60",	0x20000, 0x6a9fcf59, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "ad_=m82=_a-h1-d.ic51",	0x20000, 0xbafc152a, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "ad_=m82=_a-l1-d.ic59",	0x20000, 0x9e2b1ae7, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	
-	{ "ad_=m82=_a-sp-d.ic15",	0x10000, 0x16a858a3, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ad_=m82=_b-n0-d.ic44",	0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ad_=m82=_b-n1-d.ic45",	0x20000, 0x9865856b, 0x02 | BRF_GRA },           //  6
-	{ "ad_=m82=_b-n2-d.ic46",	0x20000, 0xd392aef2, 0x02 | BRF_GRA },           //  7
-	{ "ad_=m82=_b-n3-d.ic36",	0x20000, 0x923240c3, 0x02 | BRF_GRA },           //  8
-
-	{ "ad_=m82=_a-c0-d.ic49",	0x20000, 0xce134b47, 0x03 | BRF_GRA },           //  9 Foreground Tiles
-	{ "ad_=m82=_a-c1-d.ic48",	0x20000, 0x097fd853, 0x03 | BRF_GRA },           // 10
-	{ "ad_=m82=_a-c2-d.ic57",	0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           // 11
-	{ "ad_=m82=_a-c3-d.ic56",	0x20000, 0x6637c349, 0x03 | BRF_GRA },           // 12
-
-	{ "mt_f0.ic38",				0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 17 Sprites 2
-	{ "mt_f1.ic39",				0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 18
-	{ "mt_f2.ic40",				0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 19
-	{ "mt_f3.ic41",				0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 20
-
-	{ "ad_=m82=_a-v0-d.ic12",	0x20000, 0x339f474d, 0x05 | BRF_SND },           // 21 DAC Samples
-};
-
-STD_ROM_PICK(airduel)
-STD_ROM_FN(airduel)
-
-static INT32 airduelInit()
-{
-	return DrvInit(majtitle_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 6);
-}
-
-struct BurnDriver BurnDrvAirduel = {
-	"airduel", NULL, NULL, NULL, "1990",
-	"Air Duel (World, M82 hardware)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, airduelRomInfo, airduelRomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
-	airduelInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Air Duel (US location test, M82 hardware)
-
-static struct BurnRomInfo airdueluRomDesc[] = {
-	{ "r10-m82a-h0.ic52",	0x20000, 0x17f19965, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "r10-m82a-l0.ic60",	0x20000, 0xf8b54d6c, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "r10-m82-h1.ic51",	0x20000, 0xbafc152a, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "r10-m82-l1.ic59",	0x20000, 0x9e2b1ae7, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	
-	{ "r10-bgm.ic15",		0x10000, 0x16a858a3, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "r10-obj0.ic44",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "r10-obj1.ic45",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           //  6
-	{ "r10-obj2.ic46",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           //  7
-	{ "r10-obj3.ic36",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           //  8
-
-	{ "r10-chr0.ic49",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           //  9 Foreground Tiles
-	{ "r10-chr1.ic48",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           // 10
-	{ "r10-chr2.ic57",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           // 11
-	{ "r10-chr3.ic56",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           // 12
-
-	{ "mt_f0.ic38",			0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 17 Sprites 2
-	{ "mt_f1.ic39",			0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 18
-	{ "mt_f2.ic40",			0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 19
-	{ "mt_f3.ic41",			0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 20
-
-	{ "r10-voice.ic12",		0x20000, 0x339f474d, 0x05 | BRF_SND },           // 21 DAC Samples
-};
-
-STD_ROM_PICK(airduelu)
-STD_ROM_FN(airduelu)
-
-struct BurnDriver BurnDrvAirduelu = {
-	"airduelu", "airduel", NULL, NULL, "1990",
-	"Air Duel (US location test, M82 hardware)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, airdueluRomInfo, airdueluRomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
-	airduelInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Air Duel (World, M72 hardware)
-
-static struct BurnRomInfo airduelm72RomDesc[] = {
-	{ "ad-c-h0-c.ic40",	0x20000, 0x6467ed0f, 0x01 | BRF_PRG | BRF_ESS }, 	//  0 V30 Code
-	{ "ad-c-l0-c.ic37",	0x20000, 0xb90c4ffd, 0x01 | BRF_PRG | BRF_ESS }, 	//  1
-	{ "ad-c-h3.ic43",	0x20000, 0x9f7cfca3, 0x01 | BRF_PRG | BRF_ESS }, 	//  2
-	{ "ad-c-l3.ic34",	0x20000, 0x9dd343f7, 0x01 | BRF_PRG | BRF_ESS }, 	//  3
-
-	{ "ad-00.ic53",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           	//  4 Sprites
-	{ "ad-10.ic51",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           	//  5
-	{ "ad-20.ic49",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           	//  6
-	{ "ad-30.ic47",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           	//  7
-
-	{ "ad-a0.ic21",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           	//  8 Foreground Tiles
-	{ "ad-a1.ic22",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           	//  9
-	{ "ad-a2.ic20",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           	// 10
-	{ "ad-a3.ic23",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           	// 11
-
-	{ "ad-b0.ic26",		0x20000, 0xce134b47, 0x04 | BRF_GRA },           	// 12 Background Tiles
-	{ "ad-b1.ic27",		0x20000, 0x097fd853, 0x04 | BRF_GRA },           	// 13
-	{ "ad-b2.ic25",		0x20000, 0x6a94c1b9, 0x04 | BRF_GRA },           	// 14
-	{ "ad-b3.ic24",		0x20000, 0x6637c349, 0x04 | BRF_GRA },           	// 15
-
-	{ "ad-v0.ic44",		0x20000, 0x339f474d, 0x05 | BRF_SND },           	// 16 DAC Samples
-
-	{ "ad_c-pr-c.ic1",	0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 17 i8751 microcontroller
-	
-	{ "ad-c-3f.ic13",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 18 Pals
-};
-
-STD_ROM_PICK(airduelm72)
-STD_ROM_FN(airduelm72)
-
-static INT32 airduelm72Init()
-{
-	install_protection(airduel);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvAirduelm72 = {
-	"airduelm72", "airduel", NULL, NULL, "1990",
-	"Air Duel (World, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, airduelm72RomInfo, airduelm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
-	airduelm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Air Duel (Japan, M72 hardware)
-
-static struct BurnRomInfo airdueljm72RomDesc[] = {
-	{ "ad-c-h0.ic40",	0x20000, 0x12140276, 0x01 | BRF_PRG | BRF_ESS }, 	//  0 V30 Code
-	{ "ad-c-l0.ic37",	0x20000, 0x4ac0b91d, 0x01 | BRF_PRG | BRF_ESS }, 	//  1
-	{ "ad-c-h3.ic43",	0x20000, 0x9f7cfca3, 0x01 | BRF_PRG | BRF_ESS }, 	//  2
-	{ "ad-c-l3.ic34",	0x20000, 0x9dd343f7, 0x01 | BRF_PRG | BRF_ESS }, 	//  3
-
-	{ "ad-00.ic53",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           	//  4 Sprites
-	{ "ad-10.ic51",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           	//  5
-	{ "ad-20.ic49",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           	//  6
-	{ "ad-30.ic47",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           	//  7
-
-	{ "ad-a0.ic21",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           	//  8 Foreground Tiles
-	{ "ad-a1.ic22",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           	//  9
-	{ "ad-a2.ic20",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           	// 10
-	{ "ad-a3.ic23",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           	// 11
-
-	{ "ad-b0.ic26",		0x20000, 0xce134b47, 0x04 | BRF_GRA },           	// 12 Background Tiles
-	{ "ad-b1.ic27",		0x20000, 0x097fd853, 0x04 | BRF_GRA },           	// 13
-	{ "ad-b2.ic25",		0x20000, 0x6a94c1b9, 0x04 | BRF_GRA },           	// 14
-	{ "ad-b3.ic24",		0x20000, 0x6637c349, 0x04 | BRF_GRA },           	// 15
-
-	{ "ad-v0.ic44",		0x20000, 0x339f474d, 0x05 | BRF_SND },           	// 16 DAC Samples
-
-	{ "ad_c-pr-.ic1",	0x01000, 0x45584e52, 0x00 | BRF_OPT }, 			 	// 17 i8751 microcontroller
-	
-	{ "ad-c-3f.ic13",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 18 Pals
-};
-
-STD_ROM_PICK(airdueljm72)
-STD_ROM_FN(airdueljm72)
-
-struct BurnDriver BurnDrvAirdueljm72 = {
-	"airdueljm72", "airduel", NULL, NULL, "1990",
-	"Air Duel (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
-	NULL, airdueljm72RomInfo, airdueljm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
-	airduelm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// R-Type II (World)
-
-static struct BurnRomInfo rtype2RomDesc[] = {
-	{ "rt2-a-h0-d.54",	0x20000, 0xd8ece6f4, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt2-a-l0-d.60",	0x20000, 0x32cfb2e4, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt2-a-h1-d.53",	0x20000, 0x4f6e9b15, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt2-a-l1-d.59",	0x20000, 0x0fd123bf, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
-	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
-	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
-
-	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
-	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
-	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
-	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
-	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
-	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
-	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
-
-	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
-};
-
-STD_ROM_PICK(rtype2)
-STD_ROM_FN(rtype2)
-
-static INT32 rtype2Init()
-{
-	return DrvInit(rtype2_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 1);
-}
-
-struct BurnDriver BurnDrvRtype2 = {
-	"rtype2", NULL, NULL, NULL, "1989",
-	"R-Type II (World)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtype2RomInfo, rtype2RomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
-	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type II (Japan)
-
-static struct BurnRomInfo rtype2jRomDesc[] = {
-	{ "rt2-a-h0.54",	0x20000, 0x7857ccf6, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt2-a-l0.60",	0x20000, 0xcb22cd6e, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt2-a-h1.53",	0x20000, 0x49e75d28, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt2-a-l1.59",	0x20000, 0x12ec1676, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
-	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
-	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
-
-	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
-	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
-	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
-	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
-	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
-	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
-	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
-
-	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
-	
-	{ "rt2_b-4n-.bin",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 18 Proms
-	{ "rt2_b-4p-.bin",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 19
-	
-	{ "rt2-a-2h-.5",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
-	{ "rt2-a-5l-.33",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
-	{ "rt2-b-3a-.9",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
-	{ "rt2-a-7d-.45",	0x00104, 0x53c1e087, 0x00 | BRF_OPT },
-};
-
-STD_ROM_PICK(rtype2j)
-STD_ROM_FN(rtype2j)
-
-struct BurnDriver BurnDrvRtype2j = {
-	"rtype2j", "rtype2", NULL, NULL, "1989",
-	"R-Type II (Japan)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtype2jRomInfo, rtype2jRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
-	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// R-Type II (Japan, revision C)
-
-static struct BurnRomInfo rtype2jcRomDesc[] = {
-	{ "rt2-a-h0-c.54",	0x20000, 0xef9a9990, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "rt2-a-l0-c.60",	0x20000, 0xd8b9da64, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "rt2-a-h1-c.53",	0x20000, 0x1b1870f4, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "rt2-a-l1-c.59",	0x20000, 0x60fdff35, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
-	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
-	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
-
-	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
-	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
-	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
-	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
-	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
-	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
-	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
-
-	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
-};
-
-STD_ROM_PICK(rtype2jc)
-STD_ROM_FN(rtype2jc)
-
-struct BurnDriver BurnDrvRtype2jc = {
-	"rtype2jc", "rtype2", NULL, NULL, "1989",
-	"R-Type II (Japan, revision C)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, rtype2jcRomInfo, rtype2jcRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
-	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Hammerin' Harry (World, M81 hardware)
-
-static struct BurnRomInfo hharryRomDesc[] = {
-	{ "a-h0-v.rom",		0x20000, 0xc52802a5, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "a-l0-v.rom",		0x20000, 0xf463074c, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "a-h1-0.rom",		0x10000, 0x3ae21335, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "a-l1-0.rom",		0x10000, 0xbc6ac5f9, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "a-sp-0.rom",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
-	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
-	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
-
-	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
-	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
-	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
-
-	{ "a-v0-0.rom",		0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(hharry)
-STD_ROM_FN(hharry)
-
-static INT32 hharryInit()
-{
-	return DrvInit(common_080000_0a0000, sound_rom_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 2);
-}
-
-struct BurnDriver BurnDrvHharry = {
-	"hharry", NULL, NULL, NULL, "1990",
-	"Hammerin' Harry (World, M81 hardware))\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
-	NULL, hharryRomInfo, hharryRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
-	hharryInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Hammerin' Harry (US, M84 hardware)
-
-static struct BurnRomInfo hharryuRomDesc[] = {
-	{ "a-ho-u.8d",		0x20000, 0xede7f755, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "a-lo-u.9d",		0x20000, 0xdf0726ae, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "a-h1-f.8b",		0x10000, 0x31b741c5, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "a-l1-f.9b",		0x10000, 0xb23e966c, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "a-sp-0.rom",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
-	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
-	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
-
-	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
-	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
-	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
-
-	{ "a-v0-0.rom",		0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(hharryu)
-STD_ROM_FN(hharryu)
-
-static INT32 hharryuInit()
-{
-	return DrvInit(hharryu_main_cpu_map, sound_rom_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 1);
-}
-
-struct BurnDriver BurnDrvHharryu = {
-	"hharryu", "hharry", NULL, NULL, "1990",
-	"Hammerin' Harry (US, M84 hardware)\0", NULL, "Irem America", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
-	NULL, hharryuRomInfo, hharryuRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
-	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Hammerin' Harry (World, M84 hardware bootleg)
-
-static struct BurnRomInfo hharrybRomDesc[] = {
-	{ "4-a-27c010a.bin",	0x20000, 0x755c0874, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "6-a-27c010a.bin",	0x20000, 0xf10fb55c, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "3-a-27c512.bin",		0x10000, 0x31b741c5, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "5-a-27c512.bin",		0x10000, 0xb23e966c, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "2-a-27c512.bin",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "17-c-27c010a.bin",	0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "16-c-27c010a.bin",	0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
-	{ "14-c-27c010a.bin",	0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
-	{ "15-c-27c010a.bin",	0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
-
-	{ "13-b-27c010a.bin",	0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "11-b-27c010a.bin",	0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
-	{ "9-b-27c010a.bin",	0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
-	{ "7-b-27c010a.bin",	0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
-
-	{ "1-a-27c010a.bin",	0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
-	
-	{ "19-c-82s129.bin",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 14 Proms
-	{ "18-c-82s129.bin",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 15
-
-	{ "a-pal16l8.bin",		0x00104, 0x1358c513, 0x00 | BRF_OPT },           // 16
-};
-
-STD_ROM_PICK(hharryb)
-STD_ROM_FN(hharryb)
-
-struct BurnDriver BurnDrvHharryb = {
-	"hharryb", "hharry", NULL, NULL, "1990",
-	"Hammerin' Harry (World, M84 hardware bootleg)\0", NULL, "bootleg", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
-	NULL, hharrybRomInfo, hharrybRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
-	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Daiku no Gensan (Japan, M84 hardware)
-
-static struct BurnRomInfo dkgensanRomDesc[] = {
-	{ "gen-a-h0.bin",	0x20000, 0x07a45f6d, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "gen-a-l0.bin",	0x20000, 0x46478fea, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "gen-a-h1.bin",	0x10000, 0x54e5b73c, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "gen-a-l1.bin",	0x10000, 0x894f8a9f, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "gen-a-sp.bin",	0x10000, 0xe83cfc2c, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
-	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
-	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
-
-	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
-	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
-	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
-
-	{ "gen-vo.bin",		0x20000, 0xd8595c66, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(dkgensan)
-STD_ROM_FN(dkgensan)
-
-struct BurnDriver BurnDrvDkgensan = {
-	"dkgensan", "hharry", NULL, NULL, "1990",
-	"Daiku no Gensan (Japan, M84 hardware)\0", NULL, "Irem", "Irem M82",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
-	NULL, dkgensanRomInfo, dkgensanRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
-	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Daiku no Gensan (Japan, M72 hardware)
-
-static struct BurnRomInfo dkgensanm72RomDesc[] = {
-	{ "ge72-h0.bin",	0x20000, 0xa0ad992c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ge72-l0.bin",	0x20000, 0x996396f0, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "ge72-h3.bin",	0x10000, 0xd8b86005, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "ge72-l3.bin",	0x10000, 0x23d303a5, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  5
-	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  6
-	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  7
-
-	{ "ge72b-a0.bin",	0x10000, 0xf5f56b2a, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "ge72-a1.bin",	0x10000, 0xd194ea08, 0x03 | BRF_GRA },           //  9
-	{ "ge72-a2.bin",	0x10000, 0x2b06bcc3, 0x03 | BRF_GRA },           // 10
-	{ "ge72-a3.bin",	0x10000, 0x94b96bfa, 0x03 | BRF_GRA },           // 11
-
-	{ "ge72-b0.bin",	0x10000, 0x208796b3, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "ge72-b1.bin",	0x10000, 0xb4a7f490, 0x04 | BRF_GRA },           // 13
-	{ "ge72b-b2.bin",	0x10000, 0x34fe8f7f, 0x04 | BRF_GRA },           // 14
-	{ "ge72b-b3.bin",	0x10000, 0x4b0e92f4, 0x04 | BRF_GRA },           // 15
-
-	{ "gen-vo.bin",		0x20000, 0xd8595c66, 0x05 | BRF_SND },           // 16 DAC Samples
-
-	{ "dkgenm72_i8751.mcu",	0x10000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 17 i8751 microcontroller
-};
-
-STD_ROM_PICK(dkgensanm72)
-STD_ROM_FN(dkgensanm72)
-
-static INT32 dkgensanm72Init()
-{
-	install_protection(dkgenm72);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvDkgensanm72 = {
-	"dkgensanm72", "hharry", NULL, NULL, "1990",
-	"Daiku no Gensan (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
-	NULL, dkgensanm72RomInfo, dkgensanm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
-	dkgensanm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Lightning Swords
-
-static struct BurnRomInfo ltswordsRomDesc[] = {
-	{ "h0.ic55",		0x20000, 0x22f342b2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "l0.ic61",		0x20000, 0x0210d592, 0x01 | BRF_PRG | BRF_ESS }, //  1
-
-	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
-
-	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
-	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
-	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
-	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
-
-	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
-	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
-	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
-	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
-
-	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
-};
-
-STD_ROM_PICK(ltswords)
-STD_ROM_FN(ltswords)
-
-static INT32 kengoInit()
-{
-	INT32 nRet = DrvInit(hharryu_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 5);
-
-	if (nRet == 0) {
-		Kengo = 1;
-		Clock_16mhz = 1;
-		VezOpen(0);
-		VezSetDecode((UINT8 *)&gunforce_decryption_table);
-		VezClose();
-	}
-
-	return nRet;
-}
-
-struct BurnDriver BurnDrvLtswords = {
-	"ltswords", NULL, NULL, NULL, "1991",
-	"Lightning Swords\0", NULL, "Irem", "Irem M84?",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
-	NULL, ltswordsRomInfo, ltswordsRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
-	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Ken-Go (set 1)
-
-static struct BurnRomInfo kengoRomDesc[] = {
-	{ "ken_d-h0.rom",	0x20000, 0xf4ddeea5, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ken_d-l0.rom",	0x20000, 0x04dc0f81, 0x01 | BRF_PRG | BRF_ESS }, //  1
-
-	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
-
-	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
-	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
-	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
-	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
-
-	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
-	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
-	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
-	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
-
-	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
-};
-
-STD_ROM_PICK(kengo)
-STD_ROM_FN(kengo)
-
-struct BurnDriver BurnDrvKengo = {
-	"kengo", "ltswords", NULL, NULL, "1991",
-	"Ken-Go (set 1)\0", NULL, "Irem", "Irem M84?",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
-	NULL, kengoRomInfo, kengoRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
-	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Ken-Go (set 2)
-
-static struct BurnRomInfo kengoaRomDesc[] = {
-	{ "ken-d-h0-.ic55",	0x20000, 0xed3da88c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ken-d-l0-.ic61",	0x20000, 0x92c57d8e, 0x01 | BRF_PRG | BRF_ESS }, //  1
-
-	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
-
-	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
-	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
-	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
-	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
-
-	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
-	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
-	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
-	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
-
-	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
-	
-	{ "ken_b-4n-.ic23",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 12 Proms
-	{ "ken_b-4p-.ic24",	0x00100, 0x526f10ca, 0x00 | BRF_OPT },           // 13 
-};
-
-STD_ROM_PICK(kengoa)
-STD_ROM_FN(kengoa)
-
-struct BurnDriver BurnDrvKengoa = {
-	"kengoa", "ltswords", NULL, NULL, "1991",
-	"Ken-Go (set 2)\0", NULL, "Irem", "Irem M84?",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
-	NULL, kengoaRomInfo, kengoaRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
-	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Cosmic Cop (World)
-
-static struct BurnRomInfo cosmccopRomDesc[] = {
-	{ "cc-d-h0b.bin",	0x40000, 0x38958b01, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "cc-d-l0b.bin",	0x40000, 0xeff87f70, 0x01 | BRF_PRG | BRF_ESS }, //  1
-
-	{ "cc-d-sp.bin",	0x10000, 0x3e3ace60, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
-
-	{ "cc-c-00.bin",	0x20000, 0x9d99deaa, 0x02 | BRF_GRA },           //  3 Sprites
-	{ "cc-c-10.bin",	0x20000, 0x7eb083ed, 0x02 | BRF_GRA },           //  4
-	{ "cc-c-20.bin",	0x20000, 0x9421489e, 0x02 | BRF_GRA },           //  5
-	{ "cc-c-30.bin",	0x20000, 0x920ec735, 0x02 | BRF_GRA },           //  6
-
-	{ "cc-d-g00.bin",	0x20000, 0xe7f3d772, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
-	{ "cc-d-g10.bin",	0x20000, 0x418b4e4c, 0x03 | BRF_GRA },           //  8
-	{ "cc-d-g20.bin",	0x20000, 0xa4b558eb, 0x03 | BRF_GRA },           //  9
-	{ "cc-d-g30.bin",	0x20000, 0xf64a3166, 0x03 | BRF_GRA },           // 10
-
-	{ "cc-c-v0.bin",	0x20000, 0x6247bade, 0x05 | BRF_SND },           // 11 DAC Samples
-};
-
-STD_ROM_PICK(cosmccop)
-STD_ROM_FN(cosmccop)
-
-static INT32 cosmccopInit()
-{
-	Clock_16mhz = 1;
-
-	INT32 rc = DrvInit(hharryu_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 7);
-
-	m72_irq_base = 0x60; // Cosmic Cop doesn't write to port 0x42 (irq config), set it manually. (after DrvInit()!)
-	CosmicCop = 1;
-
-	return rc;
-}
-
-struct BurnDriver BurnDrvCosmccop = {
-	"cosmccop", NULL, NULL, NULL, "1991",
-	"Cosmic Cop (World)\0", NULL, "Irem", "Irem M84",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, cosmccopRomInfo, cosmccopRomName, NULL, NULL, NULL, NULL, CommonInputInfo, GallopDIPInfo,
-	cosmccopInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Gallop - Armed police Unit (Japan, M72 hardware)
-
-static struct BurnRomInfo gallopRomDesc[] = {
-	{ "cc-c-h0.ic40",	0x20000, 0x2217dcd0, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "cc-c-l0.ic37",	0x20000, 0xff39d7fb, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "cc-c-h3.ic43",	0x20000, 0x9b2bbab9, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "cc-c-l3.ic34",	0x20000, 0xacd3278e, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "cc-c-00.ic53",	0x20000, 0x9d99deaa, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "cc-c-10.ic51",	0x20000, 0x7eb083ed, 0x02 | BRF_GRA },           //  5
-	{ "cc-c-20.ic49",	0x20000, 0x9421489e, 0x02 | BRF_GRA },           //  6
-	{ "cc-c-30.ic47",	0x20000, 0x920ec735, 0x02 | BRF_GRA },           //  7
-
-	{ "cc-b-a0.ic21",	0x10000, 0xa33472bd, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "cc-b-a1.ic22",	0x10000, 0x118b1f2d, 0x03 | BRF_GRA },           //  9
-	{ "cc-b-a2.ic20",	0x10000, 0x83cebf48, 0x03 | BRF_GRA },           // 10
-	{ "cc-b-a3.ic23",	0x10000, 0x572903fc, 0x03 | BRF_GRA },           // 11
-
-	{ "cc-b-b0.ic26",	0x10000, 0x0df5b439, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "cc-b-b1.ic27",	0x10000, 0x010b778f, 0x04 | BRF_GRA },           // 13
-	{ "cc-b-b2.ic25",	0x10000, 0xbda9f6fb, 0x04 | BRF_GRA },           // 14
-	{ "cc-b-b3.ic24",	0x10000, 0xd361ba3f, 0x04 | BRF_GRA },           // 15
-
-	{ "cc-c-v0.ic44",	0x20000, 0x6247bade, 0x05 | BRF_SND },           // 16 DAC Samples
-	
-	{ "cc_c-pr-.ic1", 	0x10000, 0x00000000, BRF_NODUMP | BRF_OPT },	 // i8751 microcontroller
-};
-
-STD_ROM_PICK(gallop)
-STD_ROM_FN(gallop)
-
-static INT32 gallopInit()
-{
-	protection_sample_offsets = gallop_sample_offsets;
-	Clock_16mhz = 1;
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvGallop = {
-	"gallop", "cosmccop", NULL, NULL, "1991",
-	"Gallop - Armed police Unit (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
-	NULL, gallopRomInfo, gallopRomName, NULL, NULL, NULL, NULL, CommonInputInfo, GallopDIPInfo,
-	gallopInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-
-// Legend of Hero Tonma
-
-static struct BurnRomInfo lohtRomDesc[] = {
-	{ "tom_c-h0-b.ic40",	0x20000, 0xa63204b6, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "tom_c-l0-b.ic37",	0x20000, 0xe788002f, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "tom_c-h3-.ic43",		0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "tom_c-l3-.ic34",		0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "tom_m53.ic53",	0x20000, 0x0b83265f, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "tom_m51.ic51",	0x20000, 0x8ec5f6f3, 0x02 | BRF_GRA },           //  5
-	{ "tom_m49.ic49",	0x20000, 0xa41d3bfd, 0x02 | BRF_GRA },           //  6
-	{ "tom_m47.ic47",	0x20000, 0x9d81a25b, 0x02 | BRF_GRA },           //  7
-
-	{ "tom_m21.ic21",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "tom_m22.ic22",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           //  9
-	{ "tom_m20.ic20",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 10
-	{ "tom_m23.ic23",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 11
-
-	{ "tom_m26.ic26",	0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "tom_m27.ic27",	0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 13
-	{ "tom_m25.ic25",	0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 14
-	{ "tom_m24.ic24",	0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 15
-
-	{ "tom_m44.ic44",	0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 16 DAC Samples
-
-	{ "tom_c-pr-b.ic1",	0x01000, 0x9c9545f1, 0x00 | BRF_OPT },           // 17 i8751 microcontroller
-};
-
-STD_ROM_PICK(loht)
-STD_ROM_FN(loht)
-
-static INT32 lohtInit()
-{
-	install_protection(loht);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvLoht = {
-	"loht", NULL, NULL, NULL, "1989",
-	"Legend of Hero Tonma\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
-	NULL, lohtRomInfo, lohtRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
-	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Legend of Hero Tonma (Japan)
-
-static struct BurnRomInfo lohtjRomDesc[] = {
-	{ "tom_c-h0-",	0x20000, 0x2a752998, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "tom_c-l0-",	0x20000, 0xa224d928, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "tom_c-h3-",	0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "tom_c-l3-",	0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "r200",		0x20000, 0x0b83265f, 0x02 | BRF_GRA },           //  4 Sprites
-	{ "r210",		0x20000, 0x8ec5f6f3, 0x02 | BRF_GRA },           //  5
-	{ "r220",		0x20000, 0xa41d3bfd, 0x02 | BRF_GRA },           //  6
-	{ "r230",		0x20000, 0x9d81a25b, 0x02 | BRF_GRA },           //  7
-
-	{ "r2a0.a0",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           //  8 Foreground Tiles
-	{ "r2a1.a1",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           //  9
-	{ "r2a2.a2",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 10
-	{ "r2a3.a3",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 11
-
-	{ "078.b0",		0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 12 Background Tiles
-	{ "079.b1",		0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 13
-	{ "080.b2",		0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 14
-	{ "081.b3",		0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 15
-
-	{ "082",		0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 16 DAC Samples
-
-	{ "tom_c-pr-.ic1",	0x01000, 0x9fa9b496, 0x00 | BRF_OPT },       // 17 i8751 microcontroller
-};
-
-STD_ROM_PICK(lohtj)
-STD_ROM_FN(lohtj)
-
-struct BurnDriver BurnDrvLohtj = {
-	"lohtj", "loht", NULL, NULL, "1989",
-	"Legend of Hero Tonma (Japan)\0", NULL, "Irem", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
-	NULL, lohtjRomInfo, lohtjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
-	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-static INT32 lohtbRomLoadCallback()
-{
-	// Hack the program rom to work for now
-	UINT8 _0x400[216] = {
-		0xFA, 0xB9, 0xFF, 0xFF, 0xE2, 0xFE, 0xB8, 0x17, 0x00, 0xE7, 0x40, 0xB8, 0x20, 0x00, 0xE7, 0x42, 
-		0xB8, 0x0F, 0x00, 0xE7, 0x42, 0xB8, 0x00, 0xA0, 0x8E, 0xD0, 0x8E, 0xD8, 0xBE, 0x00, 0x3F, 0xB0, 
-		0x00, 0x88, 0x04, 0x3A, 0x04, 0x75, 0x08, 0x46, 0xFE, 0xC0, 0x75, 0xF5, 0xE9, 0x18, 0x00, 0x33, 
-		0xF6, 0xE9, 0x03, 0x00, 0xBE, 0x40, 0x00, 0xB8, 0x00, 0xB0, 0x8E, 0xD8, 0xC7, 0x06, 0xFE, 0x0F, 
-		0x00, 0x00, 0xEA, 0x62, 0x11, 0x00, 0x00, 0xE5, 0x04, 0x0F, 0x19, 0xC0, 0x0F, 0x74, 0xE0, 0xBC, 
-		0x00, 0x40, 0x33, 0xDB, 0xB9, 0x00, 0x10, 0xB8, 0x00, 0xB0, 0x8E, 0xD8, 0x8A, 0xC3, 0x02, 0xC7, 
-		0x88, 0x07, 0x43, 0xE2, 0xF7, 0x33, 0xC9, 0xFE, 0xC9, 0x75, 0xFC, 0xFE, 0xCD, 0x75, 0xF8, 0x33, 
-		0xDB, 0xB9, 0x00, 0x10, 0x8A, 0xC3, 0x02, 0xC7, 0x34, 0xFF, 0x3A, 0x07, 0x75, 0xB6, 0x43, 0xE2, 
-		0xF3, 0x33, 0xDB, 0xB9, 0xFC, 0x0F, 0xFE, 0x07, 0x43, 0xE2, 0xFB, 0x90, 0x90, 0x90, 0x9A, 0x00, 
-		0x00, 0x00, 0xB0, 0x73, 0xF6, 0x90, 0x90, 0x90, 0xB8, 0x00, 0xB0, 0x8E, 0xC0, 0x33, 0xD2, 0x42, 
-		0x81, 0xE2, 0x01, 0x00, 0xBF, 0xB2, 0x04, 0xE8, 0x7B, 0x00, 0xE8, 0x3E, 0x00, 0xEB, 0xF0, 0x90, 
-		0x90, 0x90, 0x0B, 0x38, 0x29, 0x43, 0x4F, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x31, 
-		0x39, 0x38, 0x39, 0x20, 0x49, 0x52, 0x45, 0x4D, 0x20, 0x43, 0x4F, 0x52, 0x50, 0x4F, 0x52, 0x41, 
-		0x54, 0x49, 0x4F, 0x4E, 0x0B, 0x50, 0x2B, 0x41
-	};
-
-	memcpy (DrvV30ROM + 0x00400, _0x400, 216);
-
-	DrvV30ROM[0x3FC] = 0x88;
-	DrvV30ROM[0x3FD] = 0x05;
-	DrvV30ROM[0xB42] = 0x1E;
-	DrvV30ROM[0xB43] = 0x06;
-	DrvV30ROM[0xB44] = 0xB8;
-	DrvV30ROM[0x405B] = 0x05;
-	DrvV30ROM[0x4066] = 0x05;
-	DrvV30ROM[0x103DA] = 0xB0;
-	DrvV30ROM[0x103DD] = 0xFE;
-	DrvV30ROM[0x103DE] = 0x06;
-	DrvV30ROM[0x103DF] = 0xFE;
-	DrvV30ROM[0x103E0] = 0x0F;
-	DrvV30ROM[0x103E1] = 0xE5;
-	DrvV30ROM[0x103E2] = 0x02;
-	DrvV30ROM[0x103E3] = 0xA9;
-	DrvV30ROM[0x103E4] = 0x20;
-	DrvV30ROM[0x103E5] = 0x00;
-	DrvV30ROM[0x103E6] = 0x75;
-	DrvV30ROM[0x103E7] = 0x05;
-	DrvV30ROM[0x103E8] = 0xEA;
-	DrvV30ROM[0x103E9] = 0x2F;
-	DrvV30ROM[0x103EA] = 0x04;
-	DrvV30ROM[0x103EB] = 0x00;
-	DrvV30ROM[0x103EC] = 0x00;
-	DrvV30ROM[0x103ED] = 0xB8;
-	DrvV30ROM[0x10459] = 0xE7;
-	DrvV30ROM[0x1045A] = 0x04;
-	DrvV30ROM[0x1045B] = 0xE5;
-	DrvV30ROM[0x1045C] = 0x02;
-	DrvV30ROM[0x1045D] = 0x25;
-	DrvV30ROM[0x1045E] = 0x80;
-	DrvV30ROM[0x1045F] = 0x00;
-	DrvV30ROM[0x10460] = 0x74;
-	DrvV30ROM[0x10461] = 0xF9;
-	DrvV30ROM[0x10462] = 0x36;
-	DrvV30ROM[0x10463] = 0xA1;
-	DrvV30ROM[0x10464] = 0xB2;
-	DrvV30ROM[0x10465] = 0x23;
-	DrvV30ROM[0x10466] = 0xE7;
-	DrvV30ROM[0x10467] = 0x82;
-	DrvV30ROM[0x10468] = 0x36;
-	DrvV30ROM[0x10469] = 0xA1;
-	DrvV30ROM[0x1046A] = 0xB6;
-	DrvV30ROM[0x1046B] = 0x23;
-	DrvV30ROM[0x1046C] = 0xE7;
-	DrvV30ROM[0x104B4] = 0x32;
-	DrvV30ROM[0x104B5] = 0xE4;
-	DrvV30ROM[0x104B6] = 0x3C;
-	DrvV30ROM[0x104B7] = 0x7F;
-	DrvV30ROM[0x104B8] = 0x72;
-	DrvV30ROM[0x10577] = 0x47;
-	DrvV30ROM[0x10578] = 0xDC;
-	DrvV30ROM[0x10585] = 0x61;
-	DrvV30ROM[0x10586] = 0x07;
-	DrvV30ROM[0x10587] = 0x1F;
-	DrvV30ROM[0x10599] = 0x00;
-	DrvV30ROM[0x10793] = 0xE7;
-	DrvV30ROM[0x10794] = 0x02;
-	DrvV30ROM[0x1E1C0] = 0xBA;
-	DrvV30ROM[0x1EA29] = 0xE7;
-	DrvV30ROM[0x1EA2A] = 0x02;
-
-	// invert graphics roms
-	for (INT32 i = 0; i < 0x80000; i++) {
-		DrvGfxROM1[i] ^= 0x0f;
-		DrvGfxROM2[i] ^= 0x0f;
-	}
-
-	return 0;
-}
-
-// Legend of Hero Tonma (bootleg, set 1)
-
-static struct BurnRomInfo lohtbRomDesc[] = {
-	{ "lohtb03.b",			0x20000, 0x8b845a70, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "lohtb05.d",			0x20000, 0xe90f7623, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "lohtb02.a",			0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "lohtb04.c",			0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "lohtb01.02",			0x10000, 0xe4bd8f03, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "lohtb14.11",			0x10000, 0xdf5ac5ee, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "lohtb18.15",			0x10000, 0xd7ecf849, 0x02 | BRF_GRA },           //  6
-	{ "lohtb15.12",			0x10000, 0x45220b01, 0x02 | BRF_GRA },           //  7
-	{ "lohtb19.16",			0x10000, 0x35d1a808, 0x02 | BRF_GRA },           //  8
-	{ "lohtb16.13",			0x10000, 0x25b85cfc, 0x02 | BRF_GRA },           //  9
-	{ "lohtb20.17",			0x10000, 0x464d8579, 0x02 | BRF_GRA },           // 10
-	{ "lohtb17.14",			0x10000, 0x763fa4ec, 0x02 | BRF_GRA },           // 11
-	{ "lohtb21.18",			0x10000, 0xa73568c7, 0x02 | BRF_GRA },           // 12
-
-	{ "lohtb13.10",			0x10000, 0x359f17d4, 0x03 | BRF_GRA },           // 13 Foreground Tiles
-	{ "lohtb11.08",			0x10000, 0x73391e8a, 0x03 | BRF_GRA },           // 14
-	{ "lohtb09.06",			0x10000, 0x7096d390, 0x03 | BRF_GRA },           // 15
-	{ "lohtb07.04",			0x10000, 0x71a27b81, 0x03 | BRF_GRA },           // 16
-
-	{ "lohtb12.09",			0x10000, 0x4d5e9b53, 0x04 | BRF_GRA },           // 17 Background Tiles
-	{ "lohtb10.07",			0x10000, 0x4f75a26a, 0x04 | BRF_GRA },           // 18
-	{ "lohtb08.05",			0x10000, 0x34854262, 0x04 | BRF_GRA },           // 19
-	{ "lohtb06.03",			0x10000, 0xf923183c, 0x04 | BRF_GRA },           // 20
-
-	{ "gal16v8-25qp.ic3",	0x00117, 0x6acdfafb, 0x00 | BRF_OPT },
-};
-
-STD_ROM_PICK(lohtb)
-STD_ROM_FN(lohtb)
-
-static INT32 lohtbInit()
-{
-	install_protection(loht);
-
-	return DrvInit(common_080000_0a0000, sound_ram_map, lohtbRomLoadCallback, Z80_FAKE_NMI, 0);
-}
-
-struct BurnDriver BurnDrvLohtb = {
-	"lohtb", "loht", NULL, NULL, "1989",
-	"Legend of Hero Tonma (bootleg, set 1)\0", NULL, "bootleg", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
-	NULL, lohtbRomInfo, lohtbRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
-	lohtbInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Legend of Hero Tonma (bootleg, set 2)
-
-static struct BurnRomInfo lohtb2RomDesc[] = {
-	{ "loht-a2.bin",	0x10000, 0xccc90e54, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "loht-a10.bin",	0x10000, 0x3aa06730, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "loht-a3.bin",	0x10000, 0xff8a98de, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "loht-a11.bin",	0x10000, 0xeab1d7bc, 0x01 | BRF_PRG | BRF_ESS }, //  3
-	{ "loht-a5.bin",	0x10000, 0x79e007ec, 0x01 | BRF_PRG | BRF_ESS }, //  4
-	{ "loht-a13.bin",	0x10000, 0xb951346e, 0x01 | BRF_PRG | BRF_ESS }, //  5
-	{ "loht-a4.bin",	0x10000, 0x254ea4d5, 0x01 | BRF_PRG | BRF_ESS }, //  6
-	{ "loht-a12.bin",	0x10000, 0xcfb0390d, 0x01 | BRF_PRG | BRF_ESS }, //  7
-
-	{ "loht-a16.bin",	0x10000, 0xdf5ac5ee, 0x02 | BRF_GRA },           //  8 Sprites
-	{ "loht-a17.bin",	0x10000, 0xd7ecf849, 0x02 | BRF_GRA },           //  9
-	{ "loht-a8.bin",	0x10000, 0x45220b01, 0x02 | BRF_GRA },           // 10
-	{ "loht-a9.bin",	0x10000, 0x4af9bb3c, 0x02 | BRF_GRA },           // 11
-	{ "loht-a14.bin",	0x10000, 0x25b85cfc, 0x02 | BRF_GRA },           // 12
-	{ "loht-a15.bin",	0x10000, 0x464d8579, 0x02 | BRF_GRA },           // 13
-	{ "loht-a6.bin",	0x10000, 0x763fa4ec, 0x02 | BRF_GRA },           // 14
-	{ "loht-a7.bin",	0x10000, 0xa73568c7, 0x02 | BRF_GRA },           // 15
-
-	{ "loht-a19.bin",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           // 16 Foreground Tiles
-	{ "loht-a20.bin",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           // 17
-	{ "loht-a18.bin",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 18
-	{ "loht-a21.bin",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 19
-
-	{ "loht-a24.bin",	0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 20 Background Tiles
-	{ "loht-a25.bin",	0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 21
-	{ "loht-a23.bin",	0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 22
-	{ "loht-a22.bin",	0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 23
-
-	{ "loht-a1.bin",	0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 24 DAC Samples
-
-	{ "loht-a26.bin",	0x02000, 0xac901e17, 0x00 | BRF_OPT },           // 25 i8751 microcontroller
-};
-
-STD_ROM_PICK(lohtb2)
-STD_ROM_FN(lohtb2)
-
-struct BurnDriver BurnDrvLohtb2 = {
-	"lohtb2", "loht", NULL, NULL, "1989",
-	"Legend of Hero Tonma (bootleg, set 2)\0", NULL, "bootleg", "Irem M72",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
-	NULL, lohtb2RomInfo, lohtb2RomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
-	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Pound for Pound (World)
-
-static struct BurnRomInfo poundforRomDesc[] = {
-	{ "ppa-h0-b.9e",	0x20000, 0x50d4a2d8, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ppa-l0-b.9d",	0x20000, 0xbd997942, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
-	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
-	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
-
-	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
-	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
-	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
-
-	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(poundfor)
-STD_ROM_FN(poundfor)
-
-static INT32 poundforInit()
-{
-	INT32 rc = DrvInit(rtype2_main_cpu_map, sound_rom_map, NULL, Z80_FAKE_NMI, 4);
-
-	if (!rc) {
-		Poundfor = 1;
-		BurnTrackballInit(2);
-	}
-
-	return rc;
-}
-
-struct BurnDriver BurnDrvPoundfor = {
-	"poundfor", NULL, NULL, NULL, "1990",
-	"Pound for Pound (World)\0", NULL, "Irem", "Irem M85",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
-	NULL, poundforRomInfo, poundforRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
-	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Pound for Pound (Japan)
-
-static struct BurnRomInfo poundforjRomDesc[] = {
-	{ "ppa-h0-.9e",		0x20000, 0xf0165e3b, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ppa-l0-.9d",		0x20000, 0xf954f99f, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
-	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
-	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
-
-	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
-	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
-	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
-
-	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(poundforj)
-STD_ROM_FN(poundforj)
-
-struct BurnDriver BurnDrvPoundforj = {
-	"poundforj", "poundfor", NULL, NULL, "1990",
-	"Pound for Pound (Japan)\0", NULL, "Irem", "Irem M85",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
-	NULL, poundforjRomInfo, poundforjRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
-	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Pound for Pound (US)
-
-static struct BurnRomInfo poundforuRomDesc[] = {
-	{ "ppa-ho-a.9e",	0x20000, 0xff4c83a4, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "ppa-lo-a.9d",	0x20000, 0x3374ce8f, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
-	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
-	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
-
-	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
-	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
-	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
-
-	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
-};
-
-STD_ROM_PICK(poundforu)
-STD_ROM_FN(poundforu)
-
-struct BurnDriver BurnDrvPoundforu = {
-	"poundforu", "poundfor", NULL, NULL, "1990",
-	"Pound for Pound (US)\0", NULL, "Irem America", "Irem M85",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
-	NULL, poundforuRomInfo, poundforuRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
-	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	256, 384, 3, 4
-};
-
-
-// Major Title (World)
-
-static struct BurnRomInfo majtitleRomDesc[] = {
-	{ "mt_h0-a.bin",	0x20000, 0x36aadb67, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "mt_l0-a.bin",	0x20000, 0x2e1b6242, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "mt_h1-a.bin",	0x20000, 0xe1402a22, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "mt_l1-a.bin",	0x20000, 0x0efa409a, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "mt_sp.bin",		0x10000, 0xe44260a9, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "mt_n0.bin",		0x40000, 0x5618cddc, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "mt_n1.bin",		0x40000, 0x483b873b, 0x02 | BRF_GRA },           //  6
-	{ "mt_n2.bin",		0x40000, 0x4f5d665b, 0x02 | BRF_GRA },           //  7
-	{ "mt_n3.bin",		0x40000, 0x83571549, 0x02 | BRF_GRA },           //  8
-
-	{ "mt_c0.bin",		0x20000, 0x780e7a02, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "mt_c1.bin",		0x20000, 0x45ad1381, 0x03 | BRF_GRA },           // 10
-	{ "mt_c2.bin",		0x20000, 0x5df5856d, 0x03 | BRF_GRA },           // 11
-	{ "mt_c3.bin",		0x20000, 0xf5316cc8, 0x03 | BRF_GRA },           // 12
-
-	{ "mt_f0.bin",		0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 13 Sprites
-	{ "mt_f1.bin",		0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 14
-	{ "mt_f2.bin",		0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 15
-	{ "mt_f3.bin",		0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 16
-
-	{ "mt_vo.bin",		0x20000, 0xeb24bb2c, 0x05 | BRF_SND },           // 17 DAC Samples
-};
-
-STD_ROM_PICK(majtitle)
-STD_ROM_FN(majtitle)
-
-static INT32 majtitleInit()
-{
-	return DrvInit(majtitle_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 3);
-}
-
-struct BurnDriver BurnDrvMajtitle = {
-	"majtitle", NULL, NULL, NULL, "1990",
-	"Major Title (World)\0", NULL, "Irem", "Irem M84",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
-	NULL, majtitleRomInfo, majtitleRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
-	majtitleInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
-
-
-// Major Title (Japan)
-
-static struct BurnRomInfo majtitlejRomDesc[] = {
-	{ "mt_h0.bin",		0x20000, 0xb9682c70, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
-	{ "mt_l0.bin",		0x20000, 0x702c9fd6, 0x01 | BRF_PRG | BRF_ESS }, //  1
-	{ "mt_h1.bin",		0x20000, 0xd9e97c30, 0x01 | BRF_PRG | BRF_ESS }, //  2
-	{ "mt_l1.bin",		0x20000, 0x8dbd91b5, 0x01 | BRF_PRG | BRF_ESS }, //  3
-
-	{ "mt_sp.bin",		0x10000, 0xe44260a9, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
-
-	{ "mt_n0.bin",		0x40000, 0x5618cddc, 0x02 | BRF_GRA },           //  5 Sprites
-	{ "mt_n1.bin",		0x40000, 0x483b873b, 0x02 | BRF_GRA },           //  6
-	{ "mt_n2.bin",		0x40000, 0x4f5d665b, 0x02 | BRF_GRA },           //  7
-	{ "mt_n3.bin",		0x40000, 0x83571549, 0x02 | BRF_GRA },           //  8
-
-	{ "mt_c0.bin",		0x20000, 0x780e7a02, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
-	{ "mt_c1.bin",		0x20000, 0x45ad1381, 0x03 | BRF_GRA },           // 10
-	{ "mt_c2.bin",		0x20000, 0x5df5856d, 0x03 | BRF_GRA },           // 11
-	{ "mt_c3.bin",		0x20000, 0xf5316cc8, 0x03 | BRF_GRA },           // 12
-
-	{ "mt_f0.bin",		0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 13 Sprites
-	{ "mt_f1.bin",		0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 14
-	{ "mt_f2.bin",		0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 15
-	{ "mt_f3.bin",		0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 16
-
-	{ "mt_vo.bin",		0x20000, 0xeb24bb2c, 0x05 | BRF_SND },           // 17 DAC Samples
-};
-
-STD_ROM_PICK(majtitlej)
-STD_ROM_FN(majtitlej)
-
-struct BurnDriver BurnDrvMajtitlej = {
-	"majtitlej", "majtitle", NULL, NULL, "1990",
-	"Major Title (Japan)\0", NULL, "Irem", "Irem M84",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
-	NULL, majtitlejRomInfo, majtitlejRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
-	majtitleInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
-	384, 256, 4, 3
-};
+// FB Alpha Irem M72 driver module
+// Based on MAME driver by Nicola Salmoria and Nao
+
+#include "tiles_generic.h"
+#include "z80_intf.h"
+#include "burn_ym2151.h"
+#include "nec_intf.h"
+#include "irem_cpu.h"
+#include "dac.h"
+#include "burn_gun.h"
+
+static UINT8 *AllMem;
+static UINT8 *MemEnd;
+static UINT8 *AllRam;
+static UINT8 *RamEnd;
+static UINT8 *DrvV30ROM;
+static UINT8 *DrvZ80ROM;
+static UINT8 *DrvGfxROM0;
+static UINT8 *DrvGfxROM1;
+static UINT8 *DrvGfxROM2;
+static UINT8 *DrvGfxROM3;
+static UINT8 *DrvSndROM;
+static UINT8 *DrvVidRAM0;
+static UINT8 *DrvVidRAM1;
+static UINT8 *DrvV30RAM;
+static UINT8 *DrvZ80RAM;
+static UINT8 *DrvSprRAM;
+static UINT8 *DrvSprBuf;
+static UINT8 *DrvPalRAM;
+static UINT8 *DrvProtRAM;
+static UINT8 *DrvRowScroll;
+static UINT8 *DrvSprRAM2;
+
+static UINT8 *scroll;
+
+static UINT8 *RamPrioBitmap;
+
+static UINT8 *soundlatch;
+static UINT8 *video_disable;
+
+static UINT32 *DrvPalette;
+static UINT8 DrvRecalc;
+static UINT8 irqvector;
+static INT32 sample_address;
+static INT32 irq_raster_position;
+static INT32 z80_reset = 0;
+static INT32 majtitle_rowscroll_enable = 0;
+
+static UINT8 DrvJoy1[8];
+static UINT8 DrvJoy2[8];
+static UINT8 DrvJoy3[8];
+static UINT8 DrvJoy4[8];
+static UINT8 DrvJoy5[8];
+static UINT8 DrvDips[2];
+static UINT8 DrvInputs[5];
+static UINT8 DrvReset;
+static INT16 DrvAnalogPort0 = 0;
+static INT16 DrvAnalogPort1 = 0;
+static INT16 DrvAnalogPort2 = 0;
+static INT16 DrvAnalogPort3 = 0;
+
+static INT32 nExtraCycles;
+static INT32 nCurrentCycles;
+static INT32 nCyclesDone[2];
+static INT32 nCyclesTotal[2];
+
+static INT32 Clock_16mhz = 0;
+static INT32 Kengo = 0;
+static INT32 CosmicCop = 0;
+static INT32 Poundfor = 0;
+static INT32 m72_video_type = 0;
+static INT32 z80_nmi_enable = 0;
+static INT32 enable_z80_reset = 0; // only if z80 is not rom-based!
+static INT32 m72_irq_base = 0;
+static INT32 code_mask[4];
+static INT32 graphics_length[4];
+static INT32 video_offsets[2] = { 0, 0 };
+
+enum { Z80_NO_NMI=0, Z80_REAL_NMI, Z80_FAKE_NMI };
+enum { VECTOR_INIT, YM2151_ASSERT, YM2151_CLEAR, Z80_ASSERT, Z80_CLEAR };
+
+
+static struct BurnInputInfo CommonInputList[] = {
+	{"P1 Coin",		BIT_DIGITAL,	DrvJoy3 + 2,	"p1 coin"	},
+	{"P1 Start",		BIT_DIGITAL,	DrvJoy3 + 0,	"p1 start"	},
+	{"P1 Up",		BIT_DIGITAL,	DrvJoy1 + 3,	"p1 up"		},
+	{"P1 Down",		BIT_DIGITAL,	DrvJoy1 + 2,	"p1 down"	},
+	{"P1 Left",		BIT_DIGITAL,	DrvJoy1 + 1,	"p1 left"	},
+	{"P1 Right",		BIT_DIGITAL,	DrvJoy1 + 0,	"p1 right"	},
+	{"P1 Button 1",		BIT_DIGITAL,	DrvJoy1 + 7,	"p1 fire 1"	},
+	{"P1 Button 2",		BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 2"	},
+	{"P1 Button 3",		BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 3"	},
+	{"P1 Button 4",		BIT_DIGITAL,	DrvJoy1 + 4,	"p1 fire 4"	},
+
+	{"P2 Coin",		BIT_DIGITAL,	DrvJoy3 + 3,	"p2 coin"	},
+	{"P2 Start",		BIT_DIGITAL,	DrvJoy3 + 1,	"p2 start"	},
+	{"P2 Up",		BIT_DIGITAL,	DrvJoy2 + 3,	"p2 up"		},
+	{"P2 Down",		BIT_DIGITAL,	DrvJoy2 + 2,	"p2 down"	},
+	{"P2 Left",		BIT_DIGITAL,	DrvJoy2 + 1,	"p2 left"	},
+	{"P2 Right",		BIT_DIGITAL,	DrvJoy2 + 0,	"p2 right"	},
+	{"P2 Button 1",		BIT_DIGITAL,	DrvJoy2 + 7,	"p2 fire 1"	},
+	{"P2 Button 2",		BIT_DIGITAL,	DrvJoy2 + 6,	"p2 fire 2"	},
+	{"P2 Button 3",		BIT_DIGITAL,	DrvJoy2 + 5,	"p2 fire 3"	},
+	{"P2 Button 4",		BIT_DIGITAL,	DrvJoy2 + 4,	"p2 fire 4"	},
+
+	{"Reset",		BIT_DIGITAL,	&DrvReset,	"reset"		},
+	{"Service",		BIT_DIGITAL,	DrvJoy3 + 4,	"service"	},
+	{"Dip A",		BIT_DIPSWITCH,	DrvDips + 0,	"dip"		},
+	{"Dip B",		BIT_DIPSWITCH,	DrvDips + 1,	"dip"		},
+};
+
+STDINPUTINFO(Common)
+
+#define A(a, b, c, d) {a, b, (UINT8*)(c), d}
+static struct BurnInputInfo PoundforInputList[] = {
+	{"P1 Coin",		    BIT_DIGITAL,	DrvJoy2 + 2,	"p1 coin"},
+	{"P1 Start",		BIT_DIGITAL,	DrvJoy2 + 0,	"p1 start"},
+	{"P1 Button 1",		BIT_DIGITAL,	DrvJoy1 + 6,	"p1 fire 1"},
+	{"P1 Button 2",		BIT_DIGITAL,	DrvJoy1 + 5,	"p1 fire 2"},
+	A("P1 Trackball X", BIT_ANALOG_REL, &DrvAnalogPort0,"p1 x-axis" ),
+	A("P1 Trackball Y", BIT_ANALOG_REL, &DrvAnalogPort1,"p1 y-axis" ),
+
+	{"P2 Coin",		    BIT_DIGITAL,	DrvJoy2 + 3,	"p2 coin"},
+	{"P2 Start",		BIT_DIGITAL,	DrvJoy2 + 1,	"p2 start"},
+	{"P2 Button 1",		BIT_DIGITAL,	DrvJoy4 + 6,	"p2 fire 1"},
+	{"P2 Button 2",		BIT_DIGITAL,	DrvJoy4 + 5,	"p2 fire 2"},
+	A("P2 Trackball X", BIT_ANALOG_REL, &DrvAnalogPort2,"p2 x-axis" ),
+	A("P2 Trackball Y", BIT_ANALOG_REL, &DrvAnalogPort3,"p2 y-axis" ),
+
+	{"Reset",		BIT_DIGITAL,	&DrvReset,	"reset"},
+	{"Service",		BIT_DIGITAL,	DrvJoy2 + 4,	"service"},
+	{"Dip A",		BIT_DIPSWITCH,	DrvDips + 0,	"dip"},
+	{"Dip B",		BIT_DIPSWITCH,	DrvDips + 1,	"dip"},
+};
+#undef A
+
+STDINPUTINFO(Poundfor)
+
+static struct BurnDIPInfo Dip2CoinDIPList[]=
+{
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x16, 0x01, 0x40, 0x40, "Off"				},
+	{0x16, 0x01, 0x40, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Service Mode"			},
+	{0x16, 0x01, 0x80, 0x80, "Off"				},
+	{0x16, 0x01, 0x80, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x17, 0x01, 0x01, 0x01, "Off"				},
+	{0x17, 0x01, 0x01, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
+	{0x17, 0x01, 0x08, 0x08, "Mode 1"			},
+	{0x17, 0x01, 0x08, 0x00, "Mode 2"			},
+
+	{0   , 0xfe, 0   ,   16, "Coinage"			},
+	{0x17, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
+	{0x17, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
+	{0x17, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
+	{0x17, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
+	{0x17, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
+	{0x17, 0x01, 0xf0, 0x10, "2 Coins to Start/1 to Cont."	},
+	{0x17, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
+	{0x17, 0x01, 0xf0, 0x20, "4 Coins 3 Credits"		},
+	{0x17, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
+	{0x17, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
+	{0x17, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
+	{0x17, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
+	{0x17, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
+	{0x17, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
+	{0x17, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
+	{0x17, 0x01, 0xf0, 0x00, "Free Play"			},
+};
+
+static struct BurnDIPInfo Dip1CoinDIPList[]=
+{
+	{0   , 0xfe, 0   ,   16, "Coinage"			},
+	{0x16, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
+	{0x16, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
+	{0x16, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
+	{0x16, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
+	{0x16, 0x01, 0xf0, 0x10, "8 Coins 3 Credits"		},
+	{0x16, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
+	{0x16, 0x01, 0xf0, 0x20, "5 Coins 3 Credits"		},
+	{0x16, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
+	{0x16, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
+	{0x16, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
+	{0x16, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
+	{0x16, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
+	{0x16, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
+	{0x16, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
+	{0x16, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
+	{0x16, 0x01, 0xf0, 0x00, "Free Play"			},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x17, 0x01, 0x01, 0x01, "Off"				},
+	{0x17, 0x01, 0x01, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
+	{0x17, 0x01, 0x04, 0x04, "Mode 1"			},
+	{0x17, 0x01, 0x04, 0x00, "Mode 2"			},
+
+	{0   , 0xfe, 0   ,    2, "Stop Mode"			},
+	{0x17, 0x01, 0x20, 0x20, "Off"				},
+	{0x17, 0x01, 0x20, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Service Mode"			},
+	{0x17, 0x01, 0x80, 0x80, "Off"				},
+	{0x17, 0x01, 0x80, 0x00, "On"				},
+};
+
+static struct BurnDIPInfo RtypeDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xfb, NULL				},
+	{0x17, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x16, 0x01, 0x04, 0x04, "Off"				},
+	{0x16, 0x01, 0x04, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Bonus Life"			},
+	{0x16, 0x01, 0x08, 0x00, "50K 150K 250K 400K 600K"	},
+	{0x16, 0x01, 0x08, 0x08, "100K 200K 350K 500K 700K"	},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Difficulty"			},
+	{0x17, 0x01, 0x08, 0x08, "Normal"			},
+	{0x17, 0x01, 0x08, 0x00, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x17, 0x01, 0x10, 0x00, "No"				},
+	{0x17, 0x01, 0x10, 0x10, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
+	{0x17, 0x01, 0x40, 0x40, "Off"				},
+	{0x17, 0x01, 0x40, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Rtype,	Dip1Coin, Rtype	)
+
+static struct BurnDIPInfo RtypepDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xfb, NULL				},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x16, 0x01, 0x04, 0x04, "On"				},
+	{0x16, 0x01, 0x04, 0x00, "Off"				},
+};
+
+STDDIPINFOEXT(Rtypep,	Rtype, Rtypep	)
+
+static struct BurnDIPInfo XmultiplDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xff, NULL				},
+	{0x17, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x03, 0x02, "Very Easy"			},
+	{0x16, 0x01, 0x03, 0x01, "Easy"				},
+	{0x16, 0x01, 0x03, 0x03, "Normal"			},
+	{0x16, 0x01, 0x03, 0x00, "Hard"				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x0c, 0x08, "1"				},
+	{0x16, 0x01, 0x0c, 0x04, "2"				},
+	{0x16, 0x01, 0x0c, 0x0c, "3"				},
+	{0x16, 0x01, 0x0c, 0x00, "4"				},
+
+	{0   , 0xfe, 0   ,    4, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright (single)"		},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright (double) On"		},
+	{0x17, 0x01, 0x02, 0x02, "Upright (double) Off"		},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x17, 0x01, 0x08, 0x00, "Off"				},
+	{0x17, 0x01, 0x08, 0x08, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Upright (double) Mode"	},
+	{0x17, 0x01, 0x10, 0x10, "Off"				},
+	{0x17, 0x01, 0x10, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x17, 0x01, 0x20, 0x00, "No"				},
+	{0x17, 0x01, 0x20, 0x20, "Yes"				},
+};
+
+STDDIPINFOEXT(Xmultipl,	Dip1Coin, Xmultipl	)
+
+static struct BurnDIPInfo DbreedDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xff, NULL				},
+	{0x17, 0xff, 0xff, 0xf5, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x17, 0x01, 0x08, 0x08, "Off"				},
+	{0x17, 0x01, 0x08, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x17, 0x01, 0x10, 0x00, "No"				},
+	{0x17, 0x01, 0x10, 0x10, "Yes"				},
+};
+
+STDDIPINFOEXT(Dbreed,	Dip1Coin, Dbreed	)
+
+static struct BurnDIPInfo BchopperDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xfb, NULL				},
+	{0x17, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x00, "1"				},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x16, 0x01, 0x04, 0x04, "Off"				},
+	{0x16, 0x01, 0x04, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Bonus Life"			},
+	{0x16, 0x01, 0x08, 0x08, "80K 200K 350K"		},
+	{0x16, 0x01, 0x08, 0x00, "100K 250K 400K"		},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Difficulty"			},
+	{0x17, 0x01, 0x08, 0x08, "Normal"			},
+	{0x17, 0x01, 0x08, 0x00, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x17, 0x01, 0x10, 0x00, "No"				},
+	{0x17, 0x01, 0x10, 0x10, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
+	{0x17, 0x01, 0x40, 0x40, "Off"				},
+	{0x17, 0x01, 0x40, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Bchopper,	Dip1Coin, Bchopper	)
+
+static struct BurnDIPInfo NspiritDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xff, NULL				},
+	{0x17, 0xff, 0xff, 0xf5, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+	{0x16, 0x01, 0x0c, 0x00, "Hardest"			},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x17, 0x01, 0x08, 0x08, "Off"				},
+	{0x17, 0x01, 0x08, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x17, 0x01, 0x10, 0x00, "No"				},
+	{0x17, 0x01, 0x10, 0x10, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
+	{0x17, 0x01, 0x40, 0x40, "Off"				},
+	{0x17, 0x01, 0x40, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Nspirit,	Dip1Coin, Nspirit	)
+
+static struct BurnDIPInfo ImgfightDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xff, NULL				},
+	{0x17, 0xff, 0xff, 0xe5, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x08, "Hard"				},
+	{0x16, 0x01, 0x0c, 0x04, "Hardest"			},
+	{0x16, 0x01, 0x0c, 0x00, "Debug Mode 2 lap"		},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x17, 0x01, 0x08, 0x08, "Off"				},
+	{0x17, 0x01, 0x08, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Imgfight,	Dip1Coin, Imgfight	)
+
+static struct BurnDIPInfo Rtype2DIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xff, NULL				},
+	{0x17, 0xff, 0xff, 0xf7, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+	{0x16, 0x01, 0x0c, 0x00, "Hardest"			},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x17, 0x01, 0x02, 0x00, "Off"				},
+	{0x17, 0x01, 0x02, 0x02, "On"				},
+
+	{0   , 0xfe, 0   ,    3, "Cabinet"			},
+	{0x17, 0x01, 0x18, 0x10, "Upright"			},
+	{0x17, 0x01, 0x18, 0x00, "Upright (2P)"			},
+	{0x17, 0x01, 0x18, 0x18, "Cocktail"			},
+};
+
+STDDIPINFOEXT(Rtype2,	Dip1Coin, Rtype2	)
+
+static struct BurnDIPInfo LohtDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xfb, NULL				},
+	{0x17, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x00, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x02, "4"				},
+	{0x16, 0x01, 0x03, 0x01, "5"				},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x16, 0x01, 0x04, 0x04, "Off"				},
+	{0x16, 0x01, 0x04, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x02, 0x00, "Upright"			},
+	{0x17, 0x01, 0x02, 0x02, "Cocktail"			},
+	
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x17, 0x01, 0x18, 0x00, "Easy"				},
+	{0x17, 0x01, 0x18, 0x18, "Normal"			},
+	{0x17, 0x01, 0x18, 0x10, "Hard"				},
+	{0x17, 0x01, 0x18, 0x08, "Hardest"			},
+
+	{0   , 0xfe, 0   ,    2, "Invulnerability"		},
+	{0x17, 0x01, 0x40, 0x40, "Off"				},
+	{0x17, 0x01, 0x40, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Loht,	Dip1Coin, Loht		)
+
+static struct BurnDIPInfo AirduelDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xbf, NULL				},
+	{0x17, 0xff, 0xff, 0xff, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x17, 0x01, 0x01, 0x01, "Off"				},
+	{0x17, 0x01, 0x01, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Airduel,	Dip2Coin, Airduel	)
+
+static struct BurnDIPInfo GallopDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xbf, NULL				},
+	{0x17, 0xff, 0xff, 0xf9, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+
+	{0   , 0xfe, 0   ,    0, "Allow Continue"		},
+	{0x16, 0x01, 0x20, 0x00, "No"				},
+	{0x16, 0x01, 0x20, 0x20, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x17, 0x01, 0x01, 0x01, "Off"				},
+	{0x17, 0x01, 0x01, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Cabinet"			},
+	{0x17, 0x01, 0x06, 0x00, "Upright"			},
+	{0x17, 0x01, 0x06, 0x02, "Upright (2P)"			},
+	{0x17, 0x01, 0x06, 0x06, "Cocktail"			},
+};
+
+STDDIPINFOEXT(Gallop,	Dip2Coin, Gallop	)
+
+static struct BurnDIPInfo KengoDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xbf, NULL				},
+	{0x17, 0xff, 0xff, 0xf9, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x16, 0x01, 0x20, 0x00, "No"				},
+	{0x16, 0x01, 0x20, 0x20, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x17, 0x01, 0x01, 0x01, "Off"				},
+	{0x17, 0x01, 0x01, 0x00, "On"				},
+};
+
+STDDIPINFOEXT(Kengo,	Dip2Coin, Kengo	)
+
+static struct BurnDIPInfo HharryDIPList[]=
+{
+	{0x16, 0xff, 0xff, 0xbf, NULL				},
+	{0x17, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Lives"			},
+	{0x16, 0x01, 0x03, 0x02, "2"				},
+	{0x16, 0x01, 0x03, 0x03, "3"				},
+	{0x16, 0x01, 0x03, 0x01, "4"				},
+	{0x16, 0x01, 0x03, 0x00, "5"				},
+	
+	{0   , 0xfe, 0   ,    4, "Difficulty"			},
+	{0x16, 0x01, 0x0c, 0x00, "Very Easy"			},
+	{0x16, 0x01, 0x0c, 0x08, "Easy"				},
+	{0x16, 0x01, 0x0c, 0x0c, "Normal"			},
+	{0x16, 0x01, 0x0c, 0x04, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Continue Limit"		},
+	{0x16, 0x01, 0x10, 0x00, "No"				},
+	{0x16, 0x01, 0x10, 0x10, "Yes"				},
+
+	{0   , 0xfe, 0   ,    2, "Allow Continue"		},
+	{0x16, 0x01, 0x20, 0x00, "No"				},
+	{0x16, 0x01, 0x20, 0x20, "Yes"				},
+
+	{0   , 0xfe, 0   ,    3, "Cabinet"			},
+	{0x17, 0x01, 0x06, 0x04, "Upright"			},
+	{0x17, 0x01, 0x06, 0x00, "Upright (2P)"			},
+	{0x17, 0x01, 0x06, 0x06, "Cocktail"			},
+};
+
+STDDIPINFOEXT(Hharry,	Dip2Coin, Hharry	)
+
+static struct BurnDIPInfo PoundforDIPList[]=
+{
+	{0x0e, 0xff, 0xff, 0xbf, NULL				},
+	{0x0f, 0xff, 0xff, 0xfd, NULL				},
+
+	{0   , 0xfe, 0   ,    4, "Round Time"			},
+	{0x0e, 0x01, 0x03, 0x02, "60"				},
+	{0x0e, 0x01, 0x03, 0x03, "90"				},
+	{0x0e, 0x01, 0x03, 0x01, "120"				},
+	{0x0e, 0x01, 0x03, 0x00, "150"				},
+
+	{0   , 0xfe, 0   ,    2, "Matches/Credit (2P)"		},
+	{0x0e, 0x01, 0x04, 0x04, "1"				},
+	{0x0e, 0x01, 0x04, 0x00, "2"				},
+
+	{0   , 0xfe, 0   ,    2, "Rounds/Match"			},
+	{0x0e, 0x01, 0x08, 0x08, "2"				},
+	{0x0e, 0x01, 0x08, 0x00, "3"				},
+
+	{0   , 0xfe, 0   ,    2, "Difficulty"			},
+	{0x0e, 0x01, 0x10, 0x10, "Normal"			},
+	{0x0e, 0x01, 0x10, 0x00, "Hard"				},
+
+	{0   , 0xfe, 0   ,    2, "Trackball Size"		},
+	{0x0e, 0x01, 0x20, 0x20, "Small"			},
+	{0x0e, 0x01, 0x20, 0x00, "Large"			},
+
+	{0   , 0xfe, 0   ,    2, "Demo Sounds"			},
+	{0x0e, 0x01, 0x40, 0x40, "Off"				},
+	{0x0e, 0x01, 0x40, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Service Mode"			},
+	{0x0e, 0x01, 0x80, 0x80, "Off"				},
+	{0x0e, 0x01, 0x80, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    2, "Flip Screen"			},
+	{0x0f, 0x01, 0x01, 0x01, "Off"				},
+	{0x0f, 0x01, 0x01, 0x00, "On"				},
+
+	{0   , 0xfe, 0   ,    3, "Cabinet"			},
+	{0x0f, 0x01, 0x06, 0x04, "Upright"			},
+	{0x0f, 0x01, 0x06, 0x02, "Upright (2P)"			},
+	{0x0f, 0x01, 0x06, 0x06, "Cocktail"			},
+
+	{0   , 0xfe, 0   ,    2, "Coin Mode"			},
+	{0x0f, 0x01, 0x08, 0x08, "Mode 1"			},
+	{0x0f, 0x01, 0x08, 0x00, "Mode 2"			},
+
+	{0   , 0xfe, 0   ,    16, "Coinage"			},
+	{0x0f, 0x01, 0xf0, 0xa0, "6 Coins 1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0xb0, "5 Coins 1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0xc0, "4 Coins 1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0xd0, "3 Coins 1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0xe0, "2 Coins 1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0x30, "3 Coins 2 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x20, "4 Coins 3 Credits"		},
+	{0x0f, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"		},
+	{0x0f, 0x01, 0xf0, 0x10, "1 Coin/1 Credit, 1 Coin/Cont."},
+	{0x0f, 0x01, 0xf0, 0x40, "2 Coins 3 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x90, "1 Coin  2 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x80, "1 Coin  3 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x70, "1 Coin  4 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x60, "1 Coin  5 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x50, "1 Coin  6 Credits"		},
+	{0x0f, 0x01, 0xf0, 0x00, "Free Play"			},
+};
+
+STDDIPINFO(Poundfor)
+
+//--------------------------------------------------------------------------------------------------------------------------------------------------
+// Protection handlers
+
+static const UINT8 *protection_code = NULL;
+static const UINT8 *protection_crc = NULL;
+static const INT32 *protection_sample_offsets = NULL;
+
+static UINT8 protection_read(INT32 address)
+{
+	if (address == 0xb0ffb) {
+		if (protection_code != NULL) {
+			memcpy (DrvProtRAM, protection_code, 96);
+		}
+	}
+
+	return DrvProtRAM[address & 0xfff];
+}
+
+static void protection_write(INT32 address, UINT8 data)
+{
+	DrvProtRAM[address & 0xfff] = data ^ 0xff;
+
+	if (address == 0xb0fff && data == 0) {
+		if (protection_crc != NULL) {
+			memcpy (DrvProtRAM + 0xfe0, protection_crc, 18);
+		}
+	}
+}
+
+static void protection_sample_offset_write(UINT8 data)
+{
+	if (protection_sample_offsets != NULL) {
+		if (data < protection_sample_offsets[0]) {
+			sample_address = protection_sample_offsets[data+1];
+		}
+	}
+}
+
+static void m72_install_protection(const UINT8 *code, const UINT8 *crc, const INT32 *offs)
+{
+	protection_code = code;
+	protection_crc = crc;
+	protection_sample_offsets = offs;
+}
+
+#define install_protection(name) m72_install_protection(name##_code, name##_crc, name##_sample_offsets)
+
+/* Battle Chopper / Mr. Heli */
+static const INT32 bchopper_sample_offsets[7] = { 6, 0x0000, 0x0010, 0x2510, 0x6510, 0x8510, 0x9310 };
+
+static const UINT8 bchopper_code[96] =
+{
+	0x68,0x00,0xa0,			// push 0a000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x38,0x38,0x53,	// mov [3838h], byte 053h
+	0xc6,0x06,0x3a,0x38,0x41,	// mov [383ah], byte 041h
+	0xc6,0x06,0x3c,0x38,0x4d,	// mov [383ch], byte 04dh
+	0xc6,0x06,0x3e,0x38,0x4f,	// mov [383eh], byte 04fh
+	0xc6,0x06,0x40,0x38,0x54,	// mov [3840h], byte 054h
+	0xc6,0x06,0x42,0x38,0x4f,	// mov [3842h], byte 04fh
+	0x68,0x00,0xb0,			// push 0b000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
+	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
+	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
+	0xc6,0x06,0x00,0x00,0xcb^0xff,	// mov [0000h], byte 0cbh ; retf : bypass protection check during the game
+	0x68,0x00,0xd0,			// push 0d000h
+	0x1f,				// pop ds
+	// the following is for mrheli only, the game checks for
+	// "This game can only be played in Japan..." message in the video text buffer
+	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
+	0xc6,0x06,0x70,0x16,0x77,	// mov [1670h], byte 077h
+	0xea,0x68,0x01,0x40,0x00	// jmp  0040:$0168
+};
+
+static const UINT8 bchopper_crc[18] = {
+	0x1a,0x12,0x5c,0x08,0x84,0xb6,0x73,0xd1,0x54,0x91,0x94,0xeb,0x00,0x00
+};
+
+static const UINT8 mrheli_crc[18] = {
+	0x24,0x21,0x1f,0x14,0xf9,0x28,0xfb,0x47,0x4c,0x77,0x9e,0xc2,0x00,0x00
+};
+
+/* X Multiply */
+static const INT32 xmultiplm72_sample_offsets[4] = { 3, 0x0000, 0x0020, 0x1a40 };
+
+static const UINT8 xmultiplm72_code[96] = {
+	0xea,0x30,0x02,0x00,0x0e	// jmp  0e00:$0230
+};
+
+static const UINT8 xmultiplm72_crc[18] = {
+	0x73,0x82,0x4e,0x3f, 0xfc,0x56,0x59,0x06,0x05,0x48,0xa8,0xf4,0x00,0x00
+};
+
+/* Dragon Breed */
+static const INT32 dbreedm72_sample_offsets[10] = { 9, 0x00000, 0x00020, 0x02c40, 0x08160, 0x0c8c0, 0x0ffe0, 0x13000, 0x15820, 0x15f40 };
+
+static const UINT8 dbreedm72_code[96] = {
+	0xea,0x6c,0x00,0x00,0x00	// jmp  0000:$006c
+};
+
+static const UINT8 dbreedm72_crc[18] ={
+	0xa4,0x96,0x5f,0xc0, 0xab,0x49,0x9f,0x19,0x84,0xe6,0xd6,0xca,0x00,0x00
+};
+
+/* Ninja Spirit */
+static const INT32 nspirit_sample_offsets[10] = { 9, 0x0000, 0x0020, 0x2020, 0, 0x5720, 0, 0x7b60, 0x9b60, 0xc360 };
+
+static const UINT8 nspirit_code[96] =
+{
+	0x68,0x00,0xa0,			// push 0a000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x38,0x38,0x4e,	// mov [3838h], byte 04eh
+	0xc6,0x06,0x3a,0x38,0x49,	// mov [383ah], byte 049h
+	0xc6,0x06,0x3c,0x38,0x4e,	// mov [383ch], byte 04eh
+	0xc6,0x06,0x3e,0x38,0x44,	// mov [383eh], byte 044h
+	0xc6,0x06,0x40,0x38,0x4f,	// mov [3840h], byte 04fh
+	0xc6,0x06,0x42,0x38,0x55,	// mov [3842h], byte 055h
+	0x68,0x00,0xb0,			// push 0b000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
+	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
+	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
+	0x68,0x00,0xd0,			// push 0d000h
+	0x1f,				// pop ds
+	// the following is for nspiritj only, the game checks for
+	// "This game can only be played in Japan..." message in the video text buffer
+	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
+	0xc6,0x06,0x70,0x16,0x57,	// mov [1670h], byte 057h
+	0xc6,0x06,0x71,0x16,0x00,	// mov [1671h], byte 000h
+	0xea,0x00,0x00,0x40,0x00	// jmp  0040:$0000
+};
+
+static const UINT8 nspirit_crc[18] = {
+	0xfe,0x94,0x6e,0x4e, 0xc8,0x33,0xa7,0x2d,0xf2,0xa3,0xf9,0xe1, 0xa9,0x6c,0x02,0x95, 0x00,0x00
+};
+
+static const UINT8 nspiritj_crc[18] = {
+	0x26,0xa3,0xa5,0xe9, 0xc8,0x33,0xa7,0x2d,0xf2,0xa3,0xf9,0xe1, 0xbc,0x6c,0x01,0x95, 0x00,0x00
+};
+
+/* Image Fight */
+static const INT32 imgfight_sample_offsets[8] = { 7, 0x0000, 0x0020, 0x44e0, 0x98a0, 0xc820, 0xf7a0, 0x108c0 };
+
+static const UINT8 imgfight_code[96] =
+{
+	0x68,0x00,0xa0,			// push 0a000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x38,0x38,0x50,	// mov [3838h], byte 050h
+	0xc6,0x06,0x3a,0x38,0x49,	// mov [383ah], byte 049h
+	0xc6,0x06,0x3c,0x38,0x43,	// mov [383ch], byte 043h
+	0xc6,0x06,0x3e,0x38,0x4b,	// mov [383eh], byte 04bh
+	0xc6,0x06,0x40,0x38,0x45,	// mov [3840h], byte 045h
+	0xc6,0x06,0x42,0x38,0x54,	// mov [3842h], byte 054h
+	0x68,0x00,0xb0,			// push 0b000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
+	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
+	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
+	0xc6,0x06,0x20,0x09,0x49^0xff,	// mov [0920h], byte 049h
+	0xc6,0x06,0x21,0x09,0x4d^0xff,	// mov [0921h], byte 04dh
+	0xc6,0x06,0x22,0x09,0x41^0xff,	// mov [0922h], byte 041h
+	0xc6,0x06,0x23,0x09,0x47^0xff,	// mov [0923h], byte 047h
+	0x68,0x00,0xd0,			// push 0d000h
+	0x1f,				// pop ds
+	// the game checks for
+	// "This game can only be played in Japan..." message in the video text buffer
+	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
+	0xc6,0x06,0xb0,0x1c,0x57,	// mov [1cb0h], byte 057h
+	0xea,0x00,0x00,0x40,0x00	// jmp  0040:$0000
+};
+
+static const UINT8 imgfight_crc[18] = {
+	0x7e,0xcc,0xec,0x03, 0x04,0x33,0xb6,0xc5, 0xbf,0x37,0x92,0x94, 0x00,0x00
+};
+
+/* Air Duel */
+static const INT32 airduel_sample_offsets[17] = {
+	16,
+	0x00000, 0x00020, 0x03ec0, 0x05640, 0x06dc0, 0x083a0, 0x0c000, 0x0eb60,
+	0x112e0, 0x13dc0, 0x16520, 0x16d60, 0x18ae0, 0x1a5a0, 0x1bf00, 0x1c340 };
+
+static const UINT8 airduel_code[96] =
+{
+	0x68,0x00,0xd0,			// push 0d000h
+	0x1f,				// pop ds
+	// the game checks for
+	// "This game can only be played in Japan..." message in the video text buffer
+	// the message is nowhere to be found in the ROMs, so has to be displayed by the mcu
+	0xc6,0x06,0xc0,0x1c,0x57,	// mov [1cc0h], byte 057h
+	0xea,0x69,0x0b,0x00,0x00	// jmp  0000:$0b69
+};
+
+static const UINT8 airduel_crc[18] = {
+	0x72,0x9c,0xca,0x85, 0xc9,0x12,0xcc,0xea, 0x00,0x00
+};
+
+/* Daiku no Gensan */
+static const INT32 dkgenm72_sample_offsets[29] = {
+	28,
+	0x00000, 0x00020, 0x01800, 0x02da0, 0x03be0, 0x05ae0, 0x06100, 0x06de0,
+	0x07260, 0x07a60, 0x08720, 0x0a5c0, 0x0c3c0, 0x0c7a0, 0x0e140, 0x0fb00,
+	0x10fa0, 0x10fc0, 0x10fe0, 0x11f40, 0x12b20, 0x130a0, 0x13c60, 0x14740,
+	0x153c0, 0x197e0, 0x1af40, 0x1c080 };
+
+static const UINT8 dkgenm72_code[96] = {
+	0xea,0x3d,0x00,0x00,0x10	// jmp  1000:$003d
+};
+
+static const UINT8 dkgenm72_crc[18] = {
+	0xc8,0xb4,0xdc,0xf8, 0xd3,0xba,0x48,0xed,0x79,0x08,0x1c,0xb3, 0x00,0x00
+};
+
+/* Legend of Hero Tonma */
+static const INT32 loht_sample_offsets[8] = { 7, 0x0000, 0x0020, 0, 0x2c40, 0x4320, 0x7120, 0xb200 };
+
+static const UINT8 loht_code[96] =
+{
+	0x68,0x00,0xa0,			// push 0a000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x3c,0x38,0x47,	// mov [383ch], byte 047h
+	0xc6,0x06,0x3d,0x38,0x47,	// mov [383dh], byte 047h
+	0xc6,0x06,0x42,0x38,0x44,	// mov [3842h], byte 044h
+	0xc6,0x06,0x43,0x38,0x44,	// mov [3843h], byte 044h
+	0x68,0x00,0xb0,			// push 0b000h
+	0x1f,				// pop ds
+	0xc6,0x06,0x00,0x09,0x49^0xff,	// mov [0900h], byte 049h
+	0xc6,0x06,0x00,0x0a,0x49^0xff,	// mov [0a00h], byte 049h
+	0xc6,0x06,0x00,0x0b,0x49^0xff,	// mov [0b00h], byte 049h
+
+	0x68,0x00,0xd0,			// push 0d000h // Japan set only
+	0x1f,				// pop ds // Japan set only
+	0xc6,0x06,0x70,0x16,0x57,	// mov [1670h], byte 057h // Japan set only - checks this (W) of WARNING
+
+	0xea,0x5d,0x01,0x40,0x00	// jmp  0040:$015d
+};
+
+static const UINT8 loht_crc[18] = {
+	0x39,0x00,0x82,0xae, 0x2c,0x9d,0x4b,0x73,0xfb,0xac,0xd4,0x6d, 0x6d,0x5b,0x77,0xc0, 0x00,0x00
+};
+
+/* Gallop - Armed police Unit */
+static const INT32 gallop_sample_offsets[32] = {
+	31,
+	0x00000, 0x00020, 0x00040, 0x01360, 0x02580, 0x04f20, 0x06240, 0x076e0,
+	0x08660, 0x092a0, 0x09ba0, 0x0a560, 0x0cee0, 0x0de20, 0x0e620, 0x0f1c0,
+	0x10200, 0x10220, 0x10240, 0x11380, 0x12760, 0x12780, 0x127a0, 0x13c40,
+	0x140a0, 0x16760, 0x17e40, 0x18ee0, 0x19f60, 0x1bbc0, 0x1cee0 };
+
+//--------------------------------------------------------------------------------------------------------------------------------------------------
+
+
+static void setvector_callback(INT32 param)
+{
+	switch (param)
+	{
+		case VECTOR_INIT:   irqvector  = 0xff; break;
+		case YM2151_ASSERT: irqvector &= 0xef; break;
+		case YM2151_CLEAR:  irqvector |= 0x10; break;
+		case Z80_ASSERT:    irqvector &= 0xdf; break;
+		case Z80_CLEAR:     irqvector |= 0x20; break;
+	}
+
+	if (irqvector == 0xff) {
+		ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
+	} else {
+		ZetSetVector(irqvector);
+		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+	}
+}
+
+static void palette_write(INT32 offset, INT32 offset2)
+{
+	if (offset & 1) return;
+
+	UINT16 *pal = (UINT16*)DrvPalRAM;
+	offset = (offset / 2) & 0x00ff;
+
+	INT32 offset3 = offset;
+	if (offset2) {
+		offset3 |= 0x0100;
+		pal += 0x1000 / 2;
+	}
+
+	INT32 r = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x000]) & 0x1f;
+	INT32 g = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x200]) & 0x1f;
+	INT32 b = BURN_ENDIAN_SWAP_INT16(pal[offset + 0x400]) & 0x1f;
+
+	DrvPalette[offset3] = BurnHighCol((r << 3) | (r >> 2), (g << 3) | (g >> 2), (b << 3) | (b >> 2), 0);
+}
+
+static UINT8 __fastcall m72_main_read(UINT32 address)
+{
+	if ((address & 0xff000) == 0xb0000) {
+		return protection_read(address);
+	}
+
+	return 0;
+}
+
+static void __fastcall m72_main_write(UINT32 address, UINT8 data)
+{
+	if ((address & 0xff000) == 0xb0000) {
+		protection_write(address, data);
+		return;
+	}
+
+	if ((address & 0xff000) == 0xc8000) {
+		if (address & 1) data = 0xff;
+  		DrvPalRAM[(address & 0xdff) | 0x0000] = DrvPalRAM[(address & 0xdff) | 0x0200] = data | 0xe0;
+		palette_write(address, 0);
+		return;
+	}
+
+	if ((address & 0xff000) == 0xcc000) {
+		if (address & 1) data = 0xff;
+  		DrvPalRAM[(address & 0xdff) | 0x1000] = DrvPalRAM[(address & 0xdff) | 0x1200] = data | 0xe0;
+		palette_write(address, 1);
+		return;
+	}
+}
+
+static void __fastcall rtype2_main_write(UINT32 address, UINT8 data)
+{
+	if ((address & 0xff000) == 0xc8000 || (address & 0xff000) == 0xa0000 || (address & 0xff000) == 0xcc000) {
+		if (address & 1) data = 0xff;
+  		DrvPalRAM[(address & 0xdff) | 0x0000] = DrvPalRAM[(address & 0xdff) | 0x0200] = data | 0xe0;
+		palette_write(address, 0);
+		return;
+	}
+
+	if ((address & 0xff000) == 0xd8000 || (address & 0xff000) == 0xa8000 || (address & 0xff000) == 0xa4000) {
+		if (address & 1) data = 0xff;
+  		DrvPalRAM[(address & 0xdff) | 0x1000] = DrvPalRAM[(address & 0xdff) | 0x1200] = data | 0xe0;
+		palette_write(address, 1);
+		return;
+	}
+
+	switch (address)
+	{
+		case 0xb0000:
+		case 0xe0000: // majtitle
+			irq_raster_position = (irq_raster_position & 0xff00) | (data << 0);
+		return;
+
+		case 0xb0001:
+		case 0xe0001: // majtitle
+			irq_raster_position = (irq_raster_position & 0x00ff) | (data << 8);
+		return;
+
+		case 0xbc000:
+	//	case 0xbc001:
+		case 0xec000: // majtitle
+	//	case 0xec001:
+			memcpy (DrvSprBuf, DrvSprRAM, 0x0400);
+		return;
+	}
+}
+
+static void __fastcall m72_main_write_port(UINT32 port, UINT8 data)
+{
+	//if (port!=0) bprintf (0, _T("%2.2x, %2.2x wp\n"), port, data);
+
+	switch (port)
+	{
+		case 0x00:
+			*soundlatch = data;
+			setvector_callback(Z80_ASSERT);
+		return;
+
+		case 0x01:
+		return;
+
+		case 0x02:
+//		case 0x03:
+		{
+			// coin counter = data & 3 (&1 = 0, &2 = 1)
+			// flipscreen = ((data & 0x04) >> 2) ^ ((~input_port_read(space->machine, "DSW") >> 8) & 1);
+
+			video_disable[0] = data & 0x08;
+
+			if (enable_z80_reset) {
+				if (data & 0x10) {
+					z80_reset = 0;
+				} else if (!z80_reset) { // don't reset it if its already resetting - fixes BGM in airduel -dink
+					ZetReset();
+					setvector_callback(VECTOR_INIT);
+					z80_reset = 1;
+				}
+			}
+		}
+		return;
+
+		case 0x04:
+		case 0x05:
+			memcpy (DrvSprBuf, DrvSprRAM, 0x0400);
+		return;
+
+		case 0x06:
+			irq_raster_position = (irq_raster_position & 0xff00) | (data << 0);
+		return;
+
+		case 0x07:
+			irq_raster_position = (irq_raster_position & 0x00ff) | (data << 8);
+		return;
+
+		case 0x40:
+		case 0x41:
+		case 0x43: // nop
+		return;
+
+		case 0x42:
+			if (m72_irq_base == 0) {
+				m72_irq_base = data << 2;
+				//bprintf(0, _T("irq base vector %X.\n"), m72_irq_base);
+			}
+		return;
+
+		case 0x80:
+		case 0x81:// scrolly1
+		case 0x82:
+		case 0x83:// scrollx1
+		case 0x84:
+		case 0x85:// scrolly2
+		case 0x86:
+		case 0x87:// scrollx2
+			scroll[port & 0x07] = data;
+		return;
+
+	//	case 0x8e:
+		case 0x8f:
+			majtitle_rowscroll_enable = data ? 1 : 0;
+		return;
+
+		case 0xc0:
+			protection_sample_offset_write(data);
+		return;
+	}
+}
+
+static UINT16 __fastcall poundfor_trackball_r(INT32 port)
+{
+	static INT32 prev[4] = { 0, 0, 0, 0 };
+	static INT32 diff[4] = { 0, 0, 0, 0 };
+
+	INT32 offset = (port / 2) & 0x03;
+
+	BurnTrackballUpdate(0);
+	BurnTrackballUpdate(1);
+
+	INT16 axis[4] = { (INT16)BurnTrackballReadWord(0, 0), (INT16)BurnTrackballReadWord(0, 1), (INT16)BurnTrackballReadWord(1, 0), (INT16)BurnTrackballReadWord(1, 1) };
+
+	if (port == 8)
+	{
+		INT32 curr;
+
+		for (INT32 i = 0; i < 4; i++)
+		{
+			curr = axis[i];
+			diff[i] = (curr - prev[i]);
+			prev[i] = curr;
+		}
+	}
+	INT32 input = DrvInputs[0] | (DrvInputs[3] << 8);
+
+	switch (offset)
+	{
+		default:
+		case 0:
+			return (diff[0] & 0xff) | ((diff[2] & 0xff) << 8);
+		case 1:
+			return ((diff[0] >> 8) & 0x1f) | (diff[2] & 0x1f00) | (~input & 0xe0e0);
+		case 2:
+			return (diff[1] & 0xff) | ((diff[3] & 0xff) << 8);
+		case 3:
+			return ((diff[1] >> 8) & 0x1f) | (diff[3] & 0x1f00);
+	}
+
+	return 0;
+}
+
+static UINT8 __fastcall m72_main_read_port(UINT32 port)
+{
+	if (Poundfor) {
+		if ((port & 0xf8) == 0x08) {
+			UINT16 ret = poundfor_trackball_r(port);
+			return (ret >> ((port & 1) * 8)) & 0xff;
+		}
+
+		switch (port)
+		{
+			case 0x02: return DrvInputs[1];
+			case 0x03: return 0xff;
+			case 0x04: return DrvDips[0];
+			case 0x05: return DrvDips[1];
+		}
+
+		return 0;
+	}
+
+	switch (port)
+	{
+		case 0x00: return DrvInputs[0];
+		case 0x01: return DrvInputs[1];
+		case 0x02: return DrvInputs[2];
+		case 0x03: return 0xff;
+		case 0x04: return DrvDips[0];
+		case 0x05: return DrvDips[1];
+	}
+
+	return 0;
+}
+
+static void __fastcall m72_sound_write_port(UINT16 port, UINT8 data)
+{
+	switch (port & 0xff)
+	{
+		case 0x00:
+		case 0x40: // poundfor
+			BurnYM2151SelectRegister(data);
+		return;
+
+		case 0x01:
+		case 0x41: // poundfor
+			BurnYM2151WriteRegister(data);
+		return;
+
+		case 0x06:
+		case 0x42: // poundfor
+		case 0x83: // rtype2
+			setvector_callback(Z80_CLEAR);
+		return;
+
+		case 0x10: // poundfor
+			sample_address >>= 4;
+			sample_address = (sample_address & 0xff00) | (data << 0);
+			sample_address <<= 4;
+		return;
+
+		case 0x11: // poundfor
+			sample_address >>= 4;
+			sample_address = (sample_address & 0x00ff) | (data << 8);
+			sample_address <<= 4;
+		return;
+
+		case 0x12: // poundfor "sample end address" - not used
+		case 0x13:
+		return;
+
+		case 0x80: // rtype2
+			sample_address >>= 5;
+			sample_address = (sample_address & 0xff00) | (data << 0);
+			sample_address <<= 5;
+		return;
+
+		case 0x81: // rtype2
+			sample_address >>= 5;
+			sample_address = (sample_address & 0x00ff) | (data << 8);
+			sample_address <<= 5;
+		return;
+
+		case 0x82:
+			DACSignedWrite(0, data);
+			sample_address = (sample_address + 1) & 0x3ffff;
+			if (!DrvSndROM[sample_address]) {
+				DACWrite(0, 0); // clear dac @ end of sample, fixes distortion in rtype2 level4 after death while also killing an air-tank
+			}
+		return;
+	}
+}
+
+static UINT8 __fastcall m72_sound_read_port(UINT16 port)
+{
+	switch (port & 0xff)
+	{
+		case 0x00:
+		case 0x01:
+		case 0x40: // poundfor
+		case 0x41: // poundfor
+			return BurnYM2151Read();
+
+		case 0x80: // rtype2
+		case 0x42: // poundfor
+		case 0x02:
+			return *soundlatch;
+
+		case 0x84:
+			return DrvSndROM[sample_address & 0x3ffff];
+	}
+
+	return 0;
+}
+
+static void m72YM2151IRQHandler(INT32 nStatus)
+{
+	setvector_callback(nStatus ? YM2151_ASSERT : YM2151_CLEAR);
+}
+
+static INT32 DrvDoReset()
+{
+	memset (AllRam, 0, RamEnd - AllRam);
+
+	VezOpen(0);
+	VezReset();
+	VezClose();
+
+	ZetOpen(0);
+	ZetReset();
+	setvector_callback(VECTOR_INIT);
+	z80_reset = (enable_z80_reset) ? 1 : 0;
+	ZetClose();
+
+	BurnYM2151Reset();
+	DACReset();
+
+	HiscoreReset();
+
+	sample_address = 0;
+	irq_raster_position = -1;
+	if (!CosmicCop) m72_irq_base = 0;
+	majtitle_rowscroll_enable = 0;
+
+	nExtraCycles = 0;
+
+	return 0;
+}
+
+static void common_main_cpu_map(INT32 romaddr, INT32 ramaddr)
+{
+	VezInit(0, V30_TYPE);
+
+	VezOpen(0);
+	VezMapArea(0x00000, (romaddr-1), 0, DrvV30ROM + 0x000000);
+	VezMapArea(0x00000, (romaddr-1), 2, DrvV30ROM + 0x000000);
+	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 0, DrvV30RAM);
+	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 1, DrvV30RAM);
+	VezMapArea(0x00000+ramaddr, 0x03fff+ramaddr, 2, DrvV30RAM);
+//	VezMapArea(0xb0000, 0xb0fff, 2, DrvProtRAM);
+	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
+	VezMapArea(0xc8000, 0xc8fff, 0, DrvPalRAM);
+//	VezMapArea(0xc8000, 0xc8fff, 1, DrvPalRAM);
+	VezMapArea(0xc8000, 0xc8fff, 2, DrvPalRAM);
+	VezMapArea(0xcc000, 0xccfff, 0, DrvPalRAM + 0x1000);
+//	VezMapArea(0xcc000, 0xccfff, 1, DrvPalRAM + 0x1000);
+	VezMapArea(0xcc000, 0xccfff, 2, DrvPalRAM + 0x1000);
+	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
+	VezMapArea(0xd8000, 0xdbfff, 0, DrvVidRAM1);
+	VezMapArea(0xd8000, 0xdbfff, 1, DrvVidRAM1);
+	VezMapArea(0xd8000, 0xdbfff, 2, DrvVidRAM1);
+	VezMapArea(0xe0000, 0xeffff, 0, DrvZ80RAM);
+	VezMapArea(0xe0000, 0xeffff, 1, DrvZ80RAM);
+	VezMapArea(0xe0000, 0xeffff, 2, DrvZ80RAM);
+	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
+	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
+	VezSetReadHandler(m72_main_read);
+	VezSetWriteHandler(m72_main_write);
+	VezSetReadPort(m72_main_read_port);
+	VezSetWritePort(m72_main_write_port);
+	VezClose();
+}
+
+static void common_040000_040000() { common_main_cpu_map(0x40000, 0x40000); }
+static void common_080000_080000() { common_main_cpu_map(0x80000, 0x80000); }
+static void common_080000_088000() { common_main_cpu_map(0x80000, 0x88000); }
+static void common_080000_090000() { common_main_cpu_map(0x80000, 0x90000); }
+static void common_080000_09c000() { common_main_cpu_map(0x80000, 0x9c000); }
+static void common_080000_0a0000() { common_main_cpu_map(0x80000, 0xa0000); }
+
+static void rtype2_main_cpu_map()
+{
+	VezInit(0, V30_TYPE);
+
+	VezOpen(0);
+	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
+	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
+	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
+	VezMapArea(0xc8000, 0xc8fff, 0, DrvPalRAM);
+//	VezMapArea(0xc8000, 0xc8fff, 1, DrvPalRAM);
+	VezMapArea(0xc8000, 0xc8fff, 2, DrvPalRAM);
+	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
+	VezMapArea(0xd4000, 0xd7fff, 0, DrvVidRAM1);
+	VezMapArea(0xd4000, 0xd7fff, 1, DrvVidRAM1);
+	VezMapArea(0xd4000, 0xd7fff, 2, DrvVidRAM1);
+	VezMapArea(0xd8000, 0xd8fff, 0, DrvPalRAM + 0x1000);
+//	VezMapArea(0xd8000, 0xd8fff, 1, DrvPalRAM + 0x1000);
+	VezMapArea(0xd8000, 0xd8fff, 2, DrvPalRAM + 0x1000);
+	VezMapArea(0xe0000, 0xe3fff, 0, DrvV30RAM);
+	VezMapArea(0xe0000, 0xe3fff, 1, DrvV30RAM);
+	VezMapArea(0xe0000, 0xe3fff, 2, DrvV30RAM);
+	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
+	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
+	VezSetReadHandler(m72_main_read);
+	VezSetWriteHandler(rtype2_main_write);
+	VezSetReadPort(m72_main_read_port);
+	VezSetWritePort(m72_main_write_port);
+	VezClose();
+}
+
+static void hharryu_main_cpu_map()
+{
+	VezInit(0, V35_TYPE);
+
+	VezOpen(0);
+	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
+	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
+	VezMapArea(0x80000, 0x83fff, 0, DrvVidRAM0); // kengo
+	VezMapArea(0x80000, 0x83fff, 1, DrvVidRAM0);
+	VezMapArea(0x80000, 0x83fff, 2, DrvVidRAM0);
+	VezMapArea(0x84000, 0x87fff, 0, DrvVidRAM1); // kengo
+	VezMapArea(0x84000, 0x87fff, 1, DrvVidRAM1);
+	VezMapArea(0x84000, 0x87fff, 2, DrvVidRAM1);
+	VezMapArea(0xa0000, 0xa0fff, 0, DrvPalRAM);
+//	VezMapArea(0xa0000, 0xa0fff, 1, DrvPalRAM);
+	VezMapArea(0xa0000, 0xa0fff, 2, DrvPalRAM);
+	VezMapArea(0xa8000, 0xa8fff, 0, DrvPalRAM + 0x1000);
+//	VezMapArea(0xa8000, 0xa8fff, 1, DrvPalRAM + 0x1000);
+	VezMapArea(0xa8000, 0xa8fff, 2, DrvPalRAM + 0x1000);
+	VezMapArea(0xc0000, 0xc0fff, 0, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 1, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc0fff, 2, DrvSprRAM);
+	VezMapArea(0xd0000, 0xd3fff, 0, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 1, DrvVidRAM0);
+	VezMapArea(0xd0000, 0xd3fff, 2, DrvVidRAM0);
+	VezMapArea(0xd4000, 0xd7fff, 0, DrvVidRAM1);
+	VezMapArea(0xd4000, 0xd7fff, 1, DrvVidRAM1);
+	VezMapArea(0xd4000, 0xd7fff, 2, DrvVidRAM1);
+	VezMapArea(0xe0000, 0xe3fff, 0, DrvV30RAM);
+	VezMapArea(0xe0000, 0xe3fff, 1, DrvV30RAM);
+	VezMapArea(0xe0000, 0xe3fff, 2, DrvV30RAM);
+	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
+	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
+	VezSetReadHandler(m72_main_read);
+	VezSetWriteHandler(rtype2_main_write);
+	VezSetReadPort(m72_main_read_port);
+	VezSetWritePort(m72_main_write_port);
+	VezClose();
+}
+
+static void majtitle_main_cpu_map()
+{
+	VezInit(0, V30_TYPE);
+
+	VezOpen(0);
+	VezMapArea(0x00000, 0x7ffff, 0, DrvV30ROM + 0x000000);
+	VezMapArea(0x00000, 0x7ffff, 2, DrvV30ROM + 0x000000);
+	VezMapArea(0xa0000, 0xa07ff, 0, DrvRowScroll);
+	VezMapArea(0xa0000, 0xa07ff, 1, DrvRowScroll);
+	VezMapArea(0xa0000, 0xa07ff, 2, DrvRowScroll);
+	VezMapArea(0xa4000, 0xa4fff, 0, DrvPalRAM + 0x1000);
+//	VezMapArea(0xa4000, 0xa4fff, 1, DrvPalRAM + 0x1000);
+	VezMapArea(0xa4000, 0xa4fff, 2, DrvPalRAM + 0x1000);
+	VezMapArea(0xac000, 0xaffff, 0, DrvVidRAM0);
+	VezMapArea(0xac000, 0xaffff, 1, DrvVidRAM0);
+	VezMapArea(0xac000, 0xaffff, 2, DrvVidRAM0);
+	VezMapArea(0xb0000, 0xbffff, 0, DrvVidRAM1);
+	VezMapArea(0xb0000, 0xbffff, 1, DrvVidRAM1);
+	VezMapArea(0xb0000, 0xbffff, 2, DrvVidRAM1);
+	VezMapArea(0xc0000, 0xc07ff, 0, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc07ff, 1, DrvSprRAM);
+	VezMapArea(0xc0000, 0xc07ff, 2, DrvSprRAM);
+	VezMapArea(0xc8000, 0xc87ff, 0, DrvSprRAM2);
+	VezMapArea(0xc8000, 0xc87ff, 1, DrvSprRAM2);
+	VezMapArea(0xc8000, 0xc87ff, 2, DrvSprRAM2);
+	VezMapArea(0xcc000, 0xccfff, 0, DrvPalRAM);
+//	VezMapArea(0xcc000, 0xccfff, 1, DrvPalRAM);
+	VezMapArea(0xcc000, 0xccfff, 2, DrvPalRAM);
+	VezMapArea(0xd0000, 0xd3fff, 0, DrvV30RAM);
+	VezMapArea(0xd0000, 0xd3fff, 1, DrvV30RAM);
+	VezMapArea(0xd0000, 0xd3fff, 2, DrvV30RAM);
+	VezMapArea(0xff800, 0xfffff, 0, DrvV30ROM + 0x0ff800);
+	VezMapArea(0xff800, 0xfffff, 2, DrvV30ROM + 0x0ff800);
+	VezSetReadHandler(m72_main_read);
+	VezSetWriteHandler(rtype2_main_write);
+	VezSetReadPort(m72_main_read_port);
+	VezSetWritePort(m72_main_write_port);
+	VezClose();
+}
+
+static void sound_ram_map()
+{
+	ZetInit(0);
+	ZetOpen(0);
+	ZetMapArea(0x0000, 0xffff, 0, DrvZ80RAM);
+	ZetMapArea(0x0000, 0xffff, 1, DrvZ80RAM);
+	ZetMapArea(0x0000, 0xffff, 2, DrvZ80RAM);
+	ZetSetOutHandler(m72_sound_write_port);
+	ZetSetInHandler(m72_sound_read_port);
+	ZetClose();
+
+	enable_z80_reset = 1;
+}
+
+static void sound_rom_map()
+{
+	ZetInit(0);
+	ZetOpen(0);
+	ZetMapArea(0x0000, 0xefff, 0, DrvZ80ROM);
+	ZetMapArea(0x0000, 0xefff, 2, DrvZ80ROM);
+	ZetMapArea(0xf000, 0xffff, 0, DrvZ80RAM);
+	ZetMapArea(0xf000, 0xffff, 1, DrvZ80RAM);
+	ZetMapArea(0xf000, 0xffff, 2, DrvZ80RAM);
+	ZetSetOutHandler(m72_sound_write_port);
+	ZetSetInHandler(m72_sound_read_port);
+	ZetClose();
+
+	enable_z80_reset = 0;
+}
+
+static INT32 DrvGfxDecode(UINT8 *gfx, INT32 len, INT32 type)
+{
+	INT32 Planes[4] = { ((len / 4) * 8) * 3, ((len / 4) * 8) * 2, ((len / 4) * 8) * 1, ((len / 4) * 8) * 0 };
+	INT32 XOffs[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87 };
+	INT32 YOffs[16] = { 0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78 };
+
+	UINT8 *tmp = (UINT8*)BurnMalloc(len);
+	if (tmp == NULL) {
+		return 1;
+	}
+
+	memcpy (tmp, gfx, len);
+
+	if (type) {
+		GfxDecode((len * 2) / ( 8 *  8), 4,  8,  8, Planes, XOffs, YOffs, 0x040, tmp, gfx);
+	} else {
+		GfxDecode((len * 2) / (16 * 16), 4, 16, 16, Planes, XOffs, YOffs, 0x100, tmp, gfx);
+	}
+
+	BurnFree (tmp);
+
+	return 0;
+}
+
+static INT32 GetRoms(INT32 bLoad)
+{
+	char* pRomName;
+	struct BurnRomInfo ri;
+	UINT8 *V30ROM = DrvV30ROM;
+	UINT8 *Z80ROM = DrvZ80ROM;
+	UINT8 *GFXROM0 = DrvGfxROM0;
+	UINT8 *GFXROM1 = DrvGfxROM1;
+	UINT8 *GFXROM2 = DrvGfxROM2;
+	UINT8 *GFXROM3 = DrvGfxROM3;
+	UINT8 *SNDROM = DrvSndROM;
+	INT32 pglen = 0;
+
+	for (INT32 i = 0; !BurnDrvGetRomName(&pRomName, i, 0); i++) {
+
+		BurnDrvGetRomInfo(&ri, i);
+
+		if ((ri.nType & 15) == 1) {
+			if (bLoad) {
+				if (BurnLoadRom(V30ROM + 1, i + 0, 2)) return 1;
+				if (BurnLoadRom(V30ROM + 0, i + 1, 2)) return 1;
+			}
+			V30ROM += ri.nLen * 2;
+			i++;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 6) {
+			if (bLoad) if (BurnLoadRom(Z80ROM , i, 1)) return 1;
+			Z80ROM += ri.nLen;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 2) {
+			if (bLoad) if (BurnLoadRom(GFXROM0, i, 1)) return 1;
+			GFXROM0 += ri.nLen;
+
+			if (pglen == 0x10000 && ri.nLen == 0x8000) {	// rtype fix
+				if (bLoad) if (BurnLoadRom(GFXROM0, i, 1)) return 1;
+				GFXROM0 += ri.nLen;
+			}
+			pglen = ri.nLen;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 3) {
+			if (bLoad) if (BurnLoadRom(GFXROM1, i, 1)) return 1;
+			GFXROM1 += ri.nLen;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 4) {
+			if (bLoad) if (BurnLoadRom(GFXROM2, i, 1)) return 1;
+			GFXROM2 += ri.nLen;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 14) {
+			if (bLoad) if (BurnLoadRom(GFXROM3, i, 1)) return 1;
+			GFXROM3 += ri.nLen;
+			continue;
+		}
+
+		if ((ri.nType & 15) == 5) {
+			if (bLoad) if (BurnLoadRom(SNDROM , i, 1)) return 1;
+			SNDROM += ri.nLen;
+			continue;
+		}
+	}
+
+	if (bLoad) {
+		// copy irq vectors
+		memcpy (DrvV30ROM + 0xffff0, V30ROM - 0x10, 0x010);
+
+		// mirror sound rom
+		INT32 sndlen = SNDROM - DrvSndROM;
+		if (sndlen < 0x40000 && sndlen) {
+			for (INT32 i = 0; i < 0x40000; i++) {
+				DrvSndROM[i] = DrvSndROM[i % sndlen];
+			}
+		}
+
+		DrvGfxDecode(DrvGfxROM0, graphics_length[0], 0);
+		DrvGfxDecode(DrvGfxROM1, graphics_length[1], 1);
+
+		if (graphics_length[2] > 2) {
+			DrvGfxDecode(DrvGfxROM2, graphics_length[2], 1);
+		} else {
+			DrvGfxROM2 = DrvGfxROM1;
+			code_mask[2] = code_mask[1];
+		}
+
+		if (graphics_length[3] > 2) {
+			DrvGfxDecode(DrvGfxROM3, graphics_length[3], 0);
+		} else {
+			code_mask[3] = 0;
+		}
+	} else {
+		graphics_length[0] = GFXROM0 - DrvGfxROM0;
+		graphics_length[1] = GFXROM1 - DrvGfxROM1;
+		graphics_length[2] = GFXROM2 - DrvGfxROM2;
+		graphics_length[3] = GFXROM3 - DrvGfxROM3;
+
+		for (INT32 i = 1, j = 0; j < 4; graphics_length[j] = i, j++, i = 1) {
+			while (i < graphics_length[j]) i <<= 1;
+		}
+
+		code_mask[0] = ((graphics_length[0] * 2) - 1) / (16 * 16);
+		code_mask[1] = ((graphics_length[1] * 2) - 1) / (8 * 8);
+		code_mask[2] = ((graphics_length[2] * 2) - 1) / (8 * 8);
+		code_mask[3] = ((graphics_length[3] * 2) - 1) / (16 * 16);
+	}
+
+	return 0;
+}
+
+static INT32 MemIndex()
+{
+	UINT8 *Next; Next = AllMem;
+
+	DrvV30ROM 	= Next; Next += 0x200000;
+	DrvZ80ROM	= Next; Next += 0x010000;
+	DrvGfxROM0	= Next; Next += graphics_length[0] * 2;
+	DrvGfxROM1	= Next; Next += graphics_length[1] * 2;
+	DrvGfxROM2	= Next; Next += graphics_length[2] * 2;
+	DrvGfxROM3	= Next; Next += graphics_length[3] * 2;
+	DrvSndROM	= Next; Next += 0x040000;
+
+	RamPrioBitmap	= Next; Next += nScreenWidth * nScreenHeight;
+
+	AllRam	= Next;
+
+	DrvZ80RAM	= Next; Next += 0x010000;
+	DrvSprRAM	= Next; Next += 0x001000;
+	DrvSprRAM2	= Next; Next += 0x000800;
+	DrvSprBuf	= Next; Next += 0x001000;
+	DrvVidRAM0	= Next; Next += 0x004000;
+	DrvVidRAM1	= Next; Next += 0x010000;
+	DrvV30RAM	= Next; Next += 0x004000;
+	DrvPalRAM	= Next; Next += 0x002000;
+	DrvProtRAM	= Next; Next += 0x001000;
+	DrvRowScroll	= Next; Next += 0x000800;
+
+	soundlatch	= Next; Next += 0x000004; // 1
+	video_disable	= Next; Next += 0x000004; // 1
+
+	scroll		= Next; Next += 0x000008;
+
+	RamEnd		= Next;
+
+	DrvPalette	= (UINT32 *) Next; Next += 0x200 * sizeof(UINT32);
+
+	MemEnd		= Next;
+
+	return 0;
+}
+
+
+static INT32 DrvInit(void (*pCPUMapCallback)(), void (*pSNDMapCallback)(), INT32 (*pRomLoadCallback)(), INT32 z80_nmi, INT32 video_type)
+{
+	BurnSetRefreshRate(55.00);
+
+	GenericTilesInit();
+
+	GetRoms(0);
+
+	AllMem = NULL;
+	MemIndex();
+	INT32 nLen = MemEnd - (UINT8 *)0;
+	if ((AllMem = (UINT8 *)BurnMalloc(nLen)) == NULL) return 1;
+	memset(AllMem, 0, nLen);
+	MemIndex();
+
+	if (GetRoms(1)) return 1;
+
+	if (pCPUMapCallback) {
+		pCPUMapCallback();
+	}
+
+	if (pSNDMapCallback) {
+		pSNDMapCallback();
+	}
+
+	if (pRomLoadCallback) {
+		if (pRomLoadCallback()) return 1;
+	}
+
+	m72_irq_base = 0; // set by port 42. (programmable interrupt controller)
+	z80_nmi_enable = z80_nmi;
+	m72_video_type = video_type;
+
+	switch (video_type)
+	{	
+		case 0: // m72
+			video_offsets[0] = video_offsets[1] = 0;
+		break;
+
+		case 1: // rtype
+		case 3: // majtitle
+			video_offsets[0] = video_offsets[1] = -4;
+		break;
+
+		case 2: // hharry, xmultipl
+		case 7: // cosmccop (layer offsets of type 2, flipxy of type 1)
+			video_offsets[0] = -4;
+			video_offsets[1] = -6;
+			if (video_type == 7) m72_video_type = 1; // cosmccop: diff flipx/y handling in draw_layer()
+		break;
+
+		case 4: // poundfor
+			video_offsets[0] = video_offsets[1] = -6;
+			m72_video_type = 1; // rtype
+		break;
+
+		case 5: // kengo
+			video_offsets[0] = -3;
+			video_offsets[1] = -6;
+			m72_video_type = 1; // rtype
+		break;
+
+		case 6: // airduel m82
+			video_offsets[0] = -4;
+			video_offsets[1] = -6;
+			m72_video_type = 1; // rtype
+		break;
+	}
+
+	BurnYM2151Init(3579545);
+	YM2151SetIrqHandler(0, &m72YM2151IRQHandler);
+	BurnYM2151SetRoute(BURN_SND_YM2151_YM2151_ROUTE_1, 1.00, BURN_SND_ROUTE_LEFT);
+	BurnYM2151SetRoute(BURN_SND_YM2151_YM2151_ROUTE_2, 1.00, BURN_SND_ROUTE_RIGHT);
+
+	DACInit(0, 0, 1, ZetTotalCycles, 3579545);
+	DACSetRoute(0, 0.40, BURN_SND_ROUTE_BOTH);
+
+	DrvDoReset();
+
+	return 0;
+}
+
+static INT32 DrvExit()
+{
+	GenericTilesExit();
+
+	BurnYM2151Exit();
+	DACExit();
+
+	ZetExit();
+	VezExit();
+
+	BurnFree(AllMem);
+
+	if (Poundfor)
+		BurnTrackballExit();
+
+	m72_video_type = 0;
+	enable_z80_reset = 0;
+	z80_nmi_enable = 0;
+	m72_irq_base = 0;
+	Kengo = 0;
+	CosmicCop = 0;
+	Poundfor = 0;
+	Clock_16mhz = 0;
+
+	m72_install_protection(NULL,NULL,NULL);
+
+	video_offsets[0] = video_offsets[1] = 0;
+
+	return 0;
+}
+
+static void draw_layer(INT32 layer, INT32 forcelayer, INT32 type, INT32 start, INT32 finish) // bg = layer 1, fg = layer 0
+{
+	INT32 codeand = code_mask[1+layer];
+	UINT16 *vram = (UINT16*)(layer ? DrvVidRAM1 : DrvVidRAM0);
+	UINT8  *gfx  = (layer) ? DrvGfxROM2 : DrvGfxROM1;
+
+	//	    layer, prio, forcelayer
+	const UINT16 transmask[2][3][2] = {
+		{ { 0xffff, 0x0001 }, { 0x00ff, 0xff01 }, { 0x0001, 0xffff } },
+		{ { 0xffff, 0x0000 }, { 0x00ff, 0xff00 }, { (type == 0) ? (const UINT16)0x0007 : (const UINT16)0x0001, (type == 0) ? (const UINT16)0xfff8 : (const UINT16)0xfffe } }
+	};
+
+	INT32 scrolly = scroll[layer * 4 + 0] | (scroll[layer * 4 + 1] << 8);
+	INT32 scrollx = scroll[layer * 4 + 2] | (scroll[layer * 4 + 3] << 8);
+
+	scrolly = (scrolly + 128) & 0x1ff;
+	scrollx = (scrollx + 64 + video_offsets[layer]) & ((0x200 << (type == 3 && layer == 1)) - 1);
+
+	UINT16 *xscroll = (UINT16*)DrvRowScroll;
+
+	for (INT32 sy = start; sy < finish; sy++)
+	{
+		UINT16 *dest = pTransDraw + (sy * nScreenWidth);
+		UINT8  *pri  = RamPrioBitmap + (sy * nScreenWidth);
+
+		INT32 scrolly1 = (scrolly + sy) & 0x1ff;
+		INT32 romoff1 = (scrolly1 & 0x07) << 3;
+
+		for (INT32 sx = 0; sx < nScreenWidth + 8; sx+=8)
+		{
+			INT32 flipy, flipx, prio, scrollx1, offs;
+
+			if (majtitle_rowscroll_enable && type == 3 && layer == 1) {
+				scrollx1 = 256 + BURN_ENDIAN_SWAP_INT16(xscroll[scrolly1]) + sx + 64 + video_offsets[1];
+			} else {
+				scrollx1 = scrollx + sx;
+				if (type == 3 && layer == 1) scrollx1 += 256;
+			}
+
+			if (type == 3 && layer == 1) {
+				scrollx1 &= 0x3ff;
+				offs = ((scrolly1 >> 3) << 8) | (scrollx1 >> 3);
+			} else {
+				scrollx1 &= 0x1ff;
+				offs = ((scrolly1 >> 3) << 6) | (scrollx1 >> 3);
+			}
+
+			INT32 code  = BURN_ENDIAN_SWAP_INT16(vram[offs * 2 + 0]);
+			INT32 color = BURN_ENDIAN_SWAP_INT16(vram[offs * 2 + 1]);
+
+			if (type == 1 || type == 3) {
+				flipy = color & 0x0040;
+				flipx = color & 0x0020;
+				prio  = (color & 0x0100) ? 2 : (color & 0x80) ? 1 : 0;
+			} else {
+				flipy = code & 0x8000;
+				flipx = code & 0x4000;
+				prio  = (color & 0x80) ? 2 : ((color & 0x40) ? 1 : 0);
+			}
+
+			INT32 mask = transmask[layer][prio][forcelayer];
+
+			code &= codeand;
+			color = ((color & 0x000f) << 4) | 0x100;
+			prio = 1 << prio;
+
+			{
+				INT32 scrollx0 = scrollx1 & 0x07;
+				INT32 x_xor = 0;
+				INT32 romoff = romoff1;
+				if (flipy) romoff ^= 0x38;
+				if (flipx) x_xor = 7;
+
+				UINT8 *rom = gfx + (code * 0x40) + romoff;
+
+				INT32 xx = sx - scrollx0;
+
+				for (INT32 x = 0; x < 8; x++, xx++) {
+					if (xx < 0 || xx >= nScreenWidth) continue;
+
+					INT32 pxl = rom[x ^ x_xor];
+					if (mask & (1 << pxl)) continue;
+
+					dest[xx] = pxl | color;
+					pri[xx] = prio;
+				}
+			}
+		}
+	}
+}
+
+static void draw_sprites()
+{
+	UINT16 *sprram = (UINT16*)DrvSprBuf;
+
+	for (INT32 offs = 0; offs < 0x400/2;)
+	{
+		INT32 sx    = -256+(BURN_ENDIAN_SWAP_INT16(sprram[offs+3]) & 0x3ff);
+		INT32 attr  = BURN_ENDIAN_SWAP_INT16(sprram[offs+2]);
+		INT32 code  = BURN_ENDIAN_SWAP_INT16(sprram[offs+1]);
+		INT32 sy    =  384-(BURN_ENDIAN_SWAP_INT16(sprram[offs+0]) & 0x1ff);
+
+		INT32 color = attr & 0x0f;
+		INT32 flipx = attr & 0x0800;
+		INT32 flipy = attr & 0x0400;
+
+		INT32 w = 1 << ((attr & 0xc000) >> 14);
+		INT32 h = 1 << ((attr & 0x3000) >> 12);
+		sy -= 16 * h;
+
+		sx -= 64; // ?
+#if 0
+		if (*flipscreen)
+		{
+			sx = 512 - 16*w - sx;
+			sy = 284 - 16*h - sy;
+			flipx = !flipx;
+			flipy = !flipy;
+		}
+#endif
+
+		for (INT32 x = 0;x < w;x++)
+		{
+			for (INT32 y = 0;y < h;y++)
+			{
+				INT32 c = code;
+
+				if (flipx) c += 8*(w-1-x);
+				else c += 8*x;
+				if (flipy) c += h-1-y;
+				else c += y;
+
+				c &= code_mask[0];
+
+				INT32 xx = sx + 16 * x;
+				INT32 yy = sy + 16 * y;
+
+				if (xx < -15 || yy < -15 || xx >= nScreenWidth || yy >= nScreenHeight) continue;
+
+				if (flipy) {
+					if (flipx) {
+						Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
+					} else {
+						Render16x16Tile_Mask_FlipY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
+					}
+				} else {
+					if (flipx) {
+						Render16x16Tile_Mask_FlipX_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
+					} else {
+						Render16x16Tile_Mask_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM0);
+					}
+				}
+			}
+		}
+
+		offs += w*4;
+	}
+}
+
+static void majtitle_draw_sprites()
+{
+	UINT16 *spriteram16_2 = (UINT16*)DrvSprRAM2;
+
+	for (INT32 offs = 0; offs < 0x400; offs += 4)
+	{
+		INT32 code,color,sx,sy,flipx,flipy,w,h,x,y;
+
+		code = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+1]);
+		color = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0f;
+		sx = -256+(BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+3]) & 0x3ff);
+		sy = 384-(BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+0]) & 0x1ff);
+		flipx = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0800;
+		flipy = BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x0400;
+
+		w = 1;// << ((spriteram16_2[offs+2] & 0xc000) >> 14);
+		h = 1 << ((BURN_ENDIAN_SWAP_INT16(spriteram16_2[offs+2]) & 0x3000) >> 12);
+		sy -= 16 * h;
+
+		sx -= 64; // ?
+#if 0
+		if (flip_screen_get(machine))
+		{
+			sx = 512 - 16*w - sx;
+			sy = 256 - 16*h - sy;
+			flipx = !flipx;
+			flipy = !flipy;
+		}
+#endif
+
+		for (x = 0;x < w;x++)
+		{
+			for (y = 0;y < h;y++)
+			{
+				INT32 c = code;
+
+				if (flipx) c += 8*(w-1-x);
+				else c += 8*x;
+				if (flipy) c += h-1-y;
+				else c += y;
+
+				c &= code_mask[3];
+
+				INT32 xx = sx + 16 * x;
+				INT32 yy = sy + 16 * y;
+
+				if (xx < -15 || yy < -15 || xx >= nScreenWidth || yy >= nScreenHeight) continue;
+
+				if (flipy) {
+					if (flipx) {
+						Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
+					} else {
+						Render16x16Tile_Mask_FlipY_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
+					}
+				} else {
+					if (flipx) {
+						Render16x16Tile_Mask_FlipX_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
+					} else {
+						Render16x16Tile_Mask_Clip(pTransDraw, c, xx, yy, color, 4, 0, 0, DrvGfxROM3);
+					}
+				}
+			}
+		}
+	}
+}
+
+static void dodrawline(INT32 start, INT32 finish)
+{
+	if (*video_disable) return;
+
+	if (nBurnLayer & 1) draw_layer(1, 1, m72_video_type, start, finish);
+	if (nBurnLayer & 2) draw_layer(0, 1, m72_video_type, start, finish);
+
+	GenericTilesSetClip(0, -1, start, finish);
+	if (nSpriteEnable & 1) {
+		if (m72_video_type == 3) majtitle_draw_sprites();
+		draw_sprites();
+	}
+	GenericTilesClearClip();
+
+	if (nBurnLayer & 4) draw_layer(1, 0, m72_video_type, start, finish);
+	if (nBurnLayer & 8) draw_layer(0, 0, m72_video_type, start, finish);
+}
+
+static inline void DrvDrawInitFrame()
+{
+	BurnTransferClear();
+}
+
+static INT32 DrvDraw()
+{
+	if (DrvRecalc) {
+		for (INT32 i = 0; i < 0x200; i++) {
+			palette_write((i & 0xff) * 2, i >> 8);
+		}
+		DrvRecalc = 0;
+	}
+
+	BurnTransferCopy(DrvPalette);
+
+	return 0;
+}
+
+static void compile_inputs()
+{
+	memset (DrvInputs, 0xff, 5);
+
+	for (INT32 i = 0; i < 8; i++) {
+		DrvInputs[0] ^= (DrvJoy1[i] & 1) << i;
+		DrvInputs[1] ^= (DrvJoy2[i] & 1) << i;
+		DrvInputs[2] ^= (DrvJoy3[i] & 1) << i;
+		DrvInputs[3] ^= (DrvJoy4[i] & 1) << i;
+		DrvInputs[4] ^= (DrvJoy5[i] & 1) << i;
+	}
+
+	if (Poundfor) {
+		BurnTrackballConfig(0, AXIS_NORMAL, AXIS_REVERSED);
+		BurnTrackballConfig(1, AXIS_NORMAL, AXIS_REVERSED);
+		BurnTrackballFrame(0, DrvAnalogPort0, DrvAnalogPort1, 5, 8);
+		BurnTrackballFrame(1, DrvAnalogPort2, DrvAnalogPort3, 5, 8);
+		BurnTrackballUpdate(0);
+		BurnTrackballUpdate(1);
+	}
+}
+
+static INT32 nPreviousLine = 0;
+
+static void scanline_interrupts(INT32 scanline)
+{
+	if (scanline == (irq_raster_position - 128) && scanline < 256) {
+		if (nPreviousLine <= scanline && scanline < nScreenHeight) {
+			dodrawline(nPreviousLine, scanline+1);
+			nPreviousLine = scanline + 1;
+		}
+		if (Kengo)
+			VezSetIRQLineAndVector(NEC_INPUT_LINE_INTP2, 0xff, CPU_IRQSTATUS_AUTO);
+		else
+			VezSetIRQLineAndVector(0, (m72_irq_base + 8)/4, CPU_IRQSTATUS_AUTO);
+	}
+	else if (scanline == 255) // vblank
+	{
+		if (nPreviousLine < nScreenHeight) {
+			dodrawline(nPreviousLine, nScreenHeight);
+			nPreviousLine = 0;
+		}
+		if (Kengo)
+			VezSetIRQLineAndVector(NEC_INPUT_LINE_INTP0, 0xff, CPU_IRQSTATUS_AUTO);
+		else
+			VezSetIRQLineAndVector(0, (m72_irq_base + 0)/4, CPU_IRQSTATUS_AUTO);
+	}
+
+	if (nPreviousLine >= nScreenHeight) nPreviousLine = 0;
+}
+
+static INT32 DrvFrame()
+{
+	if (DrvReset) {
+		DrvDoReset();
+	}
+
+	VezNewFrame();
+	ZetNewFrame();
+
+	compile_inputs();
+	
+	INT32 multiplier = 3;
+	INT32 nInterleave = 256 * multiplier;
+	INT32 nSoundBufferPos = 0;
+	INT32 z80samplecount = 0;
+
+	if (Clock_16mhz) // Ken-go, Cosmic Cop
+		nCyclesTotal[0] = (INT32)((INT64)(16000000 / 55) * nBurnCPUSpeedAdjust / 0x0100);
+	else
+		nCyclesTotal[0] = (INT32)((INT64)(8000000 / 55) * nBurnCPUSpeedAdjust / 0x0100);
+	nCyclesTotal[1] = (INT32)((INT64)(3579545 / 55) * nBurnCPUSpeedAdjust / 0x0100);
+	nCyclesDone[0] = 0;
+	nCyclesDone[1] = nExtraCycles;
+
+	if (pBurnDraw) {
+		DrvDrawInitFrame();
+	}
+
+	VezOpen(0);
+	ZetOpen(0);
+
+	for (INT32 i = 0; i < nInterleave; i++)
+	{
+		nCurrentCycles = nCyclesTotal[0] / nInterleave;
+		nCyclesDone[0] += VezRun(nCurrentCycles);
+
+		if ((i%multiplier)==0)
+			scanline_interrupts(i/multiplier);
+
+		if (z80_reset == 0) {
+			nCyclesDone[1] += ZetRun((nCyclesTotal[1] * (i + 1) / nInterleave) - nCyclesDone[1]);
+			if (i%multiplier==2 && i/multiplier & 1 && z80samplecount < 128) {
+				if (z80_nmi_enable == Z80_FAKE_NMI) {
+					z80samplecount++;
+					if (DrvSndROM[sample_address]) {
+						DACSignedWrite(0, DrvSndROM[sample_address]);
+						sample_address = (sample_address + 1) & 0x3ffff;
+					} else {
+						DACWrite(0, 0); // Clear DAC output buffer at end of sample - fixes distortion in Air Duel & second-to-last level of Mr. Heli
+					}
+
+				} else if (z80_nmi_enable == Z80_REAL_NMI) {
+					z80samplecount++;
+					ZetNmi();
+				}
+			}
+		} else {
+			ZetIdle(nCyclesTotal[1] / nInterleave);
+		}
+
+		if ((i%multiplier)==0) {
+			if (pBurnSoundOut) {
+				INT32 nSegmentLength = nBurnSoundLen / (nInterleave / multiplier);
+				INT16* pSoundBuf = pBurnSoundOut + (nSoundBufferPos << 1);
+
+				BurnYM2151Render(pSoundBuf, nSegmentLength);
+
+				nSoundBufferPos += nSegmentLength;
+			}
+		}
+	}
+	nExtraCycles = nCyclesDone[1] - nCyclesTotal[1]; // just for sound
+
+	if (pBurnSoundOut) {
+		INT32 nSegmentLength = nBurnSoundLen - nSoundBufferPos;
+		INT16* pSoundBuf = pBurnSoundOut + (nSoundBufferPos << 1);
+
+		if (nSegmentLength) {
+			BurnYM2151Render(pSoundBuf, nSegmentLength);
+		}
+
+		DACUpdate(pBurnSoundOut, nBurnSoundLen);
+	}
+
+	VezClose();
+	ZetClose();
+
+	if (pBurnDraw) {
+		DrvDraw();
+	}
+
+	return 0;
+}
+
+static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
+{
+	struct BurnArea ba;
+	
+	if (pnMin != NULL) {			// Return minimum compatible version
+		*pnMin = 0x029705;
+	}
+
+	if (nAction & ACB_MEMORY_RAM) {
+		memset(&ba, 0, sizeof(ba));
+		ba.Data	  = AllRam;
+		ba.nLen	  = RamEnd-AllRam;
+		ba.szName = "All Ram";
+		BurnAcb(&ba);
+	}
+
+	if (nAction & ACB_DRIVER_DATA) {
+		ZetScan(nAction);
+		BurnYM2151Scan(nAction, pnMin);
+		DACScan(nAction, pnMin);
+		VezScan(nAction);
+
+		if (Poundfor)
+			BurnTrackballScan();
+
+		SCAN_VAR(irq_raster_position);
+		SCAN_VAR(m72_irq_base);
+
+		SCAN_VAR(sample_address);
+		SCAN_VAR(irqvector);
+		SCAN_VAR(z80_reset);
+		SCAN_VAR(majtitle_rowscroll_enable);
+	}
+
+	return 0;
+}
+
+
+
+// R-Type (World)
+
+static struct BurnRomInfo rtypeRomDesc[] = {
+	{ "rt_r-h0-b.1b",	0x10000, 0x591c7754, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt_r-l0-b.3b",	0x10000, 0xa1928df0, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt_r-h1-b.1c",	0x10000, 0xa9d71eca, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt_r-l1-b.3c",	0x10000, 0x0df3573d, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
+	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
+	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
+	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
+	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
+	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
+	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
+
+	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
+	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
+	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
+
+	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
+	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
+	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
+};
+
+STD_ROM_PICK(rtype)
+STD_ROM_FN(rtype)
+
+static INT32 rtypeInit()
+{
+	return DrvInit(common_040000_040000, sound_ram_map, NULL, Z80_NO_NMI, 0);
+}
+
+struct BurnDriver BurnDrvRtype = {
+	"rtype", NULL, NULL, NULL, "1987",
+	"R-Type (World)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtypeRomInfo, rtypeRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
+	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type (Japan)
+
+static struct BurnRomInfo rtypejRomDesc[] = {
+	{ "rt_r-h0-.1b",	0x10000, 0xc2940df2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt_r-l0-.3b",	0x10000, 0x858cc0f6, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt_r-h1-.1c",	0x10000, 0x5bcededa, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt_r-l1-.3c",	0x10000, 0x4821141c, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
+	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
+	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
+	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
+	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
+	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
+	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
+
+	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
+	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
+	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
+
+	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
+	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
+	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
+};
+
+STD_ROM_PICK(rtypej)
+STD_ROM_FN(rtypej)
+
+struct BurnDriver BurnDrvRtypej = {
+	"rtypej", "rtype", NULL, NULL, "1987",
+	"R-Type (Japan)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtypejRomInfo, rtypejRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
+	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type (Japan prototype)
+
+static struct BurnRomInfo rtypejpRomDesc[] = {
+	{ "db_b1.bin",		0x10000, 0xc1865141, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "db_a1.bin",		0x10000, 0x5ad2bd90, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "db_b2.bin",		0x10000, 0xb4f6407e, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "db_a2.bin",		0x10000, 0x6098d86f, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
+	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
+	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
+	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
+	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
+	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
+	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
+
+	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
+	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
+	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
+
+	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
+	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
+	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
+};
+
+STD_ROM_PICK(rtypejp)
+STD_ROM_FN(rtypejp)
+
+struct BurnDriver BurnDrvRtypejp = {
+	"rtypejp", "rtype", NULL, NULL, "1987",
+	"R-Type (Japan prototype)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtypejpRomInfo, rtypejpRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypepDIPInfo,
+	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type (US)
+
+static struct BurnRomInfo rtypeuRomDesc[] = {
+	{ "rt_r-h0-a.1b",	0x10000, 0x36008a4e, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt_r-l0-a.3b",	0x10000, 0x4aaa668e, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt_r-h1-a.1c",	0x10000, 0x7ebb2a53, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt_r-l1-a.3c",	0x10000, 0xc28b103b, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
+	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
+	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
+	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
+	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
+	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
+	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
+
+	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
+	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
+	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
+
+	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
+	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
+	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
+
+	{ "m72_a-8l-.ic66",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 20 Proms
+	{ "m72_a-9l-.ic75",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 21
+
+	{ "m72_r-3a-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 22 PLDs
+	{ "m72_a-3d-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 23
+	{ "m72_a-4d-.bin",	0x00001, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 24
+};
+
+STD_ROM_PICK(rtypeu)
+STD_ROM_FN(rtypeu)
+
+struct BurnDriver BurnDrvRtypeu = {
+	"rtypeu", "rtype", NULL, NULL, "1987",
+	"R-Type (US)\0", NULL, "Irem (Nintendo of America license)", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtypeuRomInfo, rtypeuRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
+	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type (World bootleg)
+
+static struct BurnRomInfo rtypebRomDesc[] = {
+	{ "7.512",		0x10000, 0xeacc8024, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "1.512",		0x10000, 0x2e5fe27b, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "8.512",		0x10000, 0x22cc4950, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "2.512",		0x10000, 0xada7b90e, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "rt_r-00.1h",		0x10000, 0xdad53bc0, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "rt_r-01.1j",		0x08000, 0x5e441e7f, 0x02 | BRF_GRA },           //  5
+	{ "rt_r-10.1k",		0x10000, 0xd6a66298, 0x02 | BRF_GRA },           //  6
+	{ "rt_r-11.1l",		0x08000, 0x791df4f8, 0x02 | BRF_GRA },           //  7
+	{ "rt_r-20.3h",		0x10000, 0xfc247c8a, 0x02 | BRF_GRA },           //  8
+	{ "rt_r-21.3j",		0x08000, 0xed793841, 0x02 | BRF_GRA },           //  9
+	{ "rt_r-30.3k",		0x10000, 0xeb02a1cb, 0x02 | BRF_GRA },           // 10
+	{ "rt_r-31.3l",		0x08000, 0x8558355d, 0x02 | BRF_GRA },           // 11
+
+	{ "rt_b-a0.3c",		0x08000, 0x4e212fb0, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "rt_b-a1.3d",		0x08000, 0x8a65bdff, 0x03 | BRF_GRA },           // 13
+	{ "rt_b-a2.3a",		0x08000, 0x5a4ae5b9, 0x03 | BRF_GRA },           // 14
+	{ "rt_b-a3.3e",		0x08000, 0x73327606, 0x03 | BRF_GRA },           // 15
+
+	{ "rt_b-b0.3j",		0x08000, 0xa7b17491, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "rt_b-b1.3k",		0x08000, 0xb9709686, 0x04 | BRF_GRA },           // 17
+	{ "rt_b-b2.3h",		0x08000, 0x433b229a, 0x04 | BRF_GRA },           // 18
+	{ "rt_b-b3.3f",		0x08000, 0xad89b072, 0x04 | BRF_GRA },           // 19
+};
+
+STD_ROM_PICK(rtypeb)
+STD_ROM_FN(rtypeb)
+
+struct BurnDriver BurnDrvRtypeb = {
+	"rtypeb", "rtype", NULL, NULL, "1987",
+	"R-Type (World bootleg)\0", NULL, "bootleg", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtypebRomInfo, rtypebRomName, NULL, NULL, NULL, NULL, CommonInputInfo, RtypeDIPInfo,
+	rtypeInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// X Multiply (World, M81 hardware)
+
+static struct BurnRomInfo xmultiplRomDesc[] = {
+	{ "xm-a-h1-.ic58",	0x20000, 0x449048cf, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "xm-a-l1-.ic67",	0x20000, 0x26ce39b0, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "xm-a-h0-.ic59",	0x10000, 0x509bc970, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "xm-a-l0-.ic68",	0x10000, 0x490a9ebc, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "xm-a-sp-.ic14",	0x10000, 0x006eef56, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "t44.00",		0x20000, 0xdb45186e, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "t45.01",		0x20000, 0x4d0764d4, 0x02 | BRF_GRA },           //  6
+	{ "t46.10",		0x20000, 0xf0c465a4, 0x02 | BRF_GRA },           //  7
+	{ "t47.11",		0x20000, 0x1263b24b, 0x02 | BRF_GRA },           //  8
+	{ "t48.20",		0x20000, 0x4129944f, 0x02 | BRF_GRA },           //  9
+	{ "t49.21",		0x20000, 0x2346e6f9, 0x02 | BRF_GRA },           // 10
+	{ "t50.30",		0x20000, 0xe322543e, 0x02 | BRF_GRA },           // 11
+	{ "t51.31",		0x20000, 0x229bf7b1, 0x02 | BRF_GRA },           // 12
+
+	{ "t53.a0",		0x20000, 0x1a082494, 0x03 | BRF_GRA },           // 13 Foreground Tiles
+	{ "t54.a1",		0x20000, 0x076c16c5, 0x03 | BRF_GRA },           // 14
+	{ "t55.a2",		0x20000, 0x25d877a5, 0x03 | BRF_GRA },           // 15
+	{ "t56.a3",		0x20000, 0x5b1213f5, 0x03 | BRF_GRA },           // 16
+
+	{ "t57.b0",		0x20000, 0x0a84e0c7, 0x04 | BRF_GRA },           // 17 Background Tiles
+	{ "t58.b1",		0x20000, 0xa874121d, 0x04 | BRF_GRA },           // 18
+	{ "t59.b2",		0x20000, 0x69deb990, 0x04 | BRF_GRA },           // 19
+	{ "t60.b3",		0x20000, 0x14c69f99, 0x04 | BRF_GRA },           // 20
+
+	{ "t52.v0",		0x20000, 0x2db1bd80, 0x05 | BRF_SND },           // 21 DAC Samples
+
+	{ "m81_a-9l-.ic72",	0x00100, 0xb460c438, 0x00 | BRF_OPT },       // 22 Proms
+	{ "m81_a-9p-.ic74",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },       // 23
+};
+
+STD_ROM_PICK(xmultipl)
+STD_ROM_FN(xmultipl)
+
+static INT32 xmultiplInit()
+{
+	return DrvInit(common_080000_09c000, sound_rom_map, NULL, Z80_REAL_NMI, 2);
+}
+
+struct BurnDriver BurnDrvXmultipl = {
+	"xmultipl", NULL, NULL, NULL, "1989",
+	"X Multiply (World, M81 hardware)\0", NULL, "Irem", "Irem M81",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, xmultiplRomInfo, xmultiplRomName, NULL, NULL, NULL, NULL, CommonInputInfo, XmultiplDIPInfo,
+	xmultiplInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// X Multiply (Japan, M72 hardware)
+
+static struct BurnRomInfo xmultiplm72RomDesc[] = {
+	{ "xm_c-h3-.ic43",	0x20000, 0x20685021, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "xm_c-l3-.ic34",	0x20000, 0x93fdd200, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "xm_c-h0-.ic40",	0x10000, 0x9438dd8a, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "xm_c-l0-.ic37",	0x10000, 0x06a9e213, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "t44.00.ic53",	0x20000, 0xdb45186e, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "t45.01.ic52",	0x20000, 0x4d0764d4, 0x02 | BRF_GRA },           //  5
+	{ "t46.10.ic51",	0x20000, 0xf0c465a4, 0x02 | BRF_GRA },           //  6
+	{ "t47.11.ic50",	0x20000, 0x1263b24b, 0x02 | BRF_GRA },           //  7
+	{ "t48.20.ic49",	0x20000, 0x4129944f, 0x02 | BRF_GRA },           //  8
+	{ "t49.21.ic48",	0x20000, 0x2346e6f9, 0x02 | BRF_GRA },           //  9
+	{ "t50.30.ic47",	0x20000, 0xe322543e, 0x02 | BRF_GRA },           // 10
+	{ "t51.31.ic46",	0x20000, 0x229bf7b1, 0x02 | BRF_GRA },           // 11
+
+	{ "t53.a0",			0x20000, 0x1a082494, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "t54.a1",			0x20000, 0x076c16c5, 0x03 | BRF_GRA },           // 13
+	{ "t55.a2",			0x20000, 0x25d877a5, 0x03 | BRF_GRA },           // 14
+	{ "t56.a3",			0x20000, 0x5b1213f5, 0x03 | BRF_GRA },           // 15
+
+	{ "t57.b0",			0x20000, 0x0a84e0c7, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "t58.b1",			0x20000, 0xa874121d, 0x04 | BRF_GRA },           // 17
+	{ "t59.b2",			0x20000, 0x69deb990, 0x04 | BRF_GRA },           // 18
+	{ "t60.b3",			0x20000, 0x14c69f99, 0x04 | BRF_GRA },           // 19
+
+	{ "t52.v0.ic44",	0x20000, 0x2db1bd80, 0x05 | BRF_SND },           // 20 DAC Samples
+
+	{ "xm_c-pr-.ic1",	0x01000, 0xc8ceb3cd, 0x00 | BRF_OPT }, 	 	 // 21 i8751 microcontroller
+};
+
+STD_ROM_PICK(xmultiplm72)
+STD_ROM_FN(xmultiplm72)
+
+static INT32 xmultiplm72Init()
+{
+	install_protection(xmultiplm72);
+
+	return DrvInit(common_080000_080000, sound_ram_map, NULL, Z80_REAL_NMI, 0);
+}
+
+struct BurnDriver BurnDrvXmultiplm72 = {
+	"xmultiplm72", "xmultipl", NULL, NULL, "1989",
+	"X Multiply (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, xmultiplm72RomInfo, xmultiplm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, XmultiplDIPInfo,
+	xmultiplm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Dragon Breed (World, M81 hardware)
+
+static struct BurnRomInfo dbreedRomDesc[] = {
+	{ "db-a-h0-.59",	0x20000, 0xe1177267, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "db-a-l0-.68",	0x20000, 0xd82b167e, 0x01 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "db-a-sp-.14",	0x10000, 0x54a61560, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
+
+	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  3 Sprites
+	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  4
+	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  5
+	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  6
+
+	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
+	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  8
+	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           //  9
+	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 10
+
+	{ "db_a-v0.rom",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 11 DAC Samples
+};
+
+STD_ROM_PICK(dbreed)
+STD_ROM_FN(dbreed)
+
+static INT32 dbreedRomLoadCallback()
+{
+	memcpy (DrvV30ROM + 0x60000, DrvV30ROM + 0x20000, 0x20000);
+
+	return 0;
+}
+
+static INT32 dbreedInit()
+{
+	return DrvInit(common_080000_088000, sound_rom_map, dbreedRomLoadCallback, Z80_REAL_NMI, 2);
+}
+
+struct BurnDriver BurnDrvDbreed = {
+	"dbreed", NULL, NULL, NULL, "1989",
+	"Dragon Breed (World, M81 hardware)\0", NULL, "Irem", "Irem M81",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, dbreedRomInfo, dbreedRomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
+	dbreedInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Dragon Breed (World, M72 hardware)
+
+static struct BurnRomInfo dbreedm72RomDesc[] = {
+	{ "db_c-h3-b.ic43",	0x20000, 0x4bf3063c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "db_c-l3-b.ic34",	0x20000, 0xe4b89b79, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "db_c-h0.ic40",	0x10000, 0x5aa79fb2, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "db_c-l0.ic37",	0x10000, 0xed0f5e06, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  5
+	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  6
+	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  7
+
+	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  9
+	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           // 10
+	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 11
+
+	{ "db_k804m.b0",	0x20000, 0x4c83e92e, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "db_k805m.b1",	0x20000, 0x835ef268, 0x04 | BRF_GRA },           // 13
+	{ "db_k806m.b2",	0x20000, 0x5117f114, 0x04 | BRF_GRA },           // 14
+	{ "db_k807m.b3",	0x20000, 0x8eb0c978, 0x04 | BRF_GRA },           // 15
+
+	{ "db_c-v0.ic44",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 16 DAC Samples
+
+	// Requires different currently undumped MCU code - i8751 MCU labeled  DB C-PR-B??
+	{ "db_c-pr-b.ic1",  0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, 			 // 17 i8751 microcontroller
+};
+
+STD_ROM_PICK(dbreedm72)
+STD_ROM_FN(dbreedm72)
+
+static INT32 dbreedm72RomLoadCallback()
+{
+	memmove(DrvV30ROM + 0x60000, DrvV30ROM + 0x40000, 0x20000);
+
+	return 0;
+}
+
+static INT32 dbreedm72Init()
+{
+	install_protection(dbreedm72);
+
+	return DrvInit(common_080000_090000, sound_ram_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 0);
+}
+
+struct BurnDriver BurnDrvDbreedm72 = {
+	"dbreedm72", "dbreed", NULL, NULL, "1989",
+	"Dragon Breed (World, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, dbreedm72RomInfo, dbreedm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
+	dbreedm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Dragon Breed (Japan, M72 harware)
+// with matching i8751 this set boots with a Japanese warning screen
+
+static struct BurnRomInfo dbreedjm72RomDesc[] = {
+	{ "db_c-h3.ic43",	0x20000, 0x43425d67, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "db_c-l3.ic34",	0x20000, 0x9c1abc85, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "db_c-h0.ic40",	0x10000, 0x5aa79fb2, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "db_c-l0.ic37",	0x10000, 0xed0f5e06, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "db_k800m.00",	0x20000, 0xc027a8cf, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "db_k801m.10",	0x20000, 0x093faf33, 0x02 | BRF_GRA },           //  5
+	{ "db_k802m.20",	0x20000, 0x055b4c59, 0x02 | BRF_GRA },           //  6
+	{ "db_k803m.30",	0x20000, 0x8ed63922, 0x02 | BRF_GRA },           //  7
+
+	{ "db_k804m.a0",	0x20000, 0x4c83e92e, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "db_k805m.a1",	0x20000, 0x835ef268, 0x03 | BRF_GRA },           //  9
+	{ "db_k806m.a2",	0x20000, 0x5117f114, 0x03 | BRF_GRA },           // 10
+	{ "db_k807m.a3",	0x20000, 0x8eb0c978, 0x03 | BRF_GRA },           // 11
+
+	{ "db_k804m.b0",	0x20000, 0x4c83e92e, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "db_k805m.b1",	0x20000, 0x835ef268, 0x04 | BRF_GRA },           // 13
+	{ "db_k806m.b2",	0x20000, 0x5117f114, 0x04 | BRF_GRA },           // 14
+	{ "db_k807m.b3",	0x20000, 0x8eb0c978, 0x04 | BRF_GRA },           // 15
+
+	{ "db_c-v0.ic44",	0x20000, 0x312f7282, 0x05 | BRF_SND },           // 16 DAC Samples
+
+	{ "db_c-pr-.ic1",	0x01000, 0x8bf2910c, 0x00 | BRF_OPT }, 			 // 17 i8751 microcontroller
+};
+
+STD_ROM_PICK(dbreedjm72)
+STD_ROM_FN(dbreedjm72)
+
+struct BurnDriver BurnDrvDbreedjm72 = {
+	"dbreedjm72", "dbreed", NULL, NULL, "1989",
+	"Dragon Breed (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, dbreedjm72RomInfo, dbreedjm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, DbreedDIPInfo,
+	dbreedm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Battle Chopper (World)
+
+static struct BurnRomInfo bchopperRomDesc[] = {
+	{ "mh_c-h0-b.ic40",		0x10000, 0xf2feab16, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "mh_c-l0-b.ic37",		0x10000, 0x9f887096, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "mh_c-h1-b.ic41",		0x10000, 0xa995d64f, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "mh_c-l1-b.ic36",		0x10000, 0x41dda999, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	{ "mh_c-h3-b.ic43",		0x10000, 0xab9451ca, 0x01 | BRF_PRG | BRF_ESS }, //  4
+	{ "mh_c-l3-b.ic34",		0x10000, 0x11562221, 0x01 | BRF_PRG | BRF_ESS }, //  5
+
+	{ "mh_c-00-a.ic53",		0x10000, 0xf6e6e660, 0x02 | BRF_GRA },           //  6 Sprites
+	{ "mh_c-01-b.ic52",		0x10000, 0x708cdd37, 0x02 | BRF_GRA },           //  7
+	{ "mh_c-10-a.ic51",		0x10000, 0x292c8520, 0x02 | BRF_GRA },           //  8
+	{ "mh_c-11-b.ic50",		0x10000, 0x20904cf3, 0x02 | BRF_GRA },           //  9
+	{ "mh_c-20-a.ic49",		0x10000, 0x1ab50c23, 0x02 | BRF_GRA },           // 10
+	{ "mh_c-21-b.ic48",		0x10000, 0xc823d34c, 0x02 | BRF_GRA },           // 11
+	{ "mh_c-30-a.ic47",		0x10000, 0x11f6c56b, 0x02 | BRF_GRA },           // 12
+	{ "mh_c-31-b.ic46",		0x10000, 0x23134ec5, 0x02 | BRF_GRA },           // 13
+
+	{ "mh_b-a0-b.ic21",		0x10000, 0xe46ed7bf, 0x03 | BRF_GRA },           // 14 Foreground Tiles
+	{ "mh_b-a1-b.ic22",		0x10000, 0x590605ff, 0x03 | BRF_GRA },           // 15
+	{ "mh_b-a2-b.ic20",		0x10000, 0xf8158226, 0x03 | BRF_GRA },           // 16
+	{ "mh_b-a3-b.ic23",		0x10000, 0x0f07b9b7, 0x03 | BRF_GRA },           // 17
+
+	{ "mh_b-b0-.ic26",		0x10000, 0xb5b95776, 0x04 | BRF_GRA },           // 18 Background Tiles
+	{ "mh_b-b1-.ic27",		0x10000, 0x74ca16ee, 0x04 | BRF_GRA },           // 19
+	{ "mh_b-b2-.ic25",		0x10000, 0xb82cca04, 0x04 | BRF_GRA },           // 20
+	{ "mh_b-b3-.ic24",		0x10000, 0xa7afc920, 0x04 | BRF_GRA },           // 21
+
+	{ "mh_c-v0-b.ic44",		0x10000, 0xd0c27e58, 0x05 | BRF_SND },           // 22 DAC Samples
+
+	{ "mh_c-pr-b.ic1",	0x10000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 23 i8751 Code
+};
+
+STD_ROM_PICK(bchopper)
+STD_ROM_FN(bchopper)
+
+static INT32 bchopperInit()
+{
+	install_protection(bchopper);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvBchopper = {
+	"bchopper", NULL, NULL, NULL, "1987",
+	"Battle Chopper (World)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, bchopperRomInfo, bchopperRomName, NULL, NULL, NULL, NULL, CommonInputInfo, BchopperDIPInfo,
+	bchopperInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Mr. HELI no Dai-Bouken
+
+static struct BurnRomInfo mrheliRomDesc[] = {
+	{ "mh_c-h0-.ic40",	0x10000, 0xe2ca5646, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "mh_c-l0-.ic37",	0x10000, 0x643e23cd, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "mh_c-h1-.ic41",	0x10000, 0x8974e84d, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "mh_c-l1-.ic36",	0x10000, 0x5f8bda69, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	{ "mh_c-h3-.ic43",	0x10000, 0x143f596e, 0x01 | BRF_PRG | BRF_ESS }, //  4
+	{ "mh_c-l3-.ic34",	0x10000, 0xc0982536, 0x01 | BRF_PRG | BRF_ESS }, //  5
+
+	{ "mh_c-00.ic53",	0x20000, 0xdec4e121, 0x02 | BRF_GRA },           //  6 Sprites
+	{ "mh_c-10.ic51",	0x20000, 0x7aaa151e, 0x02 | BRF_GRA },           //  7
+	{ "mh_c-20.ic49",	0x20000, 0xeae0de74, 0x02 | BRF_GRA },           //  8
+	{ "mh_c-30.ic47",	0x20000, 0x01d5052f, 0x02 | BRF_GRA },           //  9
+
+	{ "mh_b-a0.ic21",	0x10000, 0x6a0db256, 0x03 | BRF_GRA },           // 10 Foreground Tiles
+	{ "mh_b-a1.ic22",	0x10000, 0x14ec9795, 0x03 | BRF_GRA },           // 11
+	{ "mh_b-a2.ic20",	0x10000, 0xdfcb510e, 0x03 | BRF_GRA },           // 12
+	{ "mh_b-a3.ic23",	0x10000, 0x957e329b, 0x03 | BRF_GRA },           // 13
+
+	{ "mh_b-b0-.ic26",		0x10000, 0xb5b95776, 0x04 | BRF_GRA },           // 14 Background Tiles
+	{ "mh_b-b1-.ic27",		0x10000, 0x74ca16ee, 0x04 | BRF_GRA },           // 15
+	{ "mh_b-b2-.ic25",		0x10000, 0xb82cca04, 0x04 | BRF_GRA },           // 16
+	{ "mh_b-b3-.ic24",		0x10000, 0xa7afc920, 0x04 | BRF_GRA },           // 17
+
+	{ "mh_c-v0-b.ic44",		0x10000, 0xd0c27e58, 0x05 | BRF_SND },           // 18 DAC Samples
+
+	{ "mh_c-pr-.ic1",	0x01000, 0x897dc4ee, 0x00 | BRF_OPT }, 			 // 19 i8751 microcontroller
+};
+
+STD_ROM_PICK(mrheli)
+STD_ROM_FN(mrheli)
+
+static INT32 mrheliInit()
+{
+	m72_install_protection(bchopper_code, mrheli_crc, bchopper_sample_offsets);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvMrheli = {
+	"mrheli", "bchopper", NULL, NULL, "1987",
+	"Mr. HELI no Dai-Bouken\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, mrheliRomInfo, mrheliRomName, NULL, NULL, NULL, NULL, CommonInputInfo, BchopperDIPInfo,
+	mrheliInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Ninja Spirit (World)
+// doesn't wait / check for japan warning string.. fails rom check if used with japanese mcu rom (World version?)
+
+static struct BurnRomInfo nspiritRomDesc[] = {
+	{ "nin_c-h0-b.6h",	0x10000, 0x035692fa, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "nin_c-l0-b.6d",	0x10000, 0x9a405898, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "nin_c-h1.6j",	0x10000, 0xcbc10586, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "nin_c-l1.6c",	0x10000, 0xb75c9a4d, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	{ "nin_c-h2.6l",	0x10000, 0x8ad818fa, 0x01 | BRF_PRG | BRF_ESS }, //  4
+	{ "nin_c-l2.6b",	0x10000, 0xc52ca78c, 0x01 | BRF_PRG | BRF_ESS }, //  5
+	{ "nin_c-h3-b.6m",	0x10000, 0x501104ef, 0x01 | BRF_PRG | BRF_ESS }, //  6
+	{ "nin_c-l3-b.6a",	0x10000, 0xfd7408b8, 0x01 | BRF_PRG | BRF_ESS }, //  7
+
+	{ "nin-r00.7m",		0x20000, 0x5f61d30b, 0x02 | BRF_GRA },           //  8 Sprites
+	{ "nin-r10.7j",		0x20000, 0x0caad107, 0x02 | BRF_GRA },           //  9
+	{ "nin-r20.7f",		0x20000, 0xef3617d3, 0x02 | BRF_GRA },           // 10
+	{ "nin-r30.7d",		0x20000, 0x175d2a24, 0x02 | BRF_GRA },           // 11
+
+	{ "nin_b-a0.4c",	0x10000, 0x63f8f658, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "nin_b-a1.4d",	0x10000, 0x75eb8306, 0x03 | BRF_GRA },           // 13
+	{ "nin_b-a2.4b",	0x10000, 0xdf532172, 0x03 | BRF_GRA },           // 14
+	{ "nin_b-a3.4e",	0x10000, 0x4dedd64c, 0x03 | BRF_GRA },           // 15
+
+	{ "b0.4j",			0x10000, 0x1b0e08a6, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "b1.4k",			0x10000, 0x728727f0, 0x04 | BRF_GRA },           // 17
+	{ "b2.4h",			0x10000, 0xf87efd75, 0x04 | BRF_GRA },           // 18
+	{ "b3.4f",			0x10000, 0x98856cb4, 0x04 | BRF_GRA },           // 19
+
+	{ "nin-v0.7a",		0x10000, 0xa32e8caf, 0x05 | BRF_SND },           // 20 DAC Samples
+
+	{ "nin_c-pr-b.ic1",	0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 21 i8751 microcontroller
+	
+	{ "m72_a-8l.8l",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 22 Proms
+	{ "m72_a-9l.9l",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 23
+
+	{ "nin_c-3f.3f",	0x00100, 0x5402fc07, 0x00 | BRF_OPT }, 			 // 24 PLDs
+	{ "m72_a-3d.3d",	0x00100, 0xde85dac3, 0x00 | BRF_OPT }, 			 // 25
+	{ "m72_a-4d.4d",	0x00100, 0x59676de1, 0x00 | BRF_OPT }, 			 // 26
+};
+
+STD_ROM_PICK(nspirit)
+STD_ROM_FN(nspirit)
+
+static INT32 nspiritInit()
+{
+	install_protection(nspirit);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvNspirit = {
+	"nspirit", NULL, NULL, NULL, "1988",
+	"Ninja Spirit (World)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
+	NULL, nspiritRomInfo, nspiritRomName, NULL, NULL, NULL, NULL, CommonInputInfo, NspiritDIPInfo,
+	nspiritInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Saigo no Nindou (Japan)
+
+static struct BurnRomInfo nspiritjRomDesc[] = {
+	{ "nin_c-h0.6h",	0x10000, 0x8603fab2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "nin_c-l0.6d",	0x10000, 0xe520fa35, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "nin_c-h1.6j",	0x10000, 0xcbc10586, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "nin_c-l1.6c",	0x10000, 0xb75c9a4d, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	{ "nin_c-h2.6l",	0x10000, 0x8ad818fa, 0x01 | BRF_PRG | BRF_ESS }, //  4
+	{ "nin_c-l2.6b",	0x10000, 0xc52ca78c, 0x01 | BRF_PRG | BRF_ESS }, //  5
+	{ "nin_c-h3.6m",	0x10000, 0x95b63a61, 0x01 | BRF_PRG | BRF_ESS }, //  6
+	{ "nin_c-l3.6a",	0x10000, 0xe754a87a, 0x01 | BRF_PRG | BRF_ESS }, //  7
+
+	{ "nin-r00.7m",		0x20000, 0x5f61d30b, 0x02 | BRF_GRA },           //  8 Sprites
+	{ "nin-r10.7j",		0x20000, 0x0caad107, 0x02 | BRF_GRA },           //  9
+	{ "nin-r20.7f",		0x20000, 0xef3617d3, 0x02 | BRF_GRA },           // 10
+	{ "nin-r30.7d",		0x20000, 0x175d2a24, 0x02 | BRF_GRA },           // 11
+
+	{ "nin_b-a0.4c",	0x10000, 0x63f8f658, 0x03 | BRF_GRA },           // 12 Foreground Tiles
+	{ "nin_b-a1.4d",	0x10000, 0x75eb8306, 0x03 | BRF_GRA },           // 13
+	{ "nin_b-a2.4b",	0x10000, 0xdf532172, 0x03 | BRF_GRA },           // 14
+	{ "nin_b-a3.4e",	0x10000, 0x4dedd64c, 0x03 | BRF_GRA },           // 15
+
+	{ "b0.4j",			0x10000, 0x1b0e08a6, 0x04 | BRF_GRA },           // 16 Background Tiles
+	{ "b1.4k",			0x10000, 0x728727f0, 0x04 | BRF_GRA },           // 17
+	{ "b2.4h",			0x10000, 0xf87efd75, 0x04 | BRF_GRA },           // 18
+	{ "b3.4f",			0x10000, 0x98856cb4, 0x04 | BRF_GRA },           // 19
+
+	{ "nin-v0.7a",		0x10000, 0xa32e8caf, 0x05 | BRF_SND },           // 20 DAC Samples
+
+	{ "nin_c-pr-.ic1",	0x01000, 0x802d440a, 0x00 | BRF_OPT },           // 21 i8751 microcontroller
+};
+
+STD_ROM_PICK(nspiritj)
+STD_ROM_FN(nspiritj)
+
+static INT32 nspiritjInit()
+{
+	m72_install_protection(nspirit_code, nspiritj_crc, nspirit_sample_offsets);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvNspiritj = {
+	"nspiritj", "nspirit", NULL, NULL, "1988",
+	"Saigo no Nindou (Japan)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
+	NULL, nspiritjRomInfo, nspiritjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, NspiritDIPInfo,
+	nspiritjInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Image Fight (World)
+
+static struct BurnRomInfo imgfightRomDesc[] = {
+	{ "if-c-h0-a.ic40",	0x10000, 0xf5c94464, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "if-c-l0-a.ic37",	0x10000, 0x87c534fe, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "if-c-h3.ic43",	0x20000, 0xea030541, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "if-c-l3.ic34",	0x20000, 0xc66ae348, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "if-c-00.ic53",	0x20000, 0x745e6638, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "if-c-10.ic51",	0x20000, 0xb7108449, 0x02 | BRF_GRA },           //  5
+	{ "if-c-20.ic49",	0x20000, 0xaef33cba, 0x02 | BRF_GRA },           //  6
+	{ "if-c-30.ic47",	0x20000, 0x1f98e695, 0x02 | BRF_GRA },           //  7
+
+	{ "if-a-a0.ic21",	0x10000, 0x34ee2d77, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "if-a-a1.ic22",	0x10000, 0x6bd2845b, 0x03 | BRF_GRA },           //  9
+	{ "if-a-a2.ic20",	0x10000, 0x090d50e5, 0x03 | BRF_GRA },           // 10
+	{ "if-a-a3.ic23",	0x10000, 0x3a8e3083, 0x03 | BRF_GRA },           // 11
+
+	{ "if-a-b0.ic26",	0x10000, 0xb425c829, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "if-a-b1.ic27",	0x10000, 0xe9bfe23e, 0x04 | BRF_GRA },           // 13
+	{ "if-a-b2.ic25",	0x10000, 0x256e50f2, 0x04 | BRF_GRA },           // 14
+	{ "if-a-b3.ic24",	0x10000, 0x4c682785, 0x04 | BRF_GRA },           // 15
+
+	{ "if-c-v0.ic44",	0x10000, 0xcb64a194, 0x05 | BRF_SND },           // 16 DAC Samples
+	{ "if-c-v1.ic45",	0x10000, 0x45b68bf5, 0x05 | BRF_SND },           // 17
+
+	{ "if_c-pr-a.ic1",  0x01000, 0x55f10458, 0x00 | BRF_OPT },           // 18 i8751 microcontroller
+};
+
+STD_ROM_PICK(imgfight)
+STD_ROM_FN(imgfight)
+
+static INT32 imgfightRomLoadCallback()
+{
+	memmove(DrvV30ROM + 0x40000, DrvV30ROM + 0x20000, 0x40000);
+
+	return 0;
+}
+
+static INT32 imgfightInit()
+{
+	install_protection(imgfight);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, imgfightRomLoadCallback, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvImgfight = {
+	"imgfight", NULL, NULL, NULL, "1988",
+	"Image Fight (World)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, imgfightRomInfo, imgfightRomName, NULL, NULL, NULL, NULL, CommonInputInfo, ImgfightDIPInfo,
+	imgfightInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Image Fight (Japan)
+
+static struct BurnRomInfo imgfightjRomDesc[] = {
+	{ "if-c-h0.ic40",	0x10000, 0x592d2d80, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "if-c-l0.ic37",	0x10000, 0x61f89056, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "if-c-h3.ic43",	0x20000, 0xea030541, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "if-c-l3.ic34",	0x20000, 0xc66ae348, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "if-c-00.ic53",	0x20000, 0x745e6638, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "if-c-10.ic51",	0x20000, 0xb7108449, 0x02 | BRF_GRA },           //  5
+	{ "if-c-20.ic49",	0x20000, 0xaef33cba, 0x02 | BRF_GRA },           //  6
+	{ "if-c-30.ic47",	0x20000, 0x1f98e695, 0x02 | BRF_GRA },           //  7
+
+	{ "if-a-a0.ic21",	0x10000, 0x34ee2d77, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "if-a-a1.ic22",	0x10000, 0x6bd2845b, 0x03 | BRF_GRA },           //  9
+	{ "if-a-a2.ic20",	0x10000, 0x090d50e5, 0x03 | BRF_GRA },           // 10
+	{ "if-a-a3.ic23",	0x10000, 0x3a8e3083, 0x03 | BRF_GRA },           // 11
+
+	{ "if-a-b0.ic26",	0x10000, 0xb425c829, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "if-a-b1.ic27",	0x10000, 0xe9bfe23e, 0x04 | BRF_GRA },           // 13
+	{ "if-a-b2.ic25",	0x10000, 0x256e50f2, 0x04 | BRF_GRA },           // 14
+	{ "if-a-b3.ic24",	0x10000, 0x4c682785, 0x04 | BRF_GRA },           // 15
+
+	{ "if-c-v0.ic44",	0x10000, 0xcb64a194, 0x05 | BRF_SND },           // 16 DAC Samples
+	{ "if-c-v1.ic45",	0x10000, 0x45b68bf5, 0x05 | BRF_SND },           // 17
+
+	{ "if_c-pr-.ic1",	0x01000, 0xef0d5098, 0x00 | BRF_OPT }, 			 // 18 i8751 microcontroller
+};
+
+STD_ROM_PICK(imgfightj)
+STD_ROM_FN(imgfightj)
+
+struct BurnDriver BurnDrvImgfightj = {
+	"imgfightj", "imgfight", NULL, NULL, "1988",
+	"Image Fight (Japan)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, imgfightjRomInfo, imgfightjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, ImgfightDIPInfo,
+	imgfightInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Air Duel (World, M82 hardware)
+
+static struct BurnRomInfo airduelRomDesc[] = {
+	{ "ad_=m82=_a-h0-d.ic52",	0x20000, 0xdbecc726, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ad_=m82=_a-l0-d.ic60",	0x20000, 0x6a9fcf59, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "ad_=m82=_a-h1-d.ic51",	0x20000, 0xbafc152a, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "ad_=m82=_a-l1-d.ic59",	0x20000, 0x9e2b1ae7, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	
+	{ "ad_=m82=_a-sp-d.ic15",	0x10000, 0x16a858a3, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ad_=m82=_b-n0-d.ic44",	0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ad_=m82=_b-n1-d.ic45",	0x20000, 0x9865856b, 0x02 | BRF_GRA },           //  6
+	{ "ad_=m82=_b-n2-d.ic46",	0x20000, 0xd392aef2, 0x02 | BRF_GRA },           //  7
+	{ "ad_=m82=_b-n3-d.ic36",	0x20000, 0x923240c3, 0x02 | BRF_GRA },           //  8
+
+	{ "ad_=m82=_a-c0-d.ic49",	0x20000, 0xce134b47, 0x03 | BRF_GRA },           //  9 Foreground Tiles
+	{ "ad_=m82=_a-c1-d.ic48",	0x20000, 0x097fd853, 0x03 | BRF_GRA },           // 10
+	{ "ad_=m82=_a-c2-d.ic57",	0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           // 11
+	{ "ad_=m82=_a-c3-d.ic56",	0x20000, 0x6637c349, 0x03 | BRF_GRA },           // 12
+
+	{ "mt_f0.ic38",				0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 17 Sprites 2
+	{ "mt_f1.ic39",				0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 18
+	{ "mt_f2.ic40",				0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 19
+	{ "mt_f3.ic41",				0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 20
+
+	{ "ad_=m82=_a-v0-d.ic12",	0x20000, 0x339f474d, 0x05 | BRF_SND },           // 21 DAC Samples
+};
+
+STD_ROM_PICK(airduel)
+STD_ROM_FN(airduel)
+
+static INT32 airduelInit()
+{
+	return DrvInit(majtitle_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 6);
+}
+
+struct BurnDriver BurnDrvAirduel = {
+	"airduel", NULL, NULL, NULL, "1990",
+	"Air Duel (World, M82 hardware)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, airduelRomInfo, airduelRomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
+	airduelInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Air Duel (US location test, M82 hardware)
+
+static struct BurnRomInfo airdueluRomDesc[] = {
+	{ "r10-m82a-h0.ic52",	0x20000, 0x17f19965, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "r10-m82a-l0.ic60",	0x20000, 0xf8b54d6c, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "r10-m82-h1.ic51",	0x20000, 0xbafc152a, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "r10-m82-l1.ic59",	0x20000, 0x9e2b1ae7, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	
+	{ "r10-bgm.ic15",		0x10000, 0x16a858a3, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "r10-obj0.ic44",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "r10-obj1.ic45",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           //  6
+	{ "r10-obj2.ic46",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           //  7
+	{ "r10-obj3.ic36",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           //  8
+
+	{ "r10-chr0.ic49",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           //  9 Foreground Tiles
+	{ "r10-chr1.ic48",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           // 10
+	{ "r10-chr2.ic57",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           // 11
+	{ "r10-chr3.ic56",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           // 12
+
+	{ "mt_f0.ic38",			0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 17 Sprites 2
+	{ "mt_f1.ic39",			0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 18
+	{ "mt_f2.ic40",			0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 19
+	{ "mt_f3.ic41",			0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 20
+
+	{ "r10-voice.ic12",		0x20000, 0x339f474d, 0x05 | BRF_SND },           // 21 DAC Samples
+};
+
+STD_ROM_PICK(airduelu)
+STD_ROM_FN(airduelu)
+
+struct BurnDriver BurnDrvAirduelu = {
+	"airduelu", "airduel", NULL, NULL, "1990",
+	"Air Duel (US location test, M82 hardware)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, airdueluRomInfo, airdueluRomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
+	airduelInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Air Duel (World, M72 hardware)
+
+static struct BurnRomInfo airduelm72RomDesc[] = {
+	{ "ad-c-h0-c.ic40",	0x20000, 0x6467ed0f, 0x01 | BRF_PRG | BRF_ESS }, 	//  0 V30 Code
+	{ "ad-c-l0-c.ic37",	0x20000, 0xb90c4ffd, 0x01 | BRF_PRG | BRF_ESS }, 	//  1
+	{ "ad-c-h3.ic43",	0x20000, 0x9f7cfca3, 0x01 | BRF_PRG | BRF_ESS }, 	//  2
+	{ "ad-c-l3.ic34",	0x20000, 0x9dd343f7, 0x01 | BRF_PRG | BRF_ESS }, 	//  3
+
+	{ "ad-00.ic53",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           	//  4 Sprites
+	{ "ad-10.ic51",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           	//  5
+	{ "ad-20.ic49",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           	//  6
+	{ "ad-30.ic47",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           	//  7
+
+	{ "ad-a0.ic21",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           	//  8 Foreground Tiles
+	{ "ad-a1.ic22",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           	//  9
+	{ "ad-a2.ic20",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           	// 10
+	{ "ad-a3.ic23",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           	// 11
+
+	{ "ad-b0.ic26",		0x20000, 0xce134b47, 0x04 | BRF_GRA },           	// 12 Background Tiles
+	{ "ad-b1.ic27",		0x20000, 0x097fd853, 0x04 | BRF_GRA },           	// 13
+	{ "ad-b2.ic25",		0x20000, 0x6a94c1b9, 0x04 | BRF_GRA },           	// 14
+	{ "ad-b3.ic24",		0x20000, 0x6637c349, 0x04 | BRF_GRA },           	// 15
+
+	{ "ad-v0.ic44",		0x20000, 0x339f474d, 0x05 | BRF_SND },           	// 16 DAC Samples
+
+	{ "ad_c-pr-c.ic1",	0x01000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 17 i8751 microcontroller
+	
+	{ "ad-c-3f.ic13",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 18 Pals
+};
+
+STD_ROM_PICK(airduelm72)
+STD_ROM_FN(airduelm72)
+
+static INT32 airduelm72Init()
+{
+	install_protection(airduel);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvAirduelm72 = {
+	"airduelm72", "airduel", NULL, NULL, "1990",
+	"Air Duel (World, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, airduelm72RomInfo, airduelm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
+	airduelm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Air Duel (Japan, M72 hardware)
+
+static struct BurnRomInfo airdueljm72RomDesc[] = {
+	{ "ad-c-h0.ic40",	0x20000, 0x12140276, 0x01 | BRF_PRG | BRF_ESS }, 	//  0 V30 Code
+	{ "ad-c-l0.ic37",	0x20000, 0x4ac0b91d, 0x01 | BRF_PRG | BRF_ESS }, 	//  1
+	{ "ad-c-h3.ic43",	0x20000, 0x9f7cfca3, 0x01 | BRF_PRG | BRF_ESS }, 	//  2
+	{ "ad-c-l3.ic34",	0x20000, 0x9dd343f7, 0x01 | BRF_PRG | BRF_ESS }, 	//  3
+
+	{ "ad-00.ic53",		0x20000, 0x2f0d599b, 0x02 | BRF_GRA },           	//  4 Sprites
+	{ "ad-10.ic51",		0x20000, 0x9865856b, 0x02 | BRF_GRA },           	//  5
+	{ "ad-20.ic49",		0x20000, 0xd392aef2, 0x02 | BRF_GRA },           	//  6
+	{ "ad-30.ic47",		0x20000, 0x923240c3, 0x02 | BRF_GRA },           	//  7
+
+	{ "ad-a0.ic21",		0x20000, 0xce134b47, 0x03 | BRF_GRA },           	//  8 Foreground Tiles
+	{ "ad-a1.ic22",		0x20000, 0x097fd853, 0x03 | BRF_GRA },           	//  9
+	{ "ad-a2.ic20",		0x20000, 0x6a94c1b9, 0x03 | BRF_GRA },           	// 10
+	{ "ad-a3.ic23",		0x20000, 0x6637c349, 0x03 | BRF_GRA },           	// 11
+
+	{ "ad-b0.ic26",		0x20000, 0xce134b47, 0x04 | BRF_GRA },           	// 12 Background Tiles
+	{ "ad-b1.ic27",		0x20000, 0x097fd853, 0x04 | BRF_GRA },           	// 13
+	{ "ad-b2.ic25",		0x20000, 0x6a94c1b9, 0x04 | BRF_GRA },           	// 14
+	{ "ad-b3.ic24",		0x20000, 0x6637c349, 0x04 | BRF_GRA },           	// 15
+
+	{ "ad-v0.ic44",		0x20000, 0x339f474d, 0x05 | BRF_SND },           	// 16 DAC Samples
+
+	{ "ad_c-pr-.ic1",	0x01000, 0x45584e52, 0x00 | BRF_OPT }, 			 	// 17 i8751 microcontroller
+	
+	{ "ad-c-3f.ic13",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 18 Pals
+};
+
+STD_ROM_PICK(airdueljm72)
+STD_ROM_FN(airdueljm72)
+
+struct BurnDriver BurnDrvAirdueljm72 = {
+	"airdueljm72", "airduel", NULL, NULL, "1990",
+	"Air Duel (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_VERSHOOT, 0,
+	NULL, airdueljm72RomInfo, airdueljm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, AirduelDIPInfo,
+	airduelm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// R-Type II (World)
+
+static struct BurnRomInfo rtype2RomDesc[] = {
+	{ "rt2-a-h0-d.54",	0x20000, 0xd8ece6f4, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt2-a-l0-d.60",	0x20000, 0x32cfb2e4, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt2-a-h1-d.53",	0x20000, 0x4f6e9b15, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt2-a-l1-d.59",	0x20000, 0x0fd123bf, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
+	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
+	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
+
+	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
+	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
+	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
+	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
+	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
+	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
+	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
+
+	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
+};
+
+STD_ROM_PICK(rtype2)
+STD_ROM_FN(rtype2)
+
+static INT32 rtype2Init()
+{
+	return DrvInit(rtype2_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 1);
+}
+
+struct BurnDriver BurnDrvRtype2 = {
+	"rtype2", NULL, NULL, NULL, "1989",
+	"R-Type II (World)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtype2RomInfo, rtype2RomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
+	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type II (Japan)
+
+static struct BurnRomInfo rtype2jRomDesc[] = {
+	{ "rt2-a-h0.54",	0x20000, 0x7857ccf6, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt2-a-l0.60",	0x20000, 0xcb22cd6e, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt2-a-h1.53",	0x20000, 0x49e75d28, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt2-a-l1.59",	0x20000, 0x12ec1676, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
+	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
+	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
+
+	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
+	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
+	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
+	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
+	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
+	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
+	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
+
+	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
+	
+	{ "rt2_b-4n-.bin",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 18 Proms
+	{ "rt2_b-4p-.bin",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 19
+	
+	{ "rt2-a-2h-.5",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
+	{ "rt2-a-5l-.33",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
+	{ "rt2-b-3a-.9",	0x00104, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP },
+	{ "rt2-a-7d-.45",	0x00104, 0x53c1e087, 0x00 | BRF_OPT },
+};
+
+STD_ROM_PICK(rtype2j)
+STD_ROM_FN(rtype2j)
+
+struct BurnDriver BurnDrvRtype2j = {
+	"rtype2j", "rtype2", NULL, NULL, "1989",
+	"R-Type II (Japan)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtype2jRomInfo, rtype2jRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
+	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// R-Type II (Japan, revision C)
+
+static struct BurnRomInfo rtype2jcRomDesc[] = {
+	{ "rt2-a-h0-c.54",	0x20000, 0xef9a9990, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "rt2-a-l0-c.60",	0x20000, 0xd8b9da64, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "rt2-a-h1-c.53",	0x20000, 0x1b1870f4, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "rt2-a-l1-c.59",	0x20000, 0x60fdff35, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ic17.4f",		0x10000, 0x73ffecb4, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ic31.6l",		0x20000, 0x2cd8f913, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ic21.4l",		0x20000, 0x5033066d, 0x02 | BRF_GRA },           //  6
+	{ "ic32.6m",		0x20000, 0xec3a0450, 0x02 | BRF_GRA },           //  7
+	{ "ic22.4m",		0x20000, 0xdb6176fc, 0x02 | BRF_GRA },           //  8
+
+	{ "ic50.7s",		0x20000, 0xf3f8736e, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ic51.7u",		0x20000, 0xb4c543af, 0x03 | BRF_GRA },           // 10
+	{ "ic56.8s",		0x20000, 0x4cb80d66, 0x03 | BRF_GRA },           // 11
+	{ "ic57.8u",		0x20000, 0xbee128e0, 0x03 | BRF_GRA },           // 12
+	{ "ic65.9r",		0x20000, 0x2dc9c71a, 0x03 | BRF_GRA },           // 13
+	{ "ic66.9u",		0x20000, 0x7533c428, 0x03 | BRF_GRA },           // 14
+	{ "ic63.9m",		0x20000, 0xa6ad67f2, 0x03 | BRF_GRA },           // 15
+	{ "ic64.9p",		0x20000, 0x3686d555, 0x03 | BRF_GRA },           // 16
+
+	{ "ic14.4c",		0x20000, 0x637172d5, 0x05 | BRF_SND },           // 17 DAC Samples
+};
+
+STD_ROM_PICK(rtype2jc)
+STD_ROM_FN(rtype2jc)
+
+struct BurnDriver BurnDrvRtype2jc = {
+	"rtype2jc", "rtype2", NULL, NULL, "1989",
+	"R-Type II (Japan, revision C)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, rtype2jcRomInfo, rtype2jcRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
+	rtype2Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Hammerin' Harry (World, M81 hardware)
+
+static struct BurnRomInfo hharryRomDesc[] = {
+	{ "a-h0-v.rom",		0x20000, 0xc52802a5, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "a-l0-v.rom",		0x20000, 0xf463074c, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "a-h1-0.rom",		0x10000, 0x3ae21335, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "a-l1-0.rom",		0x10000, 0xbc6ac5f9, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "a-sp-0.rom",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
+	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
+	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
+
+	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
+	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
+	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
+
+	{ "a-v0-0.rom",		0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(hharry)
+STD_ROM_FN(hharry)
+
+static INT32 hharryInit()
+{
+	return DrvInit(common_080000_0a0000, sound_rom_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 2);
+}
+
+struct BurnDriver BurnDrvHharry = {
+	"hharry", NULL, NULL, NULL, "1990",
+	"Hammerin' Harry (World, M81 hardware)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
+	NULL, hharryRomInfo, hharryRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
+	hharryInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Hammerin' Harry (US, M84 hardware)
+
+static struct BurnRomInfo hharryuRomDesc[] = {
+	{ "a-ho-u.8d",		0x20000, 0xede7f755, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "a-lo-u.9d",		0x20000, 0xdf0726ae, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "a-h1-f.8b",		0x10000, 0x31b741c5, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "a-l1-f.9b",		0x10000, 0xb23e966c, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "a-sp-0.rom",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
+	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
+	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
+
+	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
+	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
+	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
+
+	{ "a-v0-0.rom",		0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(hharryu)
+STD_ROM_FN(hharryu)
+
+static INT32 hharryuInit()
+{
+	return DrvInit(hharryu_main_cpu_map, sound_rom_map, dbreedm72RomLoadCallback, Z80_REAL_NMI, 1);
+}
+
+struct BurnDriver BurnDrvHharryu = {
+	"hharryu", "hharry", NULL, NULL, "1990",
+	"Hammerin' Harry (US, M84 hardware)\0", NULL, "Irem America", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
+	NULL, hharryuRomInfo, hharryuRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
+	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Hammerin' Harry (World, M84 hardware bootleg)
+
+static struct BurnRomInfo hharrybRomDesc[] = {
+	{ "4-a-27c010a.bin",	0x20000, 0x755c0874, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "6-a-27c010a.bin",	0x20000, 0xf10fb55c, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "3-a-27c512.bin",		0x10000, 0x31b741c5, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "5-a-27c512.bin",		0x10000, 0xb23e966c, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "2-a-27c512.bin",		0x10000, 0x80e210e7, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "17-c-27c010a.bin",	0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "16-c-27c010a.bin",	0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
+	{ "14-c-27c010a.bin",	0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
+	{ "15-c-27c010a.bin",	0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
+
+	{ "13-b-27c010a.bin",	0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "11-b-27c010a.bin",	0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
+	{ "9-b-27c010a.bin",	0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
+	{ "7-b-27c010a.bin",	0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
+
+	{ "1-a-27c010a.bin",	0x20000, 0xfaaacaff, 0x05 | BRF_SND },           // 13 DAC Samples
+	
+	{ "19-c-82s129.bin",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 14 Proms
+	{ "18-c-82s129.bin",	0x00100, 0xa4f2c4bc, 0x00 | BRF_OPT },           // 15
+
+	{ "a-pal16l8.bin",		0x00104, 0x1358c513, 0x00 | BRF_OPT },           // 16
+};
+
+STD_ROM_PICK(hharryb)
+STD_ROM_FN(hharryb)
+
+struct BurnDriver BurnDrvHharryb = {
+	"hharryb", "hharry", NULL, NULL, "1990",
+	"Hammerin' Harry (World, M84 hardware bootleg)\0", NULL, "bootleg", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
+	NULL, hharrybRomInfo, hharrybRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
+	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Daiku no Gensan (Japan, M84 hardware)
+
+static struct BurnRomInfo dkgensanRomDesc[] = {
+	{ "gen-a-h0.bin",	0x20000, 0x07a45f6d, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "gen-a-l0.bin",	0x20000, 0x46478fea, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "gen-a-h1.bin",	0x10000, 0x54e5b73c, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "gen-a-l1.bin",	0x10000, 0x894f8a9f, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "gen-a-sp.bin",	0x10000, 0xe83cfc2c, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  6
+	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  7
+	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  8
+
+	{ "hh_a0.rom",		0x20000, 0xc577ba5f, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "hh_a1.rom",		0x20000, 0x429d12ab, 0x03 | BRF_GRA },           // 10
+	{ "hh_a2.rom",		0x20000, 0xb5b163b0, 0x03 | BRF_GRA },           // 11
+	{ "hh_a3.rom",		0x20000, 0x8ef566a1, 0x03 | BRF_GRA },           // 12
+
+	{ "gen-vo.bin",		0x20000, 0xd8595c66, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(dkgensan)
+STD_ROM_FN(dkgensan)
+
+struct BurnDriver BurnDrvDkgensan = {
+	"dkgensan", "hharry", NULL, NULL, "1990",
+	"Daiku no Gensan (Japan, M84 hardware)\0", NULL, "Irem", "Irem M82",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
+	NULL, dkgensanRomInfo, dkgensanRomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
+	hharryuInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Daiku no Gensan (Japan, M72 hardware)
+
+static struct BurnRomInfo dkgensanm72RomDesc[] = {
+	{ "ge72-h0.bin",	0x20000, 0xa0ad992c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ge72-l0.bin",	0x20000, 0x996396f0, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "ge72-h3.bin",	0x10000, 0xd8b86005, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "ge72-l3.bin",	0x10000, 0x23d303a5, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "hh_00.rom",		0x20000, 0xec5127ef, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "hh_10.rom",		0x20000, 0xdef65294, 0x02 | BRF_GRA },           //  5
+	{ "hh_20.rom",		0x20000, 0xbb0d6ad4, 0x02 | BRF_GRA },           //  6
+	{ "hh_30.rom",		0x20000, 0x4351044e, 0x02 | BRF_GRA },           //  7
+
+	{ "ge72b-a0.bin",	0x10000, 0xf5f56b2a, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "ge72-a1.bin",	0x10000, 0xd194ea08, 0x03 | BRF_GRA },           //  9
+	{ "ge72-a2.bin",	0x10000, 0x2b06bcc3, 0x03 | BRF_GRA },           // 10
+	{ "ge72-a3.bin",	0x10000, 0x94b96bfa, 0x03 | BRF_GRA },           // 11
+
+	{ "ge72-b0.bin",	0x10000, 0x208796b3, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "ge72-b1.bin",	0x10000, 0xb4a7f490, 0x04 | BRF_GRA },           // 13
+	{ "ge72b-b2.bin",	0x10000, 0x34fe8f7f, 0x04 | BRF_GRA },           // 14
+	{ "ge72b-b3.bin",	0x10000, 0x4b0e92f4, 0x04 | BRF_GRA },           // 15
+
+	{ "gen-vo.bin",		0x20000, 0xd8595c66, 0x05 | BRF_SND },           // 16 DAC Samples
+
+	{ "dkgenm72_i8751.mcu",	0x10000, 0x00000000, 0x00 | BRF_OPT | BRF_NODUMP }, // 17 i8751 microcontroller
+};
+
+STD_ROM_PICK(dkgensanm72)
+STD_ROM_FN(dkgensanm72)
+
+static INT32 dkgensanm72Init()
+{
+	install_protection(dkgenm72);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, dbreedm72RomLoadCallback, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvDkgensanm72 = {
+	"dkgensanm72", "hharry", NULL, NULL, "1990",
+	"Daiku no Gensan (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT | GBF_PLATFORM, 0,
+	NULL, dkgensanm72RomInfo, dkgensanm72RomName, NULL, NULL, NULL, NULL, CommonInputInfo, HharryDIPInfo,
+	dkgensanm72Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Lightning Swords
+
+static struct BurnRomInfo ltswordsRomDesc[] = {
+	{ "h0.ic55",		0x20000, 0x22f342b2, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "l0.ic61",		0x20000, 0x0210d592, 0x01 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
+
+	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
+	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
+	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
+	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
+
+	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
+	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
+	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
+	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
+
+	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
+};
+
+STD_ROM_PICK(ltswords)
+STD_ROM_FN(ltswords)
+
+static INT32 kengoInit()
+{
+	INT32 nRet = DrvInit(hharryu_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 5);
+
+	if (nRet == 0) {
+		Kengo = 1;
+		Clock_16mhz = 1;
+		VezOpen(0);
+		VezSetDecode((UINT8 *)&gunforce_decryption_table);
+		VezClose();
+	}
+
+	return nRet;
+}
+
+struct BurnDriver BurnDrvLtswords = {
+	"ltswords", NULL, NULL, NULL, "1991",
+	"Lightning Swords\0", NULL, "Irem", "Irem M84?",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
+	NULL, ltswordsRomInfo, ltswordsRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
+	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Ken-Go (set 1)
+
+static struct BurnRomInfo kengoRomDesc[] = {
+	{ "ken_d-h0.rom",	0x20000, 0xf4ddeea5, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ken_d-l0.rom",	0x20000, 0x04dc0f81, 0x01 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
+
+	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
+	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
+	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
+	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
+
+	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
+	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
+	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
+	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
+
+	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
+};
+
+STD_ROM_PICK(kengo)
+STD_ROM_FN(kengo)
+
+struct BurnDriver BurnDrvKengo = {
+	"kengo", "ltswords", NULL, NULL, "1991",
+	"Ken-Go (set 1)\0", NULL, "Irem", "Irem M84?",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
+	NULL, kengoRomInfo, kengoRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
+	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Ken-Go (set 2)
+
+static struct BurnRomInfo kengoaRomDesc[] = {
+	{ "ken-d-h0-.ic55",	0x20000, 0xed3da88c, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ken-d-l0-.ic61",	0x20000, 0x92c57d8e, 0x01 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "ken_d-sp.rom",	0x10000, 0x233ca1cf, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
+
+	{ "ken_m31.rom",	0x20000, 0xe00b95a6, 0x02 | BRF_GRA },           //  3 Sprites
+	{ "ken_m21.rom",	0x20000, 0xd7722f87, 0x02 | BRF_GRA },           //  4
+	{ "ken_m32.rom",	0x20000, 0x30a844c4, 0x02 | BRF_GRA },           //  5
+	{ "ken_m22.rom",	0x20000, 0xa00dac85, 0x02 | BRF_GRA },           //  6
+
+	{ "ken_m51.rom",	0x20000, 0x1646cf4f, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
+	{ "ken_m57.rom",	0x20000, 0xa9f88d90, 0x03 | BRF_GRA },           //  8
+	{ "ken_m66.rom",	0x20000, 0xe9d17645, 0x03 | BRF_GRA },           //  9
+	{ "ken_m64.rom",	0x20000, 0xdf46709b, 0x03 | BRF_GRA },           // 10
+
+	{ "ken_m14.rom",	0x20000, 0x6651e9b7, 0x05 | BRF_SND },           // 11 DAC Samples
+	
+	{ "ken_b-4n-.ic23",	0x00100, 0xb460c438, 0x00 | BRF_OPT },           // 12 Proms
+	{ "ken_b-4p-.ic24",	0x00100, 0x526f10ca, 0x00 | BRF_OPT },           // 13 
+};
+
+STD_ROM_PICK(kengoa)
+STD_ROM_FN(kengoa)
+
+struct BurnDriver BurnDrvKengoa = {
+	"kengoa", "ltswords", NULL, NULL, "1991",
+	"Ken-Go (set 2)\0", NULL, "Irem", "Irem M84?",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SCRFIGHT, 0,
+	NULL, kengoaRomInfo, kengoaRomName, NULL, NULL, NULL, NULL, CommonInputInfo, KengoDIPInfo,
+	kengoInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Cosmic Cop (World)
+
+static struct BurnRomInfo cosmccopRomDesc[] = {
+	{ "cc-d-h0b.bin",	0x40000, 0x38958b01, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "cc-d-l0b.bin",	0x40000, 0xeff87f70, 0x01 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "cc-d-sp.bin",	0x10000, 0x3e3ace60, 0x06 | BRF_PRG | BRF_ESS }, //  2 Z80 Code
+
+	{ "cc-c-00.bin",	0x20000, 0x9d99deaa, 0x02 | BRF_GRA },           //  3 Sprites
+	{ "cc-c-10.bin",	0x20000, 0x7eb083ed, 0x02 | BRF_GRA },           //  4
+	{ "cc-c-20.bin",	0x20000, 0x9421489e, 0x02 | BRF_GRA },           //  5
+	{ "cc-c-30.bin",	0x20000, 0x920ec735, 0x02 | BRF_GRA },           //  6
+
+	{ "cc-d-g00.bin",	0x20000, 0xe7f3d772, 0x03 | BRF_GRA },           //  7 Foreground & Background Tiles
+	{ "cc-d-g10.bin",	0x20000, 0x418b4e4c, 0x03 | BRF_GRA },           //  8
+	{ "cc-d-g20.bin",	0x20000, 0xa4b558eb, 0x03 | BRF_GRA },           //  9
+	{ "cc-d-g30.bin",	0x20000, 0xf64a3166, 0x03 | BRF_GRA },           // 10
+
+	{ "cc-c-v0.bin",	0x20000, 0x6247bade, 0x05 | BRF_SND },           // 11 DAC Samples
+};
+
+STD_ROM_PICK(cosmccop)
+STD_ROM_FN(cosmccop)
+
+static INT32 cosmccopInit()
+{
+	Clock_16mhz = 1;
+
+	INT32 rc = DrvInit(hharryu_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 7);
+
+	m72_irq_base = 0x60; // Cosmic Cop doesn't write to port 0x42 (irq config), set it manually. (after DrvInit()!)
+	CosmicCop = 1;
+
+	return rc;
+}
+
+struct BurnDriver BurnDrvCosmccop = {
+	"cosmccop", NULL, NULL, NULL, "1991",
+	"Cosmic Cop (World)\0", NULL, "Irem", "Irem M84",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, cosmccopRomInfo, cosmccopRomName, NULL, NULL, NULL, NULL, CommonInputInfo, GallopDIPInfo,
+	cosmccopInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Gallop - Armed police Unit (Japan, M72 hardware)
+
+static struct BurnRomInfo gallopRomDesc[] = {
+	{ "cc-c-h0.ic40",	0x20000, 0x2217dcd0, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "cc-c-l0.ic37",	0x20000, 0xff39d7fb, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "cc-c-h3.ic43",	0x20000, 0x9b2bbab9, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "cc-c-l3.ic34",	0x20000, 0xacd3278e, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "cc-c-00.ic53",	0x20000, 0x9d99deaa, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "cc-c-10.ic51",	0x20000, 0x7eb083ed, 0x02 | BRF_GRA },           //  5
+	{ "cc-c-20.ic49",	0x20000, 0x9421489e, 0x02 | BRF_GRA },           //  6
+	{ "cc-c-30.ic47",	0x20000, 0x920ec735, 0x02 | BRF_GRA },           //  7
+
+	{ "cc-b-a0.ic21",	0x10000, 0xa33472bd, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "cc-b-a1.ic22",	0x10000, 0x118b1f2d, 0x03 | BRF_GRA },           //  9
+	{ "cc-b-a2.ic20",	0x10000, 0x83cebf48, 0x03 | BRF_GRA },           // 10
+	{ "cc-b-a3.ic23",	0x10000, 0x572903fc, 0x03 | BRF_GRA },           // 11
+
+	{ "cc-b-b0.ic26",	0x10000, 0x0df5b439, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "cc-b-b1.ic27",	0x10000, 0x010b778f, 0x04 | BRF_GRA },           // 13
+	{ "cc-b-b2.ic25",	0x10000, 0xbda9f6fb, 0x04 | BRF_GRA },           // 14
+	{ "cc-b-b3.ic24",	0x10000, 0xd361ba3f, 0x04 | BRF_GRA },           // 15
+
+	{ "cc-c-v0.ic44",	0x20000, 0x6247bade, 0x05 | BRF_SND },           // 16 DAC Samples
+	
+	{ "cc_c-pr-.ic1", 	0x10000, 0x00000000, BRF_NODUMP | BRF_OPT },	 // i8751 microcontroller
+};
+
+STD_ROM_PICK(gallop)
+STD_ROM_FN(gallop)
+
+static INT32 gallopInit()
+{
+	protection_sample_offsets = gallop_sample_offsets;
+	Clock_16mhz = 1;
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvGallop = {
+	"gallop", "cosmccop", NULL, NULL, "1991",
+	"Gallop - Armed police Unit (Japan, M72 hardware)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_HORSHOOT, 0,
+	NULL, gallopRomInfo, gallopRomName, NULL, NULL, NULL, NULL, CommonInputInfo, GallopDIPInfo,
+	gallopInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+
+// Legend of Hero Tonma
+
+static struct BurnRomInfo lohtRomDesc[] = {
+	{ "tom_c-h0-b.ic40",	0x20000, 0xa63204b6, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "tom_c-l0-b.ic37",	0x20000, 0xe788002f, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "tom_c-h3-.ic43",		0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "tom_c-l3-.ic34",		0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "tom_m53.ic53",	0x20000, 0x0b83265f, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "tom_m51.ic51",	0x20000, 0x8ec5f6f3, 0x02 | BRF_GRA },           //  5
+	{ "tom_m49.ic49",	0x20000, 0xa41d3bfd, 0x02 | BRF_GRA },           //  6
+	{ "tom_m47.ic47",	0x20000, 0x9d81a25b, 0x02 | BRF_GRA },           //  7
+
+	{ "tom_m21.ic21",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "tom_m22.ic22",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           //  9
+	{ "tom_m20.ic20",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 10
+	{ "tom_m23.ic23",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 11
+
+	{ "tom_m26.ic26",	0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "tom_m27.ic27",	0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 13
+	{ "tom_m25.ic25",	0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 14
+	{ "tom_m24.ic24",	0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 15
+
+	{ "tom_m44.ic44",	0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 16 DAC Samples
+
+	{ "tom_c-pr-b.ic1",	0x01000, 0x9c9545f1, 0x00 | BRF_OPT },           // 17 i8751 microcontroller
+};
+
+STD_ROM_PICK(loht)
+STD_ROM_FN(loht)
+
+static INT32 lohtInit()
+{
+	install_protection(loht);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, NULL, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvLoht = {
+	"loht", NULL, NULL, NULL, "1989",
+	"Legend of Hero Tonma\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
+	NULL, lohtRomInfo, lohtRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
+	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Legend of Hero Tonma (Japan)
+
+static struct BurnRomInfo lohtjRomDesc[] = {
+	{ "tom_c-h0-",	0x20000, 0x2a752998, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "tom_c-l0-",	0x20000, 0xa224d928, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "tom_c-h3-",	0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "tom_c-l3-",	0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "r200",		0x20000, 0x0b83265f, 0x02 | BRF_GRA },           //  4 Sprites
+	{ "r210",		0x20000, 0x8ec5f6f3, 0x02 | BRF_GRA },           //  5
+	{ "r220",		0x20000, 0xa41d3bfd, 0x02 | BRF_GRA },           //  6
+	{ "r230",		0x20000, 0x9d81a25b, 0x02 | BRF_GRA },           //  7
+
+	{ "r2a0.a0",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           //  8 Foreground Tiles
+	{ "r2a1.a1",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           //  9
+	{ "r2a2.a2",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 10
+	{ "r2a3.a3",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 11
+
+	{ "078.b0",		0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 12 Background Tiles
+	{ "079.b1",		0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 13
+	{ "080.b2",		0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 14
+	{ "081.b3",		0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 15
+
+	{ "082",		0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 16 DAC Samples
+
+	{ "tom_c-pr-.ic1",	0x01000, 0x9fa9b496, 0x00 | BRF_OPT },       // 17 i8751 microcontroller
+};
+
+STD_ROM_PICK(lohtj)
+STD_ROM_FN(lohtj)
+
+struct BurnDriver BurnDrvLohtj = {
+	"lohtj", "loht", NULL, NULL, "1989",
+	"Legend of Hero Tonma (Japan)\0", NULL, "Irem", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
+	NULL, lohtjRomInfo, lohtjRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
+	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+static INT32 lohtbRomLoadCallback()
+{
+	// Hack the program rom to work for now
+	UINT8 _0x400[216] = {
+		0xFA, 0xB9, 0xFF, 0xFF, 0xE2, 0xFE, 0xB8, 0x17, 0x00, 0xE7, 0x40, 0xB8, 0x20, 0x00, 0xE7, 0x42, 
+		0xB8, 0x0F, 0x00, 0xE7, 0x42, 0xB8, 0x00, 0xA0, 0x8E, 0xD0, 0x8E, 0xD8, 0xBE, 0x00, 0x3F, 0xB0, 
+		0x00, 0x88, 0x04, 0x3A, 0x04, 0x75, 0x08, 0x46, 0xFE, 0xC0, 0x75, 0xF5, 0xE9, 0x18, 0x00, 0x33, 
+		0xF6, 0xE9, 0x03, 0x00, 0xBE, 0x40, 0x00, 0xB8, 0x00, 0xB0, 0x8E, 0xD8, 0xC7, 0x06, 0xFE, 0x0F, 
+		0x00, 0x00, 0xEA, 0x62, 0x11, 0x00, 0x00, 0xE5, 0x04, 0x0F, 0x19, 0xC0, 0x0F, 0x74, 0xE0, 0xBC, 
+		0x00, 0x40, 0x33, 0xDB, 0xB9, 0x00, 0x10, 0xB8, 0x00, 0xB0, 0x8E, 0xD8, 0x8A, 0xC3, 0x02, 0xC7, 
+		0x88, 0x07, 0x43, 0xE2, 0xF7, 0x33, 0xC9, 0xFE, 0xC9, 0x75, 0xFC, 0xFE, 0xCD, 0x75, 0xF8, 0x33, 
+		0xDB, 0xB9, 0x00, 0x10, 0x8A, 0xC3, 0x02, 0xC7, 0x34, 0xFF, 0x3A, 0x07, 0x75, 0xB6, 0x43, 0xE2, 
+		0xF3, 0x33, 0xDB, 0xB9, 0xFC, 0x0F, 0xFE, 0x07, 0x43, 0xE2, 0xFB, 0x90, 0x90, 0x90, 0x9A, 0x00, 
+		0x00, 0x00, 0xB0, 0x73, 0xF6, 0x90, 0x90, 0x90, 0xB8, 0x00, 0xB0, 0x8E, 0xC0, 0x33, 0xD2, 0x42, 
+		0x81, 0xE2, 0x01, 0x00, 0xBF, 0xB2, 0x04, 0xE8, 0x7B, 0x00, 0xE8, 0x3E, 0x00, 0xEB, 0xF0, 0x90, 
+		0x90, 0x90, 0x0B, 0x38, 0x29, 0x43, 0x4F, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x31, 
+		0x39, 0x38, 0x39, 0x20, 0x49, 0x52, 0x45, 0x4D, 0x20, 0x43, 0x4F, 0x52, 0x50, 0x4F, 0x52, 0x41, 
+		0x54, 0x49, 0x4F, 0x4E, 0x0B, 0x50, 0x2B, 0x41
+	};
+
+	memcpy (DrvV30ROM + 0x00400, _0x400, 216);
+
+	DrvV30ROM[0x3FC] = 0x88;
+	DrvV30ROM[0x3FD] = 0x05;
+	DrvV30ROM[0xB42] = 0x1E;
+	DrvV30ROM[0xB43] = 0x06;
+	DrvV30ROM[0xB44] = 0xB8;
+	DrvV30ROM[0x405B] = 0x05;
+	DrvV30ROM[0x4066] = 0x05;
+	DrvV30ROM[0x103DA] = 0xB0;
+	DrvV30ROM[0x103DD] = 0xFE;
+	DrvV30ROM[0x103DE] = 0x06;
+	DrvV30ROM[0x103DF] = 0xFE;
+	DrvV30ROM[0x103E0] = 0x0F;
+	DrvV30ROM[0x103E1] = 0xE5;
+	DrvV30ROM[0x103E2] = 0x02;
+	DrvV30ROM[0x103E3] = 0xA9;
+	DrvV30ROM[0x103E4] = 0x20;
+	DrvV30ROM[0x103E5] = 0x00;
+	DrvV30ROM[0x103E6] = 0x75;
+	DrvV30ROM[0x103E7] = 0x05;
+	DrvV30ROM[0x103E8] = 0xEA;
+	DrvV30ROM[0x103E9] = 0x2F;
+	DrvV30ROM[0x103EA] = 0x04;
+	DrvV30ROM[0x103EB] = 0x00;
+	DrvV30ROM[0x103EC] = 0x00;
+	DrvV30ROM[0x103ED] = 0xB8;
+	DrvV30ROM[0x10459] = 0xE7;
+	DrvV30ROM[0x1045A] = 0x04;
+	DrvV30ROM[0x1045B] = 0xE5;
+	DrvV30ROM[0x1045C] = 0x02;
+	DrvV30ROM[0x1045D] = 0x25;
+	DrvV30ROM[0x1045E] = 0x80;
+	DrvV30ROM[0x1045F] = 0x00;
+	DrvV30ROM[0x10460] = 0x74;
+	DrvV30ROM[0x10461] = 0xF9;
+	DrvV30ROM[0x10462] = 0x36;
+	DrvV30ROM[0x10463] = 0xA1;
+	DrvV30ROM[0x10464] = 0xB2;
+	DrvV30ROM[0x10465] = 0x23;
+	DrvV30ROM[0x10466] = 0xE7;
+	DrvV30ROM[0x10467] = 0x82;
+	DrvV30ROM[0x10468] = 0x36;
+	DrvV30ROM[0x10469] = 0xA1;
+	DrvV30ROM[0x1046A] = 0xB6;
+	DrvV30ROM[0x1046B] = 0x23;
+	DrvV30ROM[0x1046C] = 0xE7;
+	DrvV30ROM[0x104B4] = 0x32;
+	DrvV30ROM[0x104B5] = 0xE4;
+	DrvV30ROM[0x104B6] = 0x3C;
+	DrvV30ROM[0x104B7] = 0x7F;
+	DrvV30ROM[0x104B8] = 0x72;
+	DrvV30ROM[0x10577] = 0x47;
+	DrvV30ROM[0x10578] = 0xDC;
+	DrvV30ROM[0x10585] = 0x61;
+	DrvV30ROM[0x10586] = 0x07;
+	DrvV30ROM[0x10587] = 0x1F;
+	DrvV30ROM[0x10599] = 0x00;
+	DrvV30ROM[0x10793] = 0xE7;
+	DrvV30ROM[0x10794] = 0x02;
+	DrvV30ROM[0x1E1C0] = 0xBA;
+	DrvV30ROM[0x1EA29] = 0xE7;
+	DrvV30ROM[0x1EA2A] = 0x02;
+
+	// invert graphics roms
+	for (INT32 i = 0; i < 0x80000; i++) {
+		DrvGfxROM1[i] ^= 0x0f;
+		DrvGfxROM2[i] ^= 0x0f;
+	}
+
+	return 0;
+}
+
+// Legend of Hero Tonma (bootleg, set 1)
+
+static struct BurnRomInfo lohtbRomDesc[] = {
+	{ "lohtb03.b",			0x20000, 0x8b845a70, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "lohtb05.d",			0x20000, 0xe90f7623, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "lohtb02.a",			0x20000, 0x714778b5, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "lohtb04.c",			0x20000, 0x2f049b03, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "lohtb01.02",			0x10000, 0xe4bd8f03, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "lohtb14.11",			0x10000, 0xdf5ac5ee, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "lohtb18.15",			0x10000, 0xd7ecf849, 0x02 | BRF_GRA },           //  6
+	{ "lohtb15.12",			0x10000, 0x45220b01, 0x02 | BRF_GRA },           //  7
+	{ "lohtb19.16",			0x10000, 0x35d1a808, 0x02 | BRF_GRA },           //  8
+	{ "lohtb16.13",			0x10000, 0x25b85cfc, 0x02 | BRF_GRA },           //  9
+	{ "lohtb20.17",			0x10000, 0x464d8579, 0x02 | BRF_GRA },           // 10
+	{ "lohtb17.14",			0x10000, 0x763fa4ec, 0x02 | BRF_GRA },           // 11
+	{ "lohtb21.18",			0x10000, 0xa73568c7, 0x02 | BRF_GRA },           // 12
+
+	{ "lohtb13.10",			0x10000, 0x359f17d4, 0x03 | BRF_GRA },           // 13 Foreground Tiles
+	{ "lohtb11.08",			0x10000, 0x73391e8a, 0x03 | BRF_GRA },           // 14
+	{ "lohtb09.06",			0x10000, 0x7096d390, 0x03 | BRF_GRA },           // 15
+	{ "lohtb07.04",			0x10000, 0x71a27b81, 0x03 | BRF_GRA },           // 16
+
+	{ "lohtb12.09",			0x10000, 0x4d5e9b53, 0x04 | BRF_GRA },           // 17 Background Tiles
+	{ "lohtb10.07",			0x10000, 0x4f75a26a, 0x04 | BRF_GRA },           // 18
+	{ "lohtb08.05",			0x10000, 0x34854262, 0x04 | BRF_GRA },           // 19
+	{ "lohtb06.03",			0x10000, 0xf923183c, 0x04 | BRF_GRA },           // 20
+
+	{ "gal16v8-25qp.ic3",	0x00117, 0x6acdfafb, 0x00 | BRF_OPT },
+};
+
+STD_ROM_PICK(lohtb)
+STD_ROM_FN(lohtb)
+
+static INT32 lohtbInit()
+{
+	install_protection(loht);
+
+	return DrvInit(common_080000_0a0000, sound_ram_map, lohtbRomLoadCallback, Z80_FAKE_NMI, 0);
+}
+
+struct BurnDriver BurnDrvLohtb = {
+	"lohtb", "loht", NULL, NULL, "1989",
+	"Legend of Hero Tonma (bootleg, set 1)\0", NULL, "bootleg", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
+	NULL, lohtbRomInfo, lohtbRomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
+	lohtbInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Legend of Hero Tonma (bootleg, set 2)
+
+static struct BurnRomInfo lohtb2RomDesc[] = {
+	{ "loht-a2.bin",	0x10000, 0xccc90e54, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "loht-a10.bin",	0x10000, 0x3aa06730, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "loht-a3.bin",	0x10000, 0xff8a98de, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "loht-a11.bin",	0x10000, 0xeab1d7bc, 0x01 | BRF_PRG | BRF_ESS }, //  3
+	{ "loht-a5.bin",	0x10000, 0x79e007ec, 0x01 | BRF_PRG | BRF_ESS }, //  4
+	{ "loht-a13.bin",	0x10000, 0xb951346e, 0x01 | BRF_PRG | BRF_ESS }, //  5
+	{ "loht-a4.bin",	0x10000, 0x254ea4d5, 0x01 | BRF_PRG | BRF_ESS }, //  6
+	{ "loht-a12.bin",	0x10000, 0xcfb0390d, 0x01 | BRF_PRG | BRF_ESS }, //  7
+
+	{ "loht-a16.bin",	0x10000, 0xdf5ac5ee, 0x02 | BRF_GRA },           //  8 Sprites
+	{ "loht-a17.bin",	0x10000, 0xd7ecf849, 0x02 | BRF_GRA },           //  9
+	{ "loht-a8.bin",	0x10000, 0x45220b01, 0x02 | BRF_GRA },           // 10
+	{ "loht-a9.bin",	0x10000, 0x4af9bb3c, 0x02 | BRF_GRA },           // 11
+	{ "loht-a14.bin",	0x10000, 0x25b85cfc, 0x02 | BRF_GRA },           // 12
+	{ "loht-a15.bin",	0x10000, 0x464d8579, 0x02 | BRF_GRA },           // 13
+	{ "loht-a6.bin",	0x10000, 0x763fa4ec, 0x02 | BRF_GRA },           // 14
+	{ "loht-a7.bin",	0x10000, 0xa73568c7, 0x02 | BRF_GRA },           // 15
+
+	{ "loht-a19.bin",	0x10000, 0x3ca3e771, 0x03 | BRF_GRA },           // 16 Foreground Tiles
+	{ "loht-a20.bin",	0x10000, 0x7a05ee2f, 0x03 | BRF_GRA },           // 17
+	{ "loht-a18.bin",	0x10000, 0x79aa2335, 0x03 | BRF_GRA },           // 18
+	{ "loht-a21.bin",	0x10000, 0x789e8b24, 0x03 | BRF_GRA },           // 19
+
+	{ "loht-a24.bin",	0x10000, 0x44626bf6, 0x04 | BRF_GRA },           // 20 Background Tiles
+	{ "loht-a25.bin",	0x10000, 0x464952cf, 0x04 | BRF_GRA },           // 21
+	{ "loht-a23.bin",	0x10000, 0x3db9b2c7, 0x04 | BRF_GRA },           // 22
+	{ "loht-a22.bin",	0x10000, 0xf01fe899, 0x04 | BRF_GRA },           // 23
+
+	{ "loht-a1.bin",	0x10000, 0x3ed51d1f, 0x05 | BRF_SND },           // 24 DAC Samples
+
+	{ "loht-a26.bin",	0x02000, 0xac901e17, 0x00 | BRF_OPT },           // 25 i8751 microcontroller
+};
+
+STD_ROM_PICK(lohtb2)
+STD_ROM_FN(lohtb2)
+
+struct BurnDriver BurnDrvLohtb2 = {
+	"lohtb2", "loht", NULL, NULL, "1989",
+	"Legend of Hero Tonma (bootleg, set 2)\0", NULL, "bootleg", "Irem M72",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_IREM_M72, GBF_RUNGUN, 0,
+	NULL, lohtb2RomInfo, lohtb2RomName, NULL, NULL, NULL, NULL, CommonInputInfo, LohtDIPInfo,
+	lohtInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Pound for Pound (World)
+
+static struct BurnRomInfo poundforRomDesc[] = {
+	{ "ppa-h0-b.9e",	0x20000, 0x50d4a2d8, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ppa-l0-b.9d",	0x20000, 0xbd997942, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
+	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
+	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
+
+	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
+	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
+	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
+
+	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(poundfor)
+STD_ROM_FN(poundfor)
+
+static INT32 poundforInit()
+{
+	INT32 rc = DrvInit(rtype2_main_cpu_map, sound_rom_map, NULL, Z80_FAKE_NMI, 4);
+
+	if (!rc) {
+		Poundfor = 1;
+		BurnTrackballInit(2);
+	}
+
+	return rc;
+}
+
+struct BurnDriver BurnDrvPoundfor = {
+	"poundfor", NULL, NULL, NULL, "1990",
+	"Pound for Pound (World)\0", NULL, "Irem", "Irem M85",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
+	NULL, poundforRomInfo, poundforRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
+	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Pound for Pound (Japan)
+
+static struct BurnRomInfo poundforjRomDesc[] = {
+	{ "ppa-h0-.9e",		0x20000, 0xf0165e3b, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ppa-l0-.9d",		0x20000, 0xf954f99f, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
+	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
+	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
+
+	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
+	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
+	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
+
+	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(poundforj)
+STD_ROM_FN(poundforj)
+
+struct BurnDriver BurnDrvPoundforj = {
+	"poundforj", "poundfor", NULL, NULL, "1990",
+	"Pound for Pound (Japan)\0", NULL, "Irem", "Irem M85",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
+	NULL, poundforjRomInfo, poundforjRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
+	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Pound for Pound (US)
+
+static struct BurnRomInfo poundforuRomDesc[] = {
+	{ "ppa-ho-a.9e",	0x20000, 0xff4c83a4, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "ppa-lo-a.9d",	0x20000, 0x3374ce8f, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "ppa-h1.9f",		0x20000, 0xf6c82f48, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "ppa-l1.9c",		0x20000, 0x5b07b087, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "ppa-sp.4j",		0x10000, 0x3f458a5b, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "ppb-n0.bin",		0x40000, 0x951a41f8, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "ppb-n1.bin",		0x40000, 0xc609b7f2, 0x02 | BRF_GRA },           //  6
+	{ "ppb-n2.bin",		0x40000, 0x318c0b5f, 0x02 | BRF_GRA },           //  7
+	{ "ppb-n3.bin",		0x40000, 0x93dc9490, 0x02 | BRF_GRA },           //  8
+
+	{ "ppa-g00.bin",	0x20000, 0x8a88a174, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "ppa-g10.bin",	0x20000, 0xe48a66ac, 0x03 | BRF_GRA },           // 10
+	{ "ppa-g20.bin",	0x20000, 0x12b93e79, 0x03 | BRF_GRA },           // 11
+	{ "ppa-g30.bin",	0x20000, 0xfaa39aee, 0x03 | BRF_GRA },           // 12
+
+	{ "ppa-v0.bin",		0x40000, 0x03321664, 0x05 | BRF_SND },           // 13 DAC Samples
+};
+
+STD_ROM_PICK(poundforu)
+STD_ROM_FN(poundforu)
+
+struct BurnDriver BurnDrvPoundforu = {
+	"poundforu", "poundfor", NULL, NULL, "1990",
+	"Pound for Pound (US)\0", NULL, "Irem America", "Irem M85",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
+	NULL, poundforuRomInfo, poundforuRomName, NULL, NULL, NULL, NULL, PoundforInputInfo, PoundforDIPInfo,
+	poundforInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	256, 384, 3, 4
+};
+
+
+// Major Title (World)
+
+static struct BurnRomInfo majtitleRomDesc[] = {
+	{ "mt_h0-a.bin",	0x20000, 0x36aadb67, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "mt_l0-a.bin",	0x20000, 0x2e1b6242, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "mt_h1-a.bin",	0x20000, 0xe1402a22, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "mt_l1-a.bin",	0x20000, 0x0efa409a, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "mt_sp.bin",		0x10000, 0xe44260a9, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "mt_n0.bin",		0x40000, 0x5618cddc, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "mt_n1.bin",		0x40000, 0x483b873b, 0x02 | BRF_GRA },           //  6
+	{ "mt_n2.bin",		0x40000, 0x4f5d665b, 0x02 | BRF_GRA },           //  7
+	{ "mt_n3.bin",		0x40000, 0x83571549, 0x02 | BRF_GRA },           //  8
+
+	{ "mt_c0.bin",		0x20000, 0x780e7a02, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "mt_c1.bin",		0x20000, 0x45ad1381, 0x03 | BRF_GRA },           // 10
+	{ "mt_c2.bin",		0x20000, 0x5df5856d, 0x03 | BRF_GRA },           // 11
+	{ "mt_c3.bin",		0x20000, 0xf5316cc8, 0x03 | BRF_GRA },           // 12
+
+	{ "mt_f0.bin",		0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 13 Sprites
+	{ "mt_f1.bin",		0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 14
+	{ "mt_f2.bin",		0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 15
+	{ "mt_f3.bin",		0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 16
+
+	{ "mt_vo.bin",		0x20000, 0xeb24bb2c, 0x05 | BRF_SND },           // 17 DAC Samples
+};
+
+STD_ROM_PICK(majtitle)
+STD_ROM_FN(majtitle)
+
+static INT32 majtitleInit()
+{
+	return DrvInit(majtitle_main_cpu_map, sound_rom_map, NULL, Z80_REAL_NMI, 3);
+}
+
+struct BurnDriver BurnDrvMajtitle = {
+	"majtitle", NULL, NULL, NULL, "1990",
+	"Major Title (World)\0", NULL, "Irem", "Irem M84",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
+	NULL, majtitleRomInfo, majtitleRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
+	majtitleInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
+
+
+// Major Title (Japan)
+
+static struct BurnRomInfo majtitlejRomDesc[] = {
+	{ "mt_h0.bin",		0x20000, 0xb9682c70, 0x01 | BRF_PRG | BRF_ESS }, //  0 V30 Code
+	{ "mt_l0.bin",		0x20000, 0x702c9fd6, 0x01 | BRF_PRG | BRF_ESS }, //  1
+	{ "mt_h1.bin",		0x20000, 0xd9e97c30, 0x01 | BRF_PRG | BRF_ESS }, //  2
+	{ "mt_l1.bin",		0x20000, 0x8dbd91b5, 0x01 | BRF_PRG | BRF_ESS }, //  3
+
+	{ "mt_sp.bin",		0x10000, 0xe44260a9, 0x06 | BRF_PRG | BRF_ESS }, //  4 Z80 Code
+
+	{ "mt_n0.bin",		0x40000, 0x5618cddc, 0x02 | BRF_GRA },           //  5 Sprites
+	{ "mt_n1.bin",		0x40000, 0x483b873b, 0x02 | BRF_GRA },           //  6
+	{ "mt_n2.bin",		0x40000, 0x4f5d665b, 0x02 | BRF_GRA },           //  7
+	{ "mt_n3.bin",		0x40000, 0x83571549, 0x02 | BRF_GRA },           //  8
+
+	{ "mt_c0.bin",		0x20000, 0x780e7a02, 0x03 | BRF_GRA },           //  9 Foreground & Background Tiles
+	{ "mt_c1.bin",		0x20000, 0x45ad1381, 0x03 | BRF_GRA },           // 10
+	{ "mt_c2.bin",		0x20000, 0x5df5856d, 0x03 | BRF_GRA },           // 11
+	{ "mt_c3.bin",		0x20000, 0xf5316cc8, 0x03 | BRF_GRA },           // 12
+
+	{ "mt_f0.bin",		0x20000, 0x2d5e05d5, 0x0e | BRF_GRA },           // 13 Sprites
+	{ "mt_f1.bin",		0x20000, 0xc68cd65f, 0x0e | BRF_GRA },           // 14
+	{ "mt_f2.bin",		0x20000, 0xa71feb2d, 0x0e | BRF_GRA },           // 15
+	{ "mt_f3.bin",		0x20000, 0x179f7562, 0x0e | BRF_GRA },           // 16
+
+	{ "mt_vo.bin",		0x20000, 0xeb24bb2c, 0x05 | BRF_SND },           // 17 DAC Samples
+};
+
+STD_ROM_PICK(majtitlej)
+STD_ROM_FN(majtitlej)
+
+struct BurnDriver BurnDrvMajtitlej = {
+	"majtitlej", "majtitle", NULL, NULL, "1990",
+	"Major Title (Japan)\0", NULL, "Irem", "Irem M84",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED | BDF_CLONE, 2, HARDWARE_IREM_M72, GBF_SPORTSMISC, 0,
+	NULL, majtitlejRomInfo, majtitlejRomName, NULL, NULL, NULL, NULL, CommonInputInfo, Rtype2DIPInfo,
+	majtitleInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x200,
+	384, 256, 4, 3
+};
diff --git a/src/burn/drv/megadrive/d_megadrive.cpp b/src/burn/drv/megadrive/d_megadrive.cpp
index f08be628c..64022efc7 100644
--- a/src/burn/drv/megadrive/d_megadrive.cpp
+++ b/src/burn/drv/megadrive/d_megadrive.cpp
@@ -52964,3 +52964,462 @@ struct BurnDriver BurnDrvmd_mworld4f = {
 	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
 	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
 };
+
+//============================================================
+//  Add Korean Translation
+//============================================================
+
+// GleyLancer (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/204/
+static struct BurnRomInfo md_gleylanckRomDesc[] = {
+	{ "advanced busterhawk gleylancer (korean translation).bin", 0x200000, 0x570ab2f6, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_gleylanck)
+STD_ROM_FN(md_gleylanck)
+
+struct BurnDriver BurnDrvmd_gleylanck = {
+	"md_gleylanck", "md_gleylanc", NULL, NULL, "2013",
+	"GleyLancer (Hack, Korean)\0", NULL, "NCS", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_gleylanckRomInfo, md_gleylanckRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Alisia Dragoon (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/216/
+static struct BurnRomInfo md_alisiadkRomDesc[] = {
+	{ "alisia dragoon (korean translation).bin", 0x180000, 0x8221762d, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_alisiadk)
+STD_ROM_FN(md_alisiadk)
+
+struct BurnDriver BurnDrvmd_alisiadk = {
+	"md_alisiadk", "md_alisiad", NULL, NULL, "2013",
+	"Alisia Dragoon (Hack, Korean)\0", NULL, "Game Arts", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_alisiadkRomInfo, md_alisiadkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Contra - The Hard Corps (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/223/
+static struct BurnRomInfo md_contrakRomDesc[] = {
+	{ "contra - the hard corps (korean translation).bin", 0x300000, 0xa634974f, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_contrak)
+STD_ROM_FN(md_contrak)
+
+struct BurnDriver BurnDrvmd_contrak = {
+	"md_contrak", "md_contra", NULL, NULL, "2013",
+	"Contra - The Hard Corps (Hack, Korean)\0", NULL, "Konami", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_RUNGUN, 0,
+	MegadriveGetZipName, md_contrakRomInfo, md_contrakRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// El Viento (Hack, Korean)
+// Source : http://nsm53p.tistory.com/366
+static struct BurnRomInfo md_elvientokRomDesc[] = {
+	{ "el viento (korean translation).bin", 0x100000, 0x5326ba55, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_elvientok)
+STD_ROM_FN(md_elvientok)
+
+struct BurnDriver BurnDrvmd_elvientok = {
+	"md_elvientok", "md_elviento", NULL, NULL, "2009",
+	"El Viento (Hack, Korean)\0", NULL, "Wolf Team", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_elvientokRomInfo, md_elvientokRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Elemental Master (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/218/
+static struct BurnRomInfo md_elemastkRomDesc[] = {
+	{ "elemental master (korean translation).bin", 0x100000, 0x777327a0, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_elemastk)
+STD_ROM_FN(md_elemastk)
+
+struct BurnDriver BurnDrvmd_elemastk = {
+	"md_elemastk", "md_elemast", NULL, NULL, "2013",
+	"Elemental Master (Hack, Korean)\0", NULL, "Technosoft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_elemastkRomInfo, md_elemastkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Exile - Toki no Hazama e (Hack, Korean)
+// Source : https://blog.naver.com/kkitty5425/221216185135
+static struct BurnRomInfo md_exilekRomDesc[] = {
+	{ "exile - toki no hazama e (korean translation).bin", 0x100000, 0xc00d63f2, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_exilek)
+STD_ROM_FN(md_exilek)
+
+struct BurnDriver BurnDrvmd_exilek = {
+	"md_exilek", "md_exile", NULL, NULL, "2018",
+	"Exile - Toki no Hazama e (Hack, Korean)\0", NULL, "Riot", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_exilekRomInfo, md_exilekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Gunstar Heroes (Hack, Korean)
+// Source : http://blog.naver.com/passion_pay/221071290170
+static struct BurnRomInfo md_gunstarkRomDesc[] = {
+	{ "gunstar heroes (korean translation).bin", 0x200000, 0x558b7747, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_gunstark)
+STD_ROM_FN(md_gunstark)
+
+struct BurnDriver BurnDrvmd_gunstark = {
+	"md_gunstark", "md_gunstar", NULL, NULL, "2017",
+	"Gunstar Heroes (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_RUNGUN, 0,
+	MegadriveGetZipName, md_gunstarkRomInfo, md_gunstarkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)
+static struct BurnRomInfo md_ddanpeikRomDesc[] = {
+	{ "honoo no toukyuuji - dodge danpei (korean translation).bin", 0x080000, 0xc80ac1aa, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_ddanpeik)
+STD_ROM_FN(md_ddanpeik)
+
+struct BurnDriver BurnDrvmd_ddanpeik = {
+	"md_ddanpeik", "md_ddanpei", NULL, NULL, "1992",
+	"Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_ddanpeikRomInfo, md_ddanpeikRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Landstalker - Koutei no Zaihou (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/205/
+static struct BurnRomInfo md_landstlkkRomDesc[] = {
+	{ "landstalker - koutei no zaihou (korean translation).bin", 0x260000, 0xe6540237, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_landstlkk)
+STD_ROM_FN(md_landstlkk)
+
+struct BurnDriver BurnDrvmd_landstlkk = {
+	"md_landstlkk", "md_landstlk", NULL, NULL, "2013",
+	"Landstalker - Koutei no Zaihou (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM | HARDWARE_SEGA_MEGADRIVE_SRAM_10000, GBF_MISC, 0,
+	MegadriveGetZipName, md_landstlkkRomInfo, md_landstlkkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Mugen Senshi Valis (Hack, Korean)
+// Source : http://nsm53p.tistory.com/220
+static struct BurnRomInfo md_valiskRomDesc[] = {
+	{ "mugen senshi valis (korean translation).bin", 0x100000, 0x3c1c1e94, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_valisk)
+STD_ROM_FN(md_valisk)
+
+struct BurnDriver BurnDrvmd_valisk = {
+	"md_valisk", "md_valis", NULL, NULL, "2009",
+	"Mugen Senshi Valis (Hack, Korean)\0", NULL, "Riot", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_valiskRomInfo, md_valiskRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)
+// Source : http://nsm53p.tistory.com/319
+static struct BurnRomInfo md_mushakRomDesc[] = {
+	{ "musha aleste - full metal fighter ellinor (korean translation).bin", 0x080000, 0xa0656a48, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_mushak)
+STD_ROM_FN(md_mushak)
+
+struct BurnDriver BurnDrvmd_mushak = {
+	"md_mushak", "md_musha", NULL, NULL, "2017",
+	"Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)\0", NULL, "Toaplan", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_mushakRomInfo, md_mushakRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Phantasy Star - Sennenki no Owari ni (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/222/
+static struct BurnRomInfo md_pstar4kRomDesc[] = {
+	{ "phantasy star - sennenki no owari ni (korean translation).bin", 0x400000, 0x360e046a, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_pstar4k)
+STD_ROM_FN(md_pstar4k)
+
+struct BurnDriver BurnDrvmd_pstar4k = {
+	"md_pstar4k", "md_pstar4", NULL, NULL, "2014",
+	"Phantasy Star - Sennenki no Owari ni (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_pstar4kRomInfo, md_pstar4kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/221/
+static struct BurnRomInfo md_pstar2kRomDesc[] = {
+	{ "phantasy star ii (korean translation).bin", 0x180000, 0x49ca9651, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_pstar2k)
+STD_ROM_FN(md_pstar2k)
+
+struct BurnDriver BurnDrvmd_pstar2k = {
+	"md_pstar2k", "md_pstar2", NULL, NULL, "2013",
+	"Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_pstar2kRomInfo, md_pstar2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// SD Valis (Hack, Korean)
+// Source : http://nsm53p.tistory.com/347
+static struct BurnRomInfo md_sdvaliskRomDesc[] = {
+	{ "sd valis (korean translation).bin", 0x080000, 0x85a3c219, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_sdvalisk)
+STD_ROM_FN(md_sdvalisk)
+
+struct BurnDriver BurnDrvmd_sdvalisk = {
+	"md_sdvalisk", "md_sydvalis", NULL, NULL, "2009",
+	"SD Valis (Hack, Korean)\0", NULL, "Laser Soft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_sdvaliskRomInfo, md_sdvaliskRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining and the Darkness (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/210/
+static struct BurnRomInfo md_shindarkkRomDesc[] = {
+	{ "shining and the darkness (korean translation).bin", 0x200000, 0xb7194909, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shindarkk)
+STD_ROM_FN(md_shindarkk)
+
+struct BurnDriver BurnDrvmd_shindarkk = {
+	"md_shindarkk", "md_shindark", NULL, NULL, "2013",
+	"Shining and the Darkness (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shindarkkRomInfo, md_shindarkkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining Force - Kamigami no Isan (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/211/
+static struct BurnRomInfo md_shinfrcekRomDesc[] = {
+	{ "shining force - kamigami no isan (korean translation).bin", 0x200000, 0xf8822813, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shinfrcek)
+STD_ROM_FN(md_shinfrcek)
+
+struct BurnDriver BurnDrvmd_shinfrcek = {
+	"md_shinfrcek", "md_shinfrce", NULL, NULL, "2013",
+	"Shining Force - Kamigami no Isan (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shinfrcekRomInfo, md_shinfrcekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Shining Force II - Koe no Fuuin (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/212/
+static struct BurnRomInfo md_shinfrc2kRomDesc[] = {
+	{ "shining force ii - koe no fuuin (korean translation).bin", 0x300000, 0x8ece9f4f, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_shinfrc2k)
+STD_ROM_FN(md_shinfrc2k)
+
+struct BurnDriver BurnDrvmd_shinfrc2k = {
+	"md_shinfrc2k", "md_shinfrc2", NULL, NULL, "2013",
+	"Shining Force II - Koe no Fuuin (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_STRATEGY, 0,
+	MegadriveGetZipName, md_shinfrc2kRomInfo, md_shinfrc2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Story of Thor - Hikari o Tsugumono (Hack, Korean)
+// Source : http://chocotimes.tistory.com/25
+static struct BurnRomInfo md_thork2RomDesc[] = {
+	{ "story of thor, the - hikari o tsugumono (korean translation).bin", 0x300000, 0x8d22f9a7, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_thork2)
+STD_ROM_FN(md_thork2)
+
+struct BurnDriver BurnDrvmd_thork2 = {
+	"md_thork2", "md_thor", NULL, NULL, "2015",
+	"The Story of Thor - Hikari o Tsugumono (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_thork2RomInfo, md_thork2RomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Super Fantasy Zone (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/214/
+static struct BurnRomInfo md_sfzonekRomDesc[] = {
+	{ "super fantasy zone (korean translation).bin", 0x100000, 0x50d17067, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_sfzonek)
+STD_ROM_FN(md_sfzonek)
+
+struct BurnDriver BurnDrvmd_sfzonek = {
+	"md_sfzonek", "md_sfzone", NULL, NULL, "2013",
+	"Super Fantasy Zone (Hack, Korean)\0", NULL, "Sunsoft", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_sfzonekRomInfo, md_sfzonekRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Super Shinobi II (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/213/
+static struct BurnRomInfo md_supshin2kRomDesc[] = {
+	{ "super shinobi ii, the (korean translation).bin", 0x180000, 0x59286027, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_supshin2k)
+STD_ROM_FN(md_supshin2k)
+
+struct BurnDriver BurnDrvmd_supshin2k = {
+	"md_supshin2k", "md_shinobi3", NULL, NULL, "2013",
+	"The Super Shinobi II (Hack, Korean)\0", NULL, "Sega", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_SCRFIGHT, 0,
+	MegadriveGetZipName, md_supshin2kRomInfo, md_supshin2kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Twinkle Tale (Hack, Korean)
+// Source : http://www.hangulogame.com/post/game/md/220/
+static struct BurnRomInfo md_twinkletkRomDesc[] = {
+	{ "twinkle tale (korean translation).bin", 0x100000, 0x7a388959, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_twinkletk)
+STD_ROM_FN(md_twinkletk)
+
+struct BurnDriver BurnDrvmd_twinkletk = {
+	"md_twinkletk", "md_twinklet", NULL, NULL, "2013",
+	"Twinkle Tale (Hack, Korean)\0", NULL, "Toyo Records", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_twinkletkRomInfo, md_twinkletkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Valis III (Hack, Korean)
+// Source : http://nsm53p.tistory.com/27
+static struct BurnRomInfo md_valis3kRomDesc[] = {
+	{ "valis iii (korean translation).bin", 0x100000, 0x47d4050a, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_valis3k)
+STD_ROM_FN(md_valis3k)
+
+struct BurnDriver BurnDrvmd_valis3k = {
+	"md_valis3k", "md_valis3", NULL, NULL, "2008",
+	"Valis III (Hack, Korean)\0", NULL, "Reno", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_valis3kRomInfo, md_valis3kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// The Immortal (Hack, Korean)
+// Source : https://cafe.naver.com/hansicgu/16876
+static struct BurnRomInfo md_immortalkRomDesc[] = {
+	{ "immortal, the (korean translation).bin", 0x200000, 0xae94c9f1, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_immortalk)
+STD_ROM_FN(md_immortalk)
+
+struct BurnDriver BurnDrvmd_immortalk = {
+	"md_immortalk", "md_immortal", NULL, NULL, "2011",
+	"The Immortal (Hack, Korean)\0", NULL, "Electronic Arts", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE, GBF_MISC, 0,
+	MegadriveGetZipName, md_immortalkRomInfo, md_immortalkRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
+
+// Ys - Wanderers from Ys (Hack, Korean)
+// Source : http://nsm53p.tistory.com/591
+static struct BurnRomInfo md_ys3kRomDesc[] = {
+	{ "ys - wanderers from ys (korean translation).bin", 0x100000, 0xf31b6a61, BRF_PRG | SEGA_MD_ROM_LOAD16_WORD_SWAP | SEGA_MD_ROM_OFFS_000000  },
+};
+
+STD_ROM_PICK(md_ys3k)
+STD_ROM_FN(md_ys3k)
+
+struct BurnDriver BurnDrvmd_ys3k = {
+	"md_ys3k", "md_ys3", NULL, NULL, "2013",
+	"Ys - Wanderers from Ys (Hack, Korean)\0", NULL, "Reno", "Sega Megadrive",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_16BIT_ONLY | BDF_CLONE, 2, HARDWARE_SEGA_MEGADRIVE | HARDWARE_SEGA_MEGADRIVE_PCB_SEGA_SRAM, GBF_MISC, 0,
+	MegadriveGetZipName, md_ys3kRomInfo, md_ys3kRomName, NULL, NULL, NULL, NULL, MegadriveInputInfo, MegadriveDIPInfo,
+	MegadriveInit, MegadriveExit, MegadriveFrame, MegadriveDraw, MegadriveScan,
+	&bMegadriveRecalcPalette, 0x100, 320, 224, 4, 3
+};
diff --git a/src/burn/drv/neogeo/d_neogeo.cpp b/src/burn/drv/neogeo/d_neogeo.cpp
index d820e67c1..4ad452e5c 100644
--- a/src/burn/drv/neogeo/d_neogeo.cpp
+++ b/src/burn/drv/neogeo/d_neogeo.cpp
@@ -110,7 +110,7 @@ static struct BurnDIPInfo ms5pcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -164,7 +164,7 @@ static struct BurnDIPInfo svcpcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -218,7 +218,7 @@ static struct BurnDIPInfo kf2k3pcbDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x86, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -554,7 +554,7 @@ static struct BurnDIPInfo neodefaultDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -586,7 +586,7 @@ static struct BurnDIPInfo neounidefaultDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x8f, NULL},
+	{0x02,	0xFF, 0xFF,	0x93, NULL},
 	{0x03,	0xFF, 0xFF,	0x02, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -602,7 +602,7 @@ static struct BurnDIPInfo neopaddleDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 };
 
@@ -614,7 +614,7 @@ static struct BurnDIPInfo neodualDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Autofire"},
@@ -630,7 +630,7 @@ static struct BurnDIPInfo neomahjongDIPList[] = {
 	{0x00,	0xFF, 0xFF,	0x00, NULL},
 	{0x01,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x88, NULL},
 	{0x03,	0xFF, 0xFF,	0x01, NULL},
 
 	{0,		0xFE, 0,	2,	  "Mahjong control panel"},
@@ -777,7 +777,7 @@ static struct BurnDIPInfo neoKOFDIPList[] = {
 
 static struct BurnDIPInfo neoFakeDIPList[] = {
 	// default
-	{0x02,	0xFF, 0xFF,	0x80, NULL},
+	{0x02,	0xFF, 0xFF,	0x8f, NULL},
 
 	// Fake DIPs
 	// BIOS
@@ -834,7 +834,7 @@ static struct BurnDIPInfo neoCDDIPList[] = {
 	{0x16,	0xF0, 0x00,	0x00, NULL},
 
 	// Defaults
-	{0x00,	0xFF, 0xFF,	0x02, NULL},
+	{0x00,	0xFF, 0xFF,	0x00, NULL},
 
 	// Region
 	{0,		0xFE, 0,	4,	  "Region"},
@@ -864,7 +864,7 @@ static struct BurnDIPInfo neotrackballDIPList[] = {
 	{0x0D,	0xFF, 0xFF,	0x00, NULL},
 	{0x0E,	0xFF, 0x7F,	0x00, NULL},
 	// Fake DIPs
-	{0x0F,	0xFF, 0xFF,	0x86, NULL},
+	{0x0F,	0xFF, 0xFF,	0x8d, NULL},
 
 	// DIP 1
 	{0,		0xFE, 0,	2,	  "Setting mode"},
@@ -20662,3 +20662,2886 @@ struct BurnDriver BurnDrvCabalng = {
 	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
 	0x1000, 304, 224, 4, 3
 };
+
+//============================================================
+// Add Hack Roms
+//============================================================
+
+static INT32 kof99ndInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x20000;
+
+	return NeoInit();
+}
+
+static INT32 mslug3ndInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x80000;
+
+	return NeoInit();
+}
+
+// Fatal Fury - King of Fighters (Hidden Hack)
+
+static struct BurnRomInfo fatfur1hRomDesc[] = {
+	{ "033-p1h.p1",   0x080000, 0xfc051e1d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC534200
+	{ "033-p2.p2",    0x020000, 0xc473af1c, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC531024
+
+	{ "033-s1.s1",    0x020000, 0x3c3bdf8c, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "033-c1.c1",    0x100000, 0x74317e54, 3 | BRF_GRA },           //  3 Sprite data 		/ TC538200
+	{ "033-c2.c2",    0x100000, 0x5bb952f3, 3 | BRF_GRA },           //  4 					/ TC538200
+	{ "033-c3.c3",    0x100000, 0x9b714a7c, 3 | BRF_GRA },           //  5 					/ TC538200
+	{ "033-c4.c4",    0x100000, 0x9397476a, 3 | BRF_GRA },           //  6 					/ TC538200
+
+	{ "033-m1.m1",    0x020000, 0x5be10ffd, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code 		/ TC531001
+
+	{ "033-v1.v1",    0x100000, 0x212fd20d, 5 | BRF_SND },           //  8 Sound data 		/ TC538200
+	{ "033-v2.v2",    0x100000, 0xfa2ae47f, 5 | BRF_SND },           //  9 					/ TC538200
+};
+
+STDROMPICKEXT(fatfur1h, fatfur1h, neogeo)
+STD_ROM_FN(fatfur1h)
+
+struct BurnDriver BurnDrvFatFur1h = {
+	"fatfur1h", "fatfury1", "neogeo", NULL, "1992",
+	"Fatal Fury - King of Fighters (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur1hRomInfo, fatfur1hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Art of Fighting (Boss Hack)
+
+static struct BurnRomInfo aofbRomDesc[] = {
+	{ "044-p1b.p1",   0x080000, 0x202a60d8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "044-s1.s1",    0x020000, 0x89903f39, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "044-c1.c1",    0x200000, 0xddab98a7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "044-c2.c2",    0x200000, 0xd8ccd575, 3 | BRF_GRA },           //  3 
+	{ "044-c3.c3",    0x200000, 0x403e898a, 3 | BRF_GRA },           //  4 
+	{ "044-c4.c4",    0x200000, 0x6235fbaa, 3 | BRF_GRA },           //  5 
+
+	{ "044-m1.m1",    0x020000, 0x0987e4bb, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "044-v2.v2",    0x200000, 0x3ec632ea, 5 | BRF_SND },           //  7 Sound data
+	{ "044-v4.v4",    0x200000, 0x4b0f8e23, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(aofb, aofb, neogeo)
+STD_ROM_FN(aofb)
+
+struct BurnDriver BurnDrvAofb = {
+	"aofb", "aof", "neogeo", NULL, "1992",
+	"Art of Fighting (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, aofbRomInfo, aofbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting (Korean Patch, Boss Hack)
+
+static struct BurnRomInfo aofkRomDesc[] = {
+	{ "044-p1k.p1",   0x080000, 0x4c2e8047, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "044-s1k.s1",   0x020000, 0x6e7c531e, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "044-c1.c1",    0x200000, 0xddab98a7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "044-c2.c2",    0x200000, 0xd8ccd575, 3 | BRF_GRA },           //  3 
+	{ "044-c3.c3",    0x200000, 0x403e898a, 3 | BRF_GRA },           //  4 
+	{ "044-c4.c4",    0x200000, 0x6235fbaa, 3 | BRF_GRA },           //  5 
+
+	{ "044-m1.m1",    0x020000, 0x0987e4bb, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "044-v2.v2",    0x200000, 0x3ec632ea, 5 | BRF_SND },           //  7 Sound data
+	{ "044-v4.v4",    0x200000, 0x4b0f8e23, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(aofk, aofk, neogeo)
+STD_ROM_FN(aofk)
+
+struct BurnDriver BurnDrvAofk = {
+	"aofk", "aof", "neogeo", NULL, "2016",
+	"Art of Fighting (Korean Patch, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, aofkRomInfo, aofkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown (Boss Hack)
+
+static struct BurnRomInfo samshobRomDesc[] = {
+	{ "045-p1b.p1",   0x100000, 0x8e4310a8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC538200
+	{ "045-pg2.sp2",  0x100000, 0x46745b94, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC538200
+
+	{ "045-s1.s1",    0x020000, 0x9142a4d3, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "045-c1.c1",    0x200000, 0x2e5873a4, 3 | BRF_GRA },           //  3 Sprite data 		/ TC5316200
+	{ "045-c2.c2",    0x200000, 0x04febb10, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "045-c3.c3",    0x200000, 0xf3dabd1e, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "045-c4.c4",    0x200000, 0x935c62f0, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "045-c51.c5",   0x100000, 0x81932894, 3 | BRF_GRA },           //  7 					/ TC538200
+	{ "045-c61.c6",   0x100000, 0xbe30612e, 3 | BRF_GRA },           //  8 					/ TC538200
+
+	{ "045-m1.m1",    0x020000, 0x95170640, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code 		/ TC531001
+
+	{ "045-v1.v1",    0x200000, 0x37f78a9b, 5 | BRF_SND },           // 10 Sound data 		/ TC5316200
+	{ "045-v2.v2",    0x200000, 0x568b20cf, 5 | BRF_SND },           // 11 					/ TC5316200
+};
+
+STDROMPICKEXT(samshob, samshob, neogeo)
+STD_ROM_FN(samshob)
+
+struct BurnDriver BurnDrvSamShob = {
+	"samshob", "samsho", "neogeo", NULL, "1993",
+	"Samurai Shodown (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samshobRomInfo, samshobRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Fatal Fury 2 (Hidden Hack)
+
+static struct BurnRomInfo fatfur2hRomDesc[] = {
+	{ "047-p1h.p1",   0x100000, 0xb594b7b3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "047-s1.s1",    0x020000, 0xd7dbbf39, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "047-c1.c1",    0x200000, 0xf72a939e, 3 | BRF_GRA },           //  3 Sprite data
+	{ "047-c2.c2",    0x200000, 0x05119a0d, 3 | BRF_GRA },           //  4 
+	{ "047-c3.c3",    0x200000, 0x01e00738, 3 | BRF_GRA },           //  5 
+	{ "047-c4.c4",    0x200000, 0x9fe27432, 3 | BRF_GRA },           //  6 
+
+	{ "047-m1.m1",    0x020000, 0x820b0ba7, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code
+
+	{ "047-v1.v1",    0x200000, 0xd9d00784, 5 | BRF_SND },           //  8 Sound data
+	{ "047-v2.v2",    0x200000, 0x2c9a4b33, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(fatfur2h, fatfur2h, neogeo)
+STD_ROM_FN(fatfur2h)
+
+struct BurnDriver BurnDrvFatfur2h = {
+	"fatfur2h", "fatfury2", "neogeo", NULL, "1992",
+	"Fatal Fury 2 (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur2hRomInfo, fatfur2hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	fatfury2Init, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// World Heroes (Boss Hack)
+
+static struct BurnRomInfo wh1bRomDesc[] = {
+	{ "053-eprb.p1",  0x080000, 0xa7b49883, 1 | BRF_ESS | BRF_PRG }, //  0 68K code / D27C400
+	{ "053-epr.p2",   0x080000, 0x0e33e8a3, 1 | BRF_ESS | BRF_PRG }, //  1 			/ D27C400
+
+	{ "053-s1.s1",    0x020000, 0x8c2c2d6b, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "053-c1.c1",    0x200000, 0x85eb5bce, 3 | BRF_GRA },           //  3 Sprite data
+	{ "053-c2.c2",    0x200000, 0xec93b048, 3 | BRF_GRA },           //  4 
+	{ "053-c3.c3",    0x100000, 0x0dd64965, 3 | BRF_GRA },           //  5 
+	{ "053-c4.c4",    0x100000, 0x9270d954, 3 | BRF_GRA },           //  6 
+
+	{ "053-m1.m1",    0x020000, 0x1bd9d04b, 4 | BRF_ESS | BRF_PRG }, //  7 Z80 code / TC54H1000
+
+	{ "053-v2.v2",    0x200000, 0xa68df485, 5 | BRF_SND },           //  8 Sound data
+	{ "053-v4.v4",    0x100000, 0x7bea8f66, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(wh1b, wh1b, neogeo)
+STD_ROM_FN(wh1b)
+
+struct BurnDriver BurnDrvwh1b = {
+	"wh1b", "wh1", "neogeo", NULL, "1992",
+	"World Heroes (Boss Hack)\0", NULL, "Alpha Denshi Co.", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPC, GBF_VSFIGHT, 0,
+	NULL, wh1bRomInfo, wh1bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '94 (Korean, Boss Hack)
+
+static struct BurnRomInfo kof94krRomDesc[] = {
+	{ "055-p1kr.p1",  0x200000, 0xb251ced4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "055-s1.s1",    0x020000, 0x825976c1, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "055-c1kr.c1",  0x200000, 0xbf987727, 3 | BRF_GRA },           //  2 Sprite data
+	{ "055-c2.c2",    0x200000, 0x15e096a7, 3 | BRF_GRA },           //  3 
+	{ "055-c3.c3",    0x200000, 0x54f66254, 3 | BRF_GRA },           //  4 
+	{ "055-c4.c4",    0x200000, 0x0b01765f, 3 | BRF_GRA },           //  5 
+	{ "055-c5.c5",    0x200000, 0xee759363, 3 | BRF_GRA },           //  6 
+	{ "055-c6.c6",    0x200000, 0x498da52c, 3 | BRF_GRA },           //  7 
+	{ "055-c7.c7",    0x200000, 0x62f66888, 3 | BRF_GRA },           //  8 
+	{ "055-c8.c8",    0x200000, 0xfe0a235d, 3 | BRF_GRA },           //  9 
+
+	{ "055-m1.m1",    0x020000, 0xf6e77cf5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "055-v1.v1",    0x200000, 0x8889596d, 5 | BRF_SND },           // 11 Sound data
+	{ "055-v2.v2",    0x200000, 0x25022b27, 5 | BRF_SND },           // 12 
+	{ "055-v3.v3",    0x200000, 0x83cf32c0, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof94kr, kof94kr, neogeo)
+STD_ROM_FN(kof94kr)
+
+struct BurnDriver BurnDrvKof94kr = {
+	"kof94kr", "kof94", "neogeo", NULL, "2006",
+	"The King of Fighters '94 (Korean, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof94krRomInfo, kof94krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting 2 (Boss Hack)
+
+static struct BurnRomInfo aof2bRomDesc[] = {
+	{ "056-p1b.p1",   0x100000, 0x3af1e484, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "056-s1.s1",    0x020000, 0x8b02638e, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "056-c1.c1",    0x200000, 0x17b9cbd2, 3 | BRF_GRA },           //  2 Sprite data
+	{ "056-c2.c2",    0x200000, 0x5fd76b67, 3 | BRF_GRA },           //  3 
+	{ "056-c3.c3",    0x200000, 0xd2c88768, 3 | BRF_GRA },           //  4 
+	{ "056-c4.c4",    0x200000, 0xdb39b883, 3 | BRF_GRA },           //  5 
+	{ "056-c5.c5",    0x200000, 0xc3074137, 3 | BRF_GRA },           //  6 
+	{ "056-c6.c6",    0x200000, 0x31de68d3, 3 | BRF_GRA },           //  7 
+	{ "056-c7.c7",    0x200000, 0x3f36df57, 3 | BRF_GRA },           //  8 
+	{ "056-c8.c8",    0x200000, 0xe546d7a8, 3 | BRF_GRA },           //  9 
+
+	{ "056-m1.m1",    0x020000, 0xf27e9d52, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "056-v1.v1",    0x200000, 0x4628fde0, 5 | BRF_SND },           // 11 Sound data
+	{ "056-v2.v2",    0x200000, 0xb710e2f2, 5 | BRF_SND },           // 12 
+	{ "056-v3.v3",    0x100000, 0xd168c301, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(aof2b, aof2b, neogeo)
+STD_ROM_FN(aof2b)
+
+struct BurnDriver BurnDrvAof2b = {
+	"aof2b", "aof2", "neogeo", NULL, "1994",
+	"Art of Fighting 2 (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, aof2bRomInfo, aof2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// World Heroes 2 (Boss Hack)
+
+static struct BurnRomInfo wh2bRomDesc[] = {
+	{ "057-p1b.p1",   0x200000, 0x6e6a0077, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ TC5316200
+
+	{ "057-s1.s1",    0x020000, 0xfcaeb3a4, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "057-c1.c1",    0x200000, 0x21c6bb91, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "057-c2.c2",    0x200000, 0xa3999925, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "057-c3.c3",    0x200000, 0xb725a219, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "057-c4.c4",    0x200000, 0x8d96425e, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "057-c5.c5",    0x200000, 0xb20354af, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "057-c6.c6",    0x200000, 0xb13d1de3, 3 | BRF_GRA },           //  7 					/ TC5316200
+
+	{ "057-m1.m1",    0x020000, 0x8fa3bc77, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code			/ TC531001
+
+	{ "057-v1.v1",    0x200000, 0x8877e301, 5 | BRF_SND },           //  9 Sound data		/ TC5316200
+	{ "057-v2.v2",    0x200000, 0xc1317ff4, 5 | BRF_SND },           // 10 					/ TC5316200
+};
+
+STDROMPICKEXT(wh2b, wh2b, neogeo)
+STD_ROM_FN(wh2b)
+
+struct BurnDriver BurnDrvwh2b = {
+	"wh2b", "wh2", "neogeo", NULL, "1993",
+	"World Heroes 2 (Boss Hack)\0", NULL, "ADK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, wh2bRomInfo, wh2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fatal Fury Special (Hidden Hack)
+
+static struct BurnRomInfo fatfurshRomDesc[] = {
+	{ "058-p1b.p1",   0x100000, 0x8cd18f7f, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC538200
+	{ "058-p2.sp2",   0x080000, 0xd7c71a6b, 1 | BRF_ESS | BRF_PRG }, //  1 					/ mask rom TC534200
+
+	{ "058-s1.s1",    0x020000, 0x2df03197, 2 | BRF_GRA },           //  2 Text layer tiles / mask rom TC531000
+
+	{ "058-c1.c1",    0x200000, 0x044ab13c, 3 | BRF_GRA },           //  3 Sprite data		/ mask rom TC5316200
+	{ "058-c2.c2",    0x200000, 0x11e6bf96, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "058-c3.c3",    0x200000, 0x6f7938d5, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "058-c4.c4",    0x200000, 0x4ad066ff, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "058-c5.c5",    0x200000, 0x49c5e0bf, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "058-c6.c6",    0x200000, 0x8ff1f43d, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+
+	{ "058-m1.m1",    0x020000, 0xccc5186e, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code			/ mask rom TC531001
+
+	{ "058-v1.v1",    0x200000, 0x55d7ce84, 5 | BRF_SND },           // 10 Sound data		/ mask rom TC5316200
+	{ "058-v2.v2",    0x200000, 0xee080b10, 5 | BRF_SND },           // 11 					/ mask rom TC5316200					
+	{ "058-v3.v3",    0x100000, 0xf9eb3d4a, 5 | BRF_SND },           // 12 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(fatfursh, fatfursh, neogeo)
+STD_ROM_FN(fatfursh)
+
+struct BurnDriver BurnDrvFatfursh = {
+	"fatfursh", "fatfursp", "neogeo", NULL, "1993",
+	"Fatal Fury Special (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfurshRomInfo, fatfurshRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Savage Reign (Boss Hack)
+
+static struct BurnRomInfo savagerbRomDesc[] = {
+	{ "059-p1b.p1",   0x200000, 0xe892979a, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "059-s1.s1",    0x020000, 0xe08978ca, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "059-c1.c1",    0x200000, 0x763ba611, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "059-c2.c2",    0x200000, 0xe05e8ca6, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "059-c3.c3",    0x200000, 0x3e4eba4b, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "059-c4.c4",    0x200000, 0x3c2a3808, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "059-c5.c5",    0x200000, 0x59013f9e, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "059-c6.c6",    0x200000, 0x1c8d5def, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "059-c7.c7",    0x200000, 0xc88f7035, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "059-c8.c8",    0x200000, 0x484ce3ba, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "059-m1.m1",    0x020000, 0x29992eba, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ TC531001
+
+	{ "059-v1.v1",    0x200000, 0x530c50fd, 5 | BRF_SND },           // 11 Sound data		/ TC5316200
+	{ "059-v2.v2",    0x200000, 0xeb6f1cdb, 5 | BRF_SND },           // 12 					/ TC5316200
+	{ "059-v3.v3",    0x200000, 0x7038c2f9, 5 | BRF_SND },           // 13 					/ TC5316200
+};
+
+STDROMPICKEXT(savagerb, savagerb, neogeo)
+STD_ROM_FN(savagerb)
+
+struct BurnDriver BurnDrvsavagerb = {
+	"savagerb", "savagere", "neogeo", NULL, "1995",
+	"Savage Reign (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, savagerbRomInfo, savagerbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fight Fever (Boss Hack)
+
+static struct BurnRomInfo fightfebRomDesc[] = {
+	{ "060-p1b.p1",   0x100000, 0x0b9e106d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+
+	{ "060-s1.s1",    0x020000, 0x7f012104, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "060-c1.c1",    0x200000, 0x8908fff9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "060-c2.c2",    0x200000, 0xc6649492, 3 | BRF_GRA },           //  3 
+	{ "060-c3.c3",    0x200000, 0x0956b437, 3 | BRF_GRA },           //  4 
+	{ "060-c4.c4",    0x200000, 0x026f3b62, 3 | BRF_GRA },           //  5 
+
+	{ "060-m1.m1",    0x020000, 0x0b7c4e65, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "060-v1.v1",    0x200000, 0xf417c215, 5 | BRF_SND },           //  7 Sound data
+	{ "060-v2.v2",    0x100000, 0xefcff7cf, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(fightfeb, fightfeb, neogeo)
+STD_ROM_FN(fightfeb)
+
+struct BurnDriver BurnDrvfightfeb = {
+	"fightfeb", "fightfev", "neogeo", NULL, "1994",
+	"Fight Fever (Boss Hack)\0", NULL, "Viccom", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, fightfebRomInfo, fightfebRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown II (Boss Hack)
+
+static struct BurnRomInfo samsho2bRomDesc[] = {
+	{ "063-p1b.p1",   0x200000, 0x7ab45a4c, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "063-s1.s1",    0x020000, 0x64a5cd66, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "063-c1.c1",    0x200000, 0x86cd307c, 3 | BRF_GRA },           //  2 Sprite data
+	{ "063-c2.c2",    0x200000, 0xcdfcc4ca, 3 | BRF_GRA },           //  3
+	{ "063-c3.c3",    0x200000, 0x7a63ccc7, 3 | BRF_GRA },           //  4
+	{ "063-c4.c4",    0x200000, 0x751025ce, 3 | BRF_GRA },           //  5
+	{ "063-c5.c5",    0x200000, 0x20d3a475, 3 | BRF_GRA },           //  6
+	{ "063-c6.c6",    0x200000, 0xae4c0a88, 3 | BRF_GRA },           //  7
+	{ "063-c7.c7",    0x200000, 0x2df3cbcf, 3 | BRF_GRA },           //  8
+	{ "063-c8.c8",    0x200000, 0x1ffc6dfa, 3 | BRF_GRA },           //  9
+
+	{ "063-m1.m1",    0x020000, 0x56675098, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "063-v1.v1",    0x200000, 0x37703f91, 5 | BRF_SND },           // 11 Sound data
+	{ "063-v2.v2",    0x200000, 0x0142bde8, 5 | BRF_SND },           // 12
+	{ "063-v3.v3",    0x200000, 0xd07fa5ca, 5 | BRF_SND },           // 13
+	{ "063-v4.v4",    0x100000, 0x24aab4bb, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(samsho2b, samsho2b, neogeo)
+STD_ROM_FN(samsho2b)
+
+struct BurnDriver BurnDrvSamSho2b = {
+	"samsho2b", "samsho2", "neogeo", NULL, "1994",
+	"Samurai Shodown II (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho2bRomInfo, samsho2bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// World Heroes 2 Jet (Boss Hack)
+
+static struct BurnRomInfo wh2jbRomDesc[] = {
+	{ "064-p1b.p1",   0x200000, 0x14d5f4af, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "064-s1.s1",    0x020000, 0x2a03998a, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "064-c1.c1",    0x200000, 0x2ec87cea, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "064-c2.c2",    0x200000, 0x526b81ab, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "064-c3.c3",    0x200000, 0x436d1b31, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "064-c4.c4",    0x200000, 0xf9c8dd26, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "064-c5.c5",    0x200000, 0x8e34a9f4, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "064-c6.c6",    0x200000, 0xa43e4766, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "064-c7.c7",    0x200000, 0x59d97215, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "064-c8.c8",    0x200000, 0xfc092367, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "064-m1.m1",    0x020000, 0xd2eec9d3, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code			/ TC531001
+
+	{ "064-v1.v1",    0x200000, 0xaa277109, 5 | BRF_SND },           //  7 Sound data		/ TC5316200
+	{ "064-v2.v2",    0x200000, 0xb6527edd, 5 | BRF_SND },           //  8 					/ TC5316200
+};
+
+STDROMPICKEXT(wh2jb, wh2jb, neogeo)
+STD_ROM_FN(wh2jb)
+
+struct BurnDriver BurnDrvwh2jb = {
+	"wh2jb", "wh2j", "neogeo", NULL, "1994",
+	"World Heroes 2 Jet (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, wh2jbRomInfo, wh2jbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Windjammers / Flying Power Disc (Korean)
+
+static struct BurnRomInfo wjammerkRomDesc[] = {
+	{ "065-p1.p1",    0x100000, 0x6692c140, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 		/ mask rom TC538200
+
+	{ "065-s1.s1",    0x020000, 0x074b5723, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "065-c1k.c1",   0x100000, 0xebded27e, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC538200
+	{ "065-c2k.c2",   0x100000, 0xf5483767, 3 | BRF_GRA },           //  3 					/ mask rom TC538200
+	{ "065-c3.c3",    0x100000, 0x40986386, 3 | BRF_GRA },           //  4 					/ mask rom TC538200
+	{ "065-c4.c4",    0x100000, 0x715e15ff, 3 | BRF_GRA },           //  5 					/ mask rom TC538200
+
+	{ "065-m1.m1",    0x020000, 0x52c23cfc, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code			/ mask rom TC531001
+
+	{ "065-v1.v1",    0x100000, 0xce8b3698, 5 | BRF_SND },           //  7 Sound data		/ mask rom TC538200
+	{ "065-v2.v2",    0x100000, 0x659f9b96, 5 | BRF_SND },           //  8 					/ mask rom TC538200
+	{ "065-v3.v3",    0x100000, 0x39f73061, 5 | BRF_SND },           //  9 					/ mask rom TC538200
+	{ "065-v4.v4",    0x100000, 0x5dee7963, 5 | BRF_SND },           // 10 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(wjammerk, wjammerk, neogeo)
+STD_ROM_FN(wjammerk)
+
+struct BurnDriver BurnDrvwjammerk = {
+	"wjammerk", "wjammers", "neogeo", NULL, "2005",
+	"Windjammers / Flying Power Disc (Korean)\0", NULL, "Data East Corporation", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SPORTSMISC, 0,
+	NULL, wjammerkRomInfo, wjammerkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)
+
+static struct BurnRomInfo karnovrbRomDesc[] = {
+	{ "066-p1h.p1",   0x100000, 0x7b776bb5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "066-s1.s1",    0x020000, 0xbae5d5e5, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "066-c1.c1",    0x200000, 0x09dfe061, 3 | BRF_GRA },           //  2 Sprite data
+	{ "066-c2.c2",    0x200000, 0xe0f6682a, 3 | BRF_GRA },           //  3 
+	{ "066-c3.c3",    0x200000, 0xa673b4f7, 3 | BRF_GRA },           //  4 
+	{ "066-c4.c4",    0x200000, 0xcb3dc5f4, 3 | BRF_GRA },           //  5 
+	{ "066-c5.c5",    0x200000, 0x9a28785d, 3 | BRF_GRA },           //  6 
+	{ "066-c6.c6",    0x200000, 0xc15c01ed, 3 | BRF_GRA },           //  7 
+
+	{ "066-m1.m1",    0x020000, 0x030beae4, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "066-v1.v1",    0x200000, 0x0b7ea37a, 5 | BRF_SND },           //  9 Sound data
+};
+
+STDROMPICKEXT(karnovrb, karnovrb, neogeo)
+STD_ROM_FN(karnovrb)
+
+struct BurnDriver BurnDrvkarnovrb = {
+	"karnovrb", "karnovr", "neogeo", NULL, "1994",
+	"Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)\0", NULL, "Data East Corporation", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, karnovrbRomInfo, karnovrbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Fatal Fury 3 - Road to the Final Victory (Boss Hack)
+
+static struct BurnRomInfo fatfur3bRomDesc[] = {
+	{ "069-p1b.p1",   0x100000, 0xb8362f59, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "069-sp2.sp2",  0x200000, 0xdbe963ed, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "069-s1.s1",    0x020000, 0x0b33a800, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "069-c1.c1",    0x400000, 0xe302f93c, 3 | BRF_GRA },           //  3 Sprite data
+	{ "069-c2.c2",    0x400000, 0x1053a455, 3 | BRF_GRA },           //  4 
+	{ "069-c3.c3",    0x400000, 0x1c0fde2f, 3 | BRF_GRA },           //  5 
+	{ "069-c4.c4",    0x400000, 0xa25fc3d0, 3 | BRF_GRA },           //  6 
+	{ "069-c5.c5",    0x200000, 0xb3ec6fa6, 3 | BRF_GRA },           //  7 
+	{ "069-c6.c6",    0x200000, 0x69210441, 3 | BRF_GRA },           //  8 
+
+	{ "069-m1.m1",    0x020000, 0xfce72926, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "069-v1.v1",    0x400000, 0x2bdbd4db, 5 | BRF_SND },           // 10 Sound data
+	{ "069-v2.v2",    0x400000, 0xa698a487, 5 | BRF_SND },           // 11 
+	{ "069-v3.v3",    0x200000, 0x581c5304, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(fatfur3b, fatfur3b, neogeo)
+STD_ROM_FN(fatfur3b)
+
+struct BurnDriver BurnDrvFatfur3b = {
+	"fatfur3b", "fatfury3", "neogeo", NULL, "1995",
+	"Fatal Fury 3 - Road to the Final Victory (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, fatfur3bRomInfo, fatfur3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Zupapa! (Fully Decrypted)
+
+static struct BurnRomInfo zupapandRomDesc[] = {
+	{ "070-p1.p1",    0x100000, 0x5a96203e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "070-c1d.c1",   0x800000, 0x65d73348, 3 | BRF_GRA },           //  1 Sprite data
+	{ "070-c2d.c2",   0x800000, 0xc498708f, 3 | BRF_GRA },           //  2 
+
+	{ "070-epr.m1",   0x020000, 0x5a3b3191, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "070-v1.v1",    0x200000, 0xd3a7e1ff, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(zupapand, zupapand, neogeo)
+STD_ROM_FN(zupapand)
+
+struct BurnDriver BurnDrvZupapand = {
+	"zupapand", "zupapa", "neogeo", NULL, "2001",
+	"Zupapa! (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, zupapandRomInfo, zupapandRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Galaxy Fight - Universal Warriors (Hidden Hack)
+
+static struct BurnRomInfo galaxyfhRomDesc[] = {
+	{ "078-p1h.p1",   0x200000, 0x7fede043, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC5316200
+
+	{ "078-s1.s1",    0x020000, 0x72f8923e, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "078-c1.c1",    0x200000, 0xc890c7c0, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC5316200
+	{ "078-c2.c2",    0x200000, 0xb6d25419, 3 | BRF_GRA },           //  3 					/ mask rom TC5316200
+	{ "078-c3.c3",    0x200000, 0x9d87e761, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "078-c4.c4",    0x200000, 0x765d7cb8, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "078-c5.c5",    0x200000, 0xe6b77e6a, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "078-c6.c6",    0x200000, 0xd779a181, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "078-c7.c7",    0x100000, 0x4f27d580, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+	{ "078-c8.c8",    0x100000, 0x0a7cc0d8, 3 | BRF_GRA },           //  9 					/ mask rom TC5316200
+
+	{ "078-m1.m1",    0x020000, 0x8e9e3b10, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ mask rom TC531001
+
+	{ "078-v1.v1",    0x200000, 0xe3b735ac, 5 | BRF_SND },           // 11 Sound data		/ mask rom TC5316200
+	{ "078-v2.v2",    0x200000, 0x6a8e78c2, 5 | BRF_SND },           // 12 					/ mask rom TC5316200
+	{ "078-v3.v3",    0x100000, 0x70bca656, 5 | BRF_SND },           // 13 					/ mask rom TC538200
+};
+
+STDROMPICKEXT(galaxyfh, galaxyfh, neogeo)
+STD_ROM_FN(galaxyfh)
+
+struct BurnDriver BurnDrvgalaxyfh = {
+	"galaxyfh", "galaxyfg", "neogeo", NULL, "1995",
+	"Galaxy Fight - Universal Warriors (Hidden Hack)\0", NULL, "Sunsoft", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, galaxyfhRomInfo, galaxyfhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '95 (Korean, NeoGeo CD Hack)
+
+static struct BurnRomInfo kof95krRomDesc[] = {
+	{ "084-p1kr.p1",  0x200000, 0x162a1405, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "084-s1kr.s1",  0x020000, 0x0d07a5ab, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "084-c1kr.c1",  0x400000, 0x4bb4eb90, 3 | BRF_GRA },           //  2 Sprite data
+	{ "084-c2kr.c2",  0x400000, 0x7e94c968, 3 | BRF_GRA },           //  3 
+	{ "084-c3.c3",    0x400000, 0xa4e65d1b, 3 | BRF_GRA },           //  4
+	{ "084-c4.c4",    0x400000, 0xc1ace468, 3 | BRF_GRA },           //  5 
+	{ "084-c5.c5",    0x200000, 0x8a2c1edc, 3 | BRF_GRA },           //  6 
+	{ "084-c6.c6",    0x200000, 0xf593ac35, 3 | BRF_GRA },           //  7 
+	{ "084-c7.c7",    0x100000, 0x9904025f, 3 | BRF_GRA },           //  8 
+	{ "084-c8.c8",    0x100000, 0x78eb0f9b, 3 | BRF_GRA },           //  9 
+
+	{ "084-m1.m1",    0x020000, 0x6f2d7429, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "084-v1.v1",    0x400000, 0x84861b56, 5 | BRF_SND },           // 11 Sound data
+	{ "084-v2.v2",    0x200000, 0xb38a2803, 5 | BRF_SND },           // 12 
+	{ "084-v3.v3",    0x100000, 0xd683a338, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof95kr, kof95kr, neogeo)
+STD_ROM_FN(kof95kr)
+
+struct BurnDriver BurnDrvKof95kr = {
+	"kof95kr", "kof95", "neogeo", NULL, "2005",
+	"The King of Fighters '95 (Korean, NeoGeo CD Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof95krRomInfo, kof95krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown III (Boss Hack)
+
+static struct BurnRomInfo samsho3bRomDesc[] = {
+	{ "087-eprb.ep1", 0x080000, 0x6aca07b5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ M27C4002
+	{ "087-epr.ep2",  0x080000, 0x256f5302, 1 | BRF_ESS | BRF_PRG }, //  1 					/ M27C4002
+	{ "087-epr.ep3",  0x080000, 0xbf2db5dd, 1 | BRF_ESS | BRF_PRG }, //  2 					/ M27C4002
+	{ "087-epr.ep4",  0x080000, 0x53e60c58, 1 | BRF_ESS | BRF_PRG }, //  3 					/ M27C4002
+
+	{ "087-p5.p5",    0x100000, 0xe86ca4af, 1 | BRF_ESS | BRF_PRG }, //  4 					/ TC538200
+
+	{ "087-s1.s1",    0x020000, 0x74ec7d9f, 2 | BRF_GRA },           //  5 Text layer tiles / TC531000
+
+	{ "087-c1.c1",    0x400000, 0x07a233bc, 3 | BRF_GRA },           //  6 Sprite data		/ TC5332202
+	{ "087-c2.c2",    0x400000, 0x7a413592, 3 | BRF_GRA },           //  7 					/ TC5332202
+	{ "087-c3.c3",    0x400000, 0x8b793796, 3 | BRF_GRA },           //  8 					/ TC533202
+	{ "087-c4.c4",    0x400000, 0x728fbf11, 3 | BRF_GRA },           //  9 					/ TC533202
+	{ "087-c5.c5",    0x400000, 0x172ab180, 3 | BRF_GRA },           // 10 					/ TC5332202
+	{ "087-c6.c6",    0x400000, 0x002ff8f3, 3 | BRF_GRA },           // 11 					/ TC5332202
+	{ "087-c7.c7",    0x100000, 0xae450e3d, 3 | BRF_GRA },           // 12 					/ TC538200
+	{ "087-c8.c8",    0x100000, 0xa9e82717, 3 | BRF_GRA },           // 13 					/ TC538200
+
+	{ "087-m1.m1",    0x020000, 0x8e6440eb, 4 | BRF_ESS | BRF_PRG }, // 14 Z80 code			/ TC531001
+
+	{ "087-v1.v1",    0x400000, 0x84bdd9a0, 5 | BRF_SND },           // 15 Sound data		/ TC5332201
+	{ "087-v2.v2",    0x200000, 0xac0f261a, 5 | BRF_SND },           // 16					/ TC5316200
+};
+
+STDROMPICKEXT(samsho3b, samsho3b, neogeo)
+STD_ROM_FN(samsho3b)
+
+struct BurnDriver BurnDrvSamSho3b = {
+	"samsho3b", "samsho3", "neogeo", NULL, "1995",
+	"Samurai Shodown III (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho3bRomInfo, samsho3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// World Heroes Perfect (Boss Hack)
+
+static struct BurnRomInfo whpbRomDesc[] = {
+	{ "090-p1b.p1",   0x200000, 0x9c1a79d5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ mask rom TC5316200
+
+	{ "090-s1.s1",    0x020000, 0x174a880f, 2 | BRF_GRA },           //  1 Text layer tiles / mask rom TC531000
+
+	{ "090-c1b.c1",   0x400000, 0xa56ebf84, 3 | BRF_GRA },           //  2 Sprite data		/ mask rom TC5332205
+	{ "090-c2b.c2",   0x400000, 0x6d589146, 3 | BRF_GRA },           //  3 					/ mask rom TC5332205
+	{ "064-c3.c3",    0x200000, 0x436d1b31, 3 | BRF_GRA },           //  4 					/ mask rom TC5316200
+	{ "064-c4.c4",    0x200000, 0xf9c8dd26, 3 | BRF_GRA },           //  5 					/ mask rom TC5316200
+	{ "064-c5.c5",    0x200000, 0x8e34a9f4, 3 | BRF_GRA },           //  6 					/ mask rom TC5316200
+	{ "064-c6.c6",    0x200000, 0xa43e4766, 3 | BRF_GRA },           //  7 					/ mask rom TC5316200
+	{ "064-c7.c7",    0x200000, 0x59d97215, 3 | BRF_GRA },           //  8 					/ mask rom TC5316200
+	{ "064-c8.c8",    0x200000, 0xfc092367, 3 | BRF_GRA },           //  9 					/ mask rom TC5316200
+
+	{ "090-m1.m1",    0x020000, 0x28065668, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ mask rom TC531001
+
+	{ "090-v1.v1",    0x200000, 0x30cf2709, 5 | BRF_SND },           // 11 Sound data		/ mask rom TC5316200
+	{ "064-v2.v2",    0x200000, 0xb6527edd, 5 | BRF_SND },           // 12 					/ mask rom TC5316200
+	{ "090-v3.v3",    0x200000, 0x1908a7ce, 5 | BRF_SND },           // 13 					/ mask rom TC5316200
+};
+
+STDROMPICKEXT(whpb, whpb, neogeo)
+STD_ROM_FN(whpb)
+
+struct BurnDriver BurnDrvwhpb = {
+	"whpb", "whp", "neogeo", NULL, "1995",
+	"World Heroes Perfect (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, whpbRomInfo, whpbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)
+
+static struct BurnRomInfo kabukikbRomDesc[] = {
+	{ "092-p1b.p1",   0x200000, 0x9e17f576, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "092-s1.s1",    0x020000, 0xa3d68ee2, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "092-c1.c1",    0x400000, 0x2a9fab01, 3 | BRF_GRA },           //  2 Sprite data
+	{ "092-c2.c2",    0x400000, 0x6d2bac02, 3 | BRF_GRA },           //  3 
+	{ "092-c3.c3",    0x400000, 0x5da735d6, 3 | BRF_GRA },           //  4 
+	{ "092-c4.c4",    0x400000, 0xde07f997, 3 | BRF_GRA },           //  5 
+
+	{ "092-m1.m1",    0x020000, 0x91957ef6, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "092-v1.v1",    0x200000, 0x69e90596, 5 | BRF_SND },           //  7 Sound data
+	{ "092-v2.v2",    0x200000, 0x7abdb75d, 5 | BRF_SND },           //  8 
+	{ "092-v3.v3",    0x200000, 0xeccc98d3, 5 | BRF_SND },           //  9 
+	{ "092-v4.v4",    0x100000, 0xa7c9c949, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(kabukikb, kabukikb, neogeo)
+STD_ROM_FN(kabukikb)
+
+struct BurnDriver BurnDrvkabukikb = {
+	"kabukikb", "kabukikl", "neogeo", NULL, "1995",
+	"Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)\0", NULL, "Hudson", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, kabukikbRomInfo, kabukikbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Voltage Fighter - Gowcaizer (Boss Hack)
+
+static struct BurnRomInfo gowcaizbRomDesc[] = {
+	{ "094-p1b.p1",   0x200000, 0xd4f37cc4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC5316200
+
+	{ "094-s1.s1",    0x020000, 0x2f8748a2, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "094-c1.c1",    0x200000, 0x042f6af5, 3 | BRF_GRA },           //  2 Sprite data		/ TC5316200
+	{ "094-c2.c2",    0x200000, 0x0fbcd046, 3 | BRF_GRA },           //  3 					/ TC5316200
+	{ "094-c3.c3",    0x200000, 0x58bfbaa1, 3 | BRF_GRA },           //  4 					/ TC5316200
+	{ "094-c4.c4",    0x200000, 0x9451ee73, 3 | BRF_GRA },           //  5 					/ TC5316200
+	{ "094-c5.c5",    0x200000, 0xff9cf48c, 3 | BRF_GRA },           //  6 					/ TC5316200
+	{ "094-c6.c6",    0x200000, 0x31bbd918, 3 | BRF_GRA },           //  7 					/ TC5316200
+	{ "094-c7.c7",    0x200000, 0x2091ec04, 3 | BRF_GRA },           //  8 					/ TC5316200
+	{ "094-c8.c8",    0x200000, 0xd80dd241, 3 | BRF_GRA },           //  9 					/ TC5316200
+
+	{ "094-m1.m1",    0x020000, 0x78c851cb, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code			/ TC531001
+
+	{ "094-v1.v1",    0x200000, 0x6c31223c, 5 | BRF_SND },           // 11 Sound data		/ TC5316200
+	{ "094-v2.v2",    0x200000, 0x8edb776c, 5 | BRF_SND },           // 12 					/ TC5316200
+	{ "094-v3.v3",    0x100000, 0xc63b9285, 5 | BRF_SND },           // 13 					/ TC538200
+};
+
+STDROMPICKEXT(gowcaizb, gowcaizb, neogeo)
+STD_ROM_FN(gowcaizb)
+
+struct BurnDriver BurnDrvgowcaizb = {
+	"gowcaizb", "gowcaizr", "neogeo", NULL, "1995",
+	"Voltage Fighter - Gowcaizer (Boss Hack)\0", NULL, "Technos", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, gowcaizbRomInfo, gowcaizbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Art of Fighting 3 - The Path of the Warrior (Boss Hack)
+
+static struct BurnRomInfo aof3bRomDesc[] = {
+	{ "096-p1b.p1",   0x100000, 0x70969ff1, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC538200
+	{ "096-p2.sp2",   0x200000, 0x4d5a2602, 1 | BRF_ESS | BRF_PRG }, //  1 					/ TC5316200
+
+	{ "096-s1.s1",    0x020000, 0xcc7fd344, 2 | BRF_GRA },           //  2 Text layer tiles / TC531000
+
+	{ "096-c1.c1",    0x400000, 0xf17b8d89, 3 | BRF_GRA },           //  3 Sprite data		/ TC5332205
+	{ "096-c2.c2",    0x400000, 0x3840c508, 3 | BRF_GRA },           //  4 					/ TC5332205
+	{ "096-c3.c3",    0x400000, 0x55f9ee1e, 3 | BRF_GRA },           //  5 					/ TC5332205
+	{ "096-c4.c4",    0x400000, 0x585b7e47, 3 | BRF_GRA },           //  6 					/ TC5332205
+	{ "096-c5.c5",    0x400000, 0xc75a753c, 3 | BRF_GRA },           //  7 					/ TC5332205
+	{ "096-c6.c6",    0x400000, 0x9a9d2f7a, 3 | BRF_GRA },           //  8 					/ TC5332205
+	{ "096-c7.c7",    0x200000, 0x51bd8ab2, 3 | BRF_GRA },           //  9 					/ TC5316200
+	{ "096-c8.c8",    0x200000, 0x9a34f99c, 3 | BRF_GRA },           // 10 					/ TC5316200
+
+	{ "096-m1.m1",    0x020000, 0xcb07b659, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code			/ TC531001
+
+	{ "096-v1.v1",    0x200000, 0xe2c32074, 5 | BRF_SND },           // 12 Sound data		/ TC5316200
+	{ "096-v2.v2",    0x200000, 0xa290eee7, 5 | BRF_SND },           // 13 					/ TC5316200
+	{ "096-v3.v3",    0x200000, 0x199d12ea, 5 | BRF_SND },           // 14 					/ TC5316200
+};
+
+STDROMPICKEXT(aof3b, aof3b, neogeo)
+STD_ROM_FN(aof3b)
+
+struct BurnDriver BurnDrvAof3b = {
+	"aof3b", "aof3", "neogeo", NULL, "1996",
+	"Art of Fighting 3 - The Path of the Warrior (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, aof3bRomInfo, aof3bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Puzzle De Pon! (Korean)
+
+static struct BurnRomInfo puzzldpkRomDesc[] = {
+	{ "202-p1.p1",    0x080000, 0x2b61415b, 1 | BRF_ESS | BRF_PRG }, //  0 68K code			/ TC534200
+
+	{ "202-s1.s1",    0x020000, 0xcd19264f, 2 | BRF_GRA },           //  1 Text layer tiles / TC531000
+
+	{ "202-c1k.c1",   0x100000, 0xfc5e5ae7, 3 | BRF_GRA },           //  2 Sprite data		/ TC538200
+	{ "202-c2.c2",    0x100000, 0x42371307, 3 | BRF_GRA },           //  3 					/ TC538200
+
+	{ "202-m1.m1",    0x020000, 0x9c0291ea, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code			/ TC531001
+
+	{ "202-v1.v1",    0x080000, 0xdebeb8fb, 5 | BRF_SND },           //  5 Sound data		/ TC534200
+};
+
+STDROMPICKEXT(puzzldpk, puzzldpk, neogeo)
+STD_ROM_FN(puzzldpk)
+
+struct BurnDriver BurnDrvpuzzldpk = {
+	"puzzldpk", "puzzledp", "neogeo", NULL, "2006",
+	"Puzzle De Pon! (Korean)\0", NULL, "Taito (Visco license)", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, puzzldpkRomInfo, puzzldpkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '96 (Korean, Add Practice Mode)
+
+static struct BurnRomInfo kof96krRomDesc[] = {
+	{ "214-p1kr.p1",  0x100000, 0xcd100253, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "214-p2kr.p2",  0x200000, 0xa7e05e29, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "214-s1.s1",    0x020000, 0x1254cbdb, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "214-c1kr.c1",  0x400000, 0x0524e33e, 3 | BRF_GRA },           //  3 Sprite data
+	{ "214-c2kr.c2",  0x400000, 0xe1374ccc, 3 | BRF_GRA },           //  4 
+	{ "214-c3.c3",    0x400000, 0x64989a65, 3 | BRF_GRA },           //  5 
+	{ "214-c4.c4",    0x400000, 0xafbea515, 3 | BRF_GRA },           //  6 
+	{ "214-c5.c5",    0x400000, 0x2a3bbd26, 3 | BRF_GRA },           //  7 
+	{ "214-c6.c6",    0x400000, 0x44d30dc7, 3 | BRF_GRA },           //  8 
+	{ "214-c7.c7",    0x400000, 0x3687331b, 3 | BRF_GRA },           //  9 
+	{ "214-c8.c8",    0x400000, 0xfa1461ad, 3 | BRF_GRA },           // 10 
+
+	{ "214-m1.m1",    0x020000, 0xdabc427c, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "214-v1.v1",    0x400000, 0x63f7b045, 5 | BRF_SND },           // 12 Sound data
+	{ "214-v2.v2",    0x400000, 0x25929059, 5 | BRF_SND },           // 13 
+	{ "214-v3.v3",    0x200000, 0x92a2257d, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof96kr, kof96kr, neogeo)
+STD_ROM_FN(kof96kr)
+
+struct BurnDriver BurnDrvKof96kr = {
+	"kof96kr", "kof96", "neogeo", NULL, "2006",
+	"The King of Fighters '96 (Korean, Add Practice Mode)\0", NULL, "SNK", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO,  GBF_VSFIGHT, FBF_KOF,
+	NULL, kof96krRomInfo, kof96krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)
+
+static struct BurnRomInfo kizunabRomDesc[] = {
+	{ "216-p1b.p1",   0x200000, 0xa4ccd402, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "216-s1.s1",    0x020000, 0xefdc72d7, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "059-c1.c1",    0x200000, 0x763ba611, 3 | BRF_GRA },           //  2 Sprite data
+	{ "059-c2.c2",    0x200000, 0xe05e8ca6, 3 | BRF_GRA },           //  3 
+	{ "216-c3.c3",    0x400000, 0x665c9f16, 3 | BRF_GRA },           //  4 
+	{ "216-c4.c4",    0x400000, 0x7f5d03db, 3 | BRF_GRA },           //  5 
+	{ "059-c5.c5",    0x200000, 0x59013f9e, 3 | BRF_GRA },           //  6 
+	{ "059-c6.c6",    0x200000, 0x1c8d5def, 3 | BRF_GRA },           //  7 
+	{ "059-c7.c7",    0x200000, 0xc88f7035, 3 | BRF_GRA },           //  8 
+	{ "059-c8.c8",    0x200000, 0x484ce3ba, 3 | BRF_GRA },           //  9 
+
+	{ "216-m1.m1",    0x020000, 0x1b096820, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "059-v1.v1",    0x200000, 0x530c50fd, 5 | BRF_SND },           // 11 Sound data
+	{ "216-v2.v2",    0x200000, 0x03667a8d, 5 | BRF_SND },           // 12 
+	{ "059-v3.v3",    0x200000, 0x7038c2f9, 5 | BRF_SND },           // 13 
+	{ "216-v4.v4",    0x200000, 0x31b99bd6, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kizunab, kizunab, neogeo)
+STD_ROM_FN(kizunab)
+
+struct BurnDriver BurnDrvkizunab = {
+	"kizunab", "kizuna", "neogeo", NULL, "1996",
+	"Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, kizunabRomInfo, kizunabRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Ninja Master's - haoh-ninpo-cho (Boss Hack)
+
+static struct BurnRomInfo ninjamabRomDesc[] = {
+	{ "217-p1b.p1",   0x100000, 0x661d86c9, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "217-p2.sp2",   0x200000, 0x191fca88, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "217-s1.s1",    0x020000, 0x8ff782f0, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "217-c1.c1",    0x400000, 0x5fe97bc4, 3 | BRF_GRA },           //  3 Sprite data
+	{ "217-c2.c2",    0x400000, 0x886e0d66, 3 | BRF_GRA },           //  4 
+	{ "217-c3.c3",    0x400000, 0x59e8525f, 3 | BRF_GRA },           //  5 
+	{ "217-c4.c4",    0x400000, 0x8521add2, 3 | BRF_GRA },           //  6 
+	{ "217-c5.c5",    0x400000, 0xfb1896e5, 3 | BRF_GRA },           //  7 
+	{ "217-c6.c6",    0x400000, 0x1c98c54b, 3 | BRF_GRA },           //  8 
+	{ "217-c7.c7",    0x400000, 0x8b0ede2e, 3 | BRF_GRA },           //  9 
+	{ "217-c8.c8",    0x400000, 0xa085bb61, 3 | BRF_GRA },           // 10 
+
+	{ "217-m1.m1",    0x020000, 0xd00fb2af, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "217-v1.v1",    0x400000, 0x1c34e013, 5 | BRF_SND },           // 12 Sound data
+	{ "217-v2.v2",    0x200000, 0x22f1c681, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(ninjamab, ninjamab, neogeo)
+STD_ROM_FN(ninjamab)
+
+struct BurnDriver BurnDrvninjamab = {
+	"ninjamab", "ninjamas", "neogeo", NULL, "1996",
+	"Ninja Master's - haoh-ninpo-cho (Boss Hack)\0", NULL, "ADK / SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, ninjamabRomInfo, ninjamabRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Samurai Shodown IV - Amakusa's Revenge (Boss Hack)
+
+static struct BurnRomInfo samsho4bRomDesc[] = {
+	{ "222-p1b.p1",   0x100000, 0xb3cdfc29, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "222-p2.sp2",   0x400000, 0xb023cd8b, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "222-s1.s1",    0x020000, 0x8d3d3bf9, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "222-c1.c1",    0x400000, 0x68f2ed95, 3 | BRF_GRA },           //  3 Sprite data
+	{ "222-c2.c2",    0x400000, 0xa6e9aff0, 3 | BRF_GRA },           //  4 
+	{ "222-c3.c3",    0x400000, 0xc91b40f4, 3 | BRF_GRA },           //  5 
+	{ "222-c4.c4",    0x400000, 0x359510a4, 3 | BRF_GRA },           //  6 
+	{ "222-c5.c5",    0x400000, 0x9cfbb22d, 3 | BRF_GRA },           //  7 
+	{ "222-c6.c6",    0x400000, 0x685efc32, 3 | BRF_GRA },           //  8 
+	{ "222-c7.c7",    0x400000, 0xd0f86f0d, 3 | BRF_GRA },           //  9 
+	{ "222-c8.c8",    0x400000, 0xadfc50e3, 3 | BRF_GRA },           // 10 
+
+	{ "222-m1.m1",    0x020000, 0x7615bc1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "222-v1.v1",    0x400000, 0x7d6ba95f, 5 | BRF_SND },           // 12 Sound data
+	{ "222-v2.v2",    0x400000, 0x6c33bb5d, 5 | BRF_SND },           // 13 
+	{ "222-v3.v3",    0x200000, 0x831ea8c0, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsho4b, samsho4b, neogeo)
+STD_ROM_FN(samsho4b)
+
+struct BurnDriver BurnDrvSamSho4b = {
+	"samsho4b", "samsho4", "neogeo", NULL, "1996",
+	"Samurai Shodown IV - Amakusa's Revenge (Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho4bRomInfo, samsho4bRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Real Bout Fatal Fury Special (Hidden Hack)
+
+static struct BurnRomInfo rbffspehRomDesc[] = {
+	{ "223-p1b.p1",   0x100000, 0xabf2a6e7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "223-p2.sp2",   0x400000, 0xaddd8f08, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "223-s1.s1",    0x020000, 0x7ecd6e8c, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "223-c1.c1",    0x400000, 0xebab05e2, 3 | BRF_GRA },           //  3 Sprite data
+	{ "223-c2.c2",    0x400000, 0x641868c3, 3 | BRF_GRA },           //  4 
+	{ "223-c3.c3",    0x400000, 0xca00191f, 3 | BRF_GRA },           //  5 
+	{ "223-c4.c4",    0x400000, 0x1f23d860, 3 | BRF_GRA },           //  6 
+	{ "223-c5.c5",    0x400000, 0x321e362c, 3 | BRF_GRA },           //  7 
+	{ "223-c6.c6",    0x400000, 0xd8fcef90, 3 | BRF_GRA },           //  8 
+	{ "223-c7.c7",    0x400000, 0xbc80dd2d, 3 | BRF_GRA },           //  9 
+	{ "223-c8.c8",    0x400000, 0x5ad62102, 3 | BRF_GRA },           // 10 
+
+	{ "223-m1.m1",    0x020000, 0x3fee46bf, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "223-v1.v1",    0x400000, 0x76673869, 5 | BRF_SND },           // 12 Sound data
+	{ "223-v2.v2",    0x400000, 0x7a275acd, 5 | BRF_SND },           // 13 
+	{ "223-v3.v3",    0x400000, 0x5a797fd2, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(rbffspeh, rbffspeh, neogeo)
+STD_ROM_FN(rbffspeh)
+
+struct BurnDriver BurnDrvrbffspeh = {
+	"rbffspeh", "rbffspec", "neogeo", NULL, "1996",
+	"Real Bout Fatal Fury Special (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, rbffspehRomInfo, rbffspehRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Twinkle Star Sprites (Hidden Hack)
+
+static struct BurnRomInfo twinsprhRomDesc[] = {
+	{ "224-p1h.p1",   0x200000, 0xdf71c8cd, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "224-s1.s1",    0x020000, 0xeeed5758, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "224-c1.c1",    0x400000, 0xf7da64ab, 3 | BRF_GRA },           //  2 Sprite data
+	{ "224-c2.c2",    0x400000, 0x4c09bbfb, 3 | BRF_GRA },           //  3 
+	{ "224-c3.c3",    0x100000, 0xc59e4129, 3 | BRF_GRA },           //  4 
+	{ "224-c4.c4",    0x100000, 0xb5532e53, 3 | BRF_GRA },           //  5 
+
+	{ "224-m1.m1",    0x020000, 0x364d6f96, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "224-v1.v1",    0x400000, 0xff57f088, 5 | BRF_SND },           //  7 Sound data
+	{ "224-v2.v2",    0x200000, 0x7ad26599, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(twinsprh, twinsprh, neogeo)
+STD_ROM_FN(twinsprh)
+
+struct BurnDriver BurnDrvtwinsprh = {
+	"twinsprh", "twinspri", "neogeo", NULL, "1996",
+	"Twinkle Star Sprites (Hidden Hack)\0", NULL, "ADK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VERSHOOT, 0,
+	NULL, twinsprhRomInfo, twinsprhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Waku Waku 7 (Hidden Hack)
+
+static struct BurnRomInfo wakuwa7hRomDesc[] = {
+	{ "225-p1h.p1",   0x100000, 0x0b7a3776, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "225-p2.sp2",   0x200000, 0xfe190665, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "225-s1.s1",    0x020000, 0x71c4b4b5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "225-c1.c1",    0x400000, 0xee4fea54, 3 | BRF_GRA },           //  3 Sprite data
+	{ "225-c2.c2",    0x400000, 0x0c549e2d, 3 | BRF_GRA },           //  4 
+	{ "225-c3.c3",    0x400000, 0xaf0897c0, 3 | BRF_GRA },           //  5 
+	{ "225-c4.c4",    0x400000, 0x4c66527a, 3 | BRF_GRA },           //  6 
+	{ "225-c5.c5",    0x400000, 0x8ecea2b5, 3 | BRF_GRA },           //  7 
+	{ "225-c6.c6",    0x400000, 0x0eb11a6d, 3 | BRF_GRA },           //  8 
+
+	{ "225-m1.m1",    0x020000, 0x0634bba6, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "225-v1.v1",    0x400000, 0x6195c6b4, 5 | BRF_SND },           // 10 Sound data
+	{ "225-v2.v2",    0x400000, 0x6159c5fe, 5 | BRF_SND },           // 11 
+};
+
+STDROMPICKEXT(wakuwa7h, wakuwa7h, neogeo)
+STD_ROM_FN(wakuwa7h)
+
+struct BurnDriver BurnDrvwakuwa7h = {
+	"wakuwa7h", "wakuwak7", "neogeo", NULL, "1996",
+	"Waku Waku 7 (Hidden Hack)\0", NULL, "Sunsoft", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, wakuwa7hRomInfo, wakuwa7hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Breakers (Boss Hack)
+
+static struct BurnRomInfo breakerbRomDesc[] = {
+	{ "230-p1b.p1",   0x200000, 0x1d708f96, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "230-s1.s1",    0x020000, 0x076fb64c, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "230-c1.c1",    0x400000, 0x68d4ae76, 3 | BRF_GRA },           //  2 Sprite data
+	{ "230-c2.c2",    0x400000, 0xfdee05cd, 3 | BRF_GRA },           //  3 
+	{ "230-c3.c3",    0x400000, 0x645077f3, 3 | BRF_GRA },           //  4 
+	{ "230-c4.c4",    0x400000, 0x63aeb74c, 3 | BRF_GRA },           //  5 
+
+	{ "230-m1.m1",    0x020000, 0x3951a1c1, 4 | BRF_ESS | BRF_PRG }, //  6 Z80 code
+
+	{ "230-v1.v1",    0x400000, 0x7f9ed279, 5 | BRF_SND },           //  7 Sound data
+	{ "230-v2.v2",    0x400000, 0x1d43e420, 5 | BRF_SND },           //  8 
+};
+
+STDROMPICKEXT(breakerb, breakerb, neogeo)
+STD_ROM_FN(breakerb)
+
+struct BurnDriver BurnDrvbreakerb = {
+	"breakerb", "breakers", "neogeo", NULL, "1996",
+	"Breakers (Boss Hack)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, breakerbRomInfo, breakerbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '97 (Korean, Practice Mode, Boss Hack)
+
+static struct BurnRomInfo kof97krRomDesc[] = {
+	{ "232-p1k.p1",   0x100000, 0xadf9bf77, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2k.sp2",  0x400000, 0x94434eec, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1.s1",    0x020000, 0x8514ecf5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1k.c1",   0x800000, 0x0f89f596, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2k.c2",   0x800000, 0x3d1328c5, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5k.c5",   0x400000, 0x8174fdf5, 3 | BRF_GRA },           //  7 
+	{ "232-c6k.c6",   0x400000, 0x32d5aa6a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97kr, kof97kr, neogeo)
+STD_ROM_FN(kof97kr)
+
+struct BurnDriver BurnDrvKof97kr = {
+	"kof97kr", "kof97", "neogeo", NULL, "2005",
+	"The King of Fighters '97 (Korean, Practice Mode, Boss Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97krRomInfo, kof97krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '97 (Korean, PlayStation Hack)
+
+static struct BurnRomInfo kof97pskRomDesc[] = {
+	{ "232-p1ps.p1",  0x100000, 0x57a35bf6, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2ps.sp2", 0x400000, 0xe1398fae, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1.s1",    0x020000, 0x8514ecf5, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1ps.c1",  0x800000, 0x2488dbb1, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2ps.c2",  0x800000, 0xebb78e2a, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5ps.c5",  0x400000, 0x47711a8c, 3 | BRF_GRA },           //  7 
+	{ "232-c6ps.c6",  0x400000, 0x6703a48a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97psk, kof97psk, neogeo)
+STD_ROM_FN(kof97psk)
+
+struct BurnDriver BurnDrvkof97ps = {
+	"kof97psk", "kof97", "neogeo", NULL, "2005",
+	"The King of Fighters '97 (Korean, PlayStation Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97pskRomInfo, kof97pskRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '97 Tu She Edition (v1.2, Hack)
+
+static struct BurnRomInfo kof97tsRomDesc[] = {
+	{ "232-p1ts.p1",  0x100000, 0x9a56d828, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "232-p2ts.p2",  0x400000, 0x6aacb6f3, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "232-s1ts.s1",  0x020000, 0xa7d2ea6d, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "232-c1.c1",    0x800000, 0x5f8bf0a1, 3 | BRF_GRA },           //  3 Sprite data
+	{ "232-c2.c2",    0x800000, 0xe4d45c81, 3 | BRF_GRA },           //  4 
+	{ "232-c3.c3",    0x800000, 0x581d6618, 3 | BRF_GRA },           //  5 
+	{ "232-c4.c4",    0x800000, 0x49bb1e68, 3 | BRF_GRA },           //  6 
+	{ "232-c5ts.c5",  0x400000, 0x8174fdf5, 3 | BRF_GRA },           //  7 
+	{ "232-c6ts.c6",  0x400000, 0x32d5aa6a, 3 | BRF_GRA },           //  8 
+
+	{ "232-m1.m1",    0x020000, 0x45348747, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "232-v1.v1",    0x400000, 0x22a2b5b5, 5 | BRF_SND },           // 10 Sound data
+	{ "232-v2.v2",    0x400000, 0x2304e744, 5 | BRF_SND },           // 11 
+	{ "232-v3.v3",    0x400000, 0x759eb954, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(kof97ts, kof97ts, neogeo)
+STD_ROM_FN(kof97ts)
+
+struct BurnDriver BurnDrvKof97ts = {
+	"kof97ts", "kof97", "neogeo", NULL, "2019",
+	"The King of Fighters '97 Tu She Edition (v1.2, Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof97tsRomInfo, kof97tsRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)
+
+static struct BurnRomInfo lastbladbRomDesc[] = {
+	{ "234-p1h.p1",   0x100000, 0xdf879af3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "234-p2.sp2",   0x400000, 0x0fdc289e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "234-s1.s1",    0x020000, 0x95561412, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "234-c1.c1",    0x800000, 0x9f7e2bd3, 3 | BRF_GRA },           //  3 Sprite data
+	{ "234-c2.c2",    0x800000, 0x80623d3c, 3 | BRF_GRA },           //  4 
+	{ "234-c3.c3",    0x800000, 0x91ab1a30, 3 | BRF_GRA },           //  5 
+	{ "234-c4.c4",    0x800000, 0x3d60b037, 3 | BRF_GRA },           //  6 
+	{ "234-c5.c5",    0x400000, 0x1ba80cee, 3 | BRF_GRA },           //  7 
+	{ "234-c6.c6",    0x400000, 0xbeafd091, 3 | BRF_GRA },           //  8 
+
+	{ "234-m1.m1",    0x020000, 0x087628ea, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "234-v1.v1",    0x400000, 0xed66b76f, 5 | BRF_SND },           // 10 Sound data
+	{ "234-v2.v2",    0x400000, 0xa0e7f6e2, 5 | BRF_SND },           // 11 
+	{ "234-v3.v3",    0x400000, 0xa506e1e2, 5 | BRF_SND },           // 12 
+	{ "234-v4.v4",    0x400000, 0x0e34157f, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbladb, lastbladb, neogeo)
+STD_ROM_FN(lastbladb)
+
+struct BurnDriver BurnDrvlastbladb = {
+	"lastbladb", "lastblad", "neogeo", NULL, "1997",
+	"The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)\0", NULL, "SNK", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbladbRomInfo, lastbladbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Puzzle De Pon! R! (Korean)
+
+static struct BurnRomInfo puzzldrkRomDesc[] = {
+	{ "235-p1.p1",    0x080000, 0xafed5de2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "235-s1.s1",    0x020000, 0x3b13a22f, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "202-c1k.c1",   0x100000, 0xfc5e5ae7, 3 | BRF_GRA },           //  2 Sprite data		/ TC538200
+	{ "202-c2.c2",    0x100000, 0x42371307, 3 | BRF_GRA },           //  3 
+
+	{ "202-m1.m1",    0x020000, 0x9c0291ea, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "202-v1.v1",    0x080000, 0xdebeb8fb, 5 | BRF_SND },           //  5 Sound data
+};
+
+STDROMPICKEXT(puzzldrk, puzzldrk, neogeo)
+STD_ROM_FN(puzzldrk)
+
+struct BurnDriver BurnDrvpuzzldrk = {
+	"puzzldrk", "puzzledp", "neogeo", NULL, "2006",
+	"Puzzle De Pon! R! (Korean)\0", NULL, "Taito (Visco license)", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, puzzldrkRomInfo, puzzldrkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)
+
+static struct BurnRomInfo rbff2hbRomDesc[] = {
+	{ "240-p1b.p1",   0x100000, 0xd01854fa, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "240-p2b.p2",   0x400000, 0xc063193d, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "240-s1.s1",    0x020000, 0xda3b40de, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "240-c1.c1",    0x800000, 0xeffac504, 3 | BRF_GRA },           //  3 Sprite data
+	{ "240-c2.c2",    0x800000, 0xed182d44, 3 | BRF_GRA },           //  4 
+	{ "240-c3.c3",    0x800000, 0x22e0330a, 3 | BRF_GRA },           //  5 
+	{ "240-c4.c4",    0x800000, 0xc19a07eb, 3 | BRF_GRA },           //  6 
+	{ "240-c5b.c5",   0x800000, 0x21831787, 3 | BRF_GRA },           //  7 
+	{ "240-c6b.c6",   0x800000, 0x06b2d1da, 3 | BRF_GRA },           //  8 
+
+	{ "240-m1.m1",    0x040000, 0xed482791, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "240-v1.v1",    0x400000, 0xf796265a, 5 | BRF_SND },           // 10 Sound data
+	{ "240-v2.v2",    0x400000, 0x2cb3f3bb, 5 | BRF_SND },           // 11 
+	{ "240-v3.v3",    0x400000, 0x8fe1367a, 5 | BRF_SND },           // 12 
+	{ "240-v4.v4",    0x200000, 0x996704d8, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(rbff2hb, rbff2hb, neogeo)
+STD_ROM_FN(rbff2hb)
+
+struct BurnDriver BurnDrvrbff2hb = {
+	"rbff2hb", "rbff2", "neogeo", NULL, "1998",
+	"Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_FATFURY,
+	NULL, rbff2hbRomInfo, rbff2hbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters '98 (System Bugs Fix)
+
+static struct BurnRomInfo kof98bfRomDesc[] = {
+	{ "242-p1bf.p1",  0x100000, 0xf881bbc4, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2bf.sp2", 0x400000, 0x29039af7, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1bf.s1",  0x020000, 0x6389fb37, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1bf.c1",  0x800000, 0x770043c3, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2bf.c2",  0x800000, 0xdce7ed5b, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98bf, kof98bf, neogeo)
+STD_ROM_FN(kof98bf)
+
+struct BurnDriver BurnDrvKof98bf = {
+	"kof98bf", "kof98", "neogeo", NULL, "1998",
+	"The King of Fighters '98 (System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98bfRomInfo, kof98bfRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)
+
+static struct BurnRomInfo kof98cdRomDesc[] = {
+	{ "242-p1cd.p1",  0x100000, 0x936c2094, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2cd.sp2", 0x400000, 0xef4d2509, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1bf.s1",  0x020000, 0x6389fb37, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1cd.c1",  0x800000, 0x1d2f32a4, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2cd.c2",  0x800000, 0xb25f3d95, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98cd, kof98cd, neogeo)
+STD_ROM_FN(kof98cd)
+
+struct BurnDriver BurnDrvKof98cd = {
+	"kof98cd", "kof98", "neogeo", NULL, "1998",
+	"The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98cdRomInfo, kof98cdRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)
+
+static struct BurnRomInfo kof98krRomDesc[] = {
+	{ "242-p1kr.p1",  0x100000, 0x495a661e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "242-p2kr.p2",  0x400000, 0xdb631e31, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "242-s1kr.s1",  0x020000, 0xb2806d03, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "242-c1kr.c1",  0x800000, 0x6815f107, 3 | BRF_GRA },           //  3 Sprite data
+	{ "242-c2kr.c2",  0x800000, 0xd31c7784, 3 | BRF_GRA },           //  4 
+	{ "242-c3.c3",    0x800000, 0x22127b4f, 3 | BRF_GRA },           //  5 
+	{ "242-c4.c4",    0x800000, 0x0b4fa044, 3 | BRF_GRA },           //  6 
+	{ "242-c5.c5",    0x800000, 0x9d10bed3, 3 | BRF_GRA },           //  7 
+	{ "242-c6.c6",    0x800000, 0xda07b6a2, 3 | BRF_GRA },           //  8 
+	{ "242-c7.c7",    0x800000, 0xf6d7a38a, 3 | BRF_GRA },           //  9 
+	{ "242-c8.c8",    0x800000, 0xc823e045, 3 | BRF_GRA },           // 10 
+
+	{ "242-mg1.m1",   0x040000, 0x4e7a6b1b, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "242-v1.v1",    0x400000, 0xb9ea8051, 5 | BRF_SND },           // 12 Sound data
+	{ "242-v2.v2",    0x400000, 0xcc11106e, 5 | BRF_SND },           // 13 
+	{ "242-v3.v3",    0x400000, 0x044ea4e1, 5 | BRF_SND },           // 14 
+	{ "242-v4.v4",    0x400000, 0x7985ea30, 5 | BRF_SND },           // 15 
+};
+
+STDROMPICKEXT(kof98kr, kof98kr, neogeo)
+STD_ROM_FN(kof98kr)
+
+struct BurnDriver BurnDrvKof98kr = {
+	"kof98kr", "kof98", "neogeo", NULL, "2006",
+	"The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof98krRomInfo, kof98krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The Last Blade 2 (Hidden Hack)
+
+static struct BurnRomInfo lastbl2hRomDesc[] = {
+	{ "243-p1h.p1",   0x100000, 0x8af4b6e2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "243-p2h.p2",   0x400000, 0xeef07572, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "243-s1.s1",    0x020000, 0xc9cd2298, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "243-c1.c1",    0x800000, 0x5839444d, 3 | BRF_GRA },           //  3 Sprite data
+	{ "243-c2.c2",    0x800000, 0xdd087428, 3 | BRF_GRA },           //  4 
+	{ "243-c3.c3",    0x800000, 0x6054cbe0, 3 | BRF_GRA },           //  5 
+	{ "243-c4.c4",    0x800000, 0x8bd2a9d2, 3 | BRF_GRA },           //  6 
+	{ "243-c5.c5",    0x800000, 0x6a503dcf, 3 | BRF_GRA },           //  7 
+	{ "243-c6.c6",    0x800000, 0xec9c36d0, 3 | BRF_GRA },           //  8 
+
+	{ "243-m1.m1",    0x020000, 0xacf12d10, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "243-v1.v1",    0x400000, 0xf7ee6fbb, 5 | BRF_SND },           // 10 Sound data
+	{ "243-v2.v2",    0x400000, 0xaa9e4df6, 5 | BRF_SND },           // 11 
+	{ "243-v3.v3",    0x400000, 0x4ac750b2, 5 | BRF_SND },           // 12 
+	{ "243-v4.v4",    0x400000, 0xf5c64ba6, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbl2h, lastbl2h, neogeo)
+STD_ROM_FN(lastbl2h)
+
+struct BurnDriver BurnDrvlastbl2h = {
+	"lastbl2h", "lastbld2", "neogeo", NULL, "1998",
+	"The Last Blade 2 (Hidden Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbl2hRomInfo, lastbl2hRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The Last Blade 2 (System Bugs Fix)
+
+static struct BurnRomInfo lastbl2fRomDesc[] = {
+	{ "243-p1f.p1",   0x100000, 0x4fbc1019, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "243-p2f.p2",   0x400000, 0xad489305, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "243-s1.s1",    0x020000, 0xc9cd2298, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "243-c1.c1",    0x800000, 0x5839444d, 3 | BRF_GRA },           //  3 Sprite data
+	{ "243-c2.c2",    0x800000, 0xdd087428, 3 | BRF_GRA },           //  4 
+	{ "243-c3.c3",    0x800000, 0x6054cbe0, 3 | BRF_GRA },           //  5 
+	{ "243-c4.c4",    0x800000, 0x8bd2a9d2, 3 | BRF_GRA },           //  6 
+	{ "243-c5.c5",    0x800000, 0x6a503dcf, 3 | BRF_GRA },           //  7 
+	{ "243-c6.c6",    0x800000, 0xec9c36d0, 3 | BRF_GRA },           //  8 
+
+	{ "243-m1.m1",    0x020000, 0xacf12d10, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "243-v1.v1",    0x400000, 0xf7ee6fbb, 5 | BRF_SND },           // 10 Sound data
+	{ "243-v2.v2",    0x400000, 0xaa9e4df6, 5 | BRF_SND },           // 11 
+	{ "243-v3.v3",    0x400000, 0x4ac750b2, 5 | BRF_SND },           // 12 
+	{ "243-v4.v4",    0x400000, 0xf5c64ba6, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(lastbl2f, lastbl2f, neogeo)
+STD_ROM_FN(lastbl2f)
+
+struct BurnDriver BurnDrvlastbl2f = {
+	"lastbl2f", "lastbld2", "neogeo", NULL, "1998",
+	"The Last Blade 2 (System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, lastbl2fRomInfo, lastbl2fRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Neo-Geo Cup '98 - The Road to the Victory (Korean)
+
+static struct BurnRomInfo neocu98kRomDesc[] = {
+	{ "244-p1k.p1",   0x200000, 0x130a8029, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "244-s1k.s1",   0x020000, 0xbecb9e7a, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "244-c1k.c1",   0x800000, 0x8505fa3e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "244-c2k.c2",   0x800000, 0x54e86379, 3 | BRF_GRA },           //  3 
+
+	{ "244-m1.m1",    0x020000, 0xa701b276, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "244-v1.v1",    0x400000, 0x79def46d, 5 | BRF_SND },           //  5 Sound data
+	{ "244-v2.v2",    0x200000, 0xb231902f, 5 | BRF_SND },           //  6 
+};
+
+STDROMPICKEXT(neocu98k, neocu98k, neogeo)
+STD_ROM_FN(neocu98k)
+
+struct BurnDriver BurnDrvNeocu98k = {
+	"neocu98k", "neocup98", "neogeo", NULL, "2006",
+	"Neo-Geo Cup '98 - The Road to the Victory (Korean)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_SPORTSFOOTBALL, 0,
+	NULL, neocu98kRomInfo, neocu98kRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Breakers Revenge (Boss Hack)
+
+static struct BurnRomInfo breakrebRomDesc[] = {
+	{ "245-p1b.p1",   0x200000, 0x52c978b5, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "245-s1.s1",    0x020000, 0xe7660a5d, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "245-c1.c1",    0x400000, 0x68d4ae76, 3 | BRF_GRA },           //  2 Sprite data
+	{ "245-c2.c2",    0x400000, 0xfdee05cd, 3 | BRF_GRA },           //  3 
+	{ "245-c3.c3",    0x400000, 0x645077f3, 3 | BRF_GRA },           //  4 
+	{ "245-c4.c4",    0x400000, 0x63aeb74c, 3 | BRF_GRA },           //  5 
+	{ "245-c5.c5",    0x400000, 0xb5f40e7f, 3 | BRF_GRA },           //  6 
+	{ "245-c6.c6",    0x400000, 0xd0337328, 3 | BRF_GRA },           //  7 
+
+	{ "245-m1.m1",    0x020000, 0x00f31c66, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "245-v1.v1",    0x400000, 0xe255446c, 5 | BRF_SND },           //  9 Sound data
+	{ "245-v2.v2",    0x400000, 0x9068198a, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(breakreb, breakreb, neogeo)
+STD_ROM_FN(breakreb)
+
+struct BurnDriver BurnDrvbreakreb = {
+	"breakreb", "breakrev", "neogeo", NULL, "1998",
+	"Breakers Revenge (Boss Hack)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_SWAPP, GBF_VSFIGHT, 0,
+	NULL, breakrebRomInfo, breakrebRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Battle Flip Shot (Korean)
+
+static struct BurnRomInfo flipshtkRomDesc[] = {
+	{ "247-p1.p1",    0x100000, 0x95779094, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "247-s1.s1",    0x020000, 0x6300185c, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "247-c1k.c1",   0x200000, 0x1ccfeff9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "247-c2k.c2",   0x200000, 0x648cdd5d, 3 | BRF_GRA },           //  3 
+
+	{ "247-m1.m1",    0x020000, 0xa9fe0144, 4 | BRF_ESS | BRF_PRG }, //  4 Z80 code
+
+	{ "247-v1.v1",    0x200000, 0x42ec743d, 5 | BRF_SND },           //  5 Sound data
+};
+
+STDROMPICKEXT(flipshtk, flipshtk, neogeo)
+STD_ROM_FN(flipshtk)
+
+struct BurnDriver BurnDrvflipshtk = {
+	"flipshtk", "flipshot", "neogeo", NULL, "2005",
+	"Battle Flip Shot (Korean)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_BALLPADDLE, 0,
+	NULL, flipshtkRomInfo, flipshtkRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)
+
+static struct BurnRomInfo kof99ndRomDesc[] = {
+	{ "251-p1d.p1",  0x100000, 0xcfb4b521, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+	{ "251-p2d.p2",  0x400000, 0xa4afaa86, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "251-c1d.c1",  0x800000, 0xb3d88546, 3 | BRF_GRA },           //  2 Sprite data
+	{ "251-c2d.c2",  0x800000, 0x915c8634, 3 | BRF_GRA },           //  3 
+	{ "251-c3d.c3",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  4 
+	{ "251-c4d.c4",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  5 
+	{ "251-c5d.c5",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  6 
+	{ "251-c6d.c6",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  7 
+	{ "251-c7d.c7",  0x800000, 0x2f68fdeb, 3 | BRF_GRA },           //  8 
+	{ "251-c8d.c8",  0x800000, 0x4c2fad1e, 3 | BRF_GRA },           //  9 
+
+	{ "251-m1.m1",   0x020000, 0x5e74539c, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "251-v1.v1",   0x400000, 0xef2eecc8, 5 | BRF_SND },           // 11 Sound data
+	{ "251-v2.v2",   0x400000, 0x73e211ca, 5 | BRF_SND },           // 12 
+	{ "251-v3.v3",   0x400000, 0x821901da, 5 | BRF_SND },           // 13 
+	{ "251-v4.v4",   0x200000, 0xb49e6178, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof99nd, kof99nd, neogeo)
+STD_ROM_FN(kof99nd)
+
+struct BurnDriver BurnDrvkof99nd = {
+	"kof99nd", "kof99", "neogeo", NULL, "1999",
+	"The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99ndRomInfo, kof99ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)
+
+static struct BurnRomInfo kof99krRomDesc[] = {
+	{ "251-p1kr.p1", 0x100000, 0xbbb04bc2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code 
+	{ "251-p2kr.p2", 0x400000, 0xcedba0c0, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "251-c1kr.c1", 0x800000, 0x5dea7ea8, 3 | BRF_GRA },           //  2 Sprite data
+	{ "251-c2kr.c2", 0x800000, 0x5e218d5a, 3 | BRF_GRA },           //  3 
+	{ "251-c3d.c3",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  4 
+	{ "251-c4d.c4",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  5 
+	{ "251-c5d.c5",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  6 
+	{ "251-c6d.c6",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  7 
+	{ "251-c7kr.c7", 0x800000, 0x165607a2, 3 | BRF_GRA },           //  8 
+	{ "251-c8kr.c8", 0x800000, 0x720c9304, 3 | BRF_GRA },           //  9 
+
+	{ "251-m1.m1",   0x020000, 0x5e74539c, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "251-v1.v1",   0x400000, 0xef2eecc8, 5 | BRF_SND },           // 11 Sound data
+	{ "251-v2.v2",   0x400000, 0x73e211ca, 5 | BRF_SND },           // 12 
+	{ "251-v3.v3",   0x400000, 0x821901da, 5 | BRF_SND },           // 13 
+	{ "251-v4.v4",   0x200000, 0xb49e6178, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof99kr, kof99kr, neogeo)
+STD_ROM_FN(kof99kr)
+
+struct BurnDriver BurnDrvkof99kr = {
+	"kof99kr", "kof99", "neogeo", NULL, "2006",
+	"The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99krRomInfo, kof99krRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters '99 (15th Anniversary Edition 2016)
+/* Yashional hack - 2016/04/19 version */
+static struct BurnRomInfo kof99ae2016RomDesc[] = {
+	{ "199-p1.bin",   0x100000, 0xc19447eb, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "199-p2.bin",   0x800000, 0x55418995, 1 | BRF_ESS | BRF_PRG }, //  1
+
+	{ "199-s1.bin",   0x020000, 0x3c31ee43, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "199-c1.bin",   0x800000, 0x497c2e83, 3 | BRF_GRA },           //  3 Sprite data
+	{ "199-c2.bin",   0x800000, 0x0a13eeb7, 3 | BRF_GRA },           //  4 
+	{ "251-c3d.bin",  0x800000, 0xb047c9d5, 3 | BRF_GRA },           //  5 
+	{ "251-c4d.bin",  0x800000, 0x6bc8e4b1, 3 | BRF_GRA },           //  6 
+	{ "251-c5d.bin",  0x800000, 0x9746268c, 3 | BRF_GRA },           //  7 
+	{ "251-c6d.bin",  0x800000, 0x238b3e71, 3 | BRF_GRA },           //  8 
+	{ "199-c7.bin",   0x800000, 0xf22760ad, 3 | BRF_GRA },           //  9 
+	{ "199-c8.bin",   0x800000, 0x396c3a70, 3 | BRF_GRA },           // 10 
+	{ "199-c9.bin",   0x800000, 0x86a3550d, 3 | BRF_GRA },           // 11 
+	{ "199-ca.bin",   0x800000, 0x986bb897, 3 | BRF_GRA },           // 12 
+	{ "199-cb.bin",   0x800000, 0x7fe785c2, 3 | BRF_GRA },           // 13 
+	{ "199-cc.bin",   0x800000, 0xa7541483, 3 | BRF_GRA },           // 14 
+
+	{ "199-m1.bin",   0x020000, 0xf847e188, 4 | BRF_ESS | BRF_PRG }, // 15 Z80 code
+
+	{ "199-v1.bin",   0x400000, 0xceaa3bae, 5 | BRF_SND },           // 16 Sound data
+	{ "199-v2.bin",   0x400000, 0x07d70650, 5 | BRF_SND },           // 17 
+	{ "251-v3.v3",    0x400000, 0x821901da, 5 | BRF_SND },           // 18 
+	{ "251-v4.v4",    0x200000, 0xb49e6178, 5 | BRF_SND },           // 19 
+};
+
+STDROMPICKEXT(kof99ae2016, kof99ae2016, neogeo)
+STD_ROM_FN(kof99ae2016)
+
+struct BurnDriver BurnDrvkof99ae2016 = {
+	"kof99ae2016", "kof99", "neogeo", NULL, "2015",
+	"The King of Fighters '99 (15th Anniversary Edition 2016)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof99ae2016RomInfo, kof99ae2016RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Ganryu (Fully Decrypted)
+
+static struct BurnRomInfo ganryundRomDesc[] = {
+	{ "252-p1d.p1",  0x200000, 0x8f212084, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "252-c1d.c1",  0x800000, 0x6bf7605b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "252-c2d.c2",  0x800000, 0x596792ce, 3 | BRF_GRA },           //  2 
+
+	{ "252-m1.m1",    0x020000, 0x30cc4099, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "252-v1.v1",    0x400000, 0xe5946733, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(ganryund, ganryund, neogeo)
+STD_ROM_FN(ganryund)
+
+struct BurnDriver BurnDrvganryund = {
+	"ganryund", "ganryu", "neogeo", NULL, "1999",
+	"Ganryu (Fully Decrypted)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, ganryundRomInfo, ganryundRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Garou - Mark of the Wolves (Fully Decrypted)
+
+static struct BurnRomInfo garoundRomDesc[] = {
+	{ "253-p1d.bin",  0x800000, 0xe7c40dfa, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "253-c1d.bin",  0x800000, 0x497be3f2, 3 | BRF_GRA },           //  1 Sprite data
+	{ "253-c2d.bin",  0x800000, 0x6a9e95ca, 3 | BRF_GRA },           //  2 
+	{ "253-c3d.bin",  0x800000, 0x39373d2f, 3 | BRF_GRA },           //  3 
+	{ "253-c4d.bin",  0x800000, 0x4de23f6c, 3 | BRF_GRA },           //  4 
+	{ "253-c5d.bin",  0x800000, 0x16634ba5, 3 | BRF_GRA },           //  5 
+	{ "253-c6d.bin",  0x800000, 0x95671ffd, 3 | BRF_GRA },           //  6 
+	{ "253-c7d.bin",  0x800000, 0xe36ce77f, 3 | BRF_GRA },           //  7 
+	{ "253-c8d.bin",  0x800000, 0xddbd1096, 3 | BRF_GRA },           //  8 
+
+	{ "253-m1.m1",    0x040000, 0x36a806be, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "253-v1.v1",    0x400000, 0x263e388c, 5 | BRF_SND },           // 10 Sound data
+	{ "253-v2.v2",    0x400000, 0x2c6bc7be, 5 | BRF_SND },           // 11 
+	{ "253-v3.v3",    0x400000, 0x0425b27d, 5 | BRF_SND },           // 12 
+	{ "253-v4.v4",    0x400000, 0xa54be8a9, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(garound, garound, neogeo)
+STD_ROM_FN(garound)
+
+void __fastcall garoundWriteWordBankswitch(UINT32 sekAddress, UINT16 wordValue)
+{
+	if (sekAddress == 0x2FFFC0) {
+		static UINT32 bankoffset[64] = {
+			0x100000, 0x200000, 0x300000, 0x400000, // 00
+			0x380000, 0x480000, 0x3d0000, 0x4d0000, // 04
+			0x3f0000, 0x4f0000, 0x500000, 0x600000, // 08
+			0x520000, 0x620000, 0x540000, 0x640000, // 12
+			0x598000, 0x698000, 0x5a0000, 0x6a0000, // 16
+			0x5a8000, 0x6a8000, 0x5b0000, 0x6b0000, // 20
+			0x5b8000, 0x6b8000, 0x5c0000, 0x6c0000, // 24
+			0x5c8000, 0x6c8000, 0x5d0000, 0x6d0000, // 28
+			0x558000, 0x658000, 0x560000, 0x660000, // 32
+			0x568000, 0x668000, 0x570000, 0x670000, // 36
+			0x578000, 0x678000, 0x580000, 0x680000, // 40
+			0x588000, 0x688000, 0x590000, 0x690000, // 44
+			0x6d0000, 0x6d8000, 0x6e0000, 0x6e8000, // 48
+			0x6f0000, 0x6f8000, 0x700000, /* rest not used? */
+		};
+
+		// Unscramble bank number
+		INT32 nBank =
+			(((wordValue >>  5) & 1) << 0) +
+			(((wordValue >>  9) & 1) << 1) +
+			(((wordValue >>  7) & 1) << 2) +
+			(((wordValue >>  6) & 1) << 3) +
+			(((wordValue >> 14) & 1) << 4) +
+			(((wordValue >> 12) & 1) << 5);
+
+		if (bankoffset[nBank] != nNeo68KROMBank) {
+			nNeo68KROMBank = bankoffset[nBank];
+			SekMapMemory(Neo68KROMActive + nNeo68KROMBank,			  0x200000, 0x2FE3FF, MAP_ROM);
+			SekMapMemory(Neo68KROMActive + nNeo68KROMBank + 0x0FE800, 0x2FE800, 0x2FFBFF, MAP_ROM);
+		}
+	}
+}
+
+static INT32 garoundInit()
+{
+	nNeoTextROMSize[nNeoActiveSlot] = 0x80000;
+
+	return NeoSMAInit(NULL, garoundWriteWordBankswitch, 0x2FFFCC, 0x2FFFF0);
+}
+
+struct BurnDriver BurnDrvGaround = {
+	"garound", "garou", "neogeo", NULL, "1999",
+	"Garou - Mark of the Wolves (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, garoundRomInfo, garoundRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	garoundInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Strikers 1945 Plus (Fully Decrypted)
+
+static struct BurnRomInfo s1945pndRomDesc[] = {
+	{ "254-p1.p1",   0x100000, 0xff8efcff, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "254-p2.sp2",  0x400000, 0xefdfd4dd, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "254-c1d.c1",  0x800000, 0x7b6902f9, 3 | BRF_GRA },           //  2 Sprite data
+	{ "254-c2d.c2",  0x800000, 0x51bd4252, 3 | BRF_GRA },           //  3 
+	{ "254-c3d.c3",  0x800000, 0xa38993e4, 3 | BRF_GRA },           //  4 
+	{ "254-c4d.c4",  0x800000, 0xd5696530, 3 | BRF_GRA },           //  5 
+	{ "254-c5d.c5",  0x800000, 0x28764bd6, 3 | BRF_GRA },           //  6 
+	{ "254-c6d.c6",  0x800000, 0x9931bdf1, 3 | BRF_GRA },           //  7 
+	{ "254-c7d.c7",  0x800000, 0x6e12afcd, 3 | BRF_GRA },           //  8 
+	{ "254-c8d.c8",  0x800000, 0x178d4684, 3 | BRF_GRA },           //  9 
+
+	{ "254-m1.m1",   0x020000, 0x994b4487, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "254-v1.v1",   0x400000, 0x844f58fb, 5 | BRF_SND },           // 11 Sound data
+	{ "254-v2.v2",   0x400000, 0xd9a248f0, 5 | BRF_SND },           // 12 
+	{ "254-v3.v3",   0x400000, 0x0b0d2d33, 5 | BRF_SND },           // 13 
+	{ "254-v4.v4",   0x400000, 0x6d13dc91, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(s1945pnd, s1945pnd, neogeo)
+STD_ROM_FN(s1945pnd)
+
+struct BurnDriver BurnDrvs1945pnd = {
+	"s1945pnd", "s1945p", "neogeo", NULL, "1999",
+	"Strikers 1945 Plus (Fully Decrypted)\0", NULL, "Psikyo", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VERSHOOT, 0,
+	NULL, s1945pndRomInfo, s1945pndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Prehistoric Isle 2 (Fully Decrypted)
+
+static struct BurnRomInfo pisle2ndRomDesc[] = {
+	{ "255-p1.p1",   0x100000, 0xdfa3c0f3, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "255-p2.sp2",  0x400000, 0x42050b80, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "255-c1d.c1",  0x800000, 0x50fd785e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "255-c2d.c2",  0x800000, 0xab913f1e, 3 | BRF_GRA },           //  3 
+	{ "255-c3d.c3",  0x800000, 0xbc0ee75c, 3 | BRF_GRA },           //  4 
+	{ "255-c4d.c4",  0x800000, 0x29908823, 3 | BRF_GRA },           //  5 
+	{ "255-c5d.c5",  0x800000, 0x83c56bca, 3 | BRF_GRA },           //  6 
+	{ "255-c6d.c6",  0x800000, 0x59e0e805, 3 | BRF_GRA },           //  7 
+
+	{ "255-m1.m1",   0x020000, 0x8efd4014, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "255-v1.v1",   0x400000, 0x5a14543d, 5 | BRF_SND },           //  9 Sound data
+	{ "255-v2.v2",   0x200000, 0x6610d91a, 5 | BRF_SND },           // 10 
+};
+
+STDROMPICKEXT(pisle2nd, pisle2nd, neogeo)
+STD_ROM_FN(pisle2nd)
+
+struct BurnDriver BurnDrvpisle2nd = {
+	"pisle2nd", "preisle2", "neogeo", NULL, "1999",
+	"Prehistoric Isle 2 (Fully Decrypted)\0", NULL, "Yumekobo", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_HORSHOOT, 0,
+	NULL, pisle2ndRomInfo, pisle2ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 3 (Fully Decrypted)
+
+static struct BurnRomInfo mslug3ndRomDesc[] = {
+	{ "256-p1d.p1",  0x100000, 0x9c42ca85, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "256-p2d.p2",  0x400000, 0x1f3d8ce8, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "256-c1d.c1",  0x800000, 0x3540398c, 3 | BRF_GRA },           //  2 Sprite data
+	{ "256-c2d.c2",  0x800000, 0xbdd220f0, 3 | BRF_GRA },           //  3
+	{ "256-c3d.c3",  0x800000, 0xbfaade82, 3 | BRF_GRA },           //  4
+	{ "256-c4d.c4",  0x800000, 0x1463add6, 3 | BRF_GRA },           //  5
+	{ "256-c5d.c5",  0x800000, 0x48ca7f28, 3 | BRF_GRA },           //  6
+	{ "256-c6d.c6",  0x800000, 0x806eb36f, 3 | BRF_GRA },           //  7
+	{ "256-c7d.c7",  0x800000, 0x9395b809, 3 | BRF_GRA },           //  8
+	{ "256-c8d.c8",  0x800000, 0xa369f9d4, 3 | BRF_GRA },           //  9
+
+	{ "256-m1d.m1",  0x040000, 0x2f88e0c0, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "256-v1.v1",   0x400000, 0xf2690241, 5 | BRF_SND },           // 11 Sound data
+	{ "256-v2.v2",   0x400000, 0x7e2a10bd, 5 | BRF_SND },           // 12
+	{ "256-v3.v3",   0x400000, 0x0eaec17c, 5 | BRF_SND },           // 13
+	{ "256-v4.v4",   0x400000, 0x9b4b22d4, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(mslug3nd, mslug3nd, neogeo)
+STD_ROM_FN(mslug3nd)
+
+struct BurnDriver BurnDrvmslug3nd = {
+	"mslug3nd", "mslug3", "neogeo", NULL, "2000",
+	"Metal Slug 3 (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug3ndRomInfo, mslug3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	mslug3ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2000 (Fully Decrypted)
+
+static struct BurnRomInfo kof2kndRomDesc[] = {
+	{ "257-p1d.p1",  0x100000, 0x5f809dbe, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "257-p2d.p2",  0x400000, 0x693c2c5e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "257-c1d.c1",  0x800000, 0xabcdd424, 3 | BRF_GRA },           //  2 Sprite data
+	{ "257-c2d.c2",  0x800000, 0xcda33778, 3 | BRF_GRA },           //  3 
+	{ "257-c3d.c3",  0x800000, 0x087fb15b, 3 | BRF_GRA },           //  4 
+	{ "257-c4d.c4",  0x800000, 0xfe9dfde4, 3 | BRF_GRA },           //  5 
+	{ "257-c5d.c5",  0x800000, 0x03ee4bf4, 3 | BRF_GRA },           //  6 
+	{ "257-c6d.c6",  0x800000, 0x8599cc5b, 3 | BRF_GRA },           //  7 
+	{ "257-c7d.c7",  0x800000, 0x93c343ec, 3 | BRF_GRA },           //  8 
+	{ "257-c8d.c8",  0x800000, 0xba92f698, 3 | BRF_GRA },           //  9 
+
+	{ "257-m1d.m1",  0x040000, 0xd404db70, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "257-v1.v1",   0x400000, 0x17cde847, 5 | BRF_SND },           // 11 Sound data
+	{ "257-v2.v2",   0x400000, 0x1afb20ff, 5 | BRF_SND },           // 12 
+	{ "257-v3.v3",   0x400000, 0x4605036a, 5 | BRF_SND },           // 13 
+	{ "257-v4.v4",   0x400000, 0x764bbd6b, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2knd, kof2knd, neogeo)
+STD_ROM_FN(kof2knd)
+
+struct BurnDriver BurnDrvkof2knd = {
+	"kof2knd", "kof2000", "neogeo", NULL, "2000",
+	"The King of Fighters 2000 (Fully Decrypted)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2kndRomInfo, kof2kndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2000 (Korean, PlayStation 2 Hack)
+
+static struct BurnRomInfo kof2kkrRomDesc[] = {
+	{ "257-p1kr.p1", 0x100000, 0xa8526ab2, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "257-p2kr.p2", 0x400000, 0xcf9d9e39, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "257-c1kr.c1", 0x800000, 0xe5773336, 3 | BRF_GRA },           //  2 Sprite data
+	{ "257-c2kr.c2", 0x800000, 0x654c2a61, 3 | BRF_GRA },           //  3 
+	{ "257-c3d.c3",  0x800000, 0x087fb15b, 3 | BRF_GRA },           //  4 
+	{ "257-c4d.c4",  0x800000, 0xfe9dfde4, 3 | BRF_GRA },           //  5 
+	{ "257-c5d.c5",  0x800000, 0x03ee4bf4, 3 | BRF_GRA },           //  6 
+	{ "257-c6d.c6",  0x800000, 0x8599cc5b, 3 | BRF_GRA },           //  7 
+	{ "257-c7kr.c7", 0x800000, 0xf6d09417, 3 | BRF_GRA },           //  8 
+	{ "257-c8kr.c8", 0x800000, 0x7aff9fba, 3 | BRF_GRA },           //  9 
+
+	{ "257-m1d.m1",  0x040000, 0xd404db70, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "257-v1.v1",   0x400000, 0x17cde847, 5 | BRF_SND },           // 11 Sound data
+	{ "257-v2.v2",   0x400000, 0x1afb20ff, 5 | BRF_SND },           // 12 
+	{ "257-v3.v3",   0x400000, 0x4605036a, 5 | BRF_SND },           // 13 
+	{ "257-v4.v4",   0x400000, 0x764bbd6b, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2kkr, kof2kkr, neogeo)
+STD_ROM_FN(kof2kkr)
+
+struct BurnDriver BurnDrvkof2kkr = {
+	"kof2kkr", "kof2000", "neogeo", NULL, "2010",
+	"The King of Fighters 2000 (Korean, PlayStation 2 Hack)\0", NULL, "SNK", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2kkrRomInfo, kof2kkrRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Bang Bead (Fully Decrypted)
+
+static struct BurnRomInfo bangbndRomDesc[] = {
+	{ "259-p1d.p1",  0x200000, 0x08b6b530, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "259-c1d.c1",  0x800000, 0xc50a91c3, 3 | BRF_GRA },           //  1 Sprite data
+	{ "259-c2d.c2",  0x800000, 0x820ab36e, 3 | BRF_GRA },           //  2 
+
+	{ "259-m1.m1",   0x020000, 0x85668ee9, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "259-v1.v1",   0x400000, 0x088eb8ab, 5 | BRF_SND },           //  4 Sound data
+	{ "259-v2.v2",   0x100000, 0x97528fe9, 5 | BRF_SND },           //  5 
+};
+
+STDROMPICKEXT(bangbnd, bangbnd, neogeo)
+STD_ROM_FN(bangbnd)
+
+struct BurnDriver BurnDrvbangbnd = {
+	"bangbnd", "bangbead", "neogeo", NULL, "2000",
+	"Bang Bead (Fully Decrypted)\0", NULL, "Visco", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_BALLPADDLE, 0,
+	NULL, bangbndRomInfo, bangbndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Nightmare in the Dark (Fully Decrypted)
+
+static struct BurnRomInfo nitdndRomDesc[] = {
+	{ "260-p1.p1",    0x080000, 0x61361082, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "260-c1d.c1",   0x800000, 0xf3ff4953, 3 | BRF_GRA },           //  1 Sprite data
+	{ "260-c2d.c2",   0x800000, 0xf1e49faa, 3 | BRF_GRA },           //  2 
+
+	{ "260-m1.m1",    0x080000, 0x6407c5e5, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "260-v1.v1",    0x400000, 0x24b0480c, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(nitdnd, nitdnd, neogeo)
+STD_ROM_FN(nitdnd)
+
+struct BurnDriver BurnDrvnitdnd = {
+	"nitdnd", "nitd", "neogeo", NULL, "2000",
+	"Nightmare in the Dark (Fully Decrypted)\0", NULL, "Eleven / Gavaking", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, 0,
+	NULL, nitdndRomInfo, nitdndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Sengoku 3 (Fully Decrypted)
+
+static struct BurnRomInfo sengo3ndRomDesc[] = {
+	{ "261-p1d.p1",  0x200000, 0x12db5c94, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "261-c1d.c1",  0x800000, 0x9af7cbca, 3 | BRF_GRA },           //  1 Sprite data
+	{ "261-c2d.c2",  0x800000, 0x2a1f874d, 3 | BRF_GRA },           //  2 
+	{ "261-c3d.c3",  0x800000, 0x5403adb5, 3 | BRF_GRA },           //  3 
+	{ "261-c4d.c4",  0x800000, 0x18926df6, 3 | BRF_GRA },           //  4 
+
+	{ "261-m1.m1",   0x080000, 0x7d501c39, 4 | BRF_ESS | BRF_PRG }, //  5 Z80 code
+
+	{ "261-v1.v1",   0x400000, 0x64c30081, 5 | BRF_SND },           //  6 Sound data
+	{ "261-v2.v2",   0x400000, 0x392a9c47, 5 | BRF_SND },           //  7 
+	{ "261-v3.v3",   0x400000, 0xc1a7ebe3, 5 | BRF_SND },           //  8 
+	{ "261-v4.v4",   0x200000, 0x9000d085, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(sengo3nd, sengo3nd, neogeo)
+STD_ROM_FN(sengo3nd)
+
+struct BurnDriver BurnDrvSengo3nd = {
+	"sengo3nd", "sengoku3", "neogeo", NULL, "2001",
+	"Sengoku 3 (Fully Decrypted)\0", NULL, "SNK / Noise Factory", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, sengo3ndRomInfo, sengo3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Sengoku 3 (Hidden Hack)
+
+static struct BurnRomInfo sengo3nhRomDesc[] = {
+	{ "261-p1h.p1",   0x200000, 0xb0ce4444, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "261-c1d.c1",   0x800000, 0x9af7cbca, 3 | BRF_GRA },           //  1 Sprite data
+	{ "261-c2d.c2",   0x800000, 0x2a1f874d, 3 | BRF_GRA },           //  2 
+	{ "261-c3d.c3",   0x800000, 0x5403adb5, 3 | BRF_GRA },           //  3 
+	{ "261-c4d.c4",   0x800000, 0x18926df6, 3 | BRF_GRA },           //  4 
+
+	{ "261-m1.m1",    0x080000, 0x7d501c39, 4 | BRF_ESS | BRF_PRG }, //  5 Z80 code
+
+	{ "261-v1.v1",    0x400000, 0x64c30081, 5 | BRF_SND },           //  6 Sound data
+	{ "261-v2.v2",    0x400000, 0x392a9c47, 5 | BRF_SND },           //  7 
+	{ "261-v3.v3",    0x400000, 0xc1a7ebe3, 5 | BRF_SND },           //  8 
+	{ "261-v4.v4",    0x200000, 0x9000d085, 5 | BRF_SND },           //  9 
+};
+
+STDROMPICKEXT(sengo3nh, sengo3nh, neogeo)
+STD_ROM_FN(sengo3nh)
+
+struct BurnDriver BurnDrvsengo3nh = {
+	"sengo3nh", "sengoku3", "neogeo", NULL, "2001",
+	"Sengoku 3 (Hidden Hack)\0", NULL, "SNK / Noise Factory", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_SCRFIGHT, 0,
+	NULL, sengo3nhRomInfo, sengo3nhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters 2001 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k1ndRomDesc[] = {
+	{ "262-p1d.p1",      0x100000, 0x138dea19, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "262-p2d.p2",      0x400000, 0xc773bf51, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "262-c1d.c1",      0x800000, 0x098aeb69, 3 | BRF_GRA },           //  2 Sprite data
+	{ "262-c2d.c2",      0x800000, 0xf9d05d99, 3 | BRF_GRA },           //  3 
+	{ "262-c3d.c3",      0x800000, 0x4c7ec427, 3 | BRF_GRA },           //  4 
+	{ "262-c4d.c4",      0x800000, 0x1d237aa6, 3 | BRF_GRA },           //  5 
+	{ "262-c5d.c5",      0x800000, 0xc2256db5, 3 | BRF_GRA },           //  6 
+	{ "262-c6d.c6",      0x800000, 0x8d6565a9, 3 | BRF_GRA },           //  7 
+	{ "262-c7d.c7",      0x800000, 0xd1408776, 3 | BRF_GRA },           //  8 
+	{ "262-c8d.c8",      0x800000, 0x954d0e16, 3 | BRF_GRA },           //  9 
+
+	{ "262-m1d.m1",      0x020000, 0x2fb0a8a5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "262-v1-08-e0.v1", 0x400000, 0x83d49ecf, 5 | BRF_SND },           // 11 Sound data
+	{ "262-v2-08-e0.v2", 0x400000, 0x003f1843, 5 | BRF_SND },           // 12 
+	{ "262-v3-08-e0.v3", 0x400000, 0x2ae38dbe, 5 | BRF_SND },           // 13 
+	{ "262-v4-08-e0.v4", 0x400000, 0x26ec4dd9, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k1nd, kof2k1nd, neogeo)
+STD_ROM_FN(kof2k1nd)
+
+struct BurnDriver BurnDrvkof2k1nd = {
+	"kof2k1nd", "kof2001", "neogeo", NULL, "2001",
+	"The King of Fighters 2001 (Fully Decrypted)\0", NULL, "SNK / Eolith", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k1ndRomInfo, kof2k1ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2001 (PlayStation 2 Hack)
+
+static struct BurnRomInfo kof2k1ps2RomDesc[] = {
+	{ "262-p1ps2.p1",    0x100000, 0xb5becb3c, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "262-p2ps2.p2",    0x400000, 0x7fc0136f, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "262-c1d.c1",      0x800000, 0x098aeb69, 3 | BRF_GRA },           //  2 Sprite data
+	{ "262-c2d.c2",      0x800000, 0xf9d05d99, 3 | BRF_GRA },           //  3 
+	{ "262-c3d.c3",      0x800000, 0x4c7ec427, 3 | BRF_GRA },           //  4 
+	{ "262-c4d.c4",      0x800000, 0x1d237aa6, 3 | BRF_GRA },           //  5 
+	{ "262-c5d.c5",      0x800000, 0xc2256db5, 3 | BRF_GRA },           //  6 
+	{ "262-c6d.c6",      0x800000, 0x8d6565a9, 3 | BRF_GRA },           //  7 
+	{ "262-c7ps2.c7",    0x800000, 0x85e1c51f, 3 | BRF_GRA },           //  8 
+	{ "262-c8ps2.c8",    0x800000, 0xad2c47db, 3 | BRF_GRA },           //  9 
+
+	{ "262-m1d.m1",      0x020000, 0x2fb0a8a5, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "262-v1-08-e0.v1", 0x400000, 0x83d49ecf, 5 | BRF_SND },           // 11 Sound data
+	{ "262-v2-08-e0.v2", 0x400000, 0x003f1843, 5 | BRF_SND },           // 12 
+	{ "262-v3-08-e0.v3", 0x400000, 0x2ae38dbe, 5 | BRF_SND },           // 13 
+	{ "262-v4-08-e0.v4", 0x400000, 0x26ec4dd9, 5 | BRF_SND },           // 14
+};
+
+STDROMPICKEXT(kof2k1ps2, kof2k1ps2, neogeo)
+STD_ROM_FN(kof2k1ps2)
+
+struct BurnDriver BurnDrvkof2k1ps2 = {
+	"kof2k1ps2", "kof2001", "neogeo", NULL, "2001",
+	"The King of Fighters 2001 (PlayStation 2 Hack)\0", NULL, "SNK / Eolith", "Neo Geo AES",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k1ps2RomInfo, kof2k1ps2RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 4 (Fully Decrypted)
+
+static struct BurnRomInfo mslug4ndRomDesc[] = {
+	{ "263-p1d.p1",  0x100000, 0xc67f5c8d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "263-p2d.p2",  0x400000, 0xbc3ec89e, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "263-c1d.c1",  0x800000, 0xa75ffcde, 3 | BRF_GRA },           //  2 Sprite data
+	{ "263-c2d.c2",  0x800000, 0x5ab0d12b, 3 | BRF_GRA },           //  3 
+	{ "263-c3d.c3",  0x800000, 0x61af560c, 3 | BRF_GRA },           //  4 
+	{ "263-c4d.c4",  0x800000, 0xf2c544fd, 3 | BRF_GRA },           //  5 
+	{ "263-c5d.c5",  0x800000, 0x84c66c44, 3 | BRF_GRA },           //  6 
+	{ "263-c6d.c6",  0x800000, 0x5ed018ab, 3 | BRF_GRA },           //  7 
+
+	{ "263-m1d.m1",  0x020000, 0xef5db532, 4 | BRF_ESS | BRF_PRG }, //  8 Z80 code
+
+	{ "263-v1d.v1",  0x400000, 0x8cb5a9ef, 5 | BRF_SND },           //  9 Sound data
+	{ "263-v2d.v2",  0x400000, 0x94217b1e, 5 | BRF_SND },           // 10 
+	{ "263-v3d.v3",  0x400000, 0x7616fcec, 5 | BRF_SND },           // 11 
+	{ "263-v4d.v4",  0x400000, 0x7b0b92a1, 5 | BRF_SND },           // 12 
+};
+
+STDROMPICKEXT(mslug4nd, mslug4nd, neogeo)
+STD_ROM_FN(mslug4nd)
+
+struct BurnDriver BurnDrvmslug4nd = {
+	"mslug4nd", "mslug4", "neogeo", NULL, "2002",
+	"Metal Slug 4 (Fully Decrypted)\0", NULL, "Mega", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug4ndRomInfo, mslug4ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	mslug3ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Rage of the Dragons (Fully Decrypted)
+
+static struct BurnRomInfo rotdndRomDesc[] = {
+	{ "264-pk1.p1",   0x100000, 0xff2fa719, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "264-pk2.sp2",  0x200000, 0x0df2e112, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "264-c1d.c1",   0x800000, 0xec9d18c0, 3 | BRF_GRA },           //  2 Sprite data
+	{ "264-c2d.c2",   0x800000, 0xb1069066, 3 | BRF_GRA },           //  3 
+	{ "264-c3d.c3",   0x800000, 0x7e636d49, 3 | BRF_GRA },           //  4 
+	{ "264-c4d.c4",   0x800000, 0x76892fda, 3 | BRF_GRA },           //  5 
+	{ "264-c5d.c5",   0x800000, 0x469061bc, 3 | BRF_GRA },           //  6 
+	{ "264-c6d.c6",   0x800000, 0x2200220a, 3 | BRF_GRA },           //  7 
+	{ "264-c7d.c7",   0x800000, 0xedda4baf, 3 | BRF_GRA },           //  8 
+	{ "264-c8d.c8",   0x800000, 0x82b1ba22, 3 | BRF_GRA },           //  9 
+
+	{ "264-m1d.m1",   0x010000, 0x7e06206d, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "264-v1d.v1",   0x400000, 0x5c77a3fe, 5 | BRF_SND },           // 11 Sound data
+	{ "264-v2d.v2",   0x400000, 0xa9b7af14, 5 | BRF_SND },           // 12 
+	{ "264-v3d.v3",   0x400000, 0x17aff92a, 5 | BRF_SND },           // 13 
+	{ "264-v4d.v4",   0x400000, 0xbc6a091e, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(rotdnd, rotdnd, neogeo)
+STD_ROM_FN(rotdnd)
+
+struct BurnDriver BurnDrvrotdnd = {
+	"rotdnd", "rotd", "neogeo", NULL, "2002",
+	"Rage of the Dragons (Fully Decrypted)\0", NULL, "Evoga / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, rotdndRomInfo, rotdndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Rage of the Dragons (Boss Hack)
+
+static struct BurnRomInfo rotdbhRomDesc[] = {
+	{ "264-p1b.p1",   0x800000, 0x44889313, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "264-c1d.c1",   0x800000, 0xec9d18c0, 3 | BRF_GRA },           //  1 Sprite data
+	{ "264-c2d.c2",   0x800000, 0xb1069066, 3 | BRF_GRA },           //  2 
+	{ "264-c3d.c3",   0x800000, 0x7e636d49, 3 | BRF_GRA },           //  3 
+	{ "264-c4d.c4",   0x800000, 0x76892fda, 3 | BRF_GRA },           //  4 
+	{ "264-c5d.c5",   0x800000, 0x469061bc, 3 | BRF_GRA },           //  5 
+	{ "264-c6d.c6",   0x800000, 0x2200220a, 3 | BRF_GRA },           //  6 
+	{ "264-c7b.c7",   0x800000, 0x2b5c1044, 3 | BRF_GRA },           //  7 
+	{ "264-c8b.c8",   0x800000, 0xf697f287, 3 | BRF_GRA },           //  8 
+
+	{ "264-m1d.m1",   0x010000, 0x7e06206d, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "264-v1d.v1",   0x400000, 0x5c77a3fe, 5 | BRF_SND },           // 10 Sound data
+	{ "264-v2d.v2",   0x400000, 0xa9b7af14, 5 | BRF_SND },           // 11 
+	{ "264-v3d.v3",   0x400000, 0x17aff92a, 5 | BRF_SND },           // 12 
+	{ "264-v4d.v4",   0x400000, 0xbc6a091e, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(rotdbh, rotdbh, neogeo)
+STD_ROM_FN(rotdbh)
+
+struct BurnDriver BurnDrvrotdbh = {
+	"rotdbh", "rotd", "neogeo", NULL, "2002",
+	"Rage of the Dragons (Boss Hack)\0", NULL, "Evoga / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, 0,
+	NULL, rotdbhRomInfo, rotdbhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// The King of Fighters 2002 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k2ndRomDesc[] = {
+	{ "265-p1d.p1",   0x100000, 0xd7a4ef5e, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2d.p2",   0x400000, 0x8e26868b, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-c1d.c1",   0x800000, 0x7efa6ef7, 3 | BRF_GRA },           //  2 Sprite data
+	{ "265-c2d.c2",   0x800000, 0xaa82948b, 3 | BRF_GRA },           //  3 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  4 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  5 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  6 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  7 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           //  8 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           //  9 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 11 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 12 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 13 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k2nd, kof2k2nd, neogeo)
+STD_ROM_FN(kof2k2nd)
+
+struct BurnDriver BurnDrvkof2k2nd = {
+	"kof2k2nd", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 (Fully Decrypted)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2ndRomInfo, kof2k2ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)
+
+static struct BurnRomInfo kof2k2khRomDesc[] = {
+	{ "265-p1kh.p1",  0x100000, 0xd8f9626f, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2kh.p2",  0x400000, 0x97724411, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-c1kh.c1",  0x800000, 0x7f10255a, 3 | BRF_GRA },           //  2 Sprite data
+	{ "265-c2kh.c2",  0x800000, 0x2aab7f98, 3 | BRF_GRA },           //  3 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  4 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  5 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  6 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  7 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           //  8 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           //  9 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 11 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 12 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 13 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k2kh, kof2k2kh, neogeo)
+STD_ROM_FN(kof2k2kh)
+
+struct BurnDriver BurnDrvkof2k2kh = {
+	"kof2k2kh", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2khRomInfo, kof2k2khRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 CLIMAX (Hack)
+
+static struct BurnRomInfo kof2k2cmRomDesc[] = {
+	{ "265-p1x.p1",   0x100000, 0x516c362b, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2x.p2",   0x400000, 0x01f474fa, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "265-s1x.s1",   0x020000, 0xbd19c308, 2 | BRF_GRA },           //  2 Text layer tiles
+
+	{ "265-c1d.c1",   0x800000, 0x7efa6ef7, 3 | BRF_GRA },           //  3 Sprite data
+	{ "265-c2d.c2",   0x800000, 0xaa82948b, 3 | BRF_GRA },           //  4 
+	{ "265-c3x.c3",   0x800000, 0xca656090, 3 | BRF_GRA },           //  5 
+	{ "265-c4x.c4",   0x800000, 0xeb898849, 3 | BRF_GRA },           //  6 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  7 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  8 
+	{ "265-c7x.c7",   0x800000, 0xd8a23e22, 3 | BRF_GRA },           //  9 
+	{ "265-c8x.c8",   0x800000, 0xf8ba2250, 3 | BRF_GRA },           // 10 
+
+	{ "265-m1x.m1",   0x020000, 0x9956ccd8, 4 | BRF_ESS | BRF_PRG }, // 11 Z80 code
+
+	{ "265-v1x.v1",   0x800000, 0x6e7e3508, 5 | BRF_SND },           // 12 Sound data
+	{ "265-v2x.v2",   0x800000, 0x2157b90f, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(kof2k2cm, kof2k2cm, neogeo)
+STD_ROM_FN(kof2k2cm)
+
+struct BurnDriver BurnDrvkof2k2cm = {
+	"kof2k2cm", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 CLIMAX (Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k2cmRomInfo, kof2k2cmRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)
+// Modified by: GSC2007
+// Version number: 2017-12-26
+
+static struct BurnRomInfo kf2k2pls2017RomDesc[] = {
+	{ "265-p1ps.p1",  0x100000, 0xbd94702d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "265-p2ps.p2",  0x500000, 0x76e75315, 1 | BRF_ESS | BRF_PRG }, //  1 
+	{ "265-p3ps.p3",  0x020000, 0x6bfe80b0, 1 | BRF_ESS | BRF_PRG }, //  2 
+
+	{ "265-s1ps.s1",  0x020000, 0x96bdd036, 2 | BRF_GRA },           //  3 Text layer tiles
+
+	{ "265-c1ps.c1",  0x800000, 0x93cf6345, 3 | BRF_GRA },           //  4 Sprite data
+	{ "265-c2ps.c2",  0x800000, 0xd7373d66, 3 | BRF_GRA },           //  5 
+	{ "265-c3d.c3",   0x800000, 0x959fad0b, 3 | BRF_GRA },           //  6 
+	{ "265-c4d.c4",   0x800000, 0xefe6a468, 3 | BRF_GRA },           //  7 
+	{ "265-c5d.c5",   0x800000, 0x74bba7c6, 3 | BRF_GRA },           //  8 
+	{ "265-c6d.c6",   0x800000, 0xe20d2216, 3 | BRF_GRA },           //  9 
+	{ "265-c7d.c7",   0x800000, 0x8a5b561c, 3 | BRF_GRA },           // 10 
+	{ "265-c8d.c8",   0x800000, 0xbef667a3, 3 | BRF_GRA },           // 11 
+
+	{ "265-m1d.m1",   0x020000, 0x1c661a4b, 4 | BRF_ESS | BRF_PRG }, // 12 Z80 code
+
+	{ "265-v1d.v1",   0x400000, 0x13d98607, 5 | BRF_SND },           // 13 Sound data
+	{ "265-v2d.v2",   0x400000, 0x9cf74677, 5 | BRF_SND },           // 14 
+	{ "265-v3d.v3",   0x400000, 0x8e9448b5, 5 | BRF_SND },           // 15 
+	{ "265-v4d.v4",   0x400000, 0x067271b5, 5 | BRF_SND },           // 16 
+};
+
+STDROMPICKEXT(kf2k2pls2017, kf2k2pls2017, neogeo)
+STD_ROM_FN(kf2k2pls2017)
+
+static UINT8 *kf2k2pls2017ExtraROM;
+
+static INT32 kf2k2pls2017Init()
+{
+ 	INT32 nRet = NeoInit();
+
+	if (nRet == 0) {
+		kf2k2pls2017ExtraROM = (UINT8*)BurnMalloc(0x20000);
+
+		if (BurnLoadRom(kf2k2pls2017ExtraROM, 2, 1)) return 1;
+
+		UINT16 *rom = (UINT16*)kf2k2pls2017ExtraROM;
+		for (INT32 i = 0; i < 0x20000/2; i++) {
+			if (rom[i] == 0x4e7d) rom[i] = 0x4e71;
+			if (rom[i] == 0x4e7c) rom[i] = 0x4e75;
+		}
+
+		rom[0x0178/2] = 0x4e75;
+
+		rom = (UINT16*)Neo68KROMActive;
+
+		for (INT32 i = 0; i < 0x100000/2; i++) {
+			if (rom[i] == 0x4e7d) rom[i] = 0x4e71;
+			if (rom[i] == 0x4e7c) rom[i] = 0x4e75;
+		}
+
+		SekOpen(0);
+		SekMapMemory(kf2k2pls2017ExtraROM, 0x900000, 0x91ffff, MAP_ROM);
+		SekClose();
+	}
+
+	return nRet;
+}
+
+static INT32 kf2k2pls2017Exit()
+{
+	BurnFree (kf2k2pls2017ExtraROM);
+
+	return NeoExit();
+}
+
+struct BurnDriver BurnDrvkf2k2pls2017 = {
+	"kf2k2pls2017", "kof2002", "neogeo", NULL, "2002",
+	"The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)\0", NULL, "Eolith / Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_KOF,
+	NULL, kf2k2pls2017RomInfo, kf2k2pls2017RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kf2k2pls2017Init, kf2k2pls2017Exit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Matrimelee (Fully Decrypted)
+
+static struct BurnRomInfo matrimndRomDesc[] = {
+	{ "266-p1d.p1",  0x100000, 0x5d4c2dc7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "266-p2d.p2",  0x400000, 0xb0132cef, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "266-c1d.c1",  0x800000, 0x0ab54c54, 3 | BRF_GRA },           //  2 Sprite data
+	{ "266-c2d.c2",  0x800000, 0xb834dd89, 3 | BRF_GRA },           //  3 
+	{ "266-c3d.c3",  0x800000, 0xf31d68d4, 3 | BRF_GRA },           //  4 
+	{ "266-c4d.c4",  0x800000, 0x58cfb6e9, 3 | BRF_GRA },           //  5 
+	{ "266-c5d.c5",  0x800000, 0xf3c0e3fd, 3 | BRF_GRA },           //  6 
+	{ "266-c6d.c6",  0x800000, 0xb53c8dcf, 3 | BRF_GRA },           //  7 
+	{ "266-c7d.c7",  0x800000, 0x3c1fb02a, 3 | BRF_GRA },           //  8 
+	{ "266-c8d.c8",  0x800000, 0x5ee31f80, 3 | BRF_GRA },           //  9 
+
+	{ "266-m1d.m1",  0x010000, 0x563428bd, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "266-v1d.v1",  0x400000, 0x435f33cf, 5 | BRF_SND },           // 11 Sound data
+	{ "266-v2d.v2",  0x400000, 0x945f8831, 5 | BRF_SND },           // 12 
+	{ "266-v3d.v3",  0x400000, 0xe8362fcc, 5 | BRF_SND },           // 13 
+	{ "266-v4d.v4",  0x400000, 0x393c9a62, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(matrimnd, matrimnd, neogeo)
+STD_ROM_FN(matrimnd)
+
+struct BurnDriver BurnDrvmatrimnd = {
+	"matrimnd", "matrim", "neogeo", NULL, "2002",
+	"Matrimelee (Fully Decrypted)\0", NULL, "Noise Factory / Atlus", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, matrimndRomInfo, matrimndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Matrimelee (Boss Hack)
+
+static struct BurnRomInfo matrimdhRomDesc[] = {
+	{ "266-p1b.p1",  0x100000, 0x5f7b6942, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "266-p2d.p2",  0x400000, 0xb0132cef, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "266-c1d.c1",  0x800000, 0x0ab54c54, 3 | BRF_GRA },           //  2 Sprite data
+	{ "266-c2d.c2",  0x800000, 0xb834dd89, 3 | BRF_GRA },           //  3 
+	{ "266-c3d.c3",  0x800000, 0xf31d68d4, 3 | BRF_GRA },           //  4 
+	{ "266-c4d.c4",  0x800000, 0x58cfb6e9, 3 | BRF_GRA },           //  5 
+	{ "266-c5d.c5",  0x800000, 0xf3c0e3fd, 3 | BRF_GRA },           //  6 
+	{ "266-c6d.c6",  0x800000, 0xb53c8dcf, 3 | BRF_GRA },           //  7 
+	{ "266-c7d.c7",  0x800000, 0x3c1fb02a, 3 | BRF_GRA },           //  8 
+	{ "266-c8d.c8",  0x800000, 0x5ee31f80, 3 | BRF_GRA },           //  9 
+
+	{ "266-m1d.m1",  0x010000, 0x563428bd, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "266-v1d.v1",  0x400000, 0x435f33cf, 5 | BRF_SND },           // 11 Sound data
+	{ "266-v2d.v2",  0x400000, 0x945f8831, 5 | BRF_SND },           // 12 
+	{ "266-v3d.v3",  0x400000, 0xe8362fcc, 5 | BRF_SND },           // 13 
+	{ "266-v4d.v4",  0x400000, 0x393c9a62, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(matrimdh, matrimdh, neogeo)
+STD_ROM_FN(matrimdh)
+
+struct BurnDriver BurnDrvmatrimdh = {
+	"matrimdh", "matrim", "neogeo", NULL, "2002",
+	"Matrimelee (Boss Hack)\0", NULL, "Noise Factory / Atlus", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_PWRINST,
+	NULL, matrimdhRomInfo, matrimdhRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 320, 224, 4, 3
+};
+
+// Pochi and Nyaa (Fully Decrypted)
+
+static struct BurnRomInfo pnyaandRomDesc[] = {
+	{ "267-p1d.p1",  0x080000, 0x400fd762, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "267-c1d.c1",  0x800000, 0x75fa4f27, 3 | BRF_GRA },           //  1 Sprite data
+	{ "267-c2d.c2",  0x800000, 0x02345689, 3 | BRF_GRA },           //  2 
+
+	{ "267-m1d.m1",  0x020000, 0xc13895b9, 4 | BRF_ESS | BRF_PRG }, //  3 Z80 code
+
+	{ "267-v1d.v1",  0x400000, 0x1ac7db71, 5 | BRF_SND },           //  4 Sound data
+};
+
+STDROMPICKEXT(pnyaand, pnyaand, neogeo)
+STD_ROM_FN(pnyaand)
+
+struct BurnDriver BurnDrvpnyaand = {
+	"pnyaand", "pnyaa", "neogeo", NULL, "2003",
+	"Pochi and Nyaa (Fully Decrypted)\0", NULL, "Aiky / Taito", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PUZZLE, 0,
+	NULL, pnyaandRomInfo, pnyaandRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Metal Slug 5 (Fully Decrypted)
+
+static struct BurnRomInfo mslug5ndRomDesc[] = {
+	{ "268-p1d.p1",   0x100000, 0x92ad7047, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "268-p2d.p2",   0x400000, 0x768ee64a, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "268-c1d.c1",   0x800000, 0xe8239365, 3 | BRF_GRA },           //  2 Sprite data
+	{ "268-c2d.c2",   0x800000, 0x89b21d4c, 3 | BRF_GRA },           //  3 
+	{ "268-c3d.c3",   0x800000, 0x3cda13a0, 3 | BRF_GRA },           //  4 
+	{ "268-c4d.c4",   0x800000, 0x9c00160d, 3 | BRF_GRA },           //  5 
+	{ "268-c5d.c5",   0x800000, 0x38754256, 3 | BRF_GRA },           //  6 
+	{ "268-c6d.c6",   0x800000, 0x59d33e9c, 3 | BRF_GRA },           //  7 
+	{ "268-c7d.c7",   0x800000, 0xc9f8c357, 3 | BRF_GRA },           //  8 
+	{ "268-c8d.c8",   0x800000, 0xfafc3eb9, 3 | BRF_GRA },           //  9 
+
+	{ "268-m1d.m1",   0x010000, 0x45a7b351, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "268-v1d.v1",   0x400000, 0xf61daa9e, 5 | BRF_SND },           // 11 Sound data
+	{ "268-v2d.v2",   0x400000, 0xeeb7c926, 5 | BRF_SND },           // 12 
+	{ "268-v3d.v3",   0x400000, 0x02fd519e, 5 | BRF_SND },           // 13 
+	{ "268-v4d.v4",   0x400000, 0xd7c67794, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(mslug5nd, mslug5nd, neogeo)
+STD_ROM_FN(mslug5nd)
+
+struct BurnDriver BurnDrvmslug5nd = {
+	"mslug5nd", "mslug5", "neogeo", NULL, "2003",
+	"Metal Slug 5 (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_PLATFORM, FBF_MSLUG,
+	NULL, mslug5ndRomInfo, mslug5ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// SNK vs. Capcom - SVC Chaos (Fully Decrypted)
+
+static struct BurnRomInfo svcndRomDesc[] = {
+	{ "269-p1d.p1",   0x600000, 0xc3b1b4b7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "269-c1d.c1",   0x800000, 0x465d473b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "269-c2d.c2",   0x800000, 0x3eb28f78, 3 | BRF_GRA },           //  2 
+	{ "269-c3d.c3",   0x800000, 0xf4d4ab2b, 3 | BRF_GRA },           //  3 
+	{ "269-c4d.c4",   0x800000, 0xa69d523a, 3 | BRF_GRA },           //  4 
+	{ "269-c5d.c5",   0x800000, 0xba2a7892, 3 | BRF_GRA },           //  5 
+	{ "269-c6d.c6",   0x800000, 0x37371ca1, 3 | BRF_GRA },           //  6 
+	{ "269-c7d.c7",   0x800000, 0xd8418412, 3 | BRF_GRA },           //  7 
+	{ "269-c8d.c8",   0x800000, 0xe327a78c, 3 | BRF_GRA },           //  8 
+
+	{ "269-m1d.m1",   0x020000, 0x447b3123, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "269-v1d.v1",   0x400000, 0x5eb6c8ab, 5 | BRF_SND },           // 10 Sound data
+	{ "269-v2d.v2",   0x400000, 0x1cbe5aa6, 5 | BRF_SND },           // 11 
+	{ "269-v3d.v3",   0x400000, 0xf6267114, 5 | BRF_SND },           // 12 
+	{ "269-v4d.v4",   0x400000, 0x40d3ba59, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(svcnd, svcnd, neogeo)
+STD_ROM_FN(svcnd)
+
+struct BurnDriver BurnDrvsvcnd = {
+	"svcnd", "svc", "neogeo", NULL, "2003",
+	"SNK vs. Capcom - SVC Chaos (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF | FBF_SF,
+	NULL, svcndRomInfo, svcndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)
+
+static struct BurnRomInfo svcndps2RomDesc[] = {
+	{ "269-p1ps2.p1", 0x600000, 0x2b11751d, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "269-c1d.c1",   0x800000, 0x465d473b, 3 | BRF_GRA },           //  1 Sprite data
+	{ "269-c2d.c2",   0x800000, 0x3eb28f78, 3 | BRF_GRA },           //  2 
+	{ "269-c3d.c3",   0x800000, 0xf4d4ab2b, 3 | BRF_GRA },           //  3 
+	{ "269-c4d.c4",   0x800000, 0xa69d523a, 3 | BRF_GRA },           //  4 
+	{ "269-c5d.c5",   0x800000, 0xba2a7892, 3 | BRF_GRA },           //  5 
+	{ "269-c6d.c6",   0x800000, 0x37371ca1, 3 | BRF_GRA },           //  6 
+	{ "269-c7ps2.c7", 0x800000, 0xbfe9c5f6, 3 | BRF_GRA },           //  7 
+	{ "269-c8ps2.c8", 0x800000, 0x75f2f88c, 3 | BRF_GRA },           //  8 
+
+	{ "269-m1d.m1",   0x020000, 0x447b3123, 4 | BRF_ESS | BRF_PRG }, //  9 Z80 code
+
+	{ "269-v1d.v1",   0x400000, 0x5eb6c8ab, 5 | BRF_SND },           // 10 Sound data
+	{ "269-v2d.v2",   0x400000, 0x1cbe5aa6, 5 | BRF_SND },           // 11 
+	{ "269-v3d.v3",   0x400000, 0xf6267114, 5 | BRF_SND },           // 12
+	{ "269-v4d.v4",   0x400000, 0x40d3ba59, 5 | BRF_SND },           // 13 
+};
+
+STDROMPICKEXT(svcndps2, svcndps2, neogeo)
+STD_ROM_FN(svcndps2)
+
+struct BurnDriver BurnDrvsvcndps2 = {
+	"svcndps2", "svc", "neogeo", NULL, "2003",
+	"SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HACK, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF | FBF_SF,
+	NULL, svcndps2RomInfo, svcndps2RomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V (Fully Decrypted)
+
+static struct BurnRomInfo samsho5ndRomDesc[] = {
+	{ "270-p1d.p1",  0x400000, 0x3fcae9e7, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "270-p2d.p2",  0x400000, 0x91979dee, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "270-c1d.c1",  0x800000, 0x9adec562, 3 | BRF_GRA },           //  2 Sprite data
+	{ "270-c2d.c2",  0x800000, 0xac0309e5, 3 | BRF_GRA },           //  3 
+	{ "270-c3d.c3",  0x800000, 0x82db9dae, 3 | BRF_GRA },           //  4 
+	{ "270-c4d.c4",  0x800000, 0xf8041153, 3 | BRF_GRA },           //  5 
+	{ "270-c5d.c5",  0x800000, 0xe689d62d, 3 | BRF_GRA },           //  6 
+	{ "270-c6d.c6",  0x800000, 0xa993bdcf, 3 | BRF_GRA },           //  7 
+	{ "270-c7d.c7",  0x800000, 0x707d56a0, 3 | BRF_GRA },           //  8 
+	{ "270-c8d.c8",  0x800000, 0xf5903adc, 3 | BRF_GRA },           //  9 
+
+	{ "270-m1d.m1",  0x020000, 0x8afd2b46, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "270-v1d.v1",  0x400000, 0x240c6742, 5 | BRF_SND },           // 11 Sound data
+	{ "270-v2d.v2",  0x400000, 0x7d096473, 5 | BRF_SND },           // 12 
+	{ "270-v3d.v3",  0x400000, 0x980e4cc7, 5 | BRF_SND },           // 13 
+	{ "270-v4d.v4",  0x400000, 0xf8fd316f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsho5nd, samsho5nd, neogeo)
+STD_ROM_FN(samsho5nd)
+
+struct BurnDriver BurnDrvsamsho5nd = {
+	"samsho5nd", "samsho5", "neogeo", NULL, "2003",
+	"Samurai Shodown V (Fully Decrypted)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsho5ndRomInfo, samsho5ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V (Boss Hack)
+
+static struct BurnRomInfo samsh5ndbRomDesc[] = {
+	{ "270-p1b.p1",  0x400000, 0x85f15550, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "270-p2d.p2",  0x400000, 0x91979dee, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "270-c1d.c1",  0x800000, 0x9adec562, 3 | BRF_GRA },           //  2 Sprite data
+	{ "270-c2d.c2",  0x800000, 0xac0309e5, 3 | BRF_GRA },           //  3 
+	{ "270-c3d.c3",  0x800000, 0x82db9dae, 3 | BRF_GRA },           //  4 
+	{ "270-c4d.c4",  0x800000, 0xf8041153, 3 | BRF_GRA },           //  5 
+	{ "270-c5d.c5",  0x800000, 0xe689d62d, 3 | BRF_GRA },           //  6 
+	{ "270-c6d.c6",  0x800000, 0xa993bdcf, 3 | BRF_GRA },           //  7 
+	{ "270-c7b.c7",  0x800000, 0x02914b0b, 3 | BRF_GRA },           //  8 
+	{ "270-c8b.c8",  0x800000, 0xe874ac8b, 3 | BRF_GRA },           //  9 
+
+	{ "270-m1d.m1",  0x020000, 0x8afd2b46, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "270-v1d.v1",  0x400000, 0x240c6742, 5 | BRF_SND },           // 11 Sound data
+	{ "270-v2d.v2",  0x400000, 0x7d096473, 5 | BRF_SND },           // 12 
+	{ "270-v3d.v3",  0x400000, 0x980e4cc7, 5 | BRF_SND },           // 13 
+	{ "270-v4d.v4",  0x400000, 0xf8fd316f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(samsh5ndb, samsh5ndb, neogeo)
+STD_ROM_FN(samsh5ndb)
+
+struct BurnDriver BurnDrvsamsh5ndb = {
+	"samsh5ndb", "samsho5", "neogeo", NULL, "2003",
+	"Samurai Shodown V (Boss Hack)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, samsh5ndbRomInfo, samsh5ndbRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// The King of Fighters 2003 (Fully Decrypted)
+
+static struct BurnRomInfo kof2k3ndRomDesc[] = {
+	{ "271-p1d.p1",   0x800000, 0x4899d569, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+
+	{ "271-s1d.s1",   0x080000, 0x85f47910, 2 | BRF_GRA },           //  1 Text layer tiles
+
+	{ "271-c1d.c1",   0x800000, 0xe42fc226, 3 | BRF_GRA },           //  2 Sprite data
+	{ "271-c2d.c2",   0x800000, 0x1b5e3b58, 3 | BRF_GRA },           //  3 
+	{ "271-c3d.c3",   0x800000, 0xd334fdd9, 3 | BRF_GRA },           //  4 
+	{ "271-c4d.c4",   0x800000, 0x0d457699, 3 | BRF_GRA },           //  5 
+	{ "271-c5d.c5",   0x800000, 0x8a91aae4, 3 | BRF_GRA },           //  6 
+	{ "271-c6d.c6",   0x800000, 0x9f8674b8, 3 | BRF_GRA },           //  7 
+	{ "271-c7d.c7",   0x800000, 0x84b4ecd7, 3 | BRF_GRA },           //  8 
+	{ "271-c8d.c8",   0x800000, 0xaca7f22d, 3 | BRF_GRA },           //  9 
+
+	{ "271-m1d.m1",   0x020000, 0xcdd67d4d, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "271-v1d.v1",   0x400000, 0xdba0b938, 5 | BRF_SND },           // 11 Sound data
+	{ "271-v2d.v2",   0x400000, 0x71956ee2, 5 | BRF_SND },           // 12 
+	{ "271-v3d.v3",   0x400000, 0xddbbb199, 5 | BRF_SND },           // 13 
+	{ "271-v4d.v4",   0x400000, 0x01b90c4f, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(kof2k3nd, kof2k3nd, neogeo)
+STD_ROM_FN(kof2k3nd)
+
+struct BurnDriver BurnDrvkof2k3nd = {
+	"kof2k3nd", "kof2003", "neogeo", NULL, "2003",
+	"The King of Fighters 2003 (Fully Decrypted)\0", NULL, "SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_KOF,
+	NULL, kof2k3ndRomInfo, kof2k3ndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	NeoInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
+
+// Samurai Shodown V Special (Fully Decrypted)
+
+static struct BurnRomInfo ssh5spndRomDesc[] = {
+	{ "272-p1d.p1",   0x400000, 0xd0814aa8, 1 | BRF_ESS | BRF_PRG }, //  0 68K code
+	{ "272-p2d.p2",   0x400000, 0xda770f06, 1 | BRF_ESS | BRF_PRG }, //  1 
+
+	{ "272-c1d.c1",   0x800000, 0x8548097e, 3 | BRF_GRA },           //  2 Sprite data
+	{ "272-c2d.c2",   0x800000, 0x8c1b48d0, 3 | BRF_GRA },           //  3 
+	{ "272-c3d.c3",   0x800000, 0x96ddb28c, 3 | BRF_GRA },           //  4 
+	{ "272-c4d.c4",   0x800000, 0x99ef7a0a, 3 | BRF_GRA },           //  5 
+	{ "272-c5d.c5",   0x800000, 0x772e8b1e, 3 | BRF_GRA },           //  6 
+	{ "272-c6d.c6",   0x800000, 0x5fff21fc, 3 | BRF_GRA },           //  7 
+	{ "272-c7d.c7",   0x800000, 0x9ac56a0e, 3 | BRF_GRA },           //  8 
+	{ "272-c8d.c8",   0x800000, 0xcfde7aff, 3 | BRF_GRA },           //  9 
+
+	{ "272-m1d.m1",   0x020000, 0x0b5d4d6a, 4 | BRF_ESS | BRF_PRG }, // 10 Z80 code
+
+	{ "272-v1d.v1",   0x400000, 0x4d1b252b, 5 | BRF_SND },           // 11 Sound data
+	{ "272-v2d.v2",   0x400000, 0x0e46d2f8, 5 | BRF_SND },           // 12 
+	{ "272-v3d.v3",   0x400000, 0x3f0f7554, 5 | BRF_SND },           // 13 
+	{ "272-v4d.v4",   0x400000, 0xad8fabb4, 5 | BRF_SND },           // 14 
+};
+
+STDROMPICKEXT(ssh5spnd, ssh5spnd, neogeo)
+STD_ROM_FN(ssh5spnd)
+
+struct BurnDriver BurnDrvssh5spnd = {
+	"ssh5spnd", "samsh5sp", "neogeo", NULL, "2004",
+	"Samurai Shodown V Special (Fully Decrypted)\0", NULL, "Yuki Enterprise / SNK Playmore", "Neo Geo MVS",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_PREFIX_CARTRIDGE | HARDWARE_SNK_NEOGEO | HARDWARE_SNK_ALTERNATE_TEXT, GBF_VSFIGHT, FBF_SAMSHO,
+	NULL, ssh5spndRomInfo, ssh5spndRomName, NULL, NULL, NULL, NULL, neogeoInputInfo, neogeoDIPInfo,
+	kof99ndInit, NeoExit, NeoFrame, NeoRender, NeoScan, &NeoRecalcPalette,
+	0x1000, 304, 224, 4, 3
+};
diff --git a/src/burn/drv/pre90s/d_blktiger.cpp b/src/burn/drv/pre90s/d_blktiger.cpp
index ba5d22890..54947adef 100644
--- a/src/burn/drv/pre90s/d_blktiger.cpp
+++ b/src/burn/drv/pre90s/d_blktiger.cpp
@@ -1,1157 +1,1202 @@
-// FB Alpha Black Tiger driver module
-// Based on MAME driver by Paul Leaman
-
-#include "tiles_generic.h"
-#include "z80_intf.h"
-#include "mcs51.h"
-#include "burn_ym2203.h"
-#include "bitswap.h"
-
-static UINT8 *AllMem;
-static UINT8 *MemEnd;
-static UINT8 *AllRam;
-static UINT8 *RamEnd;
-static UINT8 *DrvZ80ROM0;
-static UINT8 *DrvZ80ROM1;
-static UINT8 *DrvMCUROM;
-static UINT8 *DrvGfxROM0;
-static UINT8 *DrvGfxROM1;
-static UINT8 *DrvGfxROM2;
-static UINT8 *DrvZ80RAM0;
-static UINT8 *DrvZ80RAM1;
-static UINT8 *DrvSprRAM;
-static UINT8 *DrvSprBuf;
-static UINT8 *DrvPalRAM;
-static UINT8 *DrvBgRAM;
-static UINT8 *DrvTxRAM;
-static UINT32 *DrvPalette;
-static UINT8 DrvRecalc;
-
-static UINT8 *DrvScreenLayout;
-static UINT8 *DrvBgEnable;
-static UINT8 *DrvFgEnable;
-static UINT8 *DrvSprEnable;
-static UINT8 *DrvVidBank;
-static UINT8 *DrvRomBank;
-
-static UINT8 *DrvZ80Latch;
-static UINT8 *DrvMCULatch;
-static UINT8 *soundlatch;
-static UINT8 *flipscreen;
-static UINT8 *coin_lockout;
-static INT32 watchdog;
-
-static UINT16 *DrvScrollx;
-static UINT16 *DrvScrolly;
-
-static UINT8 DrvJoy1[8];
-static UINT8 DrvJoy2[8];
-static UINT8 DrvJoy3[8];
-static UINT8 DrvDips[3];
-static UINT8 DrvInputs[3];
-static UINT8 DrvReset;
-
-static INT32 use_mcu = 0;
-
-static struct BurnInputInfo DrvInputList[] = {
-	{"P1 Coin"       	  , BIT_DIGITAL  , DrvJoy1 + 6,	 "p1 coin"  },
-	{"P1 Start"     	  , BIT_DIGITAL  , DrvJoy1 + 0,	 "p1 start" },
-	{"P1 Up"        	  , BIT_DIGITAL  , DrvJoy2 + 3,  "p1 up"    },
-	{"P1 Down"      	  , BIT_DIGITAL  , DrvJoy2 + 2,  "p1 down"  },
-	{"P1 Left"      	  , BIT_DIGITAL  , DrvJoy2 + 1,  "p1 left"  },
-	{"P1 Right"     	  , BIT_DIGITAL  , DrvJoy2 + 0,  "p1 right" },
-	{"P1 Button 1"  	  , BIT_DIGITAL  , DrvJoy2 + 4,  "p1 fire 1"},
-	{"P1 Button 2"  	  , BIT_DIGITAL  , DrvJoy2 + 5,  "p1 fire 2"},
-
-	{"P2 Coin"       	  , BIT_DIGITAL  , DrvJoy1 + 7,	 "p2 coin"  },
-	{"P2 Start"     	  , BIT_DIGITAL  , DrvJoy1 + 1,	 "p2 start" },
-	{"P2 Up"        	  , BIT_DIGITAL  , DrvJoy3 + 3,  "p2 up"    },
-	{"P2 Down"      	  , BIT_DIGITAL  , DrvJoy3 + 2,  "p2 down"  },
-	{"P2 Left"      	  , BIT_DIGITAL  , DrvJoy3 + 1,  "p2 left"  },
-	{"P2 Right"     	  , BIT_DIGITAL  , DrvJoy3 + 0,  "p2 right" },
-	{"P2 Button 1"  	  , BIT_DIGITAL  , DrvJoy3 + 4,  "p2 fire 1"},
-	{"P2 Button 2"  	  , BIT_DIGITAL  , DrvJoy3 + 5,  "p2 fire 2"},
-
-	{"Reset",		    BIT_DIGITAL  , &DrvReset,	 "reset"    },
-	{"Service",		    BIT_DIGITAL  , DrvJoy1 + 5,  "service"  },
-	{"Dip 1",		    BIT_DIPSWITCH, DrvDips + 0,	 "dip"	    },
-	{"Dip 2",		    BIT_DIPSWITCH, DrvDips + 1,	 "dip"	    },
-	{"Dip 3",		    BIT_DIPSWITCH, DrvDips + 2,	 "dip"	    },
-};
-
-STDINPUTINFO(Drv)
-
-static struct BurnDIPInfo DrvDIPList[]=
-{
-	{0x12, 0xff, 0xff, 0xff, NULL			},
- 	{0x13, 0xff, 0xff, 0xff, NULL			},
- 	{0x14, 0xff, 0x01, 0x01, NULL			},
-
- 	{0x12, 0xfe,    0,    8, "Coin A"		},
- 	{0x12, 0x01, 0x07, 0x00, "4 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x07, 0x01, "3 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x07, 0x02, "2 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x07, 0x07, "1 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x07, 0x06, "1 Coin 2 Credits"	},
- 	{0x12, 0x01, 0x07, 0x05, "1 Coin 3 Credits"	},
- 	{0x12, 0x01, 0x07, 0x04, "1 Coin 4 Credits"	},
- 	{0x12, 0x01, 0x07, 0x03, "1 Coin 5 Credits"	},
-
- 	{0x12, 0xfe,    0,    8, "Coin B"		},
- 	{0x12, 0x01, 0x38, 0x00, "4 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x38, 0x08, "3 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x38, 0x10, "2 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x38, 0x38, "1 Coin 1 Credits"	},
- 	{0x12, 0x01, 0x38, 0x30, "1 Coin 2 Credits"	},
- 	{0x12, 0x01, 0x38, 0x28, "1 Coin 3 Credits"	},
- 	{0x12, 0x01, 0x38, 0x20, "1 Coin 4 Credits"	},
- 	{0x12, 0x01, 0x38, 0x18, "1 Coin 5 Credits"	},
-
- 	{0x12, 0xfe,    0,    2, "Flip Screen"		},
- 	{0x12, 0x01, 0x40, 0x40, "Off"			},
- 	{0x12, 0x01, 0x40, 0x00, "On"			},
-
- 	{0x12, 0xfe,    0,    2, "Test"			},
- 	{0x12, 0x01, 0x80, 0x80, "Off"			},
- 	{0x12, 0x01, 0x80, 0x00, "On"			},
-
- 	{0x13, 0xfe,    0,    4, "Lives"		},
- 	{0x13, 0x01, 0x03, 0x02, "2"			},
- 	{0x13, 0x01, 0x03, 0x03, "3"			},
- 	{0x13, 0x01, 0x03, 0x01, "5"			},
- 	{0x13, 0x01, 0x03, 0x00, "7"			},
-
- 	{0x13, 0xfe,    0,    8, "Difficulty"		},
- 	{0x13, 0x01, 0x1c, 0x1c, "1 (Easiest)"		},
- 	{0x13, 0x01, 0x1c, 0x18, "2"			},
- 	{0x13, 0x01, 0x1c, 0x14, "3"			},
- 	{0x13, 0x01, 0x1c, 0x10, "4"			},
- 	{0x13, 0x01, 0x1c, 0x0c, "5 (Normal)"		},
- 	{0x13, 0x01, 0x1c, 0x08, "6"			},
- 	{0x13, 0x01, 0x1c, 0x04, "7"			},
- 	{0x13, 0x01, 0x1c, 0x00, "8 (Hardest)"		},
-
- 	{0x13, 0xfe,    0,    2, "Demo Sounds"		},
- 	{0x13, 0x01, 0x20, 0x00, "Off"			},
- 	{0x13, 0x01, 0x20, 0x20, "On"			},
-
- 	{0x13, 0xfe,    0,    2, "Allow Continue"	},
- 	{0x13, 0x01, 0x40, 0x00, "No"			},
- 	{0x13, 0x01, 0x40, 0x40, "Yes"			},
-
- 	{0x13, 0xfe,    0,    2, "Cabinet"		},
- 	{0x13, 0x01, 0x80, 0x00, "Upright"		},
- 	{0x13, 0x01, 0x80, 0x80, "Cocktail"		},
-
- 	{0x14, 0xfe,    0,    2, "Coin Lockout Present?"},
- 	{0x14, 0x01, 0x01, 0x01, "Yes"			},
- 	{0x14, 0x01, 0x01, 0x00, "No"			},
-};
-
-STDDIPINFO(Drv)
-
-static void palette_write(INT32 offset)
-{
-	UINT8 r,g,b;
-	UINT16 data = (DrvPalRAM[offset]) | (DrvPalRAM[offset | 0x400] << 8);
-
-	r = (data >> 4) & 0x0f;
-	g = (data >> 0) & 0x0f;
-	b = (data >> 8) & 0x0f;
-
-	r |= r << 4;
-	g |= g << 4;
-	b |= b << 4;
-
-	DrvPalette[offset] = BurnHighCol(r, g, b, 0);
-}
-
-static void DrvRomBankswitch(INT32 bank)
-{
-	*DrvRomBank = bank & 0x0f;
-
-	INT32 nBank = 0x10000 + (bank & 0x0f) * 0x4000;
-
-	ZetMapMemory(DrvZ80ROM0 + nBank, 0x8000, 0xbfff, MAP_ROM);
-}
-
-static void DrvVidRamBankswitch(INT32 bank)
-{
-	*DrvVidBank = bank & 0x03;
-
-	INT32 nBank = (bank & 3) * 0x1000;
-
-	ZetMapMemory(DrvBgRAM + nBank, 0xc000, 0xcfff, MAP_RAM);
-}
-
-static void __fastcall blacktiger_write(UINT16 address, UINT8 data)
-{
-	if ((address & 0xf800) == 0xd800) {
-		DrvPalRAM[address & 0x7ff] = data;
-
-		palette_write(address & 0x3ff);
-		return;
-	}
-
-	return;
-}
-
-static UINT8 __fastcall blacktiger_read(UINT16 /*address*/)
-{
-	return 0;
-}
-
-static void __fastcall blacktiger_out(UINT16 port, UINT8 data)
-{
-	switch (port & 0xff)
-	{
-		case 0x00:
-			*soundlatch = data;
-		return;
-
-		case 0x01:
-			DrvRomBankswitch(data);
-		return;
-
-		case 0x03:
-			if (DrvDips[2] & 1) {
-				*coin_lockout = ~data << 6;
-			}
-		return;
-
-		case 0x04:
-			if (data & 0x20) {
-				ZetReset(1);
-			}
-
-			*flipscreen  =  0; //data & 0x40; // ignore flipscreen
-			*DrvFgEnable = ~data & 0x80;
-
-		return;
-
-		case 0x06:
-			watchdog = 0;
-		return;
-
-		case 0x07:
-			{
-				if (use_mcu) {
-					mcs51_set_irq_line(MCS51_INT1_LINE, CPU_IRQSTATUS_ACK);
-					*DrvZ80Latch = data;
-				} else {
-					// do nothing
-				}
-			}
-		return;
-
-		case 0x08:
-			*DrvScrollx = (*DrvScrollx & 0xff00) | data;
-		return;
-
-		case 0x09:
-			*DrvScrollx = (*DrvScrollx & 0x00ff) | (data << 8);
-		return;
-
-		case 0x0a:
-			*DrvScrolly = (*DrvScrolly & 0xff00) | data;
-		return;
-
-		case 0x0b:
-			*DrvScrolly = (*DrvScrolly & 0x00ff) | (data << 8);
-		return;
-
-		case 0x0c:
-			*DrvBgEnable  = ~data & 0x02;
-			*DrvSprEnable = ~data & 0x04;
-		return;
-
-		case 0x0d:
-			DrvVidRamBankswitch(data);
-		return;
-
-		case 0x0e:
-			*DrvScreenLayout = data ? 1 : 0;
-		return;
-	}
-}
-
-static UINT8 __fastcall blacktiger_in(UINT16 port)
-{
-	switch (port & 0xff)
-	{
-		case 0x00:
-		case 0x01:
-		case 0x02:
-			return DrvInputs[port & 3];
-
-		case 0x03:
-		case 0x04:
-			return DrvDips[~port & 1];
-
-		case 0x05:
-			return 0x01;
-
-		case 0x07:
-			return (use_mcu) ? *DrvMCULatch : (ZetDe(-1) >> 8);
-	}
-
-	return 0;
-}
-
-static void __fastcall blacktiger_sound_write(UINT16 address, UINT8 data)
-{
-	switch (address)
-	{
-		case 0xe000:
-			BurnYM2203Write(0, 0, data);
-			return;
-
-		case 0xe001:
-			BurnYM2203Write(0, 1, data);
-			return;
-
-		case 0xe002:
-			BurnYM2203Write(1, 0, data);
-			return;
-
-		case 0xe003:
-			BurnYM2203Write(1, 1, data);
-			return;
-	}
-}
-
-static UINT8 __fastcall blacktiger_sound_read(UINT16 address)
-{
-	switch (address)
-	{
-		case 0xc800:
-			return *soundlatch;
-
-		case 0xe000:
-			return BurnYM2203Read(0, 0);
-
-		case 0xe001:
-			return BurnYM2203Read(0, 1);
-
-		case 0xe002:
-			return BurnYM2203Read(1, 0);
-
-		case 0xe003:
-			return BurnYM2203Read(1, 1);
-	}
-
-	return 0;
-}
-
-static UINT8 mcu_read_port(INT32 port)
-{
-	if (port != MCS51_PORT_P0) return 0;
-
-	mcs51_set_irq_line(MCS51_INT1_LINE, CPU_IRQSTATUS_NONE);
-	return *DrvZ80Latch;
-}
-
-static void mcu_write_port(INT32 port, UINT8 data)
-{
-	if (port != MCS51_PORT_P0) return;
-
-	*DrvMCULatch = data;
-}
-
-
-static INT32 MemIndex()
-{
-	UINT8 *Next; Next = AllMem;
-
-	DrvZ80ROM0	= Next; Next += 0x050000;
-	DrvZ80ROM1	= Next; Next += 0x008000;
-	DrvMCUROM   = Next; Next += 0x001000;
-
-	DrvGfxROM0	= Next; Next += 0x020000;
-	DrvGfxROM1	= Next; Next += 0x080000;
-	DrvGfxROM2	= Next; Next += 0x080000;
-
-	DrvPalette	= (UINT32*)Next; Next += 0x0400 * sizeof(UINT32);
-
-	AllRam		= Next;
-
-	DrvZ80RAM0	= Next; Next += 0x001e00;
-	DrvZ80RAM1	= Next; Next += 0x000800;
-
-	DrvPalRAM	= Next; Next += 0x000800;
-	DrvTxRAM	= Next; Next += 0x000800;
-	DrvBgRAM	= Next; Next += 0x004000;
-	DrvSprRAM	= Next; Next += 0x000200;
-	DrvSprBuf	= Next; Next += 0x000200;
-
-	DrvScreenLayout	= Next; Next += 0x000001;
-	DrvBgEnable	= Next; Next += 0x000001;
-	DrvFgEnable	= Next; Next += 0x000001;
-	DrvSprEnable	= Next; Next += 0x000001;
-
-	DrvVidBank	= Next; Next += 0x000001;
-	DrvRomBank	= Next; Next += 0x000001;
-
-	DrvScrollx	= (UINT16*)Next; Next += 0x0001 * sizeof (UINT16);
-	DrvScrolly	= (UINT16*)Next; Next += 0x0001 * sizeof (UINT16);
-
-	soundlatch	= Next; Next += 0x000001;
-	flipscreen	= Next; Next += 0x000001;
-	coin_lockout	= Next; Next += 0x000001;
-
-	DrvZ80Latch = Next; Next += 0x000001;
-	DrvMCULatch = Next; Next += 0x000001;
-
-	RamEnd		= Next;
-
-	MemEnd		= Next;
-
-	return 0;
-}
-
-static INT32 DrvDoReset(INT32 full_reset)
-{
-	if (full_reset) {
-		memset (AllRam, 0, RamEnd - AllRam);
-	}
-
-	ZetOpen(0);
-	ZetReset();
-	DrvRomBankswitch(1);
-	DrvVidRamBankswitch(1);
-	ZetClose();
-
-	ZetOpen(1);
-	ZetReset();
-	BurnYM2203Reset();
-	ZetClose();
-
-	if (use_mcu) {
-		mcs51_reset();
-	}
-
-	watchdog = 0;
-
-	HiscoreReset();
-
-	return 0;
-}
-
-static INT32 DrvGfxDecode()
-{
-	INT32 Plane[4] = { ((0x40000 * 8) / 2) + 4, ((0x40000 * 8) / 2) + 0, 4, 0 };
-	INT32 XOffs[16] = { 0, 1, 2, 3, 8+0, 8+1, 8+2, 8+3,
-			16*16+0, 16*16+1, 16*16+2, 16*16+3, 16*16+8+0, 16*16+8+1, 16*16+8+2, 16*16+8+3 };
-	INT32 YOffs[16] = { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16,
-			8*16, 9*16, 10*16, 11*16, 12*16, 13*16, 14*16, 15*16 };
-
-	UINT8 *tmp = (UINT8*)BurnMalloc(0x40000);
-	if (tmp == NULL) {
-		return 1;
-	}
-
-	memcpy (tmp, DrvGfxROM0, 0x08000);
-
-	GfxDecode(0x0800, 2,  8,  8, Plane + 2, XOffs, YOffs, 0x080, tmp, DrvGfxROM0);
-
-	memcpy (tmp, DrvGfxROM1, 0x40000);
-
-	GfxDecode(0x0800, 4, 16, 16, Plane + 0, XOffs, YOffs, 0x200, tmp, DrvGfxROM1);
-
-	memcpy (tmp, DrvGfxROM2, 0x40000);
-
-	GfxDecode(0x0800, 4, 16, 16, Plane + 0, XOffs, YOffs, 0x200, tmp, DrvGfxROM2);
-
-	BurnFree (tmp);
-	
-	return 0;
-}
-
-static void DrvFMIRQHandler(INT32, INT32 nStatus)
-{
-	ZetSetIRQLine(0, (nStatus & 1) ? CPU_IRQSTATUS_ACK : CPU_IRQSTATUS_NONE);
-}
-
-static INT32 DrvInit()
-{
-	AllMem = NULL;
-	MemIndex();
-	INT32 nLen = MemEnd - (UINT8 *)0;
-	if ((AllMem = (UINT8 *)BurnMalloc(nLen)) == NULL) return 1;
-	memset(AllMem, 0, nLen);
-	MemIndex();
-
-	{
-		for (INT32 i = 0; i < 5; i++) {
-			if (BurnLoadRom(DrvZ80ROM0 + i * 0x10000, 0  + i, 1)) return 1;
-		}
-
-		if (BurnLoadRom(DrvZ80ROM1, 5, 1)) return 1;
-
-		if (BurnLoadRom(DrvGfxROM0, 6, 1)) return 1;
-
-		for (INT32 i = 0; i < 4; i++) {
-			if (BurnLoadRom(DrvGfxROM1 + i * 0x10000, 7  + i, 1)) return 1;
-			if (BurnLoadRom(DrvGfxROM2 + i * 0x10000, 11 + i, 1)) return 1;
-		}
-
-		DrvGfxDecode();
-	}
-
-	ZetInit(0);
-	ZetOpen(0);
-	ZetMapMemory(DrvZ80ROM0, 0x0000, 0x7fff, MAP_ROM);
-	ZetMapMemory(DrvTxRAM,   0xd000, 0xd7ff, MAP_RAM);
-	ZetMapMemory(DrvPalRAM,  0xd800, 0xdfff, MAP_ROM); // write in handler
-	ZetMapMemory(DrvZ80RAM0, 0xe000, 0xfdff, MAP_RAM);
-	ZetMapMemory(DrvSprRAM,  0xfe00, 0xffff, MAP_RAM);
-	ZetSetWriteHandler(blacktiger_write);
-	ZetSetReadHandler(blacktiger_read);
-	ZetSetInHandler(blacktiger_in);
-	ZetSetOutHandler(blacktiger_out);
-	ZetClose();
-
-	ZetInit(1);
-	ZetOpen(1);
-	ZetMapMemory(DrvZ80ROM1, 0x0000, 0x7fff, MAP_ROM);
-	ZetMapMemory(DrvZ80RAM1, 0xc000, 0xc7ff, MAP_RAM);
-	ZetSetWriteHandler(blacktiger_sound_write);
-	ZetSetReadHandler(blacktiger_sound_read);
-	ZetClose();
-
-	if (use_mcu) {
-		bprintf(0, _T("Using i8751 Protection MCU.\n"));
-		if (BurnLoadRom(DrvMCUROM + 0x00000, 19, 1)) return 1;
-
-		mcs51_init();
-		mcs51_set_program_data(DrvMCUROM);
-		mcs51_set_write_handler(mcu_write_port);
-		mcs51_set_read_handler(mcu_read_port);
-	}
-
-	GenericTilesInit();
-
-	BurnYM2203Init(2, 3579545, &DrvFMIRQHandler, 0);
-	BurnTimerAttachZet(3579545);
-	BurnYM2203SetAllRoutes(0, 0.15, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetAllRoutes(1, 0.15, BURN_SND_ROUTE_BOTH);
-	BurnYM2203SetPSGVolume(0, 0.05);
-	BurnYM2203SetPSGVolume(1, 0.05);
-
-	DrvDoReset(1);
-
-	return 0;
-}
-
-static INT32 DrvInitMCU()
-{
-	use_mcu = 1;
-
-	return DrvInit();
-}
-
-static INT32 DrvExit()
-{
-	BurnYM2203Exit();
-	ZetExit();
-
-	if (use_mcu)
-		mcs51_exit();
-
-	GenericTilesExit();
-
-	BurnFree (AllMem);
-
-	use_mcu = 0;
-
-	return 0;
-}
-
-static void draw_bg(INT32 type, INT32 layer)
-{
-	UINT16 masks[2][4] = { { 0xffff, 0xfff0, 0xff00, 0xf000 }, { 0x8000, 0x800f, 0x80ff, 0x8fff } };
-	INT32 scrollx = (*DrvScrollx)      & (0x3ff | (0x200 << type));
-	INT32 scrolly = ((*DrvScrolly)+16) & (0x7ff >> type);
-
-	for (INT32 offs = 0; offs < (128*64 | 64*128); offs++)
-	{
-		INT32 sx, sy, ofst;
-
-		if (type) {		// 1 = 128x64, 0 = 64x128
-			sx = (offs & 0x7f);
-			sy = (offs >> 7);
-
-			ofst = (sx & 0x0f) + ((sy & 0x0f) << 4) + ((sx & 0x70) << 4) + ((sy & 0x30) << 7);
-		} else {
-			sx = (offs & 0x3f);
-			sy = (offs >> 6);
-
-			ofst = (sx & 0x0f) + ((sy & 0x0f) << 4) + ((sx & 0x30) << 4) + ((sy & 0x70) << 6);
-		}
-
-		sx = (sx * 16) - scrollx;
-		sy = (sy * 16) - scrolly;
-
-		if (sx < -15) sx += (0x400 << type);
-		if (sy < -15) sy += (0x800 >> type);
-		if (sx >= nScreenWidth || sy >= nScreenHeight) continue;
-
-		INT32 attr  = DrvBgRAM[(ofst << 1) + 1];
-		INT32 color = (attr >> 3) & 0x0f;
-		INT32 code  = DrvBgRAM[ofst << 1] + ((attr & 0x07) << 8);
-		INT32 flipx = attr & 0x80;
-		INT32 flipy = 0;
-
-		if (*flipscreen) {
-			flipx ^= 0x80;
-			flipy = 1;
-
-			sx = 240 - sx;
-			sy = 208 - sy;
-		}
-
-		UINT8 coltab[8] = { 3, 2, 1, 0, 0, 0, 0, 0 };
-		INT32 colmask = masks[layer][coltab[color >> 1]];
-
-		{
-			UINT8 *gfx = DrvGfxROM1 + (code * 0x100);
-			color <<= 4;
-
-			INT32 flip = (flipx ? 0x0f : 0) + (flipy ? 0xf0 : 0);
-
-			for (INT32 y = 0; y < 16; y++, sy++, sx-=16) {
-				for (INT32 x = 0; x < 16; x++, sx++) {
-					if (sx < 0 || sx >= nScreenWidth || sy < 0 || sy >= nScreenHeight) continue;
-
-					INT32 pxl = gfx[(y*16+x)^flip];
-
-					if (colmask & (1 << pxl)) continue;
-
-					pTransDraw[sy * nScreenWidth + sx] = pxl + color;
-				}
-			}
-		}
-	}
-}
-
-static void draw_sprites()
-{
-	for (INT32 offs = 0x200 - 4; offs >= 0; offs -= 4)
-	{
-		INT32 attr = DrvSprBuf[offs+1];
-		INT32 sx = DrvSprBuf[offs + 3] - ((attr & 0x10) << 4);
-		INT32 sy = DrvSprBuf[offs + 2];
-		INT32 code = DrvSprBuf[offs] | ((attr & 0xe0) << 3);
-		INT32 color = attr & 0x07;
-		INT32 flipx = attr & 0x08;
-
-		if (*flipscreen)
-		{
-			sx = 240 - sx;
-			sy = 240 - sy;
-			flipx = !flipx;
-		}
-
-		sy -= 16;
-
-		if (sy < -15 || sy >= nScreenHeight || sx < -15 || sx >= nScreenWidth) continue;
-
-		if (*flipscreen) {
-			if (flipx) {
-				Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
-			} else {
-				Render16x16Tile_Mask_FlipY_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
-			}
-		} else {
-			if (flipx) {
-				Render16x16Tile_Mask_FlipX_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
-			} else {
-				Render16x16Tile_Mask_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
-			}
-		}
-	}
-}
-
-static void draw_text_layer()
-{
-	for (INT32 offs = 0x40; offs < 0x3c0; offs++)
-	{
-		INT32 attr  = DrvTxRAM[offs | 0x400];
-		INT32 code  = DrvTxRAM[offs] | ((attr & 0xe0) << 3);
-
-		INT32 sx = (offs & 0x1f) << 3;
-		INT32 sy = (offs >> 5) << 3;
-
-		if (*flipscreen) {
-			Render8x8Tile_Mask_FlipXY(pTransDraw, code, 248 - sx, 216 - (sy - 16), (attr & 0x1f)/*color*/, 2, 3, 0x300, DrvGfxROM0);
-		} else {
-			Render8x8Tile_Mask(pTransDraw, code, sx, sy - 16, (attr & 0x1f)/*color*/, 2, 3, 0x300, DrvGfxROM0);
-		}
-	}
-}
-
-static INT32 DrvDraw()
-{
-	if (DrvRecalc) {
-		for (INT32 i = 0; i < 0x400; i++) {
-			palette_write(i);
-		}
-	}
-
-	BurnTransferClear(0x3ff);
-
-	if (*DrvBgEnable) {
-		if (nBurnLayer & 1) draw_bg(*DrvScreenLayout, 1);
-	}
-
-	if (*DrvSprEnable) {
-		if (nBurnLayer & 2) draw_sprites();
-	}
-
-	if (*DrvBgEnable) {
-		if (nBurnLayer & 4) draw_bg(*DrvScreenLayout, 0);
-	}
-
-	if (*DrvFgEnable) {
-		if (nBurnLayer & 8) draw_text_layer();
-	}
-
-	BurnTransferCopy(DrvPalette);
-
-	return 0;
-}
-
-static INT32 DrvFrame()
-{
-	if (DrvReset) {
-		DrvDoReset(1);
-	}
-
-	if (watchdog >= 180) {
-		DrvDoReset(0);
-	}
-	watchdog++;
-
-	{
-		DrvInputs[0] = DrvInputs[1] = DrvInputs[2] = 0xff;
-
-		for (INT32 i = 0; i < 8; i++) {
-			DrvInputs[0] ^= (DrvJoy1[i] & 1) << i;
-			DrvInputs[1] ^= (DrvJoy2[i] & 1) << i;
-			DrvInputs[2] ^= (DrvJoy3[i] & 1) << i;
-		}
-
-		DrvInputs[0] |= *coin_lockout;
-	}
-
-	ZetNewFrame();
-
-	INT32 nInterleave = 256;
-	INT32 nCyclesTotal[3] = { 6000000 / 60, 3579545 / 60, 6000000 / 12 / 60 };
-	INT32 nCyclesDone[3] = { 0, 0, 0 };
-	
-	for (INT32 i = 0; i < nInterleave; i++) {
-		INT32 nCurrentCPU, nNext;
-
-		// Run Z80 #1
-		nCurrentCPU = 0;
-		ZetOpen(nCurrentCPU);
-		nNext = (i + 1) * nCyclesTotal[nCurrentCPU] / nInterleave;
-		nCyclesDone[nCurrentCPU] += ZetRun(nNext - nCyclesDone[nCurrentCPU]);
-		if (i == 240) {
-			if (pBurnDraw) { // draw here gets rid of artefacts when starting game
-				DrvDraw();
-			}
-			memcpy (DrvSprBuf, DrvSprRAM, 0x200); // buffer at rising vblank
-			ZetSetIRQLine(0, CPU_IRQSTATUS_HOLD);
-		}
-		ZetClose();
-
-		// Run Z80 #2
-		nCurrentCPU = 1;
-		ZetOpen(nCurrentCPU);
-		BurnTimerUpdate((i + 1) * (nCyclesTotal[nCurrentCPU] / nInterleave));
-		ZetClose();
-
-		if (use_mcu) {
-			nCurrentCPU = 2;
-			nNext = (i + 1) * nCyclesTotal[nCurrentCPU] / nInterleave;
-			nCyclesDone[nCurrentCPU] += mcs51Run(nNext - nCyclesDone[nCurrentCPU]);
-		}
-	}
-
-	ZetOpen(1);
-	BurnTimerEndFrame(nCyclesTotal[1]);
-	if (pBurnSoundOut) BurnYM2203Update(pBurnSoundOut, nBurnSoundLen);
-	ZetClose();
-
-	return 0;
-}
-
-
-static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
-{
-	struct BurnArea ba;
-	
-	if (pnMin != NULL) {
-		*pnMin = 0x029698;
-	}
-
-	if (nAction & ACB_MEMORY_RAM) {
-		memset(&ba, 0, sizeof(ba));
-		ba.Data	  = AllRam;
-		ba.nLen	  = RamEnd-AllRam;
-		ba.szName = "All Ram";
-		BurnAcb(&ba);
-	}
-
-	if (nAction & ACB_DRIVER_DATA) {
-		ZetScan(nAction);
-		if (use_mcu)
-			mcs51_scan(nAction);
-
-		BurnYM2203Scan(nAction, pnMin);
-	}
-
-	if (nAction & ACB_WRITE) {
-		ZetOpen(0);
-		DrvRomBankswitch(*DrvRomBank);
-		DrvVidRamBankswitch(*DrvVidBank);
-		ZetClose();
-	}
-
-	return 0;
-}
-
-
-// Black Tiger
-
-static struct BurnRomInfo blktigerRomDesc[] = {
-	{ "bdu-01a.5e",		0x08000, 0xa8f98f22, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "bdu-03a.8e",		0x10000, 0x4089e157, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
-	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
-	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
-
-	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-
-	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
-};
-
-STD_ROM_PICK(blktiger)
-STD_ROM_FN(blktiger)
-
-struct BurnDriver BurnDrvBlktiger = {
-	"blktiger", NULL, NULL, NULL, "1987",
-	"Black Tiger\0", NULL, "Capcom", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blktigerRomInfo, blktigerRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Tiger (older)
-
-static struct BurnRomInfo blktigeraRomDesc[] = {
-	{ "bdu-01.5e",		0x08000, 0x47b13922, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "bdu-02.6e",		0x10000, 0x2e0daf1b, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "bdu-03.8e",		0x10000, 0x3b67dfec, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
-	
-	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
-	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
-	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
-
-	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-
-	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
-};
-
-STD_ROM_PICK(blktigera)
-STD_ROM_FN(blktigera)
-
-struct BurnDriver BurnDrvBlktigera = {
-	"blktigera", "blktiger", NULL, NULL, "1987",
-	"Black Tiger (older)\0", NULL, "Capcom", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blktigeraRomInfo, blktigeraRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Tiger (bootleg)
-
-static struct BurnRomInfo blktigerb1RomDesc[] = {
-	{ "btiger1.f6",		0x08000, 0x9d8464e8, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "btiger3.j6",		0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
-	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
-	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
-
-	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-};
-
-STD_ROM_PICK(blktigerb1)
-STD_ROM_FN(blktigerb1)
-
-struct BurnDriver BurnDrvBlktigerb1 = {
-	"blktigerb1", "blktiger", NULL, NULL, "1987",
-	"Black Tiger (bootleg set 1)\0", NULL, "bootleg", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blktigerb1RomInfo, blktigerb1RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Tiger (bootleg set 2)
-
-static struct BurnRomInfo blktigerb2RomDesc[] = {
-	{ "1.bin",			0x08000, 0x47E2B21E, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "3.bin",			0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
-	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
-	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
-
-	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-};
-
-STD_ROM_PICK(blktigerb2)
-STD_ROM_FN(blktigerb2)
-
-struct BurnDriver BurnDrvblktigerb2 = {
-	"blktigerb2", "blktiger", NULL, NULL, "1987",
-	"Black Tiger (bootleg set 2)\0", NULL, "Capcom", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blktigerb2RomInfo, blktigerb2RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Tiger / Black Dragon (mixed bootleg?)
-
-static struct BurnRomInfo blktigerb3RomDesc[] = {
-	{ "1.5e",			0x08000, 0x47e2b21e, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "2.6e",			0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "3.8e",			0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "4.9e",			0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "5.10e",			0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "6.1l",			0x08000, 0x6dfab115, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "15.2n",			0x08000, 0x3821ab29, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "12.5b",			0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "11.4b",			0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
-	{ "14.9b",			0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
-	{ "13.8b",			0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
-
-	{ "8.5a",			0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "7.4a",			0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "10.9a",			0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "9.8a",			0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-};
-
-STD_ROM_PICK(blktigerb3)
-STD_ROM_FN(blktigerb3)
-
-static void blktigerb3SoundDecode()
-{
-	UINT8 *buf = (UINT8*)BurnMalloc(0x8000);
-
-	memcpy (buf, DrvZ80ROM1, 0x8000);
-
-	for (INT32 i = 0; i < 0x8000; i++)
-	{
-		DrvZ80ROM1[i] = buf[BITSWAP16(i, 15,14,13,12,11,10,9,8, 3,4,5,6, 7,2,1,0)];
-	}
-
-	BurnFree(buf);
-}
-
-static INT32 blktigerb3Init()
-{
-	INT32 nRet = DrvInit();
-
-	if (nRet == 0)
-	{
-		blktigerb3SoundDecode();
-	}
-
-	return nRet;
-}
-
-struct BurnDriver BurnDrvBlktigerb3 = {
-	"blktigerb3", "blktiger", NULL, NULL, "1987",
-	"Black Tiger / Black Dragon (mixed bootleg?)\0", NULL, "Capcom", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blktigerb3RomInfo, blktigerb3RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	blktigerb3Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Dragon (Japan)
-
-static struct BurnRomInfo blkdrgonRomDesc[] = {
-	{ "bd_01.5e",		0x08000, 0x27ccdfbc, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "bd_02.6e",		0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "bd_03.8e",		0x10000, 0xd1bf3757, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "bd_04.9e",		0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "bd_05.10e",		0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd_06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "bd_15.2n",		0x08000, 0x3821ab29, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "bd_12.5b",		0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "bd_11.4b",		0x10000, 0xc8b5fc52, 4 | BRF_GRA },           //  8
-	{ "bd_14.9b",		0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
-	{ "bd_13.8b",		0x10000, 0x5b0df8ce, 4 | BRF_GRA },           // 10
-
-	{ "bd_08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd_07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd_10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd_09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-	
-	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
-};
-
-STD_ROM_PICK(blkdrgon)
-STD_ROM_FN(blkdrgon)
-
-struct BurnDriver BurnDrvBlkdrgon = {
-	"blkdrgon", "blktiger", NULL, NULL, "1987",
-	"Black Dragon (Japan)\0", NULL, "Capcom", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blkdrgonRomInfo, blkdrgonRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
-
-
-// Black Dragon (bootleg)
-
-static struct BurnRomInfo blkdrgonbRomDesc[] = {
-	{ "a1",				0x08000, 0x7caf2ba0, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
-	{ "blkdrgon.6e",	0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
-	{ "a3",				0x10000, 0xf4cd0f39, 1 | BRF_PRG | BRF_ESS }, //  2
-	{ "blkdrgon.9e",	0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
-	{ "blkdrgon.10e",	0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
-
-	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
-
-	{ "b5",				0x08000, 0x852ad2b7, 3 | BRF_GRA },           //  6 - Characters
-
-	{ "blkdrgon.5b",	0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
-	{ "b1",				0x10000, 0x053ab15c, 4 | BRF_GRA },           //  8
-	{ "blkdrgon.9b",	0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
-	{ "b3",				0x10000, 0x9dc6e943, 4 | BRF_GRA },           // 10
-
-	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
-	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
-	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
-	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
-
-	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
-	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
-	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
-	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
-};
-
-STD_ROM_PICK(blkdrgonb)
-STD_ROM_FN(blkdrgonb)
-
-struct BurnDriver BurnDrvBlkdrgonb = {
-	"blkdrgonb", "blktiger", NULL, NULL, "1987",
-	"Black Dragon (bootleg)\0", NULL, "bootleg", "Miscellaneous",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
-	NULL, blkdrgonbRomInfo, blkdrgonbRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
-	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
-	256, 224, 4, 3
-};
+// FB Alpha Black Tiger driver module
+// Based on MAME driver by Paul Leaman
+
+#include "tiles_generic.h"
+#include "z80_intf.h"
+#include "mcs51.h"
+#include "burn_ym2203.h"
+#include "bitswap.h"
+
+static UINT8 *AllMem;
+static UINT8 *MemEnd;
+static UINT8 *AllRam;
+static UINT8 *RamEnd;
+static UINT8 *DrvZ80ROM0;
+static UINT8 *DrvZ80ROM1;
+static UINT8 *DrvMCUROM;
+static UINT8 *DrvGfxROM0;
+static UINT8 *DrvGfxROM1;
+static UINT8 *DrvGfxROM2;
+static UINT8 *DrvZ80RAM0;
+static UINT8 *DrvZ80RAM1;
+static UINT8 *DrvSprRAM;
+static UINT8 *DrvSprBuf;
+static UINT8 *DrvPalRAM;
+static UINT8 *DrvBgRAM;
+static UINT8 *DrvTxRAM;
+static UINT32 *DrvPalette;
+static UINT8 DrvRecalc;
+
+static UINT8 *DrvScreenLayout;
+static UINT8 *DrvBgEnable;
+static UINT8 *DrvFgEnable;
+static UINT8 *DrvSprEnable;
+static UINT8 *DrvVidBank;
+static UINT8 *DrvRomBank;
+
+static UINT8 *DrvZ80Latch;
+static UINT8 *DrvMCULatch;
+static UINT8 *soundlatch;
+static UINT8 *flipscreen;
+static UINT8 *coin_lockout;
+static INT32 watchdog;
+
+static UINT16 *DrvScrollx;
+static UINT16 *DrvScrolly;
+
+static UINT8 DrvJoy1[8];
+static UINT8 DrvJoy2[8];
+static UINT8 DrvJoy3[8];
+static UINT8 DrvDips[3];
+static UINT8 DrvInputs[3];
+static UINT8 DrvReset;
+
+static INT32 use_mcu = 0;
+
+static struct BurnInputInfo DrvInputList[] = {
+	{"P1 Coin"       	  , BIT_DIGITAL  , DrvJoy1 + 6,	 "p1 coin"  },
+	{"P1 Start"     	  , BIT_DIGITAL  , DrvJoy1 + 0,	 "p1 start" },
+	{"P1 Up"        	  , BIT_DIGITAL  , DrvJoy2 + 3,  "p1 up"    },
+	{"P1 Down"      	  , BIT_DIGITAL  , DrvJoy2 + 2,  "p1 down"  },
+	{"P1 Left"      	  , BIT_DIGITAL  , DrvJoy2 + 1,  "p1 left"  },
+	{"P1 Right"     	  , BIT_DIGITAL  , DrvJoy2 + 0,  "p1 right" },
+	{"P1 Button 1"  	  , BIT_DIGITAL  , DrvJoy2 + 4,  "p1 fire 1"},
+	{"P1 Button 2"  	  , BIT_DIGITAL  , DrvJoy2 + 5,  "p1 fire 2"},
+
+	{"P2 Coin"       	  , BIT_DIGITAL  , DrvJoy1 + 7,	 "p2 coin"  },
+	{"P2 Start"     	  , BIT_DIGITAL  , DrvJoy1 + 1,	 "p2 start" },
+	{"P2 Up"        	  , BIT_DIGITAL  , DrvJoy3 + 3,  "p2 up"    },
+	{"P2 Down"      	  , BIT_DIGITAL  , DrvJoy3 + 2,  "p2 down"  },
+	{"P2 Left"      	  , BIT_DIGITAL  , DrvJoy3 + 1,  "p2 left"  },
+	{"P2 Right"     	  , BIT_DIGITAL  , DrvJoy3 + 0,  "p2 right" },
+	{"P2 Button 1"  	  , BIT_DIGITAL  , DrvJoy3 + 4,  "p2 fire 1"},
+	{"P2 Button 2"  	  , BIT_DIGITAL  , DrvJoy3 + 5,  "p2 fire 2"},
+
+	{"Reset",		    BIT_DIGITAL  , &DrvReset,	 "reset"    },
+	{"Service",		    BIT_DIGITAL  , DrvJoy1 + 5,  "service"  },
+	{"Dip 1",		    BIT_DIPSWITCH, DrvDips + 0,	 "dip"	    },
+	{"Dip 2",		    BIT_DIPSWITCH, DrvDips + 1,	 "dip"	    },
+	{"Dip 3",		    BIT_DIPSWITCH, DrvDips + 2,	 "dip"	    },
+};
+
+STDINPUTINFO(Drv)
+
+static struct BurnDIPInfo DrvDIPList[]=
+{
+	{0x12, 0xff, 0xff, 0xff, NULL			},
+ 	{0x13, 0xff, 0xff, 0xff, NULL			},
+ 	{0x14, 0xff, 0x01, 0x01, NULL			},
+
+ 	{0x12, 0xfe,    0,    8, "Coin A"		},
+ 	{0x12, 0x01, 0x07, 0x00, "4 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x01, "3 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x02, "2 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x07, "1 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x06, "1 Coin 2 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x05, "1 Coin 3 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x04, "1 Coin 4 Credits"	},
+ 	{0x12, 0x01, 0x07, 0x03, "1 Coin 5 Credits"	},
+
+ 	{0x12, 0xfe,    0,    8, "Coin B"		},
+ 	{0x12, 0x01, 0x38, 0x00, "4 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x08, "3 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x10, "2 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x38, "1 Coin 1 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x30, "1 Coin 2 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x28, "1 Coin 3 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x20, "1 Coin 4 Credits"	},
+ 	{0x12, 0x01, 0x38, 0x18, "1 Coin 5 Credits"	},
+
+ 	{0x12, 0xfe,    0,    2, "Flip Screen"		},
+ 	{0x12, 0x01, 0x40, 0x40, "Off"			},
+ 	{0x12, 0x01, 0x40, 0x00, "On"			},
+
+ 	{0x12, 0xfe,    0,    2, "Test"			},
+ 	{0x12, 0x01, 0x80, 0x80, "Off"			},
+ 	{0x12, 0x01, 0x80, 0x00, "On"			},
+
+ 	{0x13, 0xfe,    0,    4, "Lives"		},
+ 	{0x13, 0x01, 0x03, 0x02, "2"			},
+ 	{0x13, 0x01, 0x03, 0x03, "3"			},
+ 	{0x13, 0x01, 0x03, 0x01, "5"			},
+ 	{0x13, 0x01, 0x03, 0x00, "7"			},
+
+ 	{0x13, 0xfe,    0,    8, "Difficulty"		},
+ 	{0x13, 0x01, 0x1c, 0x1c, "1 (Easiest)"		},
+ 	{0x13, 0x01, 0x1c, 0x18, "2"			},
+ 	{0x13, 0x01, 0x1c, 0x14, "3"			},
+ 	{0x13, 0x01, 0x1c, 0x10, "4"			},
+ 	{0x13, 0x01, 0x1c, 0x0c, "5 (Normal)"		},
+ 	{0x13, 0x01, 0x1c, 0x08, "6"			},
+ 	{0x13, 0x01, 0x1c, 0x04, "7"			},
+ 	{0x13, 0x01, 0x1c, 0x00, "8 (Hardest)"		},
+
+ 	{0x13, 0xfe,    0,    2, "Demo Sounds"		},
+ 	{0x13, 0x01, 0x20, 0x00, "Off"			},
+ 	{0x13, 0x01, 0x20, 0x20, "On"			},
+
+ 	{0x13, 0xfe,    0,    2, "Allow Continue"	},
+ 	{0x13, 0x01, 0x40, 0x00, "No"			},
+ 	{0x13, 0x01, 0x40, 0x40, "Yes"			},
+
+ 	{0x13, 0xfe,    0,    2, "Cabinet"		},
+ 	{0x13, 0x01, 0x80, 0x00, "Upright"		},
+ 	{0x13, 0x01, 0x80, 0x80, "Cocktail"		},
+
+ 	{0x14, 0xfe,    0,    2, "Coin Lockout Present?"},
+ 	{0x14, 0x01, 0x01, 0x01, "Yes"			},
+ 	{0x14, 0x01, 0x01, 0x00, "No"			},
+};
+
+STDDIPINFO(Drv)
+
+static void palette_write(INT32 offset)
+{
+	UINT8 r,g,b;
+	UINT16 data = (DrvPalRAM[offset]) | (DrvPalRAM[offset | 0x400] << 8);
+
+	r = (data >> 4) & 0x0f;
+	g = (data >> 0) & 0x0f;
+	b = (data >> 8) & 0x0f;
+
+	r |= r << 4;
+	g |= g << 4;
+	b |= b << 4;
+
+	DrvPalette[offset] = BurnHighCol(r, g, b, 0);
+}
+
+static void DrvRomBankswitch(INT32 bank)
+{
+	*DrvRomBank = bank & 0x0f;
+
+	INT32 nBank = 0x10000 + (bank & 0x0f) * 0x4000;
+
+	ZetMapMemory(DrvZ80ROM0 + nBank, 0x8000, 0xbfff, MAP_ROM);
+}
+
+static void DrvVidRamBankswitch(INT32 bank)
+{
+	*DrvVidBank = bank & 0x03;
+
+	INT32 nBank = (bank & 3) * 0x1000;
+
+	ZetMapMemory(DrvBgRAM + nBank, 0xc000, 0xcfff, MAP_RAM);
+}
+
+static void __fastcall blacktiger_write(UINT16 address, UINT8 data)
+{
+	if ((address & 0xf800) == 0xd800) {
+		DrvPalRAM[address & 0x7ff] = data;
+
+		palette_write(address & 0x3ff);
+		return;
+	}
+
+	return;
+}
+
+static UINT8 __fastcall blacktiger_read(UINT16 /*address*/)
+{
+	return 0;
+}
+
+static void __fastcall blacktiger_out(UINT16 port, UINT8 data)
+{
+	switch (port & 0xff)
+	{
+		case 0x00:
+			*soundlatch = data;
+		return;
+
+		case 0x01:
+			DrvRomBankswitch(data);
+		return;
+
+		case 0x03:
+			if (DrvDips[2] & 1) {
+				*coin_lockout = ~data << 6;
+			}
+		return;
+
+		case 0x04:
+			if (data & 0x20) {
+				ZetReset(1);
+			}
+
+			*flipscreen  =  0; //data & 0x40; // ignore flipscreen
+			*DrvFgEnable = ~data & 0x80;
+
+		return;
+
+		case 0x06:
+			watchdog = 0;
+		return;
+
+		case 0x07:
+			{
+				if (use_mcu) {
+					mcs51_set_irq_line(MCS51_INT1_LINE, CPU_IRQSTATUS_ACK);
+					*DrvZ80Latch = data;
+				} else {
+					// do nothing
+				}
+			}
+		return;
+
+		case 0x08:
+			*DrvScrollx = (*DrvScrollx & 0xff00) | data;
+		return;
+
+		case 0x09:
+			*DrvScrollx = (*DrvScrollx & 0x00ff) | (data << 8);
+		return;
+
+		case 0x0a:
+			*DrvScrolly = (*DrvScrolly & 0xff00) | data;
+		return;
+
+		case 0x0b:
+			*DrvScrolly = (*DrvScrolly & 0x00ff) | (data << 8);
+		return;
+
+		case 0x0c:
+			*DrvBgEnable  = ~data & 0x02;
+			*DrvSprEnable = ~data & 0x04;
+		return;
+
+		case 0x0d:
+			DrvVidRamBankswitch(data);
+		return;
+
+		case 0x0e:
+			*DrvScreenLayout = data ? 1 : 0;
+		return;
+	}
+}
+
+static UINT8 __fastcall blacktiger_in(UINT16 port)
+{
+	switch (port & 0xff)
+	{
+		case 0x00:
+		case 0x01:
+		case 0x02:
+			return DrvInputs[port & 3];
+
+		case 0x03:
+		case 0x04:
+			return DrvDips[~port & 1];
+
+		case 0x05:
+			return 0x01;
+
+		case 0x07:
+			return (use_mcu) ? *DrvMCULatch : (ZetDe(-1) >> 8);
+	}
+
+	return 0;
+}
+
+static void __fastcall blacktiger_sound_write(UINT16 address, UINT8 data)
+{
+	switch (address)
+	{
+		case 0xe000:
+			BurnYM2203Write(0, 0, data);
+			return;
+
+		case 0xe001:
+			BurnYM2203Write(0, 1, data);
+			return;
+
+		case 0xe002:
+			BurnYM2203Write(1, 0, data);
+			return;
+
+		case 0xe003:
+			BurnYM2203Write(1, 1, data);
+			return;
+	}
+}
+
+static UINT8 __fastcall blacktiger_sound_read(UINT16 address)
+{
+	switch (address)
+	{
+		case 0xc800:
+			return *soundlatch;
+
+		case 0xe000:
+			return BurnYM2203Read(0, 0);
+
+		case 0xe001:
+			return BurnYM2203Read(0, 1);
+
+		case 0xe002:
+			return BurnYM2203Read(1, 0);
+
+		case 0xe003:
+			return BurnYM2203Read(1, 1);
+	}
+
+	return 0;
+}
+
+static UINT8 mcu_read_port(INT32 port)
+{
+	if (port != MCS51_PORT_P0) return 0;
+
+	mcs51_set_irq_line(MCS51_INT1_LINE, CPU_IRQSTATUS_NONE);
+	return *DrvZ80Latch;
+}
+
+static void mcu_write_port(INT32 port, UINT8 data)
+{
+	if (port != MCS51_PORT_P0) return;
+
+	*DrvMCULatch = data;
+}
+
+
+static INT32 MemIndex()
+{
+	UINT8 *Next; Next = AllMem;
+
+	DrvZ80ROM0	= Next; Next += 0x050000;
+	DrvZ80ROM1	= Next; Next += 0x008000;
+	DrvMCUROM   = Next; Next += 0x001000;
+
+	DrvGfxROM0	= Next; Next += 0x020000;
+	DrvGfxROM1	= Next; Next += 0x080000;
+	DrvGfxROM2	= Next; Next += 0x080000;
+
+	DrvPalette	= (UINT32*)Next; Next += 0x0400 * sizeof(UINT32);
+
+	AllRam		= Next;
+
+	DrvZ80RAM0	= Next; Next += 0x001e00;
+	DrvZ80RAM1	= Next; Next += 0x000800;
+
+	DrvPalRAM	= Next; Next += 0x000800;
+	DrvTxRAM	= Next; Next += 0x000800;
+	DrvBgRAM	= Next; Next += 0x004000;
+	DrvSprRAM	= Next; Next += 0x000200;
+	DrvSprBuf	= Next; Next += 0x000200;
+
+	DrvScreenLayout	= Next; Next += 0x000001;
+	DrvBgEnable	= Next; Next += 0x000001;
+	DrvFgEnable	= Next; Next += 0x000001;
+	DrvSprEnable	= Next; Next += 0x000001;
+
+	DrvVidBank	= Next; Next += 0x000001;
+	DrvRomBank	= Next; Next += 0x000001;
+
+	DrvScrollx	= (UINT16*)Next; Next += 0x0001 * sizeof (UINT16);
+	DrvScrolly	= (UINT16*)Next; Next += 0x0001 * sizeof (UINT16);
+
+	soundlatch	= Next; Next += 0x000001;
+	flipscreen	= Next; Next += 0x000001;
+	coin_lockout	= Next; Next += 0x000001;
+
+	DrvZ80Latch = Next; Next += 0x000001;
+	DrvMCULatch = Next; Next += 0x000001;
+
+	RamEnd		= Next;
+
+	MemEnd		= Next;
+
+	return 0;
+}
+
+static INT32 DrvDoReset(INT32 full_reset)
+{
+	if (full_reset) {
+		memset (AllRam, 0, RamEnd - AllRam);
+	}
+
+	ZetOpen(0);
+	ZetReset();
+	DrvRomBankswitch(1);
+	DrvVidRamBankswitch(1);
+	ZetClose();
+
+	ZetOpen(1);
+	ZetReset();
+	BurnYM2203Reset();
+	ZetClose();
+
+	if (use_mcu) {
+		mcs51_reset();
+	}
+
+	watchdog = 0;
+
+	HiscoreReset();
+
+	return 0;
+}
+
+static INT32 DrvGfxDecode()
+{
+	INT32 Plane[4] = { ((0x40000 * 8) / 2) + 4, ((0x40000 * 8) / 2) + 0, 4, 0 };
+	INT32 XOffs[16] = { 0, 1, 2, 3, 8+0, 8+1, 8+2, 8+3,
+			16*16+0, 16*16+1, 16*16+2, 16*16+3, 16*16+8+0, 16*16+8+1, 16*16+8+2, 16*16+8+3 };
+	INT32 YOffs[16] = { 0*16, 1*16, 2*16, 3*16, 4*16, 5*16, 6*16, 7*16,
+			8*16, 9*16, 10*16, 11*16, 12*16, 13*16, 14*16, 15*16 };
+
+	UINT8 *tmp = (UINT8*)BurnMalloc(0x40000);
+	if (tmp == NULL) {
+		return 1;
+	}
+
+	memcpy (tmp, DrvGfxROM0, 0x08000);
+
+	GfxDecode(0x0800, 2,  8,  8, Plane + 2, XOffs, YOffs, 0x080, tmp, DrvGfxROM0);
+
+	memcpy (tmp, DrvGfxROM1, 0x40000);
+
+	GfxDecode(0x0800, 4, 16, 16, Plane + 0, XOffs, YOffs, 0x200, tmp, DrvGfxROM1);
+
+	memcpy (tmp, DrvGfxROM2, 0x40000);
+
+	GfxDecode(0x0800, 4, 16, 16, Plane + 0, XOffs, YOffs, 0x200, tmp, DrvGfxROM2);
+
+	BurnFree (tmp);
+	
+	return 0;
+}
+
+static void DrvFMIRQHandler(INT32, INT32 nStatus)
+{
+	ZetSetIRQLine(0, (nStatus & 1) ? CPU_IRQSTATUS_ACK : CPU_IRQSTATUS_NONE);
+}
+
+static INT32 DrvInit()
+{
+	AllMem = NULL;
+	MemIndex();
+	INT32 nLen = MemEnd - (UINT8 *)0;
+	if ((AllMem = (UINT8 *)BurnMalloc(nLen)) == NULL) return 1;
+	memset(AllMem, 0, nLen);
+	MemIndex();
+
+	{
+		for (INT32 i = 0; i < 5; i++) {
+			if (BurnLoadRom(DrvZ80ROM0 + i * 0x10000, 0  + i, 1)) return 1;
+		}
+
+		if (BurnLoadRom(DrvZ80ROM1, 5, 1)) return 1;
+
+		if (BurnLoadRom(DrvGfxROM0, 6, 1)) return 1;
+
+		for (INT32 i = 0; i < 4; i++) {
+			if (BurnLoadRom(DrvGfxROM1 + i * 0x10000, 7  + i, 1)) return 1;
+			if (BurnLoadRom(DrvGfxROM2 + i * 0x10000, 11 + i, 1)) return 1;
+		}
+
+		DrvGfxDecode();
+	}
+
+	ZetInit(0);
+	ZetOpen(0);
+	ZetMapMemory(DrvZ80ROM0, 0x0000, 0x7fff, MAP_ROM);
+	ZetMapMemory(DrvTxRAM,   0xd000, 0xd7ff, MAP_RAM);
+	ZetMapMemory(DrvPalRAM,  0xd800, 0xdfff, MAP_ROM); // write in handler
+	ZetMapMemory(DrvZ80RAM0, 0xe000, 0xfdff, MAP_RAM);
+	ZetMapMemory(DrvSprRAM,  0xfe00, 0xffff, MAP_RAM);
+	ZetSetWriteHandler(blacktiger_write);
+	ZetSetReadHandler(blacktiger_read);
+	ZetSetInHandler(blacktiger_in);
+	ZetSetOutHandler(blacktiger_out);
+	ZetClose();
+
+	ZetInit(1);
+	ZetOpen(1);
+	ZetMapMemory(DrvZ80ROM1, 0x0000, 0x7fff, MAP_ROM);
+	ZetMapMemory(DrvZ80RAM1, 0xc000, 0xc7ff, MAP_RAM);
+	ZetSetWriteHandler(blacktiger_sound_write);
+	ZetSetReadHandler(blacktiger_sound_read);
+	ZetClose();
+
+	if (use_mcu) {
+		bprintf(0, _T("Using i8751 Protection MCU.\n"));
+		if (BurnLoadRom(DrvMCUROM + 0x00000, 19, 1)) return 1;
+
+		mcs51_init();
+		mcs51_set_program_data(DrvMCUROM);
+		mcs51_set_write_handler(mcu_write_port);
+		mcs51_set_read_handler(mcu_read_port);
+	}
+
+	GenericTilesInit();
+
+	BurnYM2203Init(2, 3579545, &DrvFMIRQHandler, 0);
+	BurnTimerAttachZet(3579545);
+	BurnYM2203SetAllRoutes(0, 0.15, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetAllRoutes(1, 0.15, BURN_SND_ROUTE_BOTH);
+	BurnYM2203SetPSGVolume(0, 0.05);
+	BurnYM2203SetPSGVolume(1, 0.05);
+
+	DrvDoReset(1);
+
+	return 0;
+}
+
+static INT32 DrvInitMCU()
+{
+	use_mcu = 1;
+
+	return DrvInit();
+}
+
+static INT32 DrvExit()
+{
+	BurnYM2203Exit();
+	ZetExit();
+
+	if (use_mcu)
+		mcs51_exit();
+
+	GenericTilesExit();
+
+	BurnFree (AllMem);
+
+	use_mcu = 0;
+
+	return 0;
+}
+
+static void draw_bg(INT32 type, INT32 layer)
+{
+	UINT16 masks[2][4] = { { 0xffff, 0xfff0, 0xff00, 0xf000 }, { 0x8000, 0x800f, 0x80ff, 0x8fff } };
+	INT32 scrollx = (*DrvScrollx)      & (0x3ff | (0x200 << type));
+	INT32 scrolly = ((*DrvScrolly)+16) & (0x7ff >> type);
+
+	for (INT32 offs = 0; offs < (128*64 | 64*128); offs++)
+	{
+		INT32 sx, sy, ofst;
+
+		if (type) {		// 1 = 128x64, 0 = 64x128
+			sx = (offs & 0x7f);
+			sy = (offs >> 7);
+
+			ofst = (sx & 0x0f) + ((sy & 0x0f) << 4) + ((sx & 0x70) << 4) + ((sy & 0x30) << 7);
+		} else {
+			sx = (offs & 0x3f);
+			sy = (offs >> 6);
+
+			ofst = (sx & 0x0f) + ((sy & 0x0f) << 4) + ((sx & 0x30) << 4) + ((sy & 0x70) << 6);
+		}
+
+		sx = (sx * 16) - scrollx;
+		sy = (sy * 16) - scrolly;
+
+		if (sx < -15) sx += (0x400 << type);
+		if (sy < -15) sy += (0x800 >> type);
+		if (sx >= nScreenWidth || sy >= nScreenHeight) continue;
+
+		INT32 attr  = DrvBgRAM[(ofst << 1) + 1];
+		INT32 color = (attr >> 3) & 0x0f;
+		INT32 code  = DrvBgRAM[ofst << 1] + ((attr & 0x07) << 8);
+		INT32 flipx = attr & 0x80;
+		INT32 flipy = 0;
+
+		if (*flipscreen) {
+			flipx ^= 0x80;
+			flipy = 1;
+
+			sx = 240 - sx;
+			sy = 208 - sy;
+		}
+
+		UINT8 coltab[8] = { 3, 2, 1, 0, 0, 0, 0, 0 };
+		INT32 colmask = masks[layer][coltab[color >> 1]];
+
+		{
+			UINT8 *gfx = DrvGfxROM1 + (code * 0x100);
+			color <<= 4;
+
+			INT32 flip = (flipx ? 0x0f : 0) + (flipy ? 0xf0 : 0);
+
+			for (INT32 y = 0; y < 16; y++, sy++, sx-=16) {
+				for (INT32 x = 0; x < 16; x++, sx++) {
+					if (sx < 0 || sx >= nScreenWidth || sy < 0 || sy >= nScreenHeight) continue;
+
+					INT32 pxl = gfx[(y*16+x)^flip];
+
+					if (colmask & (1 << pxl)) continue;
+
+					pTransDraw[sy * nScreenWidth + sx] = pxl + color;
+				}
+			}
+		}
+	}
+}
+
+static void draw_sprites()
+{
+	for (INT32 offs = 0x200 - 4; offs >= 0; offs -= 4)
+	{
+		INT32 attr = DrvSprBuf[offs+1];
+		INT32 sx = DrvSprBuf[offs + 3] - ((attr & 0x10) << 4);
+		INT32 sy = DrvSprBuf[offs + 2];
+		INT32 code = DrvSprBuf[offs] | ((attr & 0xe0) << 3);
+		INT32 color = attr & 0x07;
+		INT32 flipx = attr & 0x08;
+
+		if (*flipscreen)
+		{
+			sx = 240 - sx;
+			sy = 240 - sy;
+			flipx = !flipx;
+		}
+
+		sy -= 16;
+
+		if (sy < -15 || sy >= nScreenHeight || sx < -15 || sx >= nScreenWidth) continue;
+
+		if (*flipscreen) {
+			if (flipx) {
+				Render16x16Tile_Mask_FlipXY_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
+			} else {
+				Render16x16Tile_Mask_FlipY_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
+			}
+		} else {
+			if (flipx) {
+				Render16x16Tile_Mask_FlipX_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
+			} else {
+				Render16x16Tile_Mask_Clip(pTransDraw, code, sx, sy, color, 4, 0x0f, 0x200, DrvGfxROM2);
+			}
+		}
+	}
+}
+
+static void draw_text_layer()
+{
+	for (INT32 offs = 0x40; offs < 0x3c0; offs++)
+	{
+		INT32 attr  = DrvTxRAM[offs | 0x400];
+		INT32 code  = DrvTxRAM[offs] | ((attr & 0xe0) << 3);
+
+		INT32 sx = (offs & 0x1f) << 3;
+		INT32 sy = (offs >> 5) << 3;
+
+		if (*flipscreen) {
+			Render8x8Tile_Mask_FlipXY(pTransDraw, code, 248 - sx, 216 - (sy - 16), (attr & 0x1f)/*color*/, 2, 3, 0x300, DrvGfxROM0);
+		} else {
+			Render8x8Tile_Mask(pTransDraw, code, sx, sy - 16, (attr & 0x1f)/*color*/, 2, 3, 0x300, DrvGfxROM0);
+		}
+	}
+}
+
+static INT32 DrvDraw()
+{
+	if (DrvRecalc) {
+		for (INT32 i = 0; i < 0x400; i++) {
+			palette_write(i);
+		}
+	}
+
+	BurnTransferClear(0x3ff);
+
+	if (*DrvBgEnable) {
+		if (nBurnLayer & 1) draw_bg(*DrvScreenLayout, 1);
+	}
+
+	if (*DrvSprEnable) {
+		if (nBurnLayer & 2) draw_sprites();
+	}
+
+	if (*DrvBgEnable) {
+		if (nBurnLayer & 4) draw_bg(*DrvScreenLayout, 0);
+	}
+
+	if (*DrvFgEnable) {
+		if (nBurnLayer & 8) draw_text_layer();
+	}
+
+	BurnTransferCopy(DrvPalette);
+
+	return 0;
+}
+
+static INT32 DrvFrame()
+{
+	if (DrvReset) {
+		DrvDoReset(1);
+	}
+
+	if (watchdog >= 180) {
+		DrvDoReset(0);
+	}
+	watchdog++;
+
+	{
+		DrvInputs[0] = DrvInputs[1] = DrvInputs[2] = 0xff;
+
+		for (INT32 i = 0; i < 8; i++) {
+			DrvInputs[0] ^= (DrvJoy1[i] & 1) << i;
+			DrvInputs[1] ^= (DrvJoy2[i] & 1) << i;
+			DrvInputs[2] ^= (DrvJoy3[i] & 1) << i;
+		}
+
+		DrvInputs[0] |= *coin_lockout;
+	}
+
+	ZetNewFrame();
+
+	INT32 nInterleave = 256;
+	INT32 nCyclesTotal[3] = { 6000000 / 60, 3579545 / 60, 6000000 / 12 / 60 };
+	INT32 nCyclesDone[3] = { 0, 0, 0 };
+	
+	for (INT32 i = 0; i < nInterleave; i++) {
+		INT32 nCurrentCPU, nNext;
+
+		// Run Z80 #1
+		nCurrentCPU = 0;
+		ZetOpen(nCurrentCPU);
+		nNext = (i + 1) * nCyclesTotal[nCurrentCPU] / nInterleave;
+		nCyclesDone[nCurrentCPU] += ZetRun(nNext - nCyclesDone[nCurrentCPU]);
+		if (i == 240) {
+			if (pBurnDraw) { // draw here gets rid of artefacts when starting game
+				DrvDraw();
+			}
+			memcpy (DrvSprBuf, DrvSprRAM, 0x200); // buffer at rising vblank
+			ZetSetIRQLine(0, CPU_IRQSTATUS_HOLD);
+		}
+		ZetClose();
+
+		// Run Z80 #2
+		nCurrentCPU = 1;
+		ZetOpen(nCurrentCPU);
+		BurnTimerUpdate((i + 1) * (nCyclesTotal[nCurrentCPU] / nInterleave));
+		ZetClose();
+
+		if (use_mcu) {
+			nCurrentCPU = 2;
+			nNext = (i + 1) * nCyclesTotal[nCurrentCPU] / nInterleave;
+			nCyclesDone[nCurrentCPU] += mcs51Run(nNext - nCyclesDone[nCurrentCPU]);
+		}
+	}
+
+	ZetOpen(1);
+	BurnTimerEndFrame(nCyclesTotal[1]);
+	if (pBurnSoundOut) BurnYM2203Update(pBurnSoundOut, nBurnSoundLen);
+	ZetClose();
+
+	return 0;
+}
+
+
+static INT32 DrvScan(INT32 nAction, INT32 *pnMin)
+{
+	struct BurnArea ba;
+	
+	if (pnMin != NULL) {
+		*pnMin = 0x029698;
+	}
+
+	if (nAction & ACB_MEMORY_RAM) {
+		memset(&ba, 0, sizeof(ba));
+		ba.Data	  = AllRam;
+		ba.nLen	  = RamEnd-AllRam;
+		ba.szName = "All Ram";
+		BurnAcb(&ba);
+	}
+
+	if (nAction & ACB_DRIVER_DATA) {
+		ZetScan(nAction);
+		if (use_mcu)
+			mcs51_scan(nAction);
+
+		BurnYM2203Scan(nAction, pnMin);
+	}
+
+	if (nAction & ACB_WRITE) {
+		ZetOpen(0);
+		DrvRomBankswitch(*DrvRomBank);
+		DrvVidRamBankswitch(*DrvVidBank);
+		ZetClose();
+	}
+
+	return 0;
+}
+
+
+// Black Tiger
+
+static struct BurnRomInfo blktigerRomDesc[] = {
+	{ "bdu-01a.5e",		0x08000, 0xa8f98f22, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "bdu-03a.8e",		0x10000, 0x4089e157, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
+	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
+	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
+
+	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+
+	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
+};
+
+STD_ROM_PICK(blktiger)
+STD_ROM_FN(blktiger)
+
+struct BurnDriver BurnDrvBlktiger = {
+	"blktiger", NULL, NULL, NULL, "1987",
+	"Black Tiger\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blktigerRomInfo, blktigerRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Tiger (older)
+
+static struct BurnRomInfo blktigeraRomDesc[] = {
+	{ "bdu-01.5e",		0x08000, 0x47b13922, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bdu-02.6e",		0x10000, 0x2e0daf1b, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "bdu-03.8e",		0x10000, 0x3b67dfec, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
+	
+	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
+	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
+	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
+
+	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+
+	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
+};
+
+STD_ROM_PICK(blktigera)
+STD_ROM_FN(blktigera)
+
+struct BurnDriver BurnDrvBlktigera = {
+	"blktigera", "blktiger", NULL, NULL, "1987",
+	"Black Tiger (older)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blktigeraRomInfo, blktigeraRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Tiger (bootleg)
+
+static struct BurnRomInfo blktigerb1RomDesc[] = {
+	{ "btiger1.f6",		0x08000, 0x9d8464e8, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "btiger3.j6",		0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
+	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
+	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
+
+	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+};
+
+STD_ROM_PICK(blktigerb1)
+STD_ROM_FN(blktigerb1)
+
+struct BurnDriver BurnDrvBlktigerb1 = {
+	"blktigerb1", "blktiger", NULL, NULL, "1987",
+	"Black Tiger (bootleg set 1)\0", NULL, "bootleg", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blktigerb1RomInfo, blktigerb1RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Tiger (bootleg set 2)
+
+static struct BurnRomInfo blktigerb2RomDesc[] = {
+	{ "1.bin",			0x08000, 0x47E2B21E, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bdu-02a.6e",		0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "3.bin",			0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd-04.9e",		0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd-05.10e",		0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd-15.2n",		0x08000, 0x70175d78, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd-12.5b",		0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd-11.4b",		0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
+	{ "bd-14.9b",		0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
+	{ "bd-13.8b",		0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
+
+	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+};
+
+STD_ROM_PICK(blktigerb2)
+STD_ROM_FN(blktigerb2)
+
+struct BurnDriver BurnDrvblktigerb2 = {
+	"blktigerb2", "blktiger", NULL, NULL, "1987",
+	"Black Tiger (bootleg set 2)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blktigerb2RomInfo, blktigerb2RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Tiger / Black Dragon (mixed bootleg?)
+
+static struct BurnRomInfo blktigerb3RomDesc[] = {
+	{ "1.5e",			0x08000, 0x47e2b21e, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "2.6e",			0x10000, 0x7bef96e8, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "3.8e",			0x10000, 0x52c56ed1, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "4.9e",			0x10000, 0xed6af6ec, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "5.10e",			0x10000, 0xae59b72e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "6.1l",			0x08000, 0x6dfab115, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "15.2n",			0x08000, 0x3821ab29, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "12.5b",			0x10000, 0xc4524993, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "11.4b",			0x10000, 0x7932c86f, 4 | BRF_GRA },           //  8
+	{ "14.9b",			0x10000, 0xdc49593a, 4 | BRF_GRA },           //  9
+	{ "13.8b",			0x10000, 0x7ed7a122, 4 | BRF_GRA },           // 10
+
+	{ "8.5a",			0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "7.4a",			0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "10.9a",			0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "9.8a",			0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+};
+
+STD_ROM_PICK(blktigerb3)
+STD_ROM_FN(blktigerb3)
+
+static void blktigerb3SoundDecode()
+{
+	UINT8 *buf = (UINT8*)BurnMalloc(0x8000);
+
+	memcpy (buf, DrvZ80ROM1, 0x8000);
+
+	for (INT32 i = 0; i < 0x8000; i++)
+	{
+		DrvZ80ROM1[i] = buf[BITSWAP16(i, 15,14,13,12,11,10,9,8, 3,4,5,6, 7,2,1,0)];
+	}
+
+	BurnFree(buf);
+}
+
+static INT32 blktigerb3Init()
+{
+	INT32 nRet = DrvInit();
+
+	if (nRet == 0)
+	{
+		blktigerb3SoundDecode();
+	}
+
+	return nRet;
+}
+
+struct BurnDriver BurnDrvBlktigerb3 = {
+	"blktigerb3", "blktiger", NULL, NULL, "1987",
+	"Black Tiger / Black Dragon (mixed bootleg?)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blktigerb3RomInfo, blktigerb3RomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	blktigerb3Init, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Dragon (Japan)
+
+static struct BurnRomInfo blkdrgonRomDesc[] = {
+	{ "bd_01.5e",		0x08000, 0x27ccdfbc, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bd_02.6e",		0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "bd_03.8e",		0x10000, 0xd1bf3757, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd_04.9e",		0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd_05.10e",		0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd_06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd_15.2n",		0x08000, 0x3821ab29, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd_12.5b",		0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd_11.4b",		0x10000, 0xc8b5fc52, 4 | BRF_GRA },           //  8
+	{ "bd_14.9b",		0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
+	{ "bd_13.8b",		0x10000, 0x5b0df8ce, 4 | BRF_GRA },           // 10
+
+	{ "bd_08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd_07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd_10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd_09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+	
+	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
+};
+
+STD_ROM_PICK(blkdrgon)
+STD_ROM_FN(blkdrgon)
+
+struct BurnDriver BurnDrvBlkdrgon = {
+	"blkdrgon", "blktiger", NULL, NULL, "1987",
+	"Black Dragon (Japan)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blkdrgonRomInfo, blkdrgonRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Dragon (Korean)
+
+static struct BurnRomInfo blkdrgnkRomDesc[] = {
+	{ "bd_01k.5e",		0x08000, 0xe713b486, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "bd_02.6e",		0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "bd_03.8e",		0x10000, 0xd1bf3757, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "bd_04.9e",		0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "bd_05.10e",		0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd_06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "bd_15k.2n",		0x08000, 0x3b432217, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "bd_12.5b",		0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "bd_11.4b",		0x10000, 0xc8b5fc52, 4 | BRF_GRA },           //  8
+	{ "bd_14.9b",		0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
+	{ "bd_13.8b",		0x10000, 0x5b0df8ce, 4 | BRF_GRA },           // 10
+
+	{ "bd_08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd_07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd_10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd_09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+	
+	{ "bd.6k",  		0x01000, 0xac7d14f1, 7 | BRF_PRG },           // 19 I8751 Mcu Code
+};
+
+STD_ROM_PICK(blkdrgnk)
+STD_ROM_FN(blkdrgnk)
+
+struct BurnDriver BurnDrvBlkdrgnk = {
+	"blkdrgnk", "blktiger", NULL, NULL, "1987",
+	"Black Dragon (Korean)\0", NULL, "Capcom", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blkdrgnkRomInfo, blkdrgnkRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInitMCU, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
+
+
+// Black Dragon (bootleg)
+
+static struct BurnRomInfo blkdrgonbRomDesc[] = {
+	{ "a1",				0x08000, 0x7caf2ba0, 1 | BRF_PRG | BRF_ESS }, //  0 - Z80 #0 Code
+	{ "blkdrgon.6e",	0x10000, 0x7d39c26f, 1 | BRF_PRG | BRF_ESS }, //  1
+	{ "a3",				0x10000, 0xf4cd0f39, 1 | BRF_PRG | BRF_ESS }, //  2
+	{ "blkdrgon.9e",	0x10000, 0x4d1d6680, 1 | BRF_PRG | BRF_ESS }, //  3
+	{ "blkdrgon.10e",	0x10000, 0xc8d0c45e, 1 | BRF_PRG | BRF_ESS }, //  4
+
+	{ "bd-06.1l",		0x08000, 0x2cf54274, 2 | BRF_PRG | BRF_ESS }, //  5 - Z80 #0 Code
+
+	{ "b5",				0x08000, 0x852ad2b7, 3 | BRF_GRA },           //  6 - Characters
+
+	{ "blkdrgon.5b",	0x10000, 0x22d0a4b0, 4 | BRF_GRA },           //  7 - Background Tiles
+	{ "b1",				0x10000, 0x053ab15c, 4 | BRF_GRA },           //  8
+	{ "blkdrgon.9b",	0x10000, 0x9498c378, 4 | BRF_GRA },           //  9
+	{ "b3",				0x10000, 0x9dc6e943, 4 | BRF_GRA },           // 10
+
+	{ "bd-08.5a",		0x10000, 0xe2f17438, 5 | BRF_GRA },           // 11 - Sprites
+	{ "bd-07.4a",		0x10000, 0x5fccbd27, 5 | BRF_GRA },           // 12
+	{ "bd-10.9a",		0x10000, 0xfc33ccc6, 5 | BRF_GRA },           // 13
+	{ "bd-09.8a",		0x10000, 0xf449de01, 5 | BRF_GRA },           // 14
+
+	{ "bd01.8j",		0x00100, 0x29b459e5, 6 | BRF_OPT },           // 15 - Proms (not used)
+	{ "bd02.9j",		0x00100, 0x8b741e66, 6 | BRF_OPT },           // 16
+	{ "bd03.11k",		0x00100, 0x27201c75, 6 | BRF_OPT },           // 17
+	{ "bd04.11l",		0x00100, 0xe5490b68, 6 | BRF_OPT },           // 18
+};
+
+STD_ROM_PICK(blkdrgonb)
+STD_ROM_FN(blkdrgonb)
+
+struct BurnDriver BurnDrvBlkdrgonb = {
+	"blkdrgonb", "blktiger", NULL, NULL, "1987",
+	"Black Dragon (bootleg)\0", NULL, "bootleg", "Miscellaneous",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARWARE_CAPCOM_MISC, GBF_PLATFORM | GBF_SCRFIGHT, 0,
+	NULL, blkdrgonbRomInfo, blkdrgonbRomName, NULL, NULL, NULL, NULL, DrvInputInfo, DrvDIPInfo,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
diff --git a/src/burn/drv/pre90s/d_ginganin.cpp b/src/burn/drv/pre90s/d_ginganin.cpp
index 599627c09..43844f638 100644
--- a/src/burn/drv/pre90s/d_ginganin.cpp
+++ b/src/burn/drv/pre90s/d_ginganin.cpp
@@ -745,3 +745,43 @@ struct BurnDriver BurnDrvGinganina = {
 	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
 	256, 224, 4, 3
 };
+
+// Ginga NinkyouDen (Korean)
+
+static struct BurnRomInfo ginganinkRomDesc[] = {
+	{ "gn_02.bin",	0x10000, 0x4a4e012f, 1 | BRF_PRG | BRF_ESS }, //  0 M68000 Code
+	{ "gn_01.bin",	0x10000, 0x30256fcb, 1 | BRF_PRG | BRF_ESS }, //  1
+
+	{ "gn_05.bin",	0x10000, 0xe76e10e7, 2 | BRF_PRG | BRF_ESS }, //  2 M6809 Code
+
+	{ "gn_15k.bin",	0x10000, 0xeba72bc2, 3 | BRF_GRA },           //  3 Background Tiles
+	{ "gn_14.bin",	0x10000, 0xe73fe668, 3 | BRF_GRA },           //  4
+
+	{ "gn_12.bin",	0x10000, 0xc134a1e9, 4 | BRF_GRA },           //  5 Foreground Tiles
+	{ "gn_13.bin",	0x10000, 0x1d3bec21, 4 | BRF_GRA },           //  6
+
+	{ "gn_10k.bin",	0x04000, 0x5d5ce06f, 5 | BRF_GRA },           //  7 Characters
+
+	{ "gn_06.bin",	0x20000, 0xbdc65835, 6 | BRF_GRA },           //  8 Sprites
+	{ "gn_07k.bin",	0x10000, 0xd12bae11, 6 | BRF_GRA },           //  9
+	{ "gn_08.bin",	0x10000, 0xf7c73c18, 6 | BRF_GRA },           // 10
+	{ "gn_09.bin",	0x10000, 0xa5e07c3b, 6 | BRF_GRA },           // 11
+
+	{ "gn_11.bin",	0x08000, 0xf0d0e605, 7 | BRF_GRA },           // 12 Background Tilemap
+
+	{ "gn_04.bin",	0x10000, 0x0ed9133b, 8 | BRF_SND },           // 13 Y8950 Samples
+	{ "gn_03.bin",	0x10000, 0xf1ba222c, 8 | BRF_SND },           // 14
+};
+
+STD_ROM_PICK(ginganink)
+STD_ROM_FN(ginganink)
+
+struct BurnDriver BurnDrvGinganink = {
+	"ginganink", "ginganin", NULL, NULL, "1987",
+	"Ginga NinkyouDen (Korean)\0", NULL, "Jaleco", "Miscellaneous",
+	L"\u9280\u6CB3\u4EFB\u4FA0\u4F1D\0Ginga NinkyouDen (Korean)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_MISC_PRE90S, GBF_PLATFORM, 0,
+	NULL, ginganinkRomInfo, ginganinkRomName, NULL, NULL, NULL, NULL, GinganinInputInfo, GinganinDIPInfo,
+	DrvInit, DrvExit, DrvFrame, DrvDraw, DrvScan, &DrvRecalc, 0x400,
+	256, 224, 4, 3
+};
diff --git a/src/burn/drv/sega/d_sys16b.cpp b/src/burn/drv/sega/d_sys16b.cpp
index 5311a4832..c4febb5fd 100644
--- a/src/burn/drv/sega/d_sys16b.cpp
+++ b/src/burn/drv/sega/d_sys16b.cpp
@@ -1,11469 +1,11469 @@
-#include "sys16.h"
-
-/*====================================================
-Input defs
-====================================================*/
-
-#define A(a, b, c, d) {a, b, (UINT8*)(c), d}
-
-static struct BurnInputInfo System16bInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 2" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(System16b)
-
-static struct BurnInputInfo System16bfire1InputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(System16bfire1)
-
-static struct BurnInputInfo System16bfire3InputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 2" },
-	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 3" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 2" },
-	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 3" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(System16bfire3)
-
-static struct BurnInputInfo System16bfire4InputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 2" },
-	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 3" },
-	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 3, "p1 fire 4" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 2" },
-	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 3" },
-	{"P2 Fire 4"         , BIT_DIGITAL  , System16InputPort2 + 3, "p2 fire 4" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(System16bfire4)
-
-static struct BurnInputInfo System16bDip3InputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 2" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-	{"Dip 3"             , BIT_DIPSWITCH, System16Dip + 2        , "dip"      },
-};
-
-STDINPUTINFO(System16bDip3)
-
-static struct BurnInputInfo UltracinInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
-
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Ultracin)
-
-static struct BurnInputInfo AceattacInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort3 + 2, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort3 + 3, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort3 + 0, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort3 + 1, "p1 right"  },
-	{"P1 Dial Left"      , BIT_DIGITAL  , System16InputPort4 + 0, "p1 fire 14"},
-	{"P1 Dial Right"     , BIT_DIGITAL  , System16InputPort4 + 1, "p1 fire 15"},
-	{"P1 Block"          , BIT_DIGITAL  , System16InputPort0 + 6, "p1 fire 1" },
-	{"P1 Select"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 2" },
-	{"P1 Attack Dir0"    , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 3" },
-	{"P1 Attack Dir1"    , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 4" },
-	{"P1 Attack Dir2"    , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 5" },
-	{"P1 Attack Dir3"    , BIT_DIGITAL  , System16InputPort1 + 3, "p1 fire 6" },
-	{"P1 Attack Dir4"    , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 7" },
-	{"P1 Attack Dir5"    , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 8" },
-	{"P1 Attack Dir6"    , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 9" },
-	{"P1 Attack Dir7"    , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 10"},
-	{"P1 Attack Pow0"    , BIT_DIGITAL  , System16InputPort2 + 4, "p1 fire 11"},
-	{"P1 Attack Pow1"    , BIT_DIGITAL  , System16InputPort2 + 5, "p1 fire 12"},
-	{"P1 Attack Pow2"    , BIT_DIGITAL  , System16InputPort2 + 6, "p1 fire 13"},
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort3 + 6, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort3 + 7, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort3 + 4, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort3 + 5, "p2 right"  },
-	{"P2 Dial Left"      , BIT_DIGITAL  , System16InputPort4 + 2, "p2 fire 14"},
-	{"P2 Dial Right"     , BIT_DIGITAL  , System16InputPort4 + 3, "p2 fire 15"},
-	{"P2 Block"          , BIT_DIGITAL  , System16InputPort0 + 7, "p2 fire 1" },
-	{"P2 Select"         , BIT_DIGITAL  , System16InputPort5 + 4, "p2 fire 2" },
-	{"P2 Attack Dir0"    , BIT_DIGITAL  , System16InputPort5 + 0, "p2 fire 3" },
-	{"P2 Attack Dir1"    , BIT_DIGITAL  , System16InputPort5 + 1, "p2 fire 4" },
-	{"P2 Attack Dir2"    , BIT_DIGITAL  , System16InputPort5 + 2, "p2 fire 5" },
-	{"P2 Attack Dir3"    , BIT_DIGITAL  , System16InputPort5 + 3, "p2 fire 6" },
-	{"P2 Attack Dir4"    , BIT_DIGITAL  , System16InputPort5 + 4, "p2 fire 7" },
-	{"P2 Attack Dir5"    , BIT_DIGITAL  , System16InputPort5 + 5, "p2 fire 8" },
-	{"P2 Attack Dir6"    , BIT_DIGITAL  , System16InputPort5 + 6, "p2 fire 9" },
-	{"P2 Attack Dir7"    , BIT_DIGITAL  , System16InputPort5 + 7, "p2 fire 10"},
-	{"P2 Attack Pow0"    , BIT_DIGITAL  , System16InputPort6 + 4, "p2 fire 11"},
-	{"P2 Attack Pow1"    , BIT_DIGITAL  , System16InputPort6 + 5, "p2 fire 12"},
-	{"P2 Attack Pow2"    , BIT_DIGITAL  , System16InputPort6 + 6, "p2 fire 13"},
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
-};
-
-STDINPUTINFO(Aceattac)
-
-static struct BurnInputInfo Afighter_analogInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	A("Steering"         , BIT_ANALOG_ABS, &System16AnalogPort0,  "p1 x-axis" ),
-	A("Accelerate"       , BIT_ANALOG_ABS, &System16AnalogPort1,  "p1 y-axis" ),
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 2" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 3" },
-	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 4" },
-	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 5" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
-};
-
-STDINPUTINFO(Afighter_analog)
-
-static struct BurnInputInfo AtomicpInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort1 + 7, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 6, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 7, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort1 + 6, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 0, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 1, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 2, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 3, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 4, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 5, "p1 fire 2" },
-	
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort1 + 0, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort1 + 1, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort1 + 2, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort1 + 3, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p2 fire 2" },
-
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Atomicp)
-
-static struct BurnInputInfo BulletInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-	{"Coin 3"            , BIT_DIGITAL  , System16InputPort0 + 7, "p3 coin"   },
-	{"Start 3"           , BIT_DIGITAL  , System16InputPort0 + 6, "p3 start"  },
-
-	{"P1 Up 1"           , BIT_DIGITAL  , System16InputPort1 + 1, "p1 up"     },
-	{"P1 Down 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 down"   },
-	{"P1 Left 1"         , BIT_DIGITAL  , System16InputPort1 + 3, "p1 left"   },
-	{"P1 Right 1"        , BIT_DIGITAL  , System16InputPort1 + 2, "p1 right"  },
-	{"P1 Up 2"           , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up 2"   },
-	{"P1 Down 2"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down 2" },
-	{"P1 Left 2"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left 2" },
-	{"P1 Right 2"        , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right 2"},	
-
-	{"P2 Up 1"           , BIT_DIGITAL  , System16InputPort2 + 1, "p2 up"     },
-	{"P2 Down 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 down"   },
-	{"P2 Left 1"         , BIT_DIGITAL  , System16InputPort2 + 3, "p2 left"   },
-	{"P2 Right 1"        , BIT_DIGITAL  , System16InputPort2 + 2, "p2 right"  },
-	{"P2 Up 2"           , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up 2"   },
-	{"P2 Down 2"         , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down 2" },
-	{"P2 Left 2"         , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left 2" },
-	{"P2 Right 2"        , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right 2"},	
-	
-	{"P3 Up 1"           , BIT_DIGITAL  , System16InputPort3 + 1, "p3 up"     },
-	{"P3 Down 1"         , BIT_DIGITAL  , System16InputPort3 + 0, "p3 down"   },
-	{"P3 Left 1"         , BIT_DIGITAL  , System16InputPort3 + 3, "p3 left"   },
-	{"P3 Right 1"        , BIT_DIGITAL  , System16InputPort3 + 2, "p3 right"  },
-	{"P3 Up 2"           , BIT_DIGITAL  , System16InputPort3 + 5, "p3 up 2"   },
-	{"P3 Down 2"         , BIT_DIGITAL  , System16InputPort3 + 4, "p3 down 2" },
-	{"P3 Left 2"         , BIT_DIGITAL  , System16InputPort3 + 7, "p3 left 2" },
-	{"P3 Right 2"        , BIT_DIGITAL  , System16InputPort3 + 6, "p3 right 2"},
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Bullet)
-
-static struct BurnInputInfo DunkshotInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"  },
-	{"Start 3"           , BIT_DIGITAL   , System16InputPort0 + 6, "p3 start"  },
-	{"Start 4"           , BIT_DIGITAL   , System16InputPort0 + 7, "p4 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL   , System16InputPort2 + 2, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL   , System16InputPort2 + 3, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL   , System16InputPort2 + 0, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL   , System16InputPort2 + 1, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 0, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 1, "p1 fire 2" },
-
-	{"P2 Up"             , BIT_DIGITAL   , System16InputPort2 + 6, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL   , System16InputPort2 + 7, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL   , System16InputPort2 + 4, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL   , System16InputPort2 + 5, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 2, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 3, "p2 fire 2" },
-	
-	{"P3 Up"             , BIT_DIGITAL   , System16InputPort3 + 2, "p3 up"     },
-	{"P3 Down"           , BIT_DIGITAL   , System16InputPort3 + 3, "p3 down"   },
-	{"P3 Left"           , BIT_DIGITAL   , System16InputPort3 + 0, "p3 left"   },
-	{"P3 Right"          , BIT_DIGITAL   , System16InputPort3 + 1, "p3 right"  },
-	{"P3 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 4, "p3 fire 1" },
-	{"P3 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 5, "p3 fire 2" },
-
-	{"P4 Up"             , BIT_DIGITAL   , System16InputPort3 + 6, "p4 up"     },
-	{"P4 Down"           , BIT_DIGITAL   , System16InputPort3 + 7, "p4 down"   },
-	{"P4 Left"           , BIT_DIGITAL   , System16InputPort3 + 4, "p4 left"   },
-	{"P4 Right"          , BIT_DIGITAL   , System16InputPort3 + 5, "p4 right"  },
-	{"P4 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 6, "p4 fire 1" },
-	{"P4 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 7, "p4 fire 2" },
-
-	{"Service"           , BIT_DIGITAL   , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL   , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL   , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH , System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH , System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Dunkshot)
-
-static struct BurnInputInfo ExctleagInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"      },
-	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"     },
-	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"      },
-	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"     },
-
-	{"P1 Up"             , BIT_DIGITAL   , System16InputPort4 + 2, "p1 up"        },
-	{"P1 Down"           , BIT_DIGITAL   , System16InputPort4 + 3, "p1 down"      },
-	{"P1 Left"           , BIT_DIGITAL   , System16InputPort4 + 0, "p1 left"      },
-	{"P1 Right"          , BIT_DIGITAL   , System16InputPort4 + 1, "p1 right"     },
-	{"P1 Bant0"          , BIT_DIGITAL   , System16InputPort1 + 0, "p1 fire 1"    },
-	{"P1 Bant1"          , BIT_DIGITAL   , System16InputPort1 + 1, "p1 fire 2"    },
-	{"P1 Bant2"          , BIT_DIGITAL   , System16InputPort1 + 2, "p1 fire 3"    },
-	{"P1 Swing0"         , BIT_DIGITAL   , System16InputPort1 + 3, "p1 fire 4"    },
-	{"P1 Swing1"         , BIT_DIGITAL   , System16InputPort1 + 4, "p1 fire 5"    },
-	{"P1 Low"            , BIT_DIGITAL   , System16InputPort1 + 5, "p1 fire 6"    },
-	{"P1 Mid"            , BIT_DIGITAL   , System16InputPort1 + 6, "p1 fire 7"    },
-	{"P1 Hi"             , BIT_DIGITAL   , System16InputPort1 + 7, "p1 fire 8"    },
-	{"P1 Change"         , BIT_DIGITAL   , System16InputPort3 + 1, "p1 fire 9"    },
-	{"P1 Select"         , BIT_DIGITAL   , System16InputPort3 + 2, "p1 fire 10"   },
-	{"P1 Chase"          , BIT_DIGITAL   , System16InputPort3 + 0, "p1 fire 11"   },
-	
-	{"P2 Up"             , BIT_DIGITAL   , System16InputPort4 + 6, "p2 up"        },
-	{"P2 Down"           , BIT_DIGITAL   , System16InputPort4 + 7, "p2 down"      },
-	{"P2 Left"           , BIT_DIGITAL   , System16InputPort4 + 4, "p2 left"      },
-	{"P2 Right"          , BIT_DIGITAL   , System16InputPort4 + 5, "p2 right"     },
-	{"P2 Bant0"          , BIT_DIGITAL   , System16InputPort2 + 0, "p2 fire 1"    },
-	{"P2 Bant1"          , BIT_DIGITAL   , System16InputPort2 + 1, "p2 fire 2"    },
-	{"P2 Bant2"          , BIT_DIGITAL   , System16InputPort2 + 2, "p2 fire 3"    },
-	{"P2 Swing0"         , BIT_DIGITAL   , System16InputPort2 + 3, "p2 fire 4"    },
-	{"P2 Swing1"         , BIT_DIGITAL   , System16InputPort2 + 4, "p2 fire 5"    },
-	{"P2 Low"            , BIT_DIGITAL   , System16InputPort2 + 5, "p2 fire 6"    },
-	{"P2 Mid"            , BIT_DIGITAL   , System16InputPort2 + 6, "p2 fire 7"    },
-	{"P2 Hi"             , BIT_DIGITAL   , System16InputPort2 + 7, "p2 fire 8"    },
-	{"P2 Change"         , BIT_DIGITAL   , System16InputPort3 + 5, "p2 fire 9"    },
-	{"P2 Select"         , BIT_DIGITAL   , System16InputPort3 + 6, "p2 fire 10"   },
-	{"P2 Chase"          , BIT_DIGITAL   , System16InputPort3 + 4, "p2 fire 11"   },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"      },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"         },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"        },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"          },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"          },
-};
-
-STDINPUTINFO(Exctleag)
-
-static struct BurnInputInfo FpointblInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 1" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 1" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Fpointbl)
-
-static struct BurnInputInfo HwchampInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"  },
-
-	A("Left/Right"       , BIT_ANALOG_REL, &System16AnalogPort0,   "p1 x-axis"  ),
-	A("Left"             , BIT_ANALOG_REL, &System16AnalogPort1,   "p1 fire 1"  ),
-	A("Right"            , BIT_ANALOG_REL, &System16AnalogPort2,   "p1 fire 2"  ),
-	
-	{"Service"           , BIT_DIGITAL   , System16InputPort0 + 3 , "service"   },
-	{"Diagnostics"       , BIT_DIGITAL   , System16InputPort0 + 2 , "diag"      },
-	{"Reset"             , BIT_DIGITAL   , &System16Reset         , "reset"     },
-	{"Dip 1"             , BIT_DIPSWITCH , System16Dip + 0        , "dip"       },
-	{"Dip 2"             , BIT_DIPSWITCH , System16Dip + 1        , "dip"       },
-};
-
-STDINPUTINFO(Hwchamp)
-
-static struct BurnInputInfo LockonphInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort2 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort2 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort2 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort2 + 5, "p2 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 0, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 1, "p1 fire 2" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p2 fire 2" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort2 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort2 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Lockonph)
-
-static struct BurnInputInfo PassshtInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-	{"Start 3"           , BIT_DIGITAL  , System16InputPort0 + 6, "p3 start"  },
-	{"Start 4"           , BIT_DIGITAL  , System16InputPort0 + 7, "p4 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 1, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 0, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 3, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 2, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 2" },
-	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 3" },
-	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 4" },
-
-	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 1, "p2 up"     },
-	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 0, "p2 down"   },
-	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 3, "p2 left"   },
-	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 2, "p2 right"  },
-	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 4, "p2 fire 1" },
-	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 5, "p2 fire 2" },
-	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 6, "p2 fire 3" },
-	{"P2 Fire 4"         , BIT_DIGITAL  , System16InputPort2 + 7, "p2 fire 4" },
-	
-	{"P3 Up"             , BIT_DIGITAL  , System16InputPort3 + 1, "p3 up"     },
-	{"P3 Down"           , BIT_DIGITAL  , System16InputPort3 + 0, "p3 down"   },
-	{"P3 Left"           , BIT_DIGITAL  , System16InputPort3 + 3, "p3 left"   },
-	{"P3 Right"          , BIT_DIGITAL  , System16InputPort3 + 2, "p3 right"  },
-	{"P3 Fire 1"         , BIT_DIGITAL  , System16InputPort3 + 4, "p3 fire 1" },
-	{"P3 Fire 2"         , BIT_DIGITAL  , System16InputPort3 + 5, "p3 fire 2" },
-	{"P3 Fire 3"         , BIT_DIGITAL  , System16InputPort3 + 6, "p3 fire 3" },
-	{"P3 Fire 4"         , BIT_DIGITAL  , System16InputPort3 + 7, "p3 fire 4" },
-
-	{"P4 Up"             , BIT_DIGITAL  , System16InputPort4 + 1, "p4 up"     },
-	{"P4 Down"           , BIT_DIGITAL  , System16InputPort4 + 0, "p4 down"   },
-	{"P4 Left"           , BIT_DIGITAL  , System16InputPort4 + 3, "p4 left"   },
-	{"P4 Right"          , BIT_DIGITAL  , System16InputPort4 + 2, "p4 right"  },
-	{"P4 Fire 1"         , BIT_DIGITAL  , System16InputPort4 + 4, "p4 fire 1" },
-	{"P4 Fire 2"         , BIT_DIGITAL  , System16InputPort4 + 5, "p4 fire 2" },
-	{"P4 Fire 3"         , BIT_DIGITAL  , System16InputPort4 + 6, "p4 fire 3" },
-	{"P4 Fire 4"         , BIT_DIGITAL  , System16InputPort4 + 7, "p4 fire 4" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Passsht)
-
-static struct BurnInputInfo RyukyuInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
-	
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Ryukyu)
-
-static struct BurnInputInfo SdiInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"      },
-	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"     },
-	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"      },
-	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"     },
-
-	{"P1 Up"             , BIT_DIGITAL   , System16InputPort1 + 1, "p1 up"        },
-	{"P1 Down"           , BIT_DIGITAL   , System16InputPort1 + 0, "p1 down"      },
-	{"P1 Left"           , BIT_DIGITAL   , System16InputPort1 + 3, "p1 left"      },
-	{"P1 Right"          , BIT_DIGITAL   , System16InputPort1 + 2, "p1 right"     },
-	A("P1 Target L/R"    , BIT_ANALOG_REL, &System16AnalogPort0,   "mouse x-axis" ),
-	A("P1 Target U/D"    , BIT_ANALOG_REL, &System16AnalogPort1,   "mouse y-axis" ),
-	{"P1 Fire 1"         , BIT_DIGITAL   , System16InputPort0 + 6, "mouse button 1"},
-
-	{"P2 Up"             , BIT_DIGITAL   , System16InputPort1 + 5, "p2 up"        },
-	{"P2 Down"           , BIT_DIGITAL   , System16InputPort1 + 4, "p2 down"      },
-	{"P2 Left"           , BIT_DIGITAL   , System16InputPort1 + 7, "p2 left"      },
-	{"P2 Right"          , BIT_DIGITAL   , System16InputPort1 + 6, "p2 right"     },
-	A("P2 Target L/R"    , BIT_ANALOG_REL, &System16AnalogPort2,   "p2 x-axis"    ),
-	A("P2 Target U/D"    , BIT_ANALOG_REL, &System16AnalogPort3,   "p2 y-axis"    ),
-	{"P2 Fire 1"         , BIT_DIGITAL   , System16InputPort0 + 7, "p2 fire 1"    },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"      },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"         },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"        },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"          },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"          },
-};
-
-STDINPUTINFO(Sdi)
-
-static struct BurnInputInfo SjryukoInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
-	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
-
-	{"P1 A"              , BIT_DIGITAL  , System16InputPort1 + 0, "mah a"     },
-	{"P1 B"              , BIT_DIGITAL  , System16InputPort1 + 1, "mah b"     },
-	{"P1 C"              , BIT_DIGITAL  , System16InputPort1 + 2, "mah c"     },
-	{"P1 D"              , BIT_DIGITAL  , System16InputPort1 + 3, "mah d"     },
-	{"P1 E"              , BIT_DIGITAL  , System16InputPort2 + 0, "mah e"     },
-	{"P1 F"              , BIT_DIGITAL  , System16InputPort2 + 1, "mah f"     },
-	{"P1 G"              , BIT_DIGITAL  , System16InputPort2 + 2, "mah g"     },
-	{"P1 H"              , BIT_DIGITAL  , System16InputPort2 + 3, "mah h"     },
-	{"P1 I"              , BIT_DIGITAL  , System16InputPort3 + 0, "mah i"     },
-	{"P1 J"              , BIT_DIGITAL  , System16InputPort3 + 1, "mah j"     },
-	{"P1 K"              , BIT_DIGITAL  , System16InputPort3 + 2, "mah k"     },
-	{"P1 L"              , BIT_DIGITAL  , System16InputPort3 + 3, "mah l"     },
-	{"P1 M"              , BIT_DIGITAL  , System16InputPort4 + 0, "mah m"     },
-	{"P1 N"              , BIT_DIGITAL  , System16InputPort4 + 1, "mah n"     },
-	{"P1 Kan"            , BIT_DIGITAL  , System16InputPort6 + 0, "mah kan"   },
-	{"P1 Pon"            , BIT_DIGITAL  , System16InputPort4 + 3, "mah pon"   },
-	{"P1 Chi"            , BIT_DIGITAL  , System16InputPort4 + 2, "mah chi"   },
-	{"P1 Reach"          , BIT_DIGITAL  , System16InputPort6 + 1, "mah reach" },
-	{"P1 Ron"            , BIT_DIGITAL  , System16InputPort6 + 2, "mah ron"   },
-	{"P1 Bet"            , BIT_DIGITAL  , System16InputPort5 + 1, "mah bet"   },
-	{"P1 Last Chance"    , BIT_DIGITAL  , System16InputPort1 + 4, "mah lc"    },
-	{"P1 Score"          , BIT_DIGITAL  , System16InputPort5 + 0, "mah score" },
-	{"P1 Flip Flop"      , BIT_DIGITAL  , System16InputPort4 + 4, "mah ff"    },
-
-	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
-	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
-};
-
-STDINPUTINFO(Sjryuko)
-
-static struct BurnInputInfo SnapperInputList[] = {
-	{"Coin 1"            , BIT_DIGITAL  , System16InputPort1 + 0, "p1 coin"   },
-	{"Start 1"           , BIT_DIGITAL  , System16InputPort1 + 1, "p1 start"  },
-
-	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 0, "p1 up"     },
-	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 1, "p1 down"   },
-	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 2, "p1 left"   },
-	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 3, "p1 right"  },
-	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 4, "p1 fire 1" },
-	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 5, "p1 fire 2" },
-	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort0 + 6, "p1 fire 3" },
-
-	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
-	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
-	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
-};
-
-STDINPUTINFO(Snapper)
-
-#undef A
-
-/*====================================================
-Dip defs
-====================================================*/
-
-#define SYSTEM16B_COINAGE(dipval)								\
-	{0   , 0xfe, 0   , 16  , "Coin A"                               },			\
-	{dipval, 0x01, 0x0f, 0x07, "4 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0x0f, 0x08, "3 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0x0f, 0x09, "2 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0x0f, 0x05, "2 Coins 1 Credit 5/3 6/4"           },			\
-	{dipval, 0x01, 0x0f, 0x04, "2 Coins 1 Credit 4/3"               },			\
-	{dipval, 0x01, 0x0f, 0x0f, "1 Coin  1 Credit"                   },			\
-	{dipval, 0x01, 0x0f, 0x01, "1 Coin  1 Credit 2/3"               },			\
-	{dipval, 0x01, 0x0f, 0x02, "1 Coin  1 Credit 4/5"               },			\
-	{dipval, 0x01, 0x0f, 0x03, "1 Coin  1 Credit 5/6"               },			\
-	{dipval, 0x01, 0x0f, 0x06, "2 Coins 3 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x0e, "1 Coin  2 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x0d, "1 Coin  3 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x0c, "1 Coin  4 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x0b, "1 Coin  5 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x0a, "1 Coin  6 Credits"                  },			\
-	{dipval, 0x01, 0x0f, 0x00, "Free Play (if coin B too) or 1C/1C" },			\
-												\
-	{0   , 0xfe, 0   , 16  , "Coin B"                               },			\
-	{dipval, 0x01, 0xf0, 0x70, "4 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0xf0, 0x80, "3 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0xf0, 0x90, "2 Coins 1 Credit"                   },			\
-	{dipval, 0x01, 0xf0, 0x50, "2 Coins 1 Credit 5/3 6/4"           },			\
-	{dipval, 0x01, 0xf0, 0x40, "2 Coins 1 Credit 4/3"               },			\
-	{dipval, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"                   },			\
-	{dipval, 0x01, 0xf0, 0x10, "1 Coin  1 Credit 2/3"               },			\
-	{dipval, 0x01, 0xf0, 0x20, "1 Coin  1 Credit 4/5"               },			\
-	{dipval, 0x01, 0xf0, 0x30, "1 Coin  1 Credit 5/6"               },			\
-	{dipval, 0x01, 0xf0, 0x60, "2 Coins 3 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0xe0, "1 Coin  2 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0xd0, "1 Coin  3 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0xc0, "1 Coin  4 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0xb0, "1 Coin  5 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0xa0, "1 Coin  6 Credits"                  },			\
-	{dipval, 0x01, 0xf0, 0x00, "Free Play (if coin A too) or 1C/1C" },
-
-static struct BurnDIPInfo AceattacDIPList[]=
-{
-	// Default Values
-	{0x2d, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x2e, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x2d, 0x01, 0x01, 0x01, "Off"                                },
-	{0x2d, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 8   , "Starting Points"                    },
-	{0x2d, 0x01, 0x0e, 0x06, "2000"                               },
-	{0x2d, 0x01, 0x0e, 0x0a, "3000"                               },
-	{0x2d, 0x01, 0x0e, 0x0c, "4000"                               },
-	{0x2d, 0x01, 0x0e, 0x0e, "5000"                               },	
-	{0x2d, 0x01, 0x0e, 0x08, "6000"                               },	
-	{0x2d, 0x01, 0x0e, 0x04, "7000"                               },
-	{0x2d, 0x01, 0x0e, 0x02, "8000"                               },
-	{0x2d, 0x01, 0x0e, 0x00, "9000"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Point Table"                        },
-	{0x2d, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x2d, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x2d, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x2d, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x2d, 0x01, 0xc0, 0x20, "Easy"                               },
-	{0x2d, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x2d, 0x01, 0xc0, 0x10, "Hard"                               },
-	{0x2d, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x2e)
-};
-
-STDDIPINFO(Aceattac)
-
-static struct BurnDIPInfo AfighterDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfc, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x13, 0x01, 0x01, 0x00, "Upright"                            },
-	{0x13, 0x01, 0x01, 0x01, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x02, 0x02, "Off"                                },
-	{0x13, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x13, 0x01, 0x0c, 0x00, "Infinite"                           },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x13, 0x01, 0x30, 0x30, "10000 - 20000"                      },
-	{0x13, 0x01, 0x30, 0x20, "20000 - 40000"                      },
-	{0x13, 0x01, 0x30, 0x10, "30000 - 60000"                      },
-	{0x13, 0x01, 0x30, 0x00, "40000 - 80000"                      },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x13, 0x01, 0x40, 0x40, "Normal"                             },
-	{0x13, 0x01, 0x40, 0x00, "Hard"                               },
-
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x13, 0x01, 0x80, 0x00, "No"                                 },
-	{0x13, 0x01, 0x80, 0x80, "Yes"                                },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Afighter)
-
-static struct BurnDIPInfo Afighter_analogDIPList[]=
-{
-	// Default Values
-	{0x0d, 0xff, 0xff, 0xfc, NULL                                 },
-	{0x0e, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x0d, 0x01, 0x01, 0x00, "Upright"                            },
-	{0x0d, 0x01, 0x01, 0x01, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x0d, 0x01, 0x02, 0x02, "Off"                                },
-	{0x0d, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x0d, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x0d, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x0d, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x0d, 0x01, 0x0c, 0x00, "Infinite"                           },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x0d, 0x01, 0x30, 0x30, "10000 - 20000"                      },
-	{0x0d, 0x01, 0x30, 0x20, "20000 - 40000"                      },
-	{0x0d, 0x01, 0x30, 0x10, "30000 - 60000"                      },
-	{0x0d, 0x01, 0x30, 0x00, "40000 - 80000"                      },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x0d, 0x01, 0x40, 0x40, "Normal"                             },
-	{0x0d, 0x01, 0x40, 0x00, "Hard"                               },
-
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x0d, 0x01, 0x80, 0x00, "No"                                 },
-	{0x0d, 0x01, 0x80, 0x80, "Yes"                                },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x0e)
-};
-
-STDDIPINFO(Afighter_analog)
-
-static struct BurnDIPInfo AliensynDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x12, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x11, 0x01, 0x02, 0x02, "Off"                                },
-	{0x11, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x11, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x11, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x11, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x11, 0x01, 0x0c, 0x00, "127"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Timer"                              },
-	{0x11, 0x01, 0x30, 0x00, "120"                                },
-	{0x11, 0x01, 0x30, 0x10, "130"                                },
-	{0x11, 0x01, 0x30, 0x20, "140"                                },
-	{0x11, 0x01, 0x30, 0x30, "150"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x11, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x11, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x11, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x11, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x12)
-};
-
-STDDIPINFO(Aliensyn)
-
-static struct BurnDIPInfo AliensynjDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x12, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x11, 0x01, 0x02, 0x02, "Off"                                },
-	{0x11, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x11, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x11, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x11, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x11, 0x01, 0x0c, 0x00, "127"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Timer"                              },
-	{0x11, 0x01, 0x30, 0x00, "150"                                },
-	{0x11, 0x01, 0x30, 0x10, "160"                                },
-	{0x11, 0x01, 0x30, 0x20, "170"                                },
-	{0x11, 0x01, 0x30, 0x30, "180"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x11, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x11, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x11, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x11, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x12)
-};
-
-STDDIPINFO(Aliensynj)
-
-static struct BurnDIPInfo AltbeastDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Credits needed"                     },
-	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
-	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x15, 0x01, 0x0c, 0x00, "240"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Energy Meter"                       },
-	{0x15, 0x01, 0x30, 0x20, "2"                                  },
-	{0x15, 0x01, 0x30, 0x30, "3"                                  },
-	{0x15, 0x01, 0x30, 0x10, "4"                                  },
-	{0x15, 0x01, 0x30, 0x00, "5"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x15, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x15, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x15, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Altbeast)
-
-static struct BurnDIPInfo AtomicpDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xff, NULL                                 },
-	{0x12, 0xff, 0xff, 0x2f, NULL                                 },
-	
-	// Dip 1
-	{0   , 0xfe, 0   , 8   , "Coin A"                             },
-	{0x11, 0x01, 0x38, 0x00, "4 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x38, 0x20, "3 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x38, 0x18, "2 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x38, 0x38, "1 Coin  1 Credit"                   },
-	{0x11, 0x01, 0x38, 0x10, "1 Coin  2 Credits"                  },
-	{0x11, 0x01, 0x38, 0x28, "1 Coin  3 Credits"                  },
-	{0x11, 0x01, 0x38, 0x08, "1 Coin  4 Credits"                  },
-	{0x11, 0x01, 0x38, 0x30, "1 Coin  5 Credits"                  },
-
-	{0   , 0xfe, 0   , 8   , "Coin B"                             },
-	{0x11, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x07, 0x04, "3 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x07, 0x03, "2 Coins 1 Credit"                   },
-	{0x11, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
-	{0x11, 0x01, 0x07, 0x02, "1 Coin  2 Credits"                  },
-	{0x11, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
-	{0x11, 0x01, 0x07, 0x01, "1 Coin  4 Credits"                  },
-	{0x11, 0x01, 0x07, 0x06, "1 Coin  5 Credits"                  },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x11, 0x01, 0xc0, 0xc0, "1"                                  },
-	{0x11, 0x01, 0xc0, 0x80, "2"                                  },
-	{0x11, 0x01, 0xc0, 0x40, "3"                                  },
-	{0x11, 0x01, 0xc0, 0x00, "5"                                  },
-	
-	// Dip 2
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x12, 0x01, 0x03, 0x01, "Easy"                               },
-	{0x12, 0x01, 0x03, 0x03, "Normal"                             },
-	{0x12, 0x01, 0x03, 0x02, "Hard"                               },
-	{0x12, 0x01, 0x03, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 2   , "Level Select"                       },
-	{0x12, 0x01, 0x04, 0x04, "Off"                                },
-	{0x12, 0x01, 0x04, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
-	{0x12, 0x01, 0x08, 0x08, "Off"                                },
-	{0x12, 0x01, 0x08, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x12, 0x01, 0x10, 0x10, "Off"                                },
-	{0x12, 0x01, 0x10, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x12, 0x01, 0x20, 0x00, "Off"                                },
-	{0x12, 0x01, 0x20, 0x20, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Game Mode"                          },
-	{0x12, 0x01, 0x40, 0x40, "Normal Tetris"                      },
-	{0x12, 0x01, 0x40, 0x00, "Atomic Point"                       },
-	
-	{0   , 0xfe, 0   , 2   , "Service Mode"                       },
-	{0x12, 0x01, 0x80, 0x00, "Off"                                },
-	{0x12, 0x01, 0x80, 0x80, "On"                                 },
-};
-
-STDDIPINFO(Atomicp)
-
-static struct BurnDIPInfo AurailDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x15, 0x01, 0x01, 0x01, "Upright"                            },
-	{0x15, 0x01, 0x01, 0x00, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x00, "2"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x08, "4"                                  },
-	{0x15, 0x01, 0x0c, 0x04, "5"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Bonus Life"                         },
-	{0x15, 0x01, 0x10, 0x10, "80k, 200k, 500k, 1000k"             },
-	{0x15, 0x01, 0x10, 0x00, "100k, 300k, 700k, 1000k"            },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x15, 0x01, 0x20, 0x20, "Normal"                             },
-	{0x15, 0x01, 0x20, 0x00, "Hard"                               },
-	
-	{0   , 0xfe, 0   , 2   , "Controller Select"                  },
-	{0x15, 0x01, 0x40, 0x40, "1 Player Side"                      },
-	{0x15, 0x01, 0x40, 0x00, "2 Players Side"                     },
-	
-	{0   , 0xfe, 0   , 2   , "Special Function Mode"              },
-	{0x15, 0x01, 0x80, 0x80, "Off"                                },
-	{0x15, 0x01, 0x80, 0x00, "On"                                 },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Aurail)
-
-static struct BurnDIPInfo BayrouteDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x15, 0x01, 0x01, 0x00, "Off"                                },
-	{0x15, 0x01, 0x01, 0x01, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x04, "1"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x08, "5"                                  },
-	{0x15, 0x01, 0x0c, 0x00, "Unlimited"                          },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x15, 0x01, 0x30, 0x30, "100000"                             },
-	{0x15, 0x01, 0x30, 0x20, "150000"                             },
-	{0x15, 0x01, 0x30, 0x10, "200000"                             },
-	{0x15, 0x01, 0x30, 0x00, "None"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0xc0, 0xc0, "Easy"                               },
-	{0x15, 0x01, 0xc0, 0x80, "Normal"                             },
-	{0x15, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x15, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Bayroute)
-
-static struct BurnDIPInfo Blox16bDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-};
-
-STDDIPINFO(Blox16b)
-
-static struct BurnDIPInfo BulletDIPList[]=
-{
-	// Default Values
-	{0x21, 0xff, 0xff, 0xff, NULL                                 },
-	{0x22, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x22)
-};
-
-STDDIPINFO(Bullet)
-
-static struct BurnDIPInfo CottonDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x01, 0x01, "Off"                                },
-	{0x13, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x06, 0x04, "2"                                  },
-	{0x13, 0x01, 0x06, 0x06, "3"                                  },
-	{0x13, 0x01, 0x06, 0x02, "4"                                  },
-	{0x13, 0x01, 0x06, 0x00, "5"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x13, 0x01, 0x18, 0x10, "Easy"                               },
-	{0x13, 0x01, 0x18, 0x18, "Normal"                             },
-	{0x13, 0x01, 0x18, 0x08, "Hard"                               },
-	{0x13, 0x01, 0x18, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Cotton)
-
-static struct BurnDIPInfo DduxDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x01, 0x01, "Off"                                },
-	{0x13, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x13, 0x01, 0x06, 0x04, "Easy"                               },
-	{0x13, 0x01, 0x06, 0x06, "Normal"                             },
-	{0x13, 0x01, 0x06, 0x02, "Hard"                               },
-	{0x13, 0x01, 0x06, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x18, 0x10, "2"                                  },
-	{0x13, 0x01, 0x18, 0x18, "3"                                  },
-	{0x13, 0x01, 0x18, 0x08, "4"                                  },
-	{0x13, 0x01, 0x18, 0x00, "5"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x13, 0x01, 0x60, 0x40, "150000"                             },
-	{0x13, 0x01, 0x60, 0x60, "200000"                             },
-	{0x13, 0x01, 0x60, 0x20, "300000"                             },
-	{0x13, 0x01, 0x60, 0x00, "400000"                             },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Ddux)
-
-static struct BurnDIPInfo DunkshotDIPList[]=
-{
-	// Default Values
-	{0x21, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x22, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x21, 0x01, 0x02, 0x02, "Off"                                },
-	{0x21, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "VS Time"                            },
-	{0x21, 0x01, 0x0c, 0x08, "2P 1:30 | 3P 2:00 | 4P 2:30"        },
-	{0x21, 0x01, 0x0c, 0x0c, "2P 2:00 | 3P 2:30 | 4P 3:00"        },
-	{0x21, 0x01, 0x0c, 0x04, "2P 2:30 | 3P 3:00 | 4P 3:30"        },
-	{0x21, 0x01, 0x0c, 0x00, "2P 3:00 | 3P 3:30 | 4P 4:00"        },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x21, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x21, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x21, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x21, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 2   , "CPU starts with +6 pts"             },
-	{0x21, 0x01, 0x40, 0x40, "Off"                                },
-	{0x21, 0x01, 0x40, 0x00, "On"                                 },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x22)
-};
-
-STDDIPINFO(Dunkshot)
-
-static struct BurnDIPInfo EswatDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "2 Credits to Start"                 },
-	{0x15, 0x01, 0x01, 0x01, "Off"                                },
-	{0x15, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
-	{0x15, 0x01, 0x04, 0x04, "Off"                                },
-	{0x15, 0x01, 0x04, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Time"                               },
-	{0x15, 0x01, 0x08, 0x08, "Normal"                             },
-	{0x15, 0x01, 0x08, 0x00, "Hard"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0xc0, 0x00, "1"                                  },
-	{0x15, 0x01, 0xc0, 0x40, "2"                                  },
-	{0x15, 0x01, 0xc0, 0xc0, "3"                                  },
-	{0x15, 0x01, 0xc0, 0x80, "4"                                  },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Eswat)
-
-static struct BurnDIPInfo ExctleagDIPList[]=
-{
-	// Default Values
-	{0x25, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x26, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x25, 0x01, 0x01, 0x01, "Off"                                },
-	{0x25, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 8   , "Starting Points"                    },
-	{0x25, 0x01, 0x0e, 0x06, "2000"                               },
-	{0x25, 0x01, 0x0e, 0x0a, "3000"                               },
-	{0x25, 0x01, 0x0e, 0x0c, "4000"                               },
-	{0x25, 0x01, 0x0e, 0x0e, "5000"                               },	
-	{0x25, 0x01, 0x0e, 0x08, "6000"                               },	
-	{0x25, 0x01, 0x0e, 0x04, "7000"                               },
-	{0x25, 0x01, 0x0e, 0x02, "8000"                               },
-	{0x25, 0x01, 0x0e, 0x00, "9000"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x25, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x25, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x25, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x25, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Point Table"                        },
-	{0x25, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x25, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x25, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x25, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 1
-	SYSTEM16B_COINAGE(0x26)
-};
-
-STDDIPINFO(Exctleag)
-
-static struct BurnDIPInfo FantzonetaDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xff, NULL                                 },
-	{0x14, 0xff, 0xff, 0xfc, NULL                                 },
-	
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x14, 0x01, 0x01, 0x00, "Upright"                            },
-	{0x14, 0x01, 0x01, 0x01, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x14, 0x01, 0x02, 0x02, "Off"                                },
-	{0x14, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x14, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x14, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x14, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x14, 0x01, 0x0c, 0x00, "240"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Extra Ship Cost"                    },
-	{0x14, 0x01, 0x30, 0x30, "5000"                               },
-	{0x14, 0x01, 0x30, 0x20, "10000"                              },
-	{0x14, 0x01, 0x30, 0x10, "15000"                              },
-	{0x14, 0x01, 0x30, 0x00, "20000"                              },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x14, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x14, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x14, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x14, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Fantzoneta)
-
-static struct BurnDIPInfo Fantzn2xDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xff, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x13, 0x01, 0x0c, 0x00, "240"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
-};
-
-STDDIPINFO(Fantzn2x)
-
-static struct BurnDIPInfo FpointDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x12, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x11, 0x01, 0x02, 0x02, "Off"                                },
-	{0x11, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x11, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x11, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x11, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x11, 0x01, 0x30, 0x00, "Hardest"                            },
-
-	{0   , 0xfe, 0   , 2   , "Clear Round Allowed"                },
-	{0x11, 0x01, 0x40, 0x00, "1"                                  },
-	{0x11, 0x01, 0x40, 0x40, "2"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Cell Move"                          },
-	{0x11, 0x01, 0x80, 0x00, "Off"                                },
-	{0x11, 0x01, 0x80, 0x80, "On"                                 },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x12)
-};
-
-STDDIPINFO(Fpoint)
-
-static struct BurnDIPInfo GoldnaxeDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Credits needed"                     },
-	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
-	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x08, "1"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "2"                                  },
-	{0x15, 0x01, 0x0c, 0x04, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x00, "5"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Energy Meter"                       },
-	{0x15, 0x01, 0x30, 0x20, "2"                                  },
-	{0x15, 0x01, 0x30, 0x30, "3"                                  },
-	{0x15, 0x01, 0x30, 0x10, "4"                                  },
-	{0x15, 0x01, 0x30, 0x00, "5"                                  },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Goldnaxe)
-
-static struct BurnDIPInfo HwchampDIPList[]=
-{
-	// Default Values
-	{0x0a, 0xff, 0xff, 0xf9, NULL                                 },
-	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x0a, 0x01, 0x02, 0x02, "Off"                                },
-	{0x0a, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Start Level Select"                 },
-	{0x0a, 0x01, 0x04, 0x04, "Off"                                },
-	{0x0a, 0x01, 0x04, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x0a, 0x01, 0x08, 0x08, "Off"                                },
-	{0x0a, 0x01, 0x08, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x0a, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x0a, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x0a, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x0a, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Time Adjust"                        },
-	{0x0a, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x0a, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x0a, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x0a, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x0b)
-};
-
-STDDIPINFO(Hwchamp)
-
-static struct BurnDIPInfo LockonphDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xff, NULL                                 },
-	{0x14, 0xff, 0xff, 0xc4, NULL                                 },
-	
-	// Dip 1
-	{0   , 0xfe, 0   , 8   , "Coin A"                             },
-	{0x13, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x07, 0x04, "3 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x07, 0x02, "2 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
-	{0x13, 0x01, 0x07, 0x03, "1 Coin  2 Credits"                  },
-	{0x13, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
-	{0x13, 0x01, 0x07, 0x01, "1 Coin  4 Credits"                  },
-	{0x13, 0x01, 0x07, 0x06, "1 Coin  5 Credits"                  },
-												
-	{0   , 0xfe, 0   , 8   , "Coin B"                             },
-	{0x13, 0x01, 0x38, 0x00, "4 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x38, 0x20, "3 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x38, 0x10, "2 Coins 1 Credit"                   },
-	{0x13, 0x01, 0x38, 0x38, "1 Coin  1 Credit"                   },
-	{0x13, 0x01, 0x38, 0x18, "1 Coin  2 Credits"                  },
-	{0x13, 0x01, 0x38, 0x28, "1 Coin  3 Credits"                  },
-	{0x13, 0x01, 0x38, 0x08, "1 Coin  4 Credits"                  },
-	{0x13, 0x01, 0x38, 0x30, "1 Coin  5 Credits"                  },
-	
-	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
-	{0x13, 0x01, 0x80, 0x80, "Off"                                },
-	{0x13, 0x01, 0x80, 0x00, "On"                                 },
-
-	// Dip 2
-	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
-	{0x14, 0x01, 0x07, 0x00, "0"                                  },
-	{0x14, 0x01, 0x07, 0x01, "1"                                  },
-	{0x14, 0x01, 0x07, 0x02, "2"                                  },
-	{0x14, 0x01, 0x07, 0x03, "3"                                  },
-	{0x14, 0x01, 0x07, 0x04, "4"                                  },
-	{0x14, 0x01, 0x07, 0x05, "5"                                  },
-	{0x14, 0x01, 0x07, 0x06, "6"                                  },
-	{0x14, 0x01, 0x07, 0x07, "7"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x14, 0x01, 0x08, 0x08, "Off"                                },
-	{0x14, 0x01, 0x08, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Region"                             },
-	{0x14, 0x01, 0x10, 0x10, "Korea"                              },
-	{0x14, 0x01, 0x10, 0x00, "Europe"                             },
-};
-
-STDDIPINFO(Lockonph)
-
-static struct BurnDIPInfo MvpDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Credits Needed"                     },
-	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
-	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Innings"                            },
-	{0x15, 0x01, 0x04, 0x04, "1 Credit 1 Inning Only"             },
-	{0x15, 0x01, 0x04, 0x0c, "+2 Credits 3 Innings"               },
-	
-	{0   , 0xfe, 0   , 8   , "Time Limits"                        },
-	{0x15, 0x01, 0x38, 0x18, "Easy"                               },
-	{0x15, 0x01, 0x38, 0x28, "Easy 2"                             },
-	{0x15, 0x01, 0x38, 0x08, "Easy 3"                             },
-	{0x15, 0x01, 0x38, 0x38, "Normal"                             },
-	{0x15, 0x01, 0x38, 0x30, "Hard"                               },
-	{0x15, 0x01, 0x38, 0x10, "Hard 2"                             },
-	{0x15, 0x01, 0x38, 0x20, "Hard 3"                             },
-	{0x15, 0x01, 0x38, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x15, 0x01, 0xc0, 0x40, "Easy 2"                             },
-	{0x15, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x15, 0x01, 0xc0, 0x30, "Hard"                               },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Mvp)
-
-static struct BurnDIPInfo PassshtDIPList[]=
-{
-	// Default Values
-	{0x17, 0xff, 0xff, 0xf0, NULL                                 },
-	{0x18, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x17, 0x01, 0x01, 0x01, "Off"                                },
-	{0x17, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
-	{0x17, 0x01, 0x0e, 0x06, "2000"                               },
-	{0x17, 0x01, 0x0e, 0x0a, "3000"                               },
-	{0x17, 0x01, 0x0e, 0x0c, "4000"                               },
-	{0x17, 0x01, 0x0e, 0x0e, "5000"                               },
-	{0x17, 0x01, 0x0e, 0x08, "6000"                               },
-	{0x17, 0x01, 0x0e, 0x04, "7000"                               },
-	{0x17, 0x01, 0x0e, 0x02, "8000"                               },
-	{0x17, 0x01, 0x0e, 0x00, "9000"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Point Table"                        },
-	{0x17, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x17, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x17, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x17, 0x01, 0x30, 0x00, "Hardest"                            },	
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x17, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x17, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x17, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x17, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x18)
-};
-
-STDDIPINFO(Passsht)
-
-
-static struct BurnDIPInfo PassshtaDIPList[]=
-{
-	// Default Values
-	{0x29, 0xff, 0xff, 0xf0, NULL                                 },
-	{0x2a, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x29, 0x01, 0x01, 0x01, "Off"                                },
-	{0x29, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
-	{0x29, 0x01, 0x0e, 0x06, "2000"                               },
-	{0x29, 0x01, 0x0e, 0x0a, "3000"                               },
-	{0x29, 0x01, 0x0e, 0x0c, "4000"                               },
-	{0x29, 0x01, 0x0e, 0x0e, "5000"                               },
-	{0x29, 0x01, 0x0e, 0x08, "6000"                               },
-	{0x29, 0x01, 0x0e, 0x04, "7000"                               },
-	{0x29, 0x01, 0x0e, 0x02, "8000"                               },
-	{0x29, 0x01, 0x0e, 0x00, "9000"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Point Table"                        },
-	{0x29, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x29, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x29, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x29, 0x01, 0x30, 0x00, "Hardest"                            },	
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x29, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x29, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x29, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x29, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x2a)
-};
-
-STDDIPINFO(Passshta)
-
-static struct BurnDIPInfo CencourtDIPList[]=
-{
-	// Default Values
-	{0x29, 0xff, 0xff, 0xf1, NULL                                 },
-	{0x2a, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Debug Display"                      },
-	{0x29, 0x01, 0x01, 0x01, "Off"                                },
-	{0x29, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
-	{0x29, 0x01, 0x0e, 0x06, "2000"                               },
-	{0x29, 0x01, 0x0e, 0x0a, "3000"                               },
-	{0x29, 0x01, 0x0e, 0x0c, "4000"                               },
-	{0x29, 0x01, 0x0e, 0x0e, "5000"                               },
-	{0x29, 0x01, 0x0e, 0x08, "6000"                               },
-	{0x29, 0x01, 0x0e, 0x04, "7000"                               },
-	{0x29, 0x01, 0x0e, 0x02, "8000"                               },
-	{0x29, 0x01, 0x0e, 0x00, "9000"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Point Table"                        },
-	{0x29, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x29, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x29, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x29, 0x01, 0x30, 0x00, "Hardest"                            },	
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x29, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x29, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x29, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x29, 0x01, 0xc0, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x2a)
-};
-
-STDDIPINFO(Cencourt)
-
-static struct BurnDIPInfo RiotcityDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "2 Credits to Start"                 },
-	{0x13, 0x01, 0x01, 0x01, "Off"                                },
-	{0x13, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x02, 0x02, "Off"                                },
-	{0x13, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x0c, 0x00, "1"                                  },
-	{0x13, 0x01, 0x0c, 0x0c, "2"                                  },
-	{0x13, 0x01, 0x0c, 0x08, "3"                                  },
-	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x13, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x13, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x13, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x13, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x13, 0x01, 0x40, 0x40, "Normal"                             },
-	{0x13, 0x01, 0x40, 0x00, "Hard"                               },
-	
-	{0   , 0xfe, 0   , 2   , "Attack button to start"             },
-	{0x13, 0x01, 0x80, 0x80, "Off"                                },
-	{0x13, 0x01, 0x80, 0x00, "On"                                 },
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Riotcity)
-
-static struct BurnDIPInfo RyukyuDIPList[]=
-{
-	// Default Values
-	{0x0d, 0xff, 0xff, 0xf8, NULL                                 },
-	{0x0e, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x0d, 0x01, 0x01, 0x01, "Off"                                },
-	{0x0d, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Cancel per credit"                  },
-	{0x0d, 0x01, 0x02, 0x00, "2"                                  },
-	{0x0d, 0x01, 0x02, 0x02, "3"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Timer Speed"                        },
-	{0x0d, 0x01, 0x04, 0x04, "20 seconds"                         },
-	{0x0d, 0x01, 0x04, 0x00, "30 seconds"                         },
-	
-	{0   , 0xfe, 0   , 2   , "PCM Voice"                          },
-	{0x0d, 0x01, 0x08, 0x00, "Off"                                },
-	{0x0d, 0x01, 0x08, 0x08, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Omikuji Difficulty"                 },
-	{0x0d, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x0d, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x0d, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x0d, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x0d, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x0d, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x0d, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x0d, 0x01, 0xc0, 0x00, "Hardest"                            },
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x0e)
-};
-
-STDDIPINFO(Ryukyu)
-
-static struct BurnDIPInfo SdibDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x15, 0x01, 0x01, 0x01, "No"                                 },
-	{0x15, 0x01, 0x01, 0x00, "Yes"                                },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x15, 0x01, 0x0c, 0x00, "Free"                               },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x15, 0x01, 0xc0, 0x80, "Every 50000"                        },
-	{0x15, 0x01, 0xc0, 0xc0, "50000"                              },
-	{0x15, 0x01, 0xc0, 0x40, "100000"                             },
-	{0x15, 0x01, 0xc0, 0x00, "None"                               },
-	
-	// Dip 1
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Sdib)
-
-static struct BurnDIPInfo ShinobiDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0xfc, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x15, 0x01, 0x01, 0x00, "Upright"                            },
-	{0x15, 0x01, 0x01, 0x01, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x02, 0x02, "Off"                                },
-	{0x15, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x15, 0x01, 0x0c, 0x04, "5"                                  },
-	{0x15, 0x01, 0x0c, 0x00, "240"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 2   , "Enemy Bullet Speed"                 },
-	{0x15, 0x01, 0x40, 0x40, "Slow"                               },
-	{0x15, 0x01, 0x40, 0x00, "Fast"                               },
-	
-	{0   , 0xfe, 0   , 2   , "Language"                           },
-	{0x15, 0x01, 0x80, 0x80, "Japanese"                           },
-	{0x15, 0x01, 0x80, 0x00, "English"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Shinobi)
-
-static struct BurnDIPInfo SonicbomDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0x7f, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
-	{0x13, 0x01, 0x07, 0x06, "Easy"                               },
-	{0x13, 0x01, 0x07, 0x07, "Normal"                             },
-	{0x13, 0x01, 0x07, 0x05, "Hard 1"                             },
-	{0x13, 0x01, 0x07, 0x04, "Hard 2"                             },
-	{0x13, 0x01, 0x07, 0x03, "Hard 3"                             },
-	{0x13, 0x01, 0x07, 0x02, "Hard 4"                             },
-	{0x13, 0x01, 0x07, 0x01, "Hard 5"                             },
-	{0x13, 0x01, 0x07, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x18, 0x10, "2"                                  },
-	{0x13, 0x01, 0x18, 0x18, "3"                                  },
-	{0x13, 0x01, 0x18, 0x08, "4"                                  },
-	{0x13, 0x01, 0x18, 0x00, "5"                                  },
-	
-	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
-	{0x13, 0x01, 0x60, 0x40, "30000"                              },
-	{0x13, 0x01, 0x60, 0x60, "40000"                              },
-	{0x13, 0x01, 0x60, 0x20, "50000"                              },
-	{0x13, 0x01, 0x60, 0x00, "60000"                              },
-	
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x13, 0x01, 0x80, 0x00, "Upright"                            },
-	{0x13, 0x01, 0x80, 0x80, "Cocktail"                           },
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Sonicbom)
-
-static struct BurnDIPInfo SjryukoDIPList[]=
-{
-	// Default Values
-	{0x1c, 0xff, 0xff, 0xff, NULL                                 },
-	{0x1d, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x1d)
-};
-
-STDDIPINFO(Sjryuko)
-
-static struct BurnDIPInfo SnapperDIPList[]=
-{
-	// Default Values
-	{0x0a, 0xff, 0xff, 0xff, NULL                                 },
-	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
-	
-	// Dip 1
-	{0   , 0xfe, 0   , 8   , "Coin A"                             },
-	{0x0a, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
-	{0x0a, 0x01, 0x07, 0x06, "1 Coin  2 Credits"                  },
-	{0x0a, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
-	{0x0a, 0x01, 0x07, 0x04, "1 Coin  4 Credits"                  },
-	{0x0a, 0x01, 0x07, 0x03, "1 Coin  5 Credits"                  },
-	{0x0a, 0x01, 0x07, 0x02, "2 Coins 1 Credit"                   },
-	{0x0a, 0x01, 0x07, 0x01, "3 Coins 1 Credit"                   },
-	{0x0a, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x0a, 0x01, 0x18, 0x10, "3"                                  },
-	{0x0a, 0x01, 0x18, 0x18, "4"                                  },	
-	{0x0a, 0x01, 0x18, 0x08, "5"                                  },
-	{0x0a, 0x01, 0x18, 0x00, "6"                                  },
-	
-	// Dip 2
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x0b, 0x01, 0x10, 0x00, "Off"                                },
-	{0x0b, 0x01, 0x10, 0x10, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Service Mode"                       },
-	{0x0b, 0x01, 0x80, 0x80, "Off"                                },
-	{0x0b, 0x01, 0x80, 0x00, "On"                                 },
-};
-
-STDDIPINFO(Snapper)
-
-static struct BurnDIPInfo TetrisDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x12, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x11, 0x01, 0x02, 0x02, "Off"                                },
-	{0x11, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x11, 0x01, 0x30, 0x20, "Easy"                               },
-	{0x11, 0x01, 0x30, 0x30, "Normal"                             },
-	{0x11, 0x01, 0x30, 0x10, "Hard"                               },
-	{0x11, 0x01, 0x30, 0x00, "Hardest"                            },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x12)
-};
-
-STDDIPINFO(Tetris)
-
-static struct BurnDIPInfo TimescanDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xf5, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-	{0x15, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x13, 0x01, 0x01, 0x00, "Cocktail"                           },
-	{0x13, 0x01, 0x01, 0x01, "Upright"                            },
-	
-	{0   , 0xfe, 0   , 16  , "Bonus"                              },
-	{0x13, 0x01, 0x1e, 0x16, "Replay 1000000/2000000"             },
-	{0x13, 0x01, 0x1e, 0x14, "Replay 1200000/2500000"             },
-	{0x13, 0x01, 0x1e, 0x12, "Replay 1500000/3000000"             },
-	{0x13, 0x01, 0x1e, 0x10, "Replay 2000000/4000000"             },
-	{0x13, 0x01, 0x1e, 0x1c, "Replay 1000000"                     },
-	{0x13, 0x01, 0x1e, 0x1e, "Replay 1200000"                     },
-	{0x13, 0x01, 0x1e, 0x1a, "Replay 1500000"                     },
-	{0x13, 0x01, 0x1e, 0x18, "Replay 1800000"                     },
-	{0x13, 0x01, 0x1e, 0x0e, "Extra Ball 100000"                  },
-	{0x13, 0x01, 0x1e, 0x0c, "Extra Ball 200000"                  },
-	{0x13, 0x01, 0x1e, 0x0a, "Extra Ball 300000"                  },
-	{0x13, 0x01, 0x1e, 0x08, "Extra Ball 400000"                  },
-	{0x13, 0x01, 0x1e, 0x06, "Extra Ball 500000"                  },
-	{0x13, 0x01, 0x1e, 0x04, "Extra Ball 600000"                  },
-	{0x13, 0x01, 0x1e, 0x02, "Extra Ball 700000"                  },
-	{0x13, 0x01, 0x1e, 0x00, "None"                               },
-	
-	{0   , 0xfe, 0   , 2   , "Match"                              },
-	{0x13, 0x01, 0x20, 0x00, "Off"                                },
-	{0x13, 0x01, 0x20, 0x20, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Pin Rebound"                        },
-	{0x13, 0x01, 0x40, 0x40, "Well"                               },
-	{0x13, 0x01, 0x40, 0x00, "A Little"                           },
-	
-	{0   , 0xfe, 0   , 2   , "Lives"                              },
-	{0x13, 0x01, 0x80, 0x80, "3"                                  },
-	{0x13, 0x01, 0x80, 0x00, "5"                                  },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-	
-	// Dip 3
-	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
-	{0x15, 0x01, 0x01, 0x01, "Off"                                },
-	{0x15, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Out Lane Pin"                       },
-	{0x15, 0x01, 0x02, 0x02, "Near"                               },
-	{0x15, 0x01, 0x02, 0x00, "Far"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Special"                            },
-	{0x15, 0x01, 0x0c, 0x08, "7 Credits"                          },
-	{0x15, 0x01, 0x0c, 0x0c, "3 Credits"                          },
-	{0x15, 0x01, 0x0c, 0x04, "1 Credit"                           },
-	{0x15, 0x01, 0x0c, 0x00, "2000000 Points"                     },
-	
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x15, 0x01, 0x10, 0x00, "No"                                 },
-	{0x15, 0x01, 0x10, 0x10, "Yes"                                },
-};
-
-STDDIPINFO(Timescan)
-
-static struct BurnDIPInfo ToryumonDIPList[]=
-{
-	// Default Values
-	{0x11, 0xff, 0xff, 0xfe, NULL                                 },
-	{0x12, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x11, 0x01, 0x01, 0x01, "Off"                                },
-	{0x11, 0x01, 0x01, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "VS-Mode Battle"                     },
-	{0x11, 0x01, 0x10, 0x10, "1"                                  },
-	{0x11, 0x01, 0x10, 0x00, "3"                                  },
-	
-	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
-	{0x11, 0x01, 0xe0, 0xc0, "Easy"                               },
-	{0x11, 0x01, 0xe0, 0xe0, "Normal"                             },
-	{0x11, 0x01, 0xe0, 0xa0, "Hard"                               },
-	{0x11, 0x01, 0xe0, 0x80, "Hard+1"                             },
-	{0x11, 0x01, 0xe0, 0x60, "Hard+2"                             },
-	{0x11, 0x01, 0xe0, 0x40, "Hard+3"                             },
-	{0x11, 0x01, 0xe0, 0x20, "Hard+4"                             },
-	{0x11, 0x01, 0xe0, 0x00, "Hard+5"                             },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x12)
-};
-
-STDDIPINFO(Toryumon)
-
-static struct BurnDIPInfo TturfDIPList[]=
-{
-	// Default Values
-	{0x15, 0xff, 0xff, 0x2f, NULL                                 },
-	{0x16, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 4   , "Continues"                          },
-	{0x15, 0x01, 0x03, 0x00, "None"                               },
-	{0x15, 0x01, 0x03, 0x01, "3"                                  },
-	{0x15, 0x01, 0x03, 0x02, "Unlimited"                          },
-	{0x15, 0x01, 0x03, 0x03, "Unlimited"                          },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x15, 0x01, 0x0c, 0x08, "Easy"                               },
-	{0x15, 0x01, 0x0c, 0x0c, "Normal"                             },
-	{0x15, 0x01, 0x0c, 0x04, "Hard"                               },
-	{0x15, 0x01, 0x0c, 0x00, "Hardest"                            },
-	
-	{0   , 0xfe, 0   , 4   , "Starting Energy"                    },
-	{0x15, 0x01, 0x30, 0x00, "3"                                  },
-	{0x15, 0x01, 0x30, 0x10, "4"                                  },
-	{0x15, 0x01, 0x30, 0x20, "6"                                  },
-	{0x15, 0x01, 0x30, 0x30, "8"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x15, 0x01, 0x40, 0x40, "Off"                                },
-	{0x15, 0x01, 0x40, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 2   , "Bonus Energy"                       },
-	{0x15, 0x01, 0x80, 0x80, "1"                                  },
-	{0x15, 0x01, 0x80, 0x00, "2"                                  },
-	
-	// Dip 2
-	SYSTEM16B_COINAGE(0x16)
-};
-
-STDDIPINFO(Tturf)
-
-static struct BurnDIPInfo UltracinDIPList[]=
-{
-	// Default Values
-	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
-	{0x0c, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x0c)
-};
-
-STDDIPINFO(Ultracin)
-
-static struct BurnDIPInfo Wb3DIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x02, 0x02, "Off"                                },
-	{0x13, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x0c, 0x00, "2"                                  },
-	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x13, 0x01, 0x0c, 0x08, "4"                                  },
-	{0x13, 0x01, 0x0c, 0x04, "5"                                  },
-	
-	{0   , 0xfe, 0   , 2   , "Bonus Life"                         },
-	{0x13, 0x01, 0x10, 0x10, "5k, 10k, 18k, 30k"                  },
-	{0x13, 0x01, 0x10, 0x00, "5k, 15k, 30k"                       },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x13, 0x01, 0x20, 0x20, "Normal"                             },
-	{0x13, 0x01, 0x20, 0x00, "Hard"                               },
-	
-	{0   , 0xfe, 0   , 2   , "Invincible Mode"                    },
-	{0x13, 0x01, 0x40, 0x40, "No"                                 },
-	{0x13, 0x01, 0x40, 0x00, "Yes"                                },
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Wb3)
-
-static struct BurnDIPInfo WrestwarDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
-	{0x13, 0x01, 0x02, 0x02, "Off"                                },
-	{0x13, 0x01, 0x02, 0x00, "On"                                 },
-	
-	{0   , 0xfe, 0   , 4   , "Round Time"                         },
-	{0x13, 0x01, 0x0c, 0x00, "100"                                },
-	{0x13, 0x01, 0x0c, 0x0c, "110"                                },
-	{0x13, 0x01, 0x0c, 0x08, "120"                                },
-	{0x13, 0x01, 0x0c, 0x04, "130"                                },
-	
-	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
-	{0x13, 0x01, 0x20, 0x00, "No"                                 },
-	{0x13, 0x01, 0x20, 0x20, "Yes"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
-	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
-		
-	// Dip 2
-	SYSTEM16B_COINAGE(0x14)
-};
-
-STDDIPINFO(Wrestwar)
-
-#undef SYSTEM16B_COINAGE
-
-/*====================================================
-Rom defs
-====================================================*/
-
-static struct BurnRomInfo AceattacRomDesc[] = {
-	{ "epr-11491.a4",   0x10000, 0xf3c19c36, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11489.a1",   0x10000, 0xbbe623c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11492.a5",   0x10000, 0xd8bd3139, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11490.a2",   0x10000, 0x38cb3a41, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11493.b9",   0x10000, 0x654485d9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11494.b10",  0x10000, 0xb67971ab, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11495.b11",  0x10000, 0xb687ab61, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11501.b1",   0x10000, 0x09179ead, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11505.b5",   0x10000, 0xb67f1ecf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11502.b2",   0x10000, 0x7464bae4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11506.b6",   0x10000, 0xb0104def, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11503.b3",   0x10000, 0x344c0692, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11507.b7",   0x10000, 0xa2af710a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11504.b4",   0x10000, 0x42b4a5f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11508.b8",   0x10000, 0x5cbb833c, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11496.a7",   0x08000, 0x82cb40a9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11497.a8",   0x08000, 0xb04f62cc, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11498.a9",   0x08000, 0x97baf52b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11499.a10",  0x08000, 0xea332866, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11500.a11",  0x08000, 0x2ddf1c31, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	// reconstructed key; some of the RNG-independent bits could be incorrect
-	{ "317-0059.key",   0x02000, 0x4512e2fa, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Aceattac)
-STD_ROM_FN(Aceattac)
-
-static struct BurnRomInfo AfightereRomDesc[] = {
-	{ "epr10272.bin",  0x08000, 0xbc3b75b6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10269.bin",  0x08000, 0x688b4ff7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10273.bin",  0x08000, 0x0ca74019, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10270.bin",  0x08000, 0x53fab467, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10274.bin",  0x08000, 0xd2601561, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10271.bin",  0x08000, 0xd0d73af5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Afightere)
-STD_ROM_FN(Afightere)
-
-static struct BurnRomInfo AfighterfRomDesc[] = {
-	{ "epr10036.bin",  0x08000, 0xd0589391, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10033.bin",  0x08000, 0x1b836a91, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10037.bin",  0x08000, 0x3a312b9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10034.bin",  0x08000, 0x423e983e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10038.bin",  0x08000, 0x22c2b533, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10035.bin",  0x08000, 0x68177755, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Afighterf)
-STD_ROM_FN(Afighterf)
-
-static struct BurnRomInfo AfightergRomDesc[] = {
-	{ "epr10163.bin",  0x08000, 0x6d62eccd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10160.bin",  0x08000, 0x86f020da, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10164.bin",  0x08000, 0x3a312b9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10161.bin",  0x08000, 0x423e983e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10165.bin",  0x08000, 0xcc68a82d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10162.bin",  0x08000, 0xa20acfd5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Afighterg)
-STD_ROM_FN(Afighterg)
-
-static struct BurnRomInfo AfighterhRomDesc[] = {
-	{ "epr10357.bin",  0x08000, 0x69777a15, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10354.bin",  0x08000, 0x6dad6dd1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10358.bin",  0x08000, 0x8f9da9a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10355.bin",  0x08000, 0xac865097, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10359.bin",  0x08000, 0x1dc12296, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr10356.bin",  0x08000, 0xda7f05f2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Afighterh)
-STD_ROM_FN(Afighterh)
-
-static struct BurnRomInfo AliensynRomDesc[] = {
-	{ "epr-11083.a4",   0x08000, 0xcb2ad9b3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11080.a1",   0x08000, 0xfe7378d9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11084.a5",   0x08000, 0x2e1ec7b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11081.a2",   0x08000, 0x1308ee63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11085.a6",   0x08000, 0xcff78f39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11082.a3",   0x08000, 0x9cdc2a14, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Aliensyn)
-STD_ROM_FN(Aliensyn)
-
-static struct BurnRomInfo Aliensyn3RomDesc[] = {
-	{ "epr-10816.a4",   0x08000, 0x17bf5304, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10814.a1",   0x08000, 0x4cd134df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10817.a5",   0x08000, 0xc8b791b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10815.a2",   0x08000, 0xbdcf4a30, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10822a.a6",  0x08000, 0x1d0790aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10819a.a3",  0x08000, 0x1e7586b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0033.key",   0x02000, 0x68bb7745, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Aliensyn3)
-STD_ROM_FN(Aliensyn3)
-
-static struct BurnRomInfo Aliensyn7RomDesc[] = {
-	{ "epr-11083.a4",   0x08000, 0xcb2ad9b3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11080.a1",   0x08000, 0xfe7378d9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11084.a5",   0x08000, 0x2e1ec7b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11081.a2",   0x08000, 0x1308ee63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11085.a6",   0x08000, 0xcff78f39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11082.a3",   0x08000, 0x9cdc2a14, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11086.a7",   0x08000, 0xc7fddc28, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-00xx.key",   0x02000, 0x76b370cd, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Aliensyn7)
-STD_ROM_FN(Aliensyn7)
-
-static struct BurnRomInfo AliensynjRomDesc[] = {
-	{ "epr-10720a.a4",  0x08000, 0x1b920893, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10717a.a1",  0x08000, 0x972ae358, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10721a.a5",  0x08000, 0xf4d2d1c3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10718a.a2",  0x08000, 0xc79bf61b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10722a.a6",  0x08000, 0x1d0790aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10719a.a3",  0x08000, 0x1e7586b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0033.key",   0x02000, 0x68bb7745, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Aliensynj)
-STD_ROM_FN(Aliensynj)
-
-static struct BurnRomInfo AltbeastRomDesc[] = {
-	{ "epr-11907.a7",   0x20000, 0x29e0c3ad, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11906.a5",   0x20000, 0x4c9e9cd8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0078.c2",    0x01000, 0x8101925f, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast)
-STD_ROM_FN(Altbeast)
-
-static struct BurnRomInfo AltbeastjRomDesc[] = {
-	{ "epr-11885.a7",   0x20000, 0x5bb715aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11884.a5",   0x20000, 0xe1707090, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0077.c2",    0x01000, 0x00000000, BRF_NODUMP },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeastj)
-STD_ROM_FN(Altbeastj)
-
-static struct BurnRomInfo Altbeast2RomDesc[] = {
-	{ "epr-11705.a7",   0x20000, 0x57dc5c7a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11704.a5",   0x20000, 0x33bbcf07, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11686.a10",  0x08000, 0x828a45b3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0066.key",   0x02000, 0xed85a054, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast2)
-STD_ROM_FN(Altbeast2)
-
-static struct BurnRomInfo Altbeastj1RomDesc[] = {
-	{ "epr-11670.a7",   0x20000, 0xb748eb07, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11669.a5",   0x20000, 0x005ecd11, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	// reconstructed key; some of the RNG-independent bits could be incorrect
-	{ "317-0065.key",   0x02000, 0x9e0f619d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeastj1)
-STD_ROM_FN(Altbeastj1)
-
-
-static struct BurnRomInfo Altbeastj3RomDesc[] = {
-	{ "epr-11721.a7",   0x20000, 0x1c5d11de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11720.a5",   0x20000, 0x735350cf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0068.key",   0x02000, 0xc1ed4310, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeastj3)
-STD_ROM_FN(Altbeastj3)
-
-static struct BurnRomInfo Altbeastj3dRomDesc[] = {
-	{ "bootleg_epr-11721.a7",   0x20000, 0xb9c963a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11720.a5",   0x20000, 0x6a1e91fc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",          0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",          0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",          0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",          0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",          0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",          0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-
-	{ "epr-11725.b1",           0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",           0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",           0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",           0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",           0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",           0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",           0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",           0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",           0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",          0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",           0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",          0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",           0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",          0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",          0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11672.a11",          0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",          0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeastj3d)
-STD_ROM_FN(Altbeastj3d)
-
-static struct BurnRomInfo Altbeast4RomDesc[] = {
-	{ "epr-11740.a7",   0x20000, 0xce227542, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11739.a5",   0x20000, 0xe466eb65, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11686.a10",  0x08000, 0x828a45b3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0066.key",   0x02000, 0xed85a054, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast4)
-STD_ROM_FN(Altbeast4)
-
-static struct BurnRomInfo Altbeast5RomDesc[] = {
-	{ "epr-11742.a7",   0x20000, 0x61839534, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11741.a5",   0x20000, 0x9b2159cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0069.key",   0x02000, 0x959e256a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast5)
-STD_ROM_FN(Altbeast5)
-
-static struct BurnRomInfo Altbeast5dRomDesc[] = {
-	{ "bootleg_epr-11742.a7",   0x20000, 0x62c517e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11741.a5",   0x20000, 0x5873f049, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",          0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",          0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",          0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",          0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",          0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",          0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-
-	{ "epr-11725.b1",           0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",           0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",           0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",           0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",           0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",           0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",           0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",           0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",           0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",          0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",           0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",          0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",           0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",          0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",          0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11672.a11",          0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",          0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast5d)
-STD_ROM_FN(Altbeast5d)
-
-static struct BurnRomInfo Altbeast6RomDesc[] = {
-	{ "epr-11883.a7",   0x20000, 0xc5b3e8f7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11882.a5",   0x20000, 0x9c01170b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0076.c2",    0x01000, 0x32c91f89, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Altbeast6)
-STD_ROM_FN(Altbeast6)
-
-static struct BurnRomInfo AltbeastblRomDesc[] = {
-	{ "4.bin",          0x10000, 0x790b4b3a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "6.bin",          0x10000, 0x0f65f25d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "3.bin",          0x10000, 0x65cdd72b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "5.bin",          0x10000, 0x3393fbc4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "12.bin",         0x10000, 0xa4967d10, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "11.bin",         0x10000, 0x021e82ab, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "10.bin",         0x10000, 0x1a26cf3f, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "9.bin",          0x10000, 0x277ef086, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "8.bin",          0x10000, 0x661225af, SYS16_ROM_TILES_20000 | BRF_GRA },
-	{ "7.bin",          0x10000, 0xd7019da7, SYS16_ROM_TILES_20000 | BRF_GRA },
-	
-	{ "18.bin",         0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "22.bin",         0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "17.bin",         0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "21.bin",         0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "16.bin",         0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "20.bin",         0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "15.bin",         0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "19.bin",         0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "23.bin",         0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "25.bin",         0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "24.bin",         0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "26.bin",         0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "13.bin",         0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "14.bin",         0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "1.bin",          0x10000, 0x67e09da3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	{ "2.bin",          0x10000, 0x7c653d8b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Altbeastbl)
-STD_ROM_FN(Altbeastbl)
-
-static struct BurnRomInfo MutantwarrRomDesc[] = {
-	{ "4.bin",          0x10000, 0x1bed3505, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "6.bin",          0x10000, 0x8bfb70e4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "3.bin",          0x10000, 0x40b0afec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "5.bin",          0x10000, 0x2a9ef382, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "16.bin",         0x10000, 0xa4967d10, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	{ "15.bin",         0x10000, 0xe091ae2c, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	{ "14.bin",         0x10000, 0x1a26cf3f, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	{ "13.bin",         0x10000, 0x277ef086, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	{ "12.bin",         0x10000, 0x661225af, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	{ "11.bin",         0x10000, 0xd7019da7, SYS16_ROM_TILES_20000 | BRF_GRA }, 
-	
-	{ "20.bin",         0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "10.bin",         0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "19.bin",         0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "9.bin",          0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "18.bin",         0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "8.bin",          0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "17.bin",         0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "7.bin",          0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "22.bin",         0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "25.bin",         0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "23.bin",         0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "26.bin",         0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "21.bin",         0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA }, 
-	{ "24.bin",         0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA }, 
-
-	{ "1.bin",          0x10000, 0x67e09da3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, 
-	{ "2.bin",          0x10000, 0x7c653d8b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, 
-};
-
-
-STD_ROM_PICK(Mutantwarr)
-STD_ROM_FN(Mutantwarr)
-
-static struct BurnRomInfo AtomicpRomDesc[] = {
-	{ "ap-t2.bin",      0x10000, 0x97421047, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "ap-t1.bin",      0x10000, 0x5c65fe56, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "ap-t4.bin",      0x08000, 0x332e58f4, SYS16_ROM_TILES | BRF_GRA },
-	{ "ap-t3.bin",      0x08000, 0xdddc122c, SYS16_ROM_TILES | BRF_GRA },
-	{ "ap-t5.bin",      0x08000, 0xef5ecd6b, SYS16_ROM_TILES | BRF_GRA },
-};
-
-
-STD_ROM_PICK(Atomicp)
-STD_ROM_FN(Atomicp)
-
-static struct BurnRomInfo AurailRomDesc[] = {
-	{ "epr-13577.a7",   0x20000, 0x6701b686, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13576.a5",   0x20000, 0x1e428d94, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Aurail)
-STD_ROM_FN(Aurail)
-
-static struct BurnRomInfo Aurail1RomDesc[] = {
-	{ "epr-13469.a7",   0x20000, 0xc628b69d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13468.a5",   0x20000, 0xce092218, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0168.key",   0x02000, 0xfed38390, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Aurail1)
-STD_ROM_FN(Aurail1)
-
-static struct BurnRomInfo Aurail1dRomDesc[] = {
-	{ "bootleg_epr-13469.a7",   0x20000, 0x75ef3eec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13468.a5",   0x20000, 0xe46e4f55, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13447.a8",           0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13445.a6",           0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13450.a14",          0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13465.b14",          0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13451.a15",          0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13466.b15",          0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13452.a16",          0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13467.b16",          0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-13453.b1",           0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13457.b5",           0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13454.b2",           0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13458.b6",           0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13455.b3",           0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13459.b7",           0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13456.b4",           0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13460.b8",           0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13440.a1",           0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13461.b10",          0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13441.a2",           0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13462.b11",          0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13442.a3",           0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13463.b12",          0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13443.a4",           0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13464.b13",          0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13448.a10",          0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13449.a11",          0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Aurail1d)
-STD_ROM_FN(Aurail1d)
-
-static struct BurnRomInfo AurailjRomDesc[] = {
-	{ "epr-13446.a7",   0x20000, 0xd1f57b2a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13444.a5",   0x20000, 0x7a2b045f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0167.key",   0x02000, 0xfed38390, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Aurailj)
-STD_ROM_FN(Aurailj)
-
-static struct BurnRomInfo AurailjdRomDesc[] = {
-	{ "bootleg_epr-13446.a7",   0x20000, 0x25221510, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13444.a5",   0x20000, 0x56ba5356, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13447.a8",           0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13445.a6",           0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13450.a14",          0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13465.b14",          0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13451.a15",          0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13466.b15",          0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13452.a16",          0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-13467.b16",          0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-13453.b1",           0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13457.b5",           0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13454.b2",           0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13458.b6",           0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13455.b3",           0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13459.b7",           0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13456.b4",           0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13460.b8",           0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13440.a1",           0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13461.b10",          0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13441.a2",           0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13462.b11",          0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13442.a3",           0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13463.b12",          0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13443.a4",           0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-13464.b13",          0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13448.a10",          0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-13449.a11",          0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Aurailjd)
-STD_ROM_FN(Aurailjd)
-
-static struct BurnRomInfo BayrouteRomDesc[] = {
-	{ "epr-12517.a7",   0x20000, 0x436728a9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12516.a5",   0x20000, 0x4ff0353f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12458.a8",   0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12456.a6",   0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-12462.a14",  0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12463.a15",  0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12464.a16",  0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12465.b1",   0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12467.b5",   0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12466.b2",   0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12468.b6",   0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12459.a10",  0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12460.a11",  0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12461.a12",  0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0116.key",   0x02000, 0x8778ee49, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Bayroute)
-STD_ROM_FN(Bayroute)
-
-static struct BurnRomInfo BayroutedRomDesc[] = {
-	{ "bootleg_epr-12517.a7",   0x20000, 0x7e90b39d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12516.a5",   0x20000, 0x34afc1fd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12458.a8",           0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12456.a6",           0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12462.a14",          0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12463.a15",          0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12464.a16",          0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12465.b1",           0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12467.b5",           0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12466.b2",           0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12468.b6",           0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12459.a10",          0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12460.a11",          0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12461.a12",          0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Bayrouted)
-STD_ROM_FN(Bayrouted)
-
-static struct BurnRomInfo BayroutejRomDesc[] = {
-	{ "epr-12457.a7",   0x20000, 0xbc726255, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12455.a5",   0x20000, 0xb6a722eb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12458.a8",   0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12456.a6",   0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-12462.a14",  0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12463.a15",  0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12464.a16",  0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12465.b1",   0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12467.b5",   0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12466.b2",   0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12468.b6",   0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12459.a10",  0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12460.a11",  0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12461.a12",  0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0115.key",   0x02000, 0x75a55614, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Bayroutej)
-STD_ROM_FN(Bayroutej)
-
-static struct BurnRomInfo BayroutejdRomDesc[] = {
-	{ "bootleg_epr-12457.a7",   0x20000, 0x43e9011c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12455.a5",   0x20000, 0x8f56ae92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12458.a8",           0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12456.a6",           0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12462.a14",          0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12463.a15",          0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12464.a16",          0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12465.b1",           0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12467.b5",           0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12466.b2",           0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12468.b6",           0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12459.a10",          0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12460.a11",          0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12461.a12",          0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Bayroutejd)
-STD_ROM_FN(Bayroutejd)
-
-static struct BurnRomInfo Bayroute1RomDesc[] = {
-	{ "br.a4",         0x10000, 0x91c6424b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "br.a1",         0x10000, 0x76954bf3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "br.a5",         0x10000, 0x9d6fd183, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "br.a2",         0x10000, 0x5ca1e3d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "br.a6",         0x10000, 0xed97ad4c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "br.a3",         0x10000, 0x0d362905, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-12462.a14", 0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12463.a15", 0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12464.a16", 0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "br_obj0o.b1",   0x10000, 0x098a5e82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj0e.b5",   0x10000, 0x85238af9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj1o.b2",   0x10000, 0xcc641da1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj1e.b6",   0x10000, 0xd3123315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj2o.b3",   0x10000, 0x84efac1f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj2e.b7",   0x10000, 0xb73b12cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br_obj3o.b4",   0x10000, 0xa2e238ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "br.b8",         0x10000, 0xd8de78ff, SYS16_ROM_SPRITES | BRF_GRA },
-
-#if !defined ROM_VERIFY
-	{ "sound.a7",      0x08000, 0x9e1ce6ed, SYS16_ROM_Z80PROG | BRF_PRG }, // Needs to be verified
-
-	{ "sound.a8",      0x10000, 0x077e9981, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
-	{ "sound.a9",      0x10000, 0x3c3f5f41, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
-	{ "sound.a10",     0x10000, 0x7c251347, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
-	{ "sound.a11",     0x10000, 0xa602ea2d, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
-#else
-    { "sound.a7",      0x08000, 0x00000000, SYS16_ROM_Z80PROG | BRF_NODUMP | BRF_PRG },
-	
-    { "sound.a8",      0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
-    { "sound.a9",      0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
-    { "sound.a10",     0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
-    { "sound.a11",     0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
-#endif
-};
-
-
-STD_ROM_PICK(Bayroute1)
-STD_ROM_FN(Bayroute1)
-
-static struct BurnRomInfo Blox16bRomDesc[] = {
-	{ "bs16b.p00",      0x040000, 0xfd1978b9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "bs16b.scr",      0x040000, 0x1de4e95b, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "bs16b.obj",      0x020000, 0x05076220, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "bs16b.snd",      0x018000, 0x930c7e7b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Blox16b)
-STD_ROM_FN(Blox16b)
-
-static struct BurnRomInfo BulletRomDesc[] = {
-	{ "epr-11010.a4",   0x08000, 0xdd9001de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11007.a1",   0x08000, 0xd9e08110, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11011.a5",   0x08000, 0x7f446b9f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11008.a2",   0x08000, 0x34824d3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11012.a6",   0x08000, 0x3992f159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11009.a3",   0x08000, 0xdf199999, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10994.b9",   0x10000, 0x3035468a, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10995.b10",  0x10000, 0x6b97aff1, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10996.b11",  0x10000, 0x501bddd6, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10999.b1",   0x10000, 0x119f0008, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11003.b5",   0x10000, 0x2f429089, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11000.b2",   0x10000, 0xf5482bbe, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11004.b6",   0x10000, 0x8c886df0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11001.b3",   0x10000, 0x65ea71e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11005.b7",   0x10000, 0xea2f9d50, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11002.b4",   0x10000, 0x9e25042b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11006.b8",   0x10000, 0x6b7384f2, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10997.a7",   0x08000, 0x5dd9cab5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10998.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-		
-	{ "317-0041.key",   0x02000, 0x4cd4861a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Bullet)
-STD_ROM_FN(Bullet)
-
-static struct BurnRomInfo BulletdRomDesc[] = {
-	{ "bootleg_epr-11010.a4",   0x08000, 0xc4b7cb63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11007.a1",   0x08000, 0x2afa84c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11011.a5",           0x08000, 0x7f446b9f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11008.a2",           0x08000, 0x34824d3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11012.a6",           0x08000, 0x3992f159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11009.a3",           0x08000, 0xdf199999, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10994.b9",           0x10000, 0x3035468a, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10995.b10",          0x10000, 0x6b97aff1, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10996.b11",          0x10000, 0x501bddd6, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-10999.b1",           0x10000, 0x119f0008, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11003.b5",           0x10000, 0x2f429089, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11000.b2",           0x10000, 0xf5482bbe, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11004.b6",           0x10000, 0x8c886df0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11001.b3",           0x10000, 0x65ea71e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11005.b7",           0x10000, 0xea2f9d50, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11002.b4",           0x10000, 0x9e25042b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11006.b8",           0x10000, 0x6b7384f2, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10997.a7",           0x08000, 0x5dd9cab5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10998.a8",           0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Bulletd)
-STD_ROM_FN(Bulletd)
-
-static struct BurnRomInfo CottonRomDesc[] = {
-	{ "epr-13921a.a7",  0x20000, 0xf047a037, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13919a.a5",  0x20000, 0x651108b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13922a.a8",  0x20000, 0x1ca248c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13920a.a6",  0x20000, 0xfa3610f9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13891.a3",   0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13894.b12",  0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-13892.a10",  0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13893.a11",  0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0181a.key",  0x02000, 0x5c419b36, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cotton)
-STD_ROM_FN(Cotton)
-
-static struct BurnRomInfo CottondRomDesc[] = {
-	{ "bootleg_epr-13921a.a7",   0x20000, 0x92947867, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13919a.a5",   0x20000, 0x30f131fb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13922a.a8",   0x20000, 0xf0f75329, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13920a.a6",   0x20000, 0xa3721aab, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13891.a3",            0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13894.b12",           0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13892.a10",           0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13893.a11",           0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottond)
-STD_ROM_FN(Cottond)
-
-static struct BurnRomInfo CottonuRomDesc[] = {
-	{ "cotton.a7",     0x20000, 0xe7ef7d10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cotton.a5",     0x20000, 0xabe4f83e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cotton.a8",     0x20000, 0xfc0f4401, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cotton.a6",     0x20000, 0xf50f1ea2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13891.a3",   0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13894.b12",  0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-13892.a10",  0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13893.a11",  0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0180.key",   0x02000, 0xa236b915, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonu)
-STD_ROM_FN(Cottonu)
-
-static struct BurnRomInfo CottonudRomDesc[] = {
-	{ "bootleg_cotton.a7",   0x20000, 0xf6b585ca, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_cotton.a5",   0x20000, 0x6b328522, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_cotton.a8",   0x20000, 0xf9147b71, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_cotton.a6",   0x20000, 0x10365de4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13862.a14",       0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",       0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",       0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",       0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",       0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",       0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-13865.b1",        0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",        0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",        0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",        0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",        0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",        0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",        0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",        0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",        0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",       0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",        0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",       0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13891.a3",        0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13894.b12",       0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",        0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",       0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13892.a10",       0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13893.a11",       0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    	 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonud)
-STD_ROM_FN(Cottonud)
-
-static struct BurnRomInfo CottonjRomDesc[] = {
-	{ "epr-13858b.a7",  0x20000, 0x2d113dac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13856b.a5",  0x20000, 0x5aab2ac4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13859b.a8",  0x20000, 0x2e67367d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13857b.a6",  0x20000, 0x20361f02, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13854.a3",   0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13875.b12",  0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-13860.a10",  0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13061.a11",  0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0179b.key",  0x02000, 0x488096d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },  // Same key data, but labeled as REV B
-
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonj)
-STD_ROM_FN(Cottonj)
-
-static struct BurnRomInfo CottonjdRomDesc[] = {
-	{ "bootleg_epr-13858b.a7",   0x20000, 0x739acf3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13856b.a5",   0x20000, 0x19597b1f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13859b.a8",   0x20000, 0x10548c39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13857b.a6",   0x20000, 0x6d289f3e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13854.a3",            0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13875.b12",           0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13860.a10",           0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13061.a11",           0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonjd)
-STD_ROM_FN(Cottonjd)
-
-static struct BurnRomInfo CottonjaRomDesc[] = {
-	{ "epr-13858a.a7",  0x20000, 0x276f42fe, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13856a.a5",  0x20000, 0x14e6b5e7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13859a.a8",  0x20000, 0x4703ef9d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13857a.a6",  0x20000, 0xde37e527, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13854.a3",   0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13875.b12",  0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-13860.a10",  0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13061.a11",  0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0179a.key",  0x02000, 0x488096d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonja)
-STD_ROM_FN(Cottonja)
-
-static struct BurnRomInfo CottonjadRomDesc[] = {
-	{ "bootleg_epr-13858a.a7",   0x20000, 0xf048fba4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13856a.a5",   0x20000, 0x04f5bbe1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13859a.a8",   0x20000, 0xfc259bef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13857a.a6",   0x20000, 0xe191e939, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13854.a3",            0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13875.b12",           0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13860.a10",           0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13061.a11",           0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Cottonjad)
-STD_ROM_FN(Cottonjad)
-
-static struct BurnRomInfo DduxRomDesc[] = {
-	{ "epr-11191.a7",   0x20000, 0x500e400a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11190.a5",   0x20000, 0x2a698308, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0096.key",   0x02000, 0x6fd7d26e, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ddux)
-STD_ROM_FN(Ddux)
-
-static struct BurnRomInfo DduxdRomDesc[] = {
-	{ "bootleg_epr-11191.a7",   0x20000, 0x7721eeba, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11190.a5",   0x20000, 0x5ee350cd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11915.a8",           0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11913.a6",           0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-11917.a14",          0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11918.a15",          0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11919.a16",          0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-11920.b1",           0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11922.b5",           0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11921.b2",           0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11923.b6",           0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11916.a10",          0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    	    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Dduxd)
-STD_ROM_FN(Dduxd)
-
-static struct BurnRomInfo Ddux1RomDesc[] = {
-	{ "epr-12189.a7",   0x20000, 0x558e9b5d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12188.a5",   0x20000, 0x802a240f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0095.c2",    0x01000, 0xb06b4ca7, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ddux1)
-STD_ROM_FN(Ddux1)
-
-static struct BurnRomInfo DduxjRomDesc[] = {
-	{ "epr-11914.a7",   0x20000, 0xa3eedc3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11912.a5",   0x20000, 0x05989323, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0094.key",   0x02000, 0xdb98f594, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Dduxj)
-STD_ROM_FN(Dduxj)
-
-static struct BurnRomInfo DduxjdRomDesc[] = {
-	{ "bootleg_epr-11914.a7",   0x20000, 0x8d52572d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11912.a5",   0x20000, 0x811ceee9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11915.a8",           0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11913.a6",           0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-11917.a14",          0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11918.a15",          0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11919.a16",          0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-11920.b1",           0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11922.b5",           0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11921.b2",           0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11923.b6",           0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11916.a10",          0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Dduxjd)
-STD_ROM_FN(Dduxjd)
-
-static struct BurnRomInfo DduxblRomDesc[] = {
-	{ "dduxb03.bin",    0x20000, 0xe7526012, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "dduxb05.bin",    0x20000, 0x459d1237, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "dduxb02.bin",    0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "dduxb04.bin",    0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "dduxb14.bin",    0x10000, 0x664bd135, SYS16_ROM_TILES | BRF_GRA },
-	{ "dduxb15.bin",    0x10000, 0xce0d2b30, SYS16_ROM_TILES | BRF_GRA },
-	{ "dduxb16.bin",    0x10000, 0x6de95434, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "dduxb10.bin",    0x10000, 0x0be3aee5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb06.bin",    0x10000, 0xb0079e99, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb11.bin",    0x10000, 0xcfb2af18, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb07.bin",    0x10000, 0x0217369c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb12.bin",    0x10000, 0x28ce9b15, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb08.bin",    0x10000, 0x8844f336, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb13.bin",    0x10000, 0xefe57759, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "dduxb09.bin",    0x10000, 0x6b64f665, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "dduxb01.bin",    0x08000, 0x0dbef0d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "dduxb_5_82s129.b1",		0x00100, 0xa7c22d96, BRF_OPT },
-	{ "dduxb_4_18s030.a17",		0x00020, 0x58bcf8bd, BRF_OPT },
-	{ "dduxb_pal16l8.1",		0x00104, 0x3b406587, BRF_OPT },
-	{ "dduxb_p_gal16v8.a18",	0x00117, 0xce1ab1e1, BRF_OPT },
-	{ "dduxb_pal20l8.2",		0x00144, 0x09098fbe, BRF_OPT },
-};
-
-
-STD_ROM_PICK(Dduxbl)
-STD_ROM_FN(Dduxbl)
-
-static struct BurnRomInfo DunkshotRomDesc[] = {
-	{ "epr-10523c.a4",  0x08000, 0x106733c2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10520c.a1",  0x08000, 0xba9c5d10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10524.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10471.a5
-	{ "epr-10521.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10468.a2
-	{ "epr-10525.a6",   0x08000, 0x7f41f334, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10522.a3",   0x08000, 0xe5b5f754, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-10528.b9",   0x08000, 0xa8a3762d, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10529.b10",  0x08000, 0x80cbff50, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10530.b11",  0x08000, 0x2dbe1e52, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10526.b4",   0x08000, 0xbf200754, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10527.b8",   0x08000, 0x39b1a242, SYS16_ROM_SPRITES | BRF_GRA },	
-	
-	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Dunkshot)
-STD_ROM_FN(Dunkshot)
-
-static struct BurnRomInfo DunkshotaRomDesc[] = {
-	// several roms had replacement? (different style to others) labels with 'T' markings, content identical.
-	{ "epr-10523a.a4",  0x08000, 0x22e3f074, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, 
-	{ "epr-10520a.a1",  0x08000, 0x16e213ba, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, 
-	{ "epr-10524.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10471.a5
-	{ "epr-10521.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10468.a2
-	{ "epr-10525.a6",   0x08000, 0x7f41f334, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10522.a3",   0x08000, 0xe5b5f754, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-10528.b9",  	0x08000, 0xa8a3762d, SYS16_ROM_TILES | BRF_GRA }, 
-	{ "epr-10529.b10", 	0x08000, 0x80cbff50, SYS16_ROM_TILES | BRF_GRA }, 
-	{ "epr-10530.b11", 	0x08000, 0x2dbe1e52, SYS16_ROM_TILES | BRF_GRA }, 
-	
-	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10526.b4",  	0x08000, 0xbf200754, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10527.b8",  	0x08000, 0x39b1a242, SYS16_ROM_SPRITES | BRF_GRA },	
-	
-	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Dunkshota)
-STD_ROM_FN(Dunkshota)
-
-static struct BurnRomInfo DunkshotoRomDesc[] = {
-	{ "epr-10470.a4",   0x08000, 0x8c60761f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10467.a1",   0x08000, 0x29774114, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10471.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10468.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10472.a6",   0x08000, 0x206027a6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10469.a3",   0x08000, 0xaa442b81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-10485.b9",   0x08000, 0xf16dda29, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10486.b10",  0x08000, 0x311d973c, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10487.b11",  0x08000, 0xa8fb179f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10480.b4",   0x08000, 0x5dffd9dd, SYS16_ROM_SPRITES | BRF_GRA },	
-	{ "epr-10484.b8",   0x08000, 0xbcb5fcc9, SYS16_ROM_SPRITES | BRF_GRA },	
-	
-	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Dunkshoto)
-STD_ROM_FN(Dunkshoto)
-
-static struct BurnRomInfo EswatRomDesc[] = {
-	{ "epr-12659.a2",   0x40000, 0xc5ab2db9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12658.a1",   0x40000, 0xaf40bd71, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0130.key",   0x02000, 0xba7b717b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswat)
-STD_ROM_FN(Eswat)
-
-static struct BurnRomInfo EswatdRomDesc[] = {
-	{ "bootleg_epr-12659.a2",   0x40000, 0x3157f69d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12658.a1",   0x40000, 0x0feb544b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatd)
-STD_ROM_FN(Eswatd)
-
-static struct BurnRomInfo EswatjRomDesc[] = {
-	{ "epr-12615.a2",   0x40000, 0x388c2ea7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12614.a1",   0x40000, 0xd5f0fb47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0128.key",   0x02000, 0x95f96277, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatj)
-STD_ROM_FN(Eswatj)
-
-static struct BurnRomInfo EswatjdRomDesc[] = {
-	{ "bootleg_epr-12615.a2",   0x40000, 0x5103480e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12614.a1",   0x40000, 0x51f404a5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatjd)
-STD_ROM_FN(Eswatjd)
-
-static struct BurnRomInfo Eswatj1RomDesc[] = {
-	{ "epr-12683.a7",   0x20000, 0x33c34cfd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12681.a5",   0x20000, 0x6b2feb09, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12684.a8",   0x20000, 0x2e5b866b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12682.a6",   0x20000, 0x8e1f57d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12688.a14",  0x20000, 0x12f898db, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12700.b14",  0x10000, 0x37a721c7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12689.a15",  0x20000, 0x339746d0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12701.b15",  0x10000, 0x703bf496, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12690.a16",  0x20000, 0x33cf7a55, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12702.b16",  0x10000, 0x70b70211, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12691.b1",   0x20000, 0x2ff5cb9e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12694.b5",   0x20000, 0x10a27526, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12692.b2",   0x20000, 0x01b2e832, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12695.b6",   0x20000, 0xba3ba6fd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12693.b3",   0x20000, 0xd12ef57a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12696.b7",   0x20000, 0x54b51ca4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12678.a1",   0x20000, 0xa8afd649, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12697.b10",  0x20000, 0x6ac4cbfb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12679.a2",   0x20000, 0xb4c4a2ab, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12698.b11",  0x20000, 0x99784b36, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12680.a3",   0x20000, 0xf321452c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12699.b12",  0x20000, 0xac329586, SYS16_ROM_SPRITES | BRF_GRA },
-		
-	{ "epr-12685.a10",  0x08000, 0x5d0c16d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12686.a11",  0x20000, 0xf451705e, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12687.a12",  0x20000, 0x9e87571f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0131.key",   0x02000, 0x8f71726d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatj1)
-STD_ROM_FN(Eswatj1)
-
-static struct BurnRomInfo Eswatj1dRomDesc[] = {
-	{ "bootleg_epr-12683.a7",   0x20000, 0x4f9d7a85, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12681.a5",   0x20000, 0x3e113af2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12684.a8",           0x20000, 0x2e5b866b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12682.a6",           0x20000, 0x8e1f57d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12688.a14",          0x20000, 0x12f898db, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12700.b14",          0x10000, 0x37a721c7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12689.a15",          0x20000, 0x339746d0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12701.b15",          0x10000, 0x703bf496, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12690.a16",          0x20000, 0x33cf7a55, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12702.b16",          0x10000, 0x70b70211, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12691.b1",           0x20000, 0x2ff5cb9e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12694.b5",           0x20000, 0x10a27526, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12692.b2",           0x20000, 0x01b2e832, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12695.b6",           0x20000, 0xba3ba6fd, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12693.b3",           0x20000, 0xd12ef57a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12696.b7",           0x20000, 0x54b51ca4, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12678.a1",           0x20000, 0xa8afd649, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12697.b10",          0x20000, 0x6ac4cbfb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12679.a2",           0x20000, 0xb4c4a2ab, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12698.b11",          0x20000, 0x99784b36, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12680.a3",           0x20000, 0xf321452c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12699.b12",          0x20000, 0xac329586, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12685.a10",          0x08000, 0x5d0c16d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12686.a11",          0x20000, 0xf451705e, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12687.a12",          0x20000, 0x9e87571f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatj1d)
-STD_ROM_FN(Eswatj1d)
-
-static struct BurnRomInfo EswatuRomDesc[] = {
-	{ "epr-12657.a2",   0x40000, 0x43ca72aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12656.a1",   0x40000, 0x5f018967, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0129.key",   0x02000, 0x128302c7, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatu)
-STD_ROM_FN(Eswatu)
-
-static struct BurnRomInfo EswatudRomDesc[] = {
-	{ "bootleg_epr-12657.a2",   0x40000, 0x85b42ecc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12656.a1",   0x40000, 0x0509949f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Eswatud)
-STD_ROM_FN(Eswatud)
-
-static struct BurnRomInfo EswatblRomDesc[] = {
-	{ "eswat_c.rom",   0x10000, 0x1028cc81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "eswat_f.rom",   0x10000, 0xf7b2d388, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "eswat_b.rom",   0x10000, 0x87c6b1b5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "eswat_e.rom",   0x10000, 0x937ddf9a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "eswat_a.rom",   0x08000, 0x2af4fc62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "eswat_d.rom",   0x08000, 0xb4751e19, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "ic19",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
-	{ "ic20",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
-	{ "ic21",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "ic9",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "ic12",          0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "ic10",          0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "ic13",          0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "ic11",          0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "ic14",          0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "ic8",           0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "ic6",           0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Eswatbl)
-STD_ROM_FN(Eswatbl)
-
-static struct BurnRomInfo ExctleagRomDesc[] = {
-	{ "epr-11939.a4",    0x10000, 0x117dd98f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11936.a1",    0x10000, 0x0863de60, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11940.a5",    0x10000, 0xdec83274, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11937.a2",    0x10000, 0x4ebda367, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11941.a6",    0x10000, 0x4df2d451, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11938.a3",    0x10000, 0x07c08d47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11942.b09",   0x10000, 0xeb70e827, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11943.b10",   0x10000, 0xd97c8982, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11944.b11",   0x10000, 0xa75cae80, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11950.b1",    0x10000, 0xaf497849, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11954.b5",    0x10000, 0x5fa2106c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11951.b2",    0x10000, 0xc04fa974, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11955.b6",    0x10000, 0x86a0c368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11952.b3",    0x10000, 0xe64a9761, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11956.b7",    0x10000, 0xaff5c2fa, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11953.b4",    0x10000, 0x4cae3999, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11957.b8",    0x10000, 0x218f835b, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11945.a7",    0x08000, 0xc2a83012, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11140.a8",    0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11141.a9",    0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11142.a10",   0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11143.a11",   0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0079.key",    0x02000, 0xeffefa1c, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Exctleag)
-STD_ROM_FN(Exctleag)
-
-static struct BurnRomInfo ExctleagdRomDesc[] = {
-	{ "bootleg_epr-11939.a4",   0x10000, 0x42db9082, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11936.a1",   0x10000, 0x8a0c126c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11940.a5",   0x10000, 0xe490bb47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11937.a2",   0x10000, 0xf1c07e10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11941.a6",           0x10000, 0x4df2d451, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11938.a3",           0x10000, 0x07c08d47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11942.b09",          0x10000, 0xeb70e827, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11943.b10",          0x10000, 0xd97c8982, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11944.b11",          0x10000, 0xa75cae80, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-11950.b1",           0x10000, 0xaf497849, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11954.b5",           0x10000, 0x5fa2106c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11951.b2",           0x10000, 0xc04fa974, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11955.b6",           0x10000, 0x86a0c368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11952.b3",           0x10000, 0xe64a9761, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11956.b7",           0x10000, 0xaff5c2fa, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11953.b4",           0x10000, 0x4cae3999, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11957.b8",           0x10000, 0x218f835b, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11945.a7",           0x08000, 0xc2a83012, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11140.a8",           0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11141.a9",           0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11142.a10",          0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11143.a11",          0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Exctleagd)
-STD_ROM_FN(Exctleagd)
-
-static struct BurnRomInfo FantzonetaRomDesc[] = {
-	{ "fzta__a07.bin",  0x020000, 0xad07d1fd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "fzta__a05.bin",  0x020000, 0x47dbe11b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "fzta__a14.bin",  0x010000, 0x9468ab33, SYS16_ROM_TILES | BRF_GRA },
-	{ "fzta__a15.bin",  0x010000, 0x22a3cf75, SYS16_ROM_TILES | BRF_GRA },
-	{ "fzta__a16.bin",  0x010000, 0x25cba87f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "fzta__b01.bin",  0x020000, 0x0beb4a22, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fzta__b05.bin",  0x020000, 0x7f676c69, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fzta__a01.bin",  0x020000, 0x40e1db9a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fzta__b10.bin",  0x020000, 0xacbb5cff, SYS16_ROM_SPRITES | BRF_GRA },
-			
-	{ "fzta__a10.bin",  0x008000, 0xdab6fcd0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fantzoneta)
-STD_ROM_FN(Fantzoneta)
-
-static struct BurnRomInfo Fantzn2xRomDesc[] = {
-	{ "fz2.a7",         0x020000, 0x94c05f0b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "fz2.a5",         0x020000, 0xf3526895, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "fz2.a8",         0x020000, 0xb2ebb209, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "fz2.a6",         0x020000, 0x6833f546, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "fz2.a14",        0x020000, 0x1c0a4537, SYS16_ROM_TILES | BRF_GRA },
-	{ "fz2.a15",        0x020000, 0x2b933344, SYS16_ROM_TILES | BRF_GRA },
-	{ "fz2.a16",        0x020000, 0xe63281a1, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "fz2.b1",         0x020000, 0x46bba615, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b5",         0x020000, 0xbebeee5d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b2",         0x020000, 0x6681a7b6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b6",         0x020000, 0x42d3241f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b3",         0x020000, 0x5863926f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b7",         0x020000, 0xcd830510, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b4",         0x020000, 0xb98fa5b6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b8",         0x020000, 0xe8248f68, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.a1",         0x020000, 0x9d2f41f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b10",        0x020000, 0x7686ea33, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.a2",         0x020000, 0x3b4050b7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "fz2.b11",        0x020000, 0xda8a95dc, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "fz2.a10",        0x008000, 0x92c92924, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "fz2.a11",        0x020000, 0x8c641bb9, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Fantzn2x)
-STD_ROM_FN(Fantzn2x)
-
-static struct BurnRomInfo Fantzn2xpRomDesc[] = {
-	{ "cpu1b.bin",      0x020000, 0xd23ef944, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cpu1a.bin",      0x020000, 0x407490e4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cpu1d.bin",      0x020000, 0xc8c7716b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "cpu1c.bin",      0x020000, 0x242e7b6e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "tilea.bin",      0x020000, 0x47e0e5ce, SYS16_ROM_TILES | BRF_GRA },
-	{ "tileb.bin",      0x020000, 0x59e181b7, SYS16_ROM_TILES | BRF_GRA },
-	{ "tilec.bin",      0x020000, 0x375d354c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "obja.bin",       0x020000, 0x9af87a4d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objb.bin",       0x020000, 0x2fdbca68, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objc.bin",       0x020000, 0x2587487a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objd.bin",       0x020000, 0x8de4e7aa, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "obje.bin",       0x020000, 0xdfada4ff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objf.bin",       0x020000, 0x65e5d23d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objg.bin",       0x020000, 0xdc9fbb75, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objh.bin",       0x020000, 0x97bb7c19, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "obji.bin",       0x020000, 0xc7790fee, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "objj.bin",       0x020000, 0x4535eb0e, SYS16_ROM_SPRITES | BRF_GRA },
-		
-	{ "cpu2a.bin",      0x008000, 0x92c92924, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "cpu2b.bin",      0x020000, 0x2c8ad475, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Fantzn2xp)
-STD_ROM_FN(Fantzn2xp)
-
-static struct BurnRomInfo Fantzn2xps2RomDesc[] = {
-	{ "fz2_s16c.p00",   0x040000, 0xb7d16c1d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "fz2_s16c.p01",   0x040000, 0x2c47487c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "fz2_s16c.scr",   0x080000, 0xed3b1ac0, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "fz2_s16c.spr",   0x200000, 0x14d06fee, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "fz2_s16c.snd",   0x030000, 0x0ed30ec1, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fantzn2xps2)
-STD_ROM_FN(Fantzn2xps2)
-
-static struct BurnRomInfo FantzntaRomDesc[] = {
-	{ "fz1_s16b_ta.p00",0x040000, 0xbad0537a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "fz1_s16b.scr",   0x040000, 0x10ecd8b9, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "fz1_s16b_ta.obj",0x200000, 0x51fd438f, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "fz1_s16b.snd",   0x020000, 0xa00701fb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fantznta)
-STD_ROM_FN(Fantznta)
-
-static struct BurnRomInfo FpointRomDesc[] = {
-	{ "epr-12599b.a4",  0x10000, 0x26e3f354, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12598b.a1",  0x10000, 0xc0f2c97d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12593.a14",  0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12594.a15",  0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12595.a16",  0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-12596.b1",   0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12597.b5",   0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-12592.a10",  0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0127a.key",  0x02000, 0x5adb0042, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fpoint)
-STD_ROM_FN(Fpoint)
-
-static struct BurnRomInfo FpointdRomDesc[] = {
-	{ "bootleg_epr-12599b.a4",   0x10000, 0xf5102d28, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12598b.a1",   0x10000, 0x5335558c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12593.a14",           0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12594.a15",           0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12595.a16",           0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-12596.b1",            0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12597.b5",            0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12592.a10",           0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fpointd)
-STD_ROM_FN(Fpointd)
-
-static struct BurnRomInfo Fpoint1RomDesc[] = {
-	{ "epr-12591b.a7",  0x10000, 0x248b3e1b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12590b.a5",  0x10000, 0x75256e3d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12593.a14",  0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12594.a15",  0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12595.a16",  0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-12596.b1",   0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12597.b5",   0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-12592.a10",  0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0127a.key",  0x02000, 0x5adb0042, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Fpoint1)
-STD_ROM_FN(Fpoint1)
-
-static struct BurnRomInfo Fpoint1dRomDesc[] = {
-	{ "bootleg_epr-12591b.a7",   0x10000, 0xf778e067, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12590b.a5",   0x10000, 0xe6e2f2cc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12593.a14",           0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12594.a15",           0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12595.a16",           0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-12596.b1",            0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12597.b5",            0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12592.a10",           0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Fpoint1d)
-STD_ROM_FN(Fpoint1d)
-
-static struct BurnRomInfo FpointblRomDesc[] = {
-	{ "flpoint.003",    0x10000, 0x4d6df514, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "flpoint.002",    0x10000, 0x4dff2ee8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "flpoint.006",    0x10000, 0xc539727d, SYS16_ROM_TILES | BRF_GRA },
-	{ "flpoint.005",    0x10000, 0x82c0b8b0, SYS16_ROM_TILES | BRF_GRA },
-	{ "flpoint.004",    0x10000, 0x522426ae, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "12596.bin",      0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "12597.bin",      0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "flpoint.001",    0x08000, 0xc5b8e0fe, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Fpointbl)
-STD_ROM_FN(Fpointbl)
-
-static struct BurnRomInfo FpointbjRomDesc[] = {
-	{ "boot2.003",      0x10000, 0x6c00d1b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "boot2.002",      0x10000, 0xc1fcd704, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "flpoint.006",    0x10000, 0xc539727d, SYS16_ROM_TILES | BRF_GRA },
-	{ "flpoint.005",    0x10000, 0x82c0b8b0, SYS16_ROM_TILES | BRF_GRA },
-	{ "flpoint.004",    0x10000, 0x522426ae, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "12596.bin",      0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "12597.bin",      0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "flpoint.001",    0x08000, 0xc5b8e0fe, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "82s129.1",       0x00100, 0xa7c22d96, BRF_OPT },
-	{ "82s123.2",       0x00020, 0x58bcf8bd, BRF_OPT },
-	{ "fpointbj_gal16v8_1.bin", 0x00117, 0xba7f292c, BRF_OPT },
-	{ "fpointbj_gal16v8_3.bin", 0x00117, 0xce1ab1e1, BRF_OPT },
-	{ "fpointbj_gal20v8.bin", 	0x00400, 0x00000000, BRF_OPT | BRF_NODUMP },
-};
-
-
-STD_ROM_PICK(Fpointbj)
-STD_ROM_FN(Fpointbj)
-
-static struct BurnRomInfo GoldnaxeRomDesc[] = {
-	{ "epr-12545.ic2",  0x40000, 0xa97c4e4d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12544.ic1",  0x40000, 0x5e38f668, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0123a.c2",   0x01000, 0xcf19e7d4, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe)
-STD_ROM_FN(Goldnaxe)
-
-static struct BurnRomInfo Goldnaxe1RomDesc[] = {
-	{ "epr-12389.ic2",  0x40000, 0x35d5fa77, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12388.ic1",  0x40000, 0x72952a93, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0110.key",   0x02000, 0xcd517dc6, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe1)
-STD_ROM_FN(Goldnaxe1)
-
-static struct BurnRomInfo Goldnaxe1dRomDesc[] = {
-	{ "bootleg_epr-12389.ic2",   0x40000, 0x0c443d5e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12388.ic1",   0x40000, 0x841d70ed, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.ic19",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.ic20",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.ic21",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12378.ic9",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.ic12",          0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.ic10",          0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.ic13",          0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.ic11",          0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.ic14",          0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.ic8",           0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12384.ic6",           0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe1d)
-STD_ROM_FN(Goldnaxe1d)
-
-static struct BurnRomInfo Goldnaxe2RomDesc[] = {
-	{ "epr-12523.a7",   0x20000, 0x8e6128d7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12522.a5",   0x20000, 0xb6c35160, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0112.c2",    0x01000, 0xbda31044, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe2)
-STD_ROM_FN(Goldnaxe2)
-
-static struct BurnRomInfo Goldnaxe3RomDesc[] = {
-	{ "epr-12525.a7",   0x20000, 0x48332c76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12524.a5",   0x20000, 0x8e58f342, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0120.key",   0x02000, 0x946e9fa6, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe3)
-STD_ROM_FN(Goldnaxe3)
-
-static struct BurnRomInfo Goldnaxe3dRomDesc[] = {
-	{ "bootleg_epr-12525.a7",   0x20000, 0xf8dbae51, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12524.a5",   0x20000, 0x908e4159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12521.a8",           0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12519.a6",           0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.a14",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.a15",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.a16",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12378.b1",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.b5",           0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.b2",           0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.b6",           0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.b3",           0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.b7",           0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.a10",          0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12384.a11",          0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxe3d)
-STD_ROM_FN(Goldnaxe3d)
-
-static struct BurnRomInfo GoldnaxejRomDesc[] = {
-	{ "epr-12540.a7",   0x20000, 0x0c7ccc6d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12539.a5",   0x20000, 0x1f24f7d0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0121.key",   0x02000, 0x72afed01, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxej)
-STD_ROM_FN(Goldnaxej)
-
-static struct BurnRomInfo GoldnaxejdRomDesc[] = {
-	{ "bootleg_epr-12540.a7",   0x20000, 0x601bb784, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12539.a5",   0x20000, 0xc76c0969, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12521.a8",           0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12519.a6",           0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.a14",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.a15",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.a16",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12378.b1",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.b5",           0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.b2",           0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.b6",           0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.b3",           0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.b7",           0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.a10",          0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12384.a11",          0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxejd)
-STD_ROM_FN(Goldnaxejd)
-
-static struct BurnRomInfo GoldnaxeuRomDesc[] = {
-	{ "epr-12543.ic2",  0x40000, 0xb0df9ca4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12542.ic1",  0x40000, 0xb7994d3c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0122.key",   0x02000, 0xf123c2fb, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxeu)
-STD_ROM_FN(Goldnaxeu)
-
-static struct BurnRomInfo GoldnaxeudRomDesc[] = {
-	{ "bootleg_epr-12543.ic2",   0x40000, 0xe3089080, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12542.ic1",   0x40000, 0x1e84364b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12385.ic19",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12386.ic20",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12387.ic21",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12378.ic9",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12379.ic12",          0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12380.ic10",          0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12381.ic13",          0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12382.ic11",          0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12383.ic14",          0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12390.ic8",           0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12384.ic6",           0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Goldnaxeud)
-STD_ROM_FN(Goldnaxeud)
-
-static struct BurnRomInfo HwchampRomDesc[] = {
-	{ "epr-11239.a7",   0x20000, 0xe5abfed7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11238.a5",   0x20000, 0x25180124, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11241.a14",  0x20000, 0xfc586a86, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11166.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11242.a15",  0x20000, 0x7715a742, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11167.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11243.a16",  0x20000, 0xf30cd5fd, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11168.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11158.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11162.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11159.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11163.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11160.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11164.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11161.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11165.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11240.a10",  0x08000, 0x96a12d9d, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11244.a11",  0x20000, 0x4191c03d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-11245.a12",  0x20000, 0xa4d53f7b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Hwchamp)
-STD_ROM_FN(Hwchamp)
-
-static struct BurnRomInfo HwchampaRomDesc[] = {
-	{ "epr-11239.a7",   0x20000, 0x42d59e4b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11238.a5",   0x20000, 0x25180124, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11241.a14",  0x20000, 0xfc586a86, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11166.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11242.a15",  0x20000, 0x7715a742, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11167.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11243.a16",  0x20000, 0xf30cd5fd, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11168.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11158.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11162.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11159.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11163.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11160.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11164.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11161.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11165.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11240.a10",  0x08000, 0x96a12d9d, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11244.a11",  0x20000, 0x4191c03d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-11245.a12",  0x20000, 0xa4d53f7b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Hwchampa)
-STD_ROM_FN(Hwchampa)
-
-static struct BurnRomInfo HwchampjRomDesc[] = {
-	{ "epr-11152.a7",   0x20000, 0x8ab0ce62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11153.a5",   0x20000, 0x84a743de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11202.a14",  0x20000, 0x7c94ede3, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11213.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11203.a15",  0x20000, 0x327754f7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11214.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11204.a16",  0x20000, 0xdfc4cd33, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11215.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11205.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11209.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11206.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11210.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11207.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11211.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11208.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11212.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-11154.a10",  0x08000, 0x65791275, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11200.a11",  0x20000, 0x5c41a68a, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11201.a12",  0x20000, 0x9a993120, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0046.key",   0x02000, 0x488b3f8b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Hwchampj)
-STD_ROM_FN(Hwchampj)
-
-static struct BurnRomInfo HwchampjdRomDesc[] = {
-	{ "bootleg_epr-11152.a7",   0x20000, 0x3672978a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11153.a5",   0x20000, 0x804b65bc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11202.a14",          0x20000, 0x7c94ede3, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11213.b14",          0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11203.a15",          0x20000, 0x327754f7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11214.b15",          0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11204.a16",          0x20000, 0xdfc4cd33, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11215.b16",          0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-11205.b1",           0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11209.b5",           0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11206.b2",           0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11210.b6",           0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11207.b3",           0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11211.b7",           0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11208.b4",           0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11212.b8",           0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11154.a10",          0x08000, 0x65791275, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11200.a11",          0x20000, 0x5c41a68a, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11201.a12",          0x20000, 0x9a993120, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",     		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Hwchampjd)
-STD_ROM_FN(Hwchampjd)
-
-static struct BurnRomInfo LockonphRomDesc[] = {
-	{ "b4",             0x40000, 0xfbb896f4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "b2",             0x40000, 0xfc1c9f81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "b3",             0x20000, 0x3f8c0215, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "b1",             0x20000, 0xf11a72ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "b10",            0x20000, 0xd3a8bd15, SYS16_ROM_TILES | BRF_GRA },
-	{ "b7",             0x20000, 0x787c382e, SYS16_ROM_TILES | BRF_GRA },
-	{ "b9",             0x20000, 0xaae2cef1, SYS16_ROM_TILES | BRF_GRA },
-	{ "b8",             0x20000, 0xcd30abe0, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "b14",            0x40000, 0xaf943525, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b12",            0x40000, 0x9088d980, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b13",            0x20000, 0x62f4b64f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b11",            0x20000, 0x5da3dfcd, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "b6",             0x10000, 0xaa7b1880, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "b5",             0x20000, 0xd6369a39, SYS16_ROM_MSM6295 | BRF_SND },
-};
-
-
-STD_ROM_PICK(Lockonph)
-STD_ROM_FN(Lockonph)
-
-static struct BurnRomInfo MvpRomDesc[] = {
-	{ "epr-13000.a2",   0x40000, 0x2e0e21ec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12999.a1",   0x40000, 0xfd213d28, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-13011.b11",  0x40000, 0x1cb871fc, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-13012.b12",  0x40000, 0xb75e6821, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-13013.b13",  0x40000, 0xf1944a3c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-13003.b1",   0x40000, 0x21424151, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13006.b4",   0x40000, 0x2e9afd2f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13004.b2",   0x40000, 0x0aa09dd3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13007.b5",   0x40000, 0x55c8605b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13005.b3",   0x40000, 0xc899c810, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13008.b6",   0x40000, 0xb3d46dfc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13009.b7",   0x40000, 0x126d2e37, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13010.b8",   0x40000, 0xdf37c567, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13002.a13",  0x08000, 0x1b6e1515, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-13001.a11",  0x40000, 0xe8cace8c, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0143.key",   0x02000, 0xfba2e8da, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Mvp)
-STD_ROM_FN(Mvp)
-
-static struct BurnRomInfo MvpdRomDesc[] = {
-	{ "bootleg_epr-13000.a2",   0x40000, 0xfa72e415, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12999.a1",   0x40000, 0x0af75927, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-13011.b11",          0x40000, 0x1cb871fc, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-13012.b12",          0x40000, 0xb75e6821, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-13013.b13",          0x40000, 0xf1944a3c, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-13003.b1",           0x40000, 0x21424151, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13006.b4",           0x40000, 0x2e9afd2f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13004.b2",           0x40000, 0x0aa09dd3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13007.b5",           0x40000, 0x55c8605b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13005.b3",           0x40000, 0xc899c810, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13008.b6",           0x40000, 0xb3d46dfc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13009.b7",           0x40000, 0x126d2e37, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-13010.b8",           0x40000, 0xdf37c567, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13002.a13",          0x08000, 0x1b6e1515, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-13001.a11",          0x40000, 0xe8cace8c, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Mvpd)
-STD_ROM_FN(Mvpd)
-
-static struct BurnRomInfo MvpjRomDesc[] = {
-	{ "epr-12967.a7",   0x20000, 0xe53ac137, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12965.a5",   0x20000, 0x4266cb9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12968.a8",   0x20000, 0x91c772ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12966.a6",   0x20000, 0x39365a79, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12971.a14",  0x20000, 0x245dcd1f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12983.b14",  0x20000, 0xf3570fc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12972.a15",  0x20000, 0xff7c4278, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12984.b15",  0x20000, 0xd37d1876, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12973.a16",  0x20000, 0x8dc9b9ea, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12985.b16",  0x20000, 0xe3f33a8a, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12974.b1",   0x20000, 0xe1da5597, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12977.b5",   0x20000, 0xb9eb9762, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12975.b2",   0x20000, 0x364d51d1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12978.b6",   0x20000, 0x014b5442, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12976.b3",   0x20000, 0x43b549c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12979.b7",   0x20000, 0x20f603f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12962.a1",   0x20000, 0x9b678da3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12980.b10",  0x20000, 0x883b792a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12963.a2",   0x20000, 0x8870f95a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12981.b11",  0x20000, 0x48636cb0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12964.a3",   0x20000, 0xf9148c5d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12982.b12",  0x20000, 0xc4453292, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12969.a10",  0x08000, 0xec621893, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12970.a11",  0x20000, 0x8f7d7657, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0142.key",   0x02000, 0x90468045, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Mvpj)
-STD_ROM_FN(Mvpj)
-
-static struct BurnRomInfo MvpjdRomDesc[] = {
-	{ "bootleg_epr-12967.a7",   0x20000, 0x7eb52b77, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12965.a5",   0x20000, 0x62c961b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12968.a8",           0x20000, 0x91c772ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12966.a6",           0x20000, 0x39365a79, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12971.a14",          0x20000, 0x245dcd1f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12983.b14",          0x20000, 0xf3570fc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12972.a15",          0x20000, 0xff7c4278, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12984.b15",          0x20000, 0xd37d1876, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12973.a16",          0x20000, 0x8dc9b9ea, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12985.b16",          0x20000, 0xe3f33a8a, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12974.b1",           0x20000, 0xe1da5597, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12977.b5",           0x20000, 0xb9eb9762, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12975.b2",           0x20000, 0x364d51d1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12978.b6",           0x20000, 0x014b5442, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12976.b3",           0x20000, 0x43b549c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12979.b7",           0x20000, 0x20f603f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12962.a1",           0x20000, 0x9b678da3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12980.b10",          0x20000, 0x883b792a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12963.a2",           0x20000, 0x8870f95a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12981.b11",          0x20000, 0x48636cb0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12964.a3",           0x20000, 0xf9148c5d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12982.b12",          0x20000, 0xc4453292, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12969.a10",          0x08000, 0xec621893, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12970.a11",          0x20000, 0x8f7d7657, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Mvpjd)
-STD_ROM_FN(Mvpjd)
-
-static struct BurnRomInfo PassshtRomDesc[] = {
-	{ "epr-11871.a4",   0x10000, 0x0f9ccea5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11870.a1",   0x10000, 0xdf43ebcf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0080.key",   0x02000, 0x222d016f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Passsht)
-STD_ROM_FN(Passsht)
-
-static struct BurnRomInfo PassshtdRomDesc[] = {
-	{ "bootleg_epr-11871.a4",   0x10000, 0xf009c017, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11870.a1",   0x10000, 0x9cd5f12f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11854.b9",           0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",          0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",          0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-11862.b1",           0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",           0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",           0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",           0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",           0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",           0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",           0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11858.a8",           0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",           0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",          0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",          0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Passshtd)
-STD_ROM_FN(Passshtd)
-
-static struct BurnRomInfo PassshtaRomDesc[] = {
-	{ "8.a4",           0x10000, 0xb84dc139, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "5.a1",           0x10000, 0xeffe29df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0074.key",  0x02000, 0x71bd232d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Passshta)
-STD_ROM_FN(Passshta)
-
-static struct BurnRomInfo PassshtadRomDesc[] = {
-	{ "bootleg_8.a4",   0x10000, 0x6d63bf18, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_5.a1",   0x10000, 0xfd4d0419, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Passshtad)
-STD_ROM_FN(Passshtad)
-
-static struct BurnRomInfo PassshtjRomDesc[] = {
-	{ "epr-11853.a4",   0x10000, 0xfab337e7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11852.a1",   0x10000, 0x892a81fc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0070.key",   0x02000, 0x5d0308aa, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Passshtj)
-STD_ROM_FN(Passshtj)
-
-static struct BurnRomInfo PassshtjdRomDesc[] = {
-	{ "bootleg_epr-11853.a4",   0x10000, 0xaf289531, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11852.a1",   0x10000, 0xce765977, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11854.b9",           0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11855.b10",          0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11856.b11",          0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-11862.b1",           0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11865.b5",           0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11863.b2",           0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11866.b6",           0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11864.b3",           0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11867.b7",           0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11857.a7",           0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11858.a8",           0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11859.a9",           0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11860.a10",          0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11861.a11",          0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Passshtjd)
-STD_ROM_FN(Passshtjd)
-
-static struct BurnRomInfo PassshtbRomDesc[] = {
-	{ "pass3_2p.bin",   0x10000, 0x26bb9299, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pass4_2p.bin",   0x10000, 0x06ac6d5d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr11854.b9",    0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr11855.b10",   0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr11856.b11",   0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr11862.b1",    0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr11865.b5",    0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr11863.b2",    0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr11866.b6",    0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr11864.b3",    0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr11867.b7",    0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr11857.a7",    0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr11858.a8",    0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr11859.a9",    0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr11860.a10",   0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr11861.a11",   0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Passshtb)
-STD_ROM_FN(Passshtb)
-
-static struct BurnRomInfo CencourtRomDesc[] = {
-	{ "a4_56f6.a4",    	0x10000, 0x7116dce6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a1_478b.a1",    	0x10000, 0x37beb770, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-b-9.b9",     0x10000, 0x9a55cd88, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-b-10.b10",   0x10000, 0xfc13ca35, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-b-11.b11",   0x10000, 0x1503c203, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-b-1.b1",     0x10000, 0xb18bfccf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-5.b5",     0x10000, 0x3481a8e8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-2.b2",     0x10000, 0x61a996c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-6.b6",     0x10000, 0x2116bcb1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-3.b3",     0x10000, 0x69a2e109, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-7.b7",     0x10000, 0xccf6b09f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-4.b4",     0x10000, 0xbdf63cd2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-b-8.b8",     0x10000, 0x88a90641, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-a-7.a7",   	0x08000, 0x9e1b81c6, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, // encrypted
-		
-	{ "epr-a-8.a8",     0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11858.a8
-	{ "epr-a-9.a9",     0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11859.a9
-	{ "epr-a-10.a10",   0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11860.a10
-	{ "epr-a-11.a11",   0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11861.a11
-	
-	{ "mc-8123b_center_court.key",   0x02000, 0x2be5c90b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG }, // No official 317-xxxx number
-};
-
-
-STD_ROM_PICK(Cencourt)
-STD_ROM_FN(Cencourt)
-
-static struct BurnRomInfo RiotcityRomDesc[] = {
-	{ "epr-14612.bin",  0x20000, 0xa1b331ec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-14610.bin",  0x20000, 0xcd4f2c50, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-14613.bin",  0x20000, 0x0659df4c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-14611.bin",  0x20000, 0xd9e6f80b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-14616.bin",  0x20000, 0x46d30368, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-14625.bin",  0x20000, 0xabfb80fe, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-14617.bin",  0x20000, 0x884e40f9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-14626.bin",  0x20000, 0x4ef55846, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-14618.bin",  0x20000, 0x00eb260e, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-14627.bin",  0x20000, 0x961e5f82, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-14619.bin",  0x40000, 0x6f2b5ef7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-14622.bin",  0x40000, 0x7ca7e40d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-14620.bin",  0x40000, 0x66183333, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-14623.bin",  0x40000, 0x98630049, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-14621.bin",  0x40000, 0xc0f2820e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-14624.bin",  0x40000, 0xd1a68448, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-14614.bin",  0x10000, 0xc65cc69a, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-14615.bin",  0x20000, 0x46653db1, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Riotcity)
-STD_ROM_FN(Riotcity)
-
-static struct BurnRomInfo RyukyuRomDesc[] = {
-	{ "epr-13348a.a7",  0x10000, 0x64f6ada9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13347a.a5",  0x10000, 0xfade1f50, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13351.a14",  0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13352.a15",  0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13353.a16",  0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13354.b1",   0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13356.b5",   0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13355.b2",   0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13357.b6",   0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
-		
-	{ "epr-13349.a10",  0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13350.a11",  0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
-		
-	{ "317-5023a.key",  0x02000, 0x5e372b89, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ryukyu)
-STD_ROM_FN(Ryukyu)
-
-static struct BurnRomInfo RyukyuaRomDesc[] = {
-	{ "epr-13348.a7",   0x10000, 0x5f0e0c86, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-13347.a5",   0x10000, 0x398031fa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13351.a14",  0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13352.a15",  0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13353.a16",  0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-13354.b1",   0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13356.b5",   0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13355.b2",   0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13357.b6",   0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
-		
-	{ "epr-13349.a10",  0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-13350.a11",  0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
-		
-	{ "317-5023.key",   0x02000, 0x43704331, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ryukyua)
-STD_ROM_FN(Ryukyua)
-
-static struct BurnRomInfo RyukyudRomDesc[] = {
-	{ "bootleg_epr-13348.a7",   0x10000, 0x3a96bdcd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-13347.a5",   0x10000, 0x99fddef0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13351.a14",          0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13352.a15",          0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-13353.a16",          0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-13354.b1",           0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13356.b5",           0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13355.b2",           0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-13357.b6",           0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-13349.a10",          0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-13350.a11",          0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ryukyud)
-STD_ROM_FN(Ryukyud)
-
-static struct BurnRomInfo SdibRomDesc[] = {
-	{ "epr-10986a.a4",  0x08000, 0x3e136215, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10984a.a1",  0x08000, 0x44bf3cf5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10987a.a5",  0x08000, 0xcfd79404, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10985a.a2",  0x08000, 0x1c21a03f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10829.a6",   0x08000, 0xa431ab08, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10826.a3",   0x08000, 0x2ed8e4b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "10775.a7",       0x08000, 0x4cbd55a8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0028.key",   0x02000, 0x1514662f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdib)
-STD_ROM_FN(Sdib)
-
-static struct BurnRomInfo SdiblRomDesc[] = {
-	{ "a4.rom",         0x08000, 0xf2c41dd6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a1.rom",         0x08000, 0xa9f816ef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a5.rom",         0x08000, 0x7952e27e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a2.rom",         0x08000, 0x369af326, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a6.rom",         0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "a3.rom",         0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "b1.rom",         0x10000, 0x30e2c50a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b5.rom",         0x10000, 0x794e3e8b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b2.rom",         0x10000, 0x6a8b3fd0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "b3.rom",         0x10000, 0xb9de3aeb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl)
-STD_ROM_FN(Sdibl)
-
-static struct BurnRomInfo Sdibl2RomDesc[] = {
-	{ "de1",            0x08000, 0x56f6fd26, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do1",            0x08000, 0x549c759f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de2",            0x08000, 0xb0a9ad05, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do2",            0x08000, 0x54b7ec04, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "pe1",            0x08000, 0xf0a190c0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po1",            0x08000, 0xf68c4d0e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe2",            0x08000, 0x109c9afd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po2",            0x08000, 0x6d614e76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe3",            0x08000, 0x589e2cfe, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po3",            0x08000, 0x57ba57b2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl2)
-STD_ROM_FN(Sdibl2)
-
-static struct BurnRomInfo Sdibl3RomDesc[] = {
-	{ "de1a",           0x08000, 0x3908c6a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do1a",           0x08000, 0xcd7b7750, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de2a",           0x08000, 0xf45f6935, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do2a",           0x08000, 0xd3d3efaa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "pe1a",           0x08000, 0xe4d8f399, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po1a",           0x08000, 0x910f9532, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe2a",           0x08000, 0x76a261b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po2a",           0x08000, 0x2cd18da8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl3)
-STD_ROM_FN(Sdibl3)
-
-static struct BurnRomInfo Sdibl4RomDesc[] = {
-	{ "de1b",           0x08000, 0x8045bfd1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do1b",           0x08000, 0x8f86f2ad, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de2b",           0x08000, 0x1b284afd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do2b",           0x08000, 0x8c979a2b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "pe1b",           0x08000, 0xaba84f5e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po1b",           0x08000, 0x249278a3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe2b",           0x08000, 0x480d4379, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po2b",           0x08000, 0xf27eae0b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl4)
-STD_ROM_FN(Sdibl4)
-
-static struct BurnRomInfo Sdibl5RomDesc[] = {
-	{ "de1c",           0x08000, 0x3e3d4cc1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do1c",           0x08000, 0xa71ad68c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de2c",           0x08000, 0x770bbec5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do2c",           0x08000, 0x0f1f339f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "pe1c",           0x08000, 0xd7d444d5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po1c",           0x08000, 0x1bc879dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe2c",           0x08000, 0x5cd1bfc8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po2c",           0x08000, 0xb404d1be, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl5)
-STD_ROM_FN(Sdibl5)
-
-static struct BurnRomInfo Sdibl6RomDesc[] = {
-	{ "de1c",           0x08000, 0x3e3d4cc1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do1c",           0x08000, 0xa71ad68c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de2c",           0x08000, 0x770bbec5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do2c",           0x08000, 0x0f1f339f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "pe1d",           0x08000, 0xc8b9e556, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po1d",           0x08000, 0x38eaeeb1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe2c",           0x08000, 0x5cd1bfc8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po2c",           0x08000, 0xb404d1be, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "po3d",           0x08000, 0xb1e5c2f1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sdibl6)
-STD_ROM_FN(Sdibl6)
-
-static struct BurnRomInfo DefenseRomDesc[] = {
-	{ "epr-10917a.a4",  0x08000, 0xd91ac47c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10915.a1",   0x08000, 0x7344c510, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10918a.a5",  0x08000, 0xe41befcd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10916a.a2",  0x08000, 0x7f58ba12, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10829.a6",   0x08000, 0xa431ab08, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10826.a3",   0x08000, 0x2ed8e4b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "10919.b9",       0x10000, 0x23b88f82, SYS16_ROM_TILES | BRF_GRA },
-	{ "10920.b10",      0x10000, 0x22b1fb4c, SYS16_ROM_TILES | BRF_GRA },
-	{ "10921.b11",      0x10000, 0x7788f55d, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "10775.a7",       0x08000, 0x4cbd55a8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0028.key",   0x02000, 0x1514662f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Defense)
-STD_ROM_FN(Defense)
-
-static struct BurnRomInfo Shinobi2RomDesc[] = {
-	{ "epr-11282.a4",   0x10000, 0x5f2e5524, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11280.a1",   0x10000, 0xbdfe5c38, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11287.a7",   0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0049.key",   0x02000, 0x8fac824f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Shinobi2)
-STD_ROM_FN(Shinobi2)
-
-static struct BurnRomInfo Shinobi2dRomDesc[] = {
-	{ "bootleg_epr-11282.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11280.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11283.a5",           0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11281.a2",           0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11284.b9",           0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11285.b10",          0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11286.b11",          0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-11290.b1",           0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11294.b5",           0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11291.b2",           0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11295.b6",           0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11292.b3",           0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11296.b7",           0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11293.b4",           0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11297.b8",           0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11287.a7",           0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11288.a8",           0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11289.a9",           0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Shinobi2d)
-STD_ROM_FN(Shinobi2d)
-
-static struct BurnRomInfo Shinobi3RomDesc[] = {
-	{ "epr-11299.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11298.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11372.a7",   0x08000, 0x0824269a, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0054.key",   0x02000, 0x39fd4535, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Shinobi3)
-STD_ROM_FN(Shinobi3)
-
-static struct BurnRomInfo Shinobi4RomDesc[] = {
-	{ "epr-11360.a7",   0x20000, 0xb1f67ab9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11359.a5",   0x20000, 0x0f0306e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-11363.a14",  0x20000, 0x40914168, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11364.a15",  0x20000, 0xe63649a4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11365.a16",  0x20000, 0x1ef55d20, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11366.b1",   0x20000, 0x319ede73, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11368.b5",   0x20000, 0x0377d7ce, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11367.b2",   0x20000, 0x1d06c5c7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11369.b6",   0x20000, 0xd751d2a2, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11377.a10",  0x08000, 0x0fb6af34, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11362.a11",  0x20000, 0x256af749, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0054.key",   0x02000, 0x39fd4535, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Shinobi4)
-STD_ROM_FN(Shinobi4)
-
-static struct BurnRomInfo Shinobi5RomDesc[] = {
-	{ "epr-11299.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11298.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11287.a7",   0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Shinobi5)
-STD_ROM_FN(Shinobi5)
-
-static struct BurnRomInfo Shinobi6RomDesc[] = {
-	{ "epr-11360.a7",   0x20000, 0xb1f67ab9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11359.a5",   0x20000, 0x0f0306e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-11363.a14",  0x20000, 0x40914168, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11364.a15",  0x20000, 0xe63649a4, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-11365.a16",  0x20000, 0x1ef55d20, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-11366.b1",   0x20000, 0x319ede73, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11368.b5",   0x20000, 0x0377d7ce, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11367.b2",   0x20000, 0x1d06c5c7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-11369.b6",   0x20000, 0xd751d2a2, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11361.a10",  0x08000, 0x1f47ebcb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-11362.a11",  0x20000, 0x256af749, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Shinobi6)
-STD_ROM_FN(Shinobi6)
-
-static struct BurnRomInfo SjryukoRomDesc[] = {
-	{ "epr-12256.a4",     0x08000, 0x5987ee1b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12253.a1",     0x08000, 0x26a822df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12257.a5",     0x08000, 0x3a2acc3f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12254.a2",     0x08000, 0x7e908217, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12224-95.b9",  0x08000, 0xeac17ba1, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12225-94.b10", 0x08000, 0x2310fc98, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12226-93.b11", 0x08000, 0x210e6999, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12232-10.b1",  0x10000, 0x0adec62b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12236-11.b5",  0x10000, 0x286b9af8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12233-17.b2",  0x10000, 0x3e45969c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12237-18.b6",  0x10000, 0xe5058e96, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12234-23.b3",  0x10000, 0x8c8d54ef, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12238-24.b7",  0x10000, 0x7ada3304, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12235-29.b4",  0x10000, 0xfa45d511, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12239-30.b8",  0x10000, 0x91f70c8b, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-12244.a7",     0x08000, 0xcb2a47e5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12245.a8",     0x08000, 0x66164134, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12246.a9",     0x08000, 0xf1242582, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12247.a10",    0x08000, 0xef8a64c6, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12248.a11",    0x08000, 0xd1eabdab, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-5021.key",     0x02000, 0x8e40b2ab, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sjryuko)
-STD_ROM_FN(Sjryuko)
-
-static struct BurnRomInfo SnapperRomDesc[] = {
-	{ "snap2.r01",      0x10000, 0x9a9e4ed3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "snap1.r02",      0x10000, 0xcd468d6a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "snap4.r03",      0x08000, 0x0f848e1e, SYS16_ROM_TILES | BRF_GRA },
-	{ "snap3.r04",      0x08000, 0xc7f8cf0e, SYS16_ROM_TILES | BRF_GRA },
-	{ "snap5.r05",      0x08000, 0x378e08eb, SYS16_ROM_TILES | BRF_GRA },
-};
-
-
-STD_ROM_PICK(Snapper)
-STD_ROM_FN(Snapper)
-
-static struct BurnRomInfo SonicbomRomDesc[] = {
-	{ "epr-11342.a4",   0x10000, 0x454693f1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11340.a1",   0x10000, 0x03ba3fed, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11343.a5",   0x10000, 0xedfeb7d4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11341.a2",   0x10000, 0x0338f771, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11344.b9",   0x10000, 0x59a9f940, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11345.b10",  0x10000, 0xb44c068b, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11346.b11",  0x10000, 0xe5ada66c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-11350.b1",   0x10000, 0x525ba1df, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11354.b5",   0x10000, 0x793fa3ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11351.b2",   0x10000, 0x63b1f1ca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11355.b6",   0x10000, 0xfe0fa332, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11352.b3",   0x10000, 0x047fa4b0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11356.b7",   0x10000, 0xaea3c39d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11353.b4",   0x10000, 0x4e0791f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11357.b8",   0x10000, 0xa7c5ea41, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11347.a7",   0x08000, 0xb41f0ced, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11348.a8",   0x08000, 0x89924588, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11349.a9",   0x08000, 0x8e4b6204, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0053.key",   0x02000, 0x91c80c88, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Sonicbom)
-STD_ROM_FN(Sonicbom)
-
-static struct BurnRomInfo SonicbomdRomDesc[] = {
-	{ "bootleg_epr-11342.a4",   0x10000, 0x089158ef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-11340.a1",   0x10000, 0x253cbd27, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11343.a5",           0x10000, 0xedfeb7d4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11341.a2",           0x10000, 0x0338f771, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-11344.b9",           0x10000, 0x59a9f940, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11345.b10",          0x10000, 0xb44c068b, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-11346.b11",          0x10000, 0xe5ada66c, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "opr-11350.b1",           0x10000, 0x525ba1df, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11354.b5",           0x10000, 0x793fa3ac, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11351.b2",           0x10000, 0x63b1f1ca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11355.b6",           0x10000, 0xfe0fa332, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11352.b3",           0x10000, 0x047fa4b0, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11356.b7",           0x10000, 0xaea3c39d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11353.b4",           0x10000, 0x4e0791f8, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-11357.b8",           0x10000, 0xa7c5ea41, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11347.a7",           0x08000, 0xb41f0ced, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11348.a8",           0x08000, 0x89924588, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11349.a9",           0x08000, 0x8e4b6204, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Sonicbomd)
-STD_ROM_FN(Sonicbomd)
-
-static struct BurnRomInfo SuprleagRomDesc[] = {
-	{ "epr-11133.a4",    0x10000, 0xeed72f37, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11130.a1",    0x10000, 0xe2451676, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11134.a5",    0x10000, 0xccd857f5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11131.a2",    0x10000, 0x9b78c2cc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11135.a6",    0x10000, 0x3735e0e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-11132.a3",    0x10000, 0xff199325, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-11136.b9",    0x10000, 0xc3860ce4, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11137.b10",   0x10000, 0x92d96187, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-11138.b11",   0x10000, 0xc01dc773, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-11144.b1",    0x10000, 0xb31de51c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11148.b5",    0x10000, 0x126e1309, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11145.b2",    0x10000, 0x4223d2c3, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11149.b6",    0x10000, 0x694d3765, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11146.b3",    0x10000, 0xbf0359b6, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11150.b7",    0x10000, 0x9fc0aded, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11147.b4",    0x10000, 0x3e592772, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-11151.b8",    0x10000, 0x9de95169, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-11139.a7",    0x08000, 0x9cbd99da, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-11140.a8",    0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11141.a9",    0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11142.a10",   0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-11143.a11",   0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0045.key",    0x02000, 0x0594cc2e, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Suprleag)
-STD_ROM_FN(Suprleag)
-
-static struct BurnRomInfo Tetris1RomDesc[] = {
-	{ "epr-12164.a4",  0x08000, 0xb329cd6f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12163.a1",  0x08000, 0xd372d3f3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-12165.b9",  0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12166.b10", 0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12167.b11", 0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12169.b1",  0x08000, 0xdacc6165, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12170.b5",  0x08000, 0x87354e42, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12168.a7",  0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0091.key",  0x02000, 0xa7937661, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Tetris1)
-STD_ROM_FN(Tetris1)
-
-static struct BurnRomInfo Tetris1dRomDesc[] = {
-	{ "bootleg_epr-12164.a4",   0x08000, 0x39469b3d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12163.a1",   0x08000, 0x451ea7a1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12165.b9",           0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12166.b10",          0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12167.b11",          0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12169.b1",           0x08000, 0xdacc6165, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12170.b5",           0x08000, 0x87354e42, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12168.a7",           0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Tetris1d)
-STD_ROM_FN(Tetris1d)
-
-static struct BurnRomInfo Tetris2RomDesc[] = {
-	{ "epr-12193.a7",  0x20000, 0x44466ed4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12192.a5",  0x20000, 0xa1c8af00, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-12165.b9",  0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12166.b10", 0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12167.b11", 0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12194.b1",  0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12195.b5",  0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12168.a7",  0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0092.key",  0x02000, 0xd10e1ad9, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",   0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Tetris2)
-STD_ROM_FN(Tetris2)
-
-static struct BurnRomInfo Tetris2dRomDesc[] = {
-	{ "bootleg_epr-12193.a7",   0x10000, 0xe8c59f9d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12192.a5",   0x10000, 0x8ff44f5f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12165.b9",           0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12166.b10",          0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12167.b11",          0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12194.b1",           0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12195.b5",           0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12168.a7",           0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Tetris2d)
-STD_ROM_FN(Tetris2d)
-
-static struct BurnRomInfo TetrisblRomDesc[] = {
-	{ "rom2.bin",      0x10000, 0x4d165c38, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "rom1.bin",      0x10000, 0x1e912131, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr12165.b9",   0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr12166.b10",  0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr12167.b11",  0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "obj0-o.rom",    0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "obj0-e.rom",    0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr12168.a7",   0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Tetrisbl)
-STD_ROM_FN(Tetrisbl)
-
-static struct BurnRomInfo TimescanRomDesc[] = {
-	{ "epr-10853.a4",   0x08000, 0x24d7c5fb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10850.a1",   0x08000, 0xf1575732, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10854.a5",   0x08000, 0x82d0b237, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10851.a2",   0x08000, 0xf5ce271b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10855.a6",   0x08000, 0x63e95a53, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-10852.a3",   0x08000, 0x7cd1382b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-10543.b9",   0x08000, 0x07dccc37, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10544.b10",  0x08000, 0x84fb9a3a, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-10545.b11",  0x08000, 0xc8694bc0, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-10548.b1",   0x08000, 0xaa150735, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10552.b5",   0x08000, 0x6fcbb9f7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10549.b2",   0x08000, 0x2f59f067, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10553.b6",   0x08000, 0x8a220a9f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10550.b3",   0x08000, 0xf05069ff, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10554.b7",   0x08000, 0xdc64f809, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10551.b4",   0x08000, 0x435d811f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-10555.b8",   0x08000, 0x2143c471, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-10562.a7",   0x08000, 0x3f5028bf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-10563.a8",   0x08000, 0x9db7eddf, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Timescan)
-STD_ROM_FN(Timescan)
-
-static struct BurnRomInfo ToryumonRomDesc[] = {
-	{ "epr-17689.a2",   0x20000, 0x4f0dee19, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-17688.a1",   0x20000, 0x717d81c7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-17700.b11",  0x40000, 0x8f288b37, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-17701.b12",  0x40000, 0x6dfb025b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-17702.b13",  0x40000, 0xae0b7eab, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-17692.b1",   0x20000, 0x543c4327, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17695.b4",   0x20000, 0xee60f244, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17693.b2",   0x20000, 0x4a350b3e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17696.b5",   0x20000, 0x6edb54f1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17694.b3",   0x20000, 0xb296d71d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17697.b6",   0x20000, 0x6ccb7b28, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17698.b7",   0x20000, 0xcd4dfb82, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-17699.b8",   0x20000, 0x2694ecce, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-17691.a13",  0x08000, 0x14205388, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-17690.a11",  0x40000, 0x4f9ba4e4, SYS16_ROM_UPD7759DATA | BRF_SND },
-};
-
-
-STD_ROM_PICK(Toryumon)
-STD_ROM_FN(Toryumon)
-
-static struct BurnRomInfo TturfRomDesc[] = {
-	{ "epr-12327.a7",   0x20000, 0x0376c593, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12326.a5",   0x20000, 0xf998862b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "opr-12268.a14",  0x10000, 0xe0dac07f, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12269.a15",  0x10000, 0x457a8790, SYS16_ROM_TILES | BRF_GRA },
-	{ "opr-12270.a16",  0x10000, 0x69fc025b, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "opr-12279.b1",   0x10000, 0x7a169fb1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12283.b5",   0x10000, 0xae0fa085, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12278.b2",   0x10000, 0x961d06b7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12282.b6",   0x10000, 0xe8671ee1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12277.b3",   0x10000, 0xf16b6ba2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12281.b7",   0x10000, 0x1ef1077f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12276.b4",   0x10000, 0x838bd71f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12280.b8",   0x10000, 0x639a57cb, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12328.a10",  0x08000, 0x13a346de, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "opr-12329.a11",  0x10000, 0xed9a686d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "opr-12330.a12",  0x10000, 0xfb762bca, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0104.c2",    0x01000, 0x00000000, BRF_NODUMP }, // Intel i8751 protection MCU
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Tturf)
-STD_ROM_FN(Tturf)
-
-static struct BurnRomInfo TturfuRomDesc[] = {
-	{ "epr-12266.a4",   0x10000, 0xf549def8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12264.a1",   0x10000, 0xf7cdb289, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12267.a5",   0x10000, 0x3c3ce191, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12265.a2",   0x10000, 0x8cdadd9a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12268.b9",   0x10000, 0xe0dac07f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12269.b10",  0x10000, 0x457a8790, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12270.b11",  0x10000, 0x69fc025b, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12276.b1",   0x10000, 0x838bd71f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12280.b5",   0x10000, 0x639a57cb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12277.b2",   0x10000, 0xf16b6ba2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12281.b6",   0x10000, 0x1ef1077f, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12278.b3",   0x10000, 0x961d06b7, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12282.b7",   0x10000, 0xe8671ee1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12279.b4",   0x10000, 0x7a169fb1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12283.b8",   0x10000, 0xae0fa085, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-12271.a7",   0x08000, 0x99671e52, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12272.a8",   0x08000, 0x7cf7e69f, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12273.a9",   0x08000, 0x28f0bb8b, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12274.a10",  0x08000, 0x8207f0c4, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-12275.a11",  0x08000, 0x182f3c3d, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0099.c2",    0x01000, 0xf676e3e4, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG }, // Intel i8751 protection MCU
-};
-
-
-STD_ROM_PICK(Tturfu)
-STD_ROM_FN(Tturfu)
-
-static struct BurnRomInfo UltracinRomDesc[] = {
-	{ "epr-18946.ic2",  0x40000, 0x7e70d62f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-18945.ic1",  0x40000, 0x22bc0fd9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-18956.ic19", 0x20000, 0x58ce183b, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-18957.ic20", 0x20000, 0xc807b164, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-18958.ic21", 0x20000, 0xb263bd0c, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-18950.ic9",   0x40000, 0xa2724dc5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-18953.ic12",  0x40000, 0xf58fdf96, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-18951.ic10",  0x40000, 0x8a35ddca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-18954.ic13",  0x40000, 0x1255c0bf, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-18952.ic11",  0x40000, 0x77634b5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-18955.ic14",  0x40000, 0x8c161f97, SYS16_ROM_SPRITES | BRF_GRA },
-	
-	{ "epr-18949.ic8",  0x08000, 0x4f7f8bf5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-18947.ic6",  0x40000, 0x23122c51, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "epr-18948.ic7",  0x40000, 0x6d060a08, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Ultracin)
-STD_ROM_FN(Ultracin)
-
-static struct BurnRomInfo Wb3RomDesc[] = {
-	{ "epr-12259.a7",   0x20000, 0x54927c7e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12258.a5",   0x20000, 0x01f5898c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0098.c2",    0x01000, 0x00000000, BRF_NODUMP }, // Intel i8751 protection MCU
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wb3)
-STD_ROM_FN(Wb3)
-
-static struct BurnRomInfo Wb32RomDesc[] = {
-	{ "epr-12100.a4",   0x10000, 0xf5ca4abc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12098.a1",   0x10000, 0xd998e5e5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12101.a5",   0x10000, 0x6146492b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12099.a2",   0x10000, 0x3e243b45, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-12124.b9",   0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.b10",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.b11",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a7",   0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0085.key",   0x02000, 0x8150f38d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Wb32)
-STD_ROM_FN(Wb32)
-
-static struct BurnRomInfo Wb32dRomDesc[] = {
-	{ "bootleg_epr-12100.a4",   0x10000, 0x15e3117e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12098.a1",   0x10000, 0x41a46e75, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12101.a5",           0x10000, 0x6146492b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12099.a2",           0x10000, 0x3e243b45, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12124.b9",           0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.b10",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.b11",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a7",           0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Wb32d)
-STD_ROM_FN(Wb32d)
-
-static struct BurnRomInfo Wb33RomDesc[] = {
-	{ "epr-12137.a7",   0x20000, 0x6f81238e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12136.a5",   0x20000, 0x4cf05003, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0089.key",   0x02000, 0x597d30d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wb33)
-STD_ROM_FN(Wb33)
-
-static struct BurnRomInfo Wb33dRomDesc[] = {
-	{ "bootleg_epr-12137.a7",   0x20000, 0x18a898af, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12136.a5",   0x20000, 0xe3d21248, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12124.a14",          0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.a15",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.a16",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a10",          0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wb33d)
-STD_ROM_FN(Wb33d)
-
-static struct BurnRomInfo Wb34RomDesc[] = {
-	{ "epr-12131.a7",   0x20000, 0xb95ecf88, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12128.a5",   0x20000, 0xb711372b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-		
-	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "317-0087.key",   0x02000, 0x162cb531, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wb34)
-STD_ROM_FN(Wb34)
-
-static struct BurnRomInfo Wb34dRomDesc[] = {
-	{ "bootleg_epr-12131.a7",   0x20000, 0x64e864b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12128.a5",   0x20000, 0x1b0fdaec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "epr-12124.a14",          0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12125.a15",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
-	{ "epr-12126.a16",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12127.a10",          0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wb34d)
-STD_ROM_FN(Wb34d)
-
-static struct BurnRomInfo Wb3bblRomDesc[] = {
-	{ "wb3_03",         0x10000, 0x0019ab3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "wb3_05",         0x10000, 0x196e17ee, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "wb3_02",         0x10000, 0xc87350cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "wb3_04",         0x10000, 0x565d5035, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "wb3_14",         0x10000, 0xd3f20bca, SYS16_ROM_TILES | BRF_GRA },
-	{ "wb3_15",         0x10000, 0x96ff9d52, SYS16_ROM_TILES | BRF_GRA },
-	{ "wb3_16",         0x10000, 0xafaf0d31, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "epr12090.b1",    0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12094.b5",    0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12091.b2",    0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12095.b6",    0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12092.b3",    0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12096.b7",    0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12093.b4",    0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "epr12097.b8",    0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr12127.a10",   0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-};
-
-
-STD_ROM_PICK(Wb3bbl)
-STD_ROM_FN(Wb3bbl)
-
-static struct BurnRomInfo WrestwarRomDesc[] = {
-	{ "epr-12372.a7",   0x20000, 0xeeaba126, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12371.a5",   0x20000, 0x6714600a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0103.c2",    0x01000, 0xaa0710f5, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG }, // Intel i8751 protection MCU
-
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wrestwar)
-STD_ROM_FN(Wrestwar)
-
-static struct BurnRomInfo Wrestwar1RomDesc[] = {
-	{ "epr-12145.a7",   0x20000, 0x2af51e2e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12143.a5",   0x20000, 0x4131e345, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0090.key",   0x02000, 0xb7c24c4a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wrestwar1)
-STD_ROM_FN(Wrestwar1)
-
-static struct BurnRomInfo Wrestwar1dRomDesc[] = {
-	{ "bootleg_epr-12145.a7",   0x20000, 0x6a50d373, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12143.a5",   0x20000, 0x02e24543, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12146.a8",           0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12144.a6",           0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12150.a14",          0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12151.a15",          0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12152.a16",          0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12153.b1",           0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12157.b5",           0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12154.b2",           0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12158.b6",           0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12155.b3",           0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12159.b7",           0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12156.b4",           0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12160.b8",           0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12141.a1",           0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12161.b10",          0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12142.a2",           0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12162.b11",          0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12147.a10",          0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12148.a11",          0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12149.a12",          0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wrestwar1d)
-STD_ROM_FN(Wrestwar1d)
-
-static struct BurnRomInfo Wrestwar2RomDesc[] = {
-	{ "epr-12370.a7",   0x20000, 0xcb5dbb76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12369.a5",   0x20000, 0x6f47dd2f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
-	
-	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-	
-	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "317-0102.key",   0x02000, 0x28ba1bf0, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
-	
-	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wrestwar2)
-STD_ROM_FN(Wrestwar2)
-
-static struct BurnRomInfo Wrestwar2dRomDesc[] = {
-	{ "bootleg_epr-12370.a7",   0x20000, 0xf4d09243, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "bootleg_epr-12369.a5",   0x20000, 0xd5f5e59a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12146.a8",           0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-	{ "epr-12144.a6",           0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12150.a14",          0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12151.a15",          0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
-	{ "mpr-12152.a16",          0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
-
-	{ "mpr-12153.b1",           0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12157.b5",           0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12154.b2",           0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12158.b6",           0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12155.b3",           0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "mpr-12159.b7",           0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12156.b4",           0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12160.b8",           0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12141.a1",           0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12161.b10",          0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12142.a2",           0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
-	{ "opr-12162.b11",          0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
-
-	{ "epr-12147.a10",          0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
-
-	{ "mpr-12148.a11",          0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
-	{ "mpr-12149.a12",          0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
-	
-	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
-};
-
-
-STD_ROM_PICK(Wrestwar2d)
-STD_ROM_FN(Wrestwar2d)
-
-/*====================================================
-Bootleg Z80 Handling
-====================================================*/
-
-UINT8 __fastcall BootlegZ80PortRead(UINT16 a)
-{
-	a &= 0xff;
-	
-	switch (a) {
-		case 0x01: {
-			return BurnYM2151Read();
-		}
-		
-		case 0x40:
-		case 0xc0: {
-			return System16SoundLatch;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("Z80 Read Port -> %02X\n"), a);
-#endif
-
-	return 0;
-}
-
-void __fastcall BootlegZ80PortWrite(UINT16 a, UINT8 d)
-{
-	a &= 0xff;
-	d &= 0xff;
-	
-	switch (a) {
-		case 0x00: {
-			BurnYM2151SelectRegister(d);
-			return;
-		}
-		
-		case 0x01: {
-			BurnYM2151WriteRegister(d);
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("Z80 Write Port -> %02X, %02X\n"), a, d);
-#endif
-}
-
-UINT8 __fastcall BootlegZ80Read(UINT16 a)
-{
-	switch (a) {
-		case 0xe000:
-		case 0xe800: {
-			ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
-			return System16SoundLatch;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("Z80 Read -> %04X\n"), a);
-#endif
-
-	return 0;
-}
-
-#if 0 && defined FBNEO_DEBUG
-void __fastcall BootlegZ80Write(UINT16 a, UINT8 d)
-{
-
-	bprintf(PRINT_NORMAL, _T("Z80 Write -> %04X, %02X\n"), a, d);
-}
-#endif
-
-void BootlegMapZ80()
-{
-	ZetMapArea(0x0000, 0x7fff, 0, System16Z80Rom);
-	ZetMapArea(0x0000, 0x7fff, 2, System16Z80Rom);
-
-	ZetMapArea(0xf800, 0xffff, 0, System16Z80Ram);
-	ZetMapArea(0xf800, 0xffff, 1, System16Z80Ram);
-	ZetMapArea(0xf800, 0xffff, 2, System16Z80Ram);
-	
-	ZetSetReadHandler(BootlegZ80Read);
-#if 0 && defined FBNEO_DEBUG
-	ZetSetWriteHandler(BootlegZ80Write);
-#endif
-	ZetSetInHandler(BootlegZ80PortRead);
-	ZetSetOutHandler(BootlegZ80PortWrite);
-}
-
-/*====================================================
-Memory Handlers - used by games not using the mapper
-====================================================*/
-
-static UINT8 __fastcall System16BReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0xc41001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0xc41003: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0xc41005: {
-			return System16Dip[2];
-		}
-		
-		case 0xc41007: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0xc42001: {
-			return System16Dip[0];
-		}
-
-		case 0xc42003: {
-			return System16Dip[1];
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
-#endif
-
-	return 0xff;
-}
-
-static void __fastcall System16BWriteByte(UINT32 a, UINT8 d)
-{
-	if (a >= 0x400000 && a <= 0x40ffff) {
-		System16BTileByteWrite((a - 0x400000) ^ 1, d);
-		return;
-	}
-
-	switch (a) {
-		case 0xc40001: {
-			System16VideoEnable = d & 0x20;
-			System16ScreenFlip = d & 0x40;
-			return;
-		}
-		
-		case 0xfe0007: {
-			System16SoundLatch = d;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-#endif
-}
-
-static void __fastcall System16BWriteWord(UINT32 a, UINT16 d)
-{
-	if (a >= 0x400000 && a <= 0x40ffff) {
-		System16BTileWordWrite(a - 0x400000, d);
-		return;
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
-#endif
-}
-
-static INT16 AceattacTrack1X = 0;
-static INT16 AceattacTrack1Y = 0;
-static INT16 AceattacTrack2X = 0;
-static INT16 AceattacTrack2Y = 0;
-static INT8 AceattacDial1 = 0;
-static INT8 AceattacDial2 = 0;
-
-static void AceattacMakeAnalogInputs()
-{
-	if (System16InputPort3[0]) AceattacTrack1X += 0x40;
-	if (System16InputPort3[1]) AceattacTrack1X -= 0x40;
-	if (AceattacTrack1X >= 0x100) AceattacTrack1X = 0;
-	if (AceattacTrack1X < 0) AceattacTrack1X = 0xfd;
-	
-	if (System16InputPort3[2]) AceattacTrack1Y -= 0x40;
-	if (System16InputPort3[3]) AceattacTrack1Y += 0x40;
-	if (AceattacTrack1Y >= 0x100) AceattacTrack1Y = 0;
-	if (AceattacTrack1Y < 0) AceattacTrack1Y = 0xfd;
-	
-	if (System16InputPort4[0]) AceattacDial1 += 0x01;
-	if (System16InputPort4[1]) AceattacDial1 -= 0x01;
-	if (AceattacDial1 >= 0x10) AceattacDial1 = 0;
-	if (AceattacDial1 < 0) AceattacDial1 = 0x0f;
-	
-	if (System16InputPort3[4]) AceattacTrack2X += 0x40;
-	if (System16InputPort3[5]) AceattacTrack2X -= 0x40;
-	if (AceattacTrack2X >= 0x100) AceattacTrack2X = 0;
-	if (AceattacTrack2X < 0) AceattacTrack2X = 0xfd;
-	
-	if (System16InputPort3[6]) AceattacTrack2Y -= 0x40;
-	if (System16InputPort3[7]) AceattacTrack2Y += 0x40;
-	if (AceattacTrack2Y >= 0x100) AceattacTrack2Y = 0;
-	if (AceattacTrack2Y < 0) AceattacTrack2Y = 0xfd;
-	
-	if (System16InputPort4[2]) AceattacDial2 += 0x01;
-	if (System16InputPort4[3]) AceattacDial2 -= 0x01;
-	if (AceattacDial2 >= 0x10) AceattacDial2 = 0;
-	if (AceattacDial2 < 0) AceattacDial2 = 0x0f;
-}
-
-static UINT8 AceattacReadIO(UINT32 offset)
-{
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x0802: {
-			return AceattacDial1 | (AceattacDial2 << 4);
-		}
-		
-		case 0x1000: {
-			return System16Dip[0];
-		}
-		
-		case 0x1001: {
-			return System16Dip[1];
-		}
-		
-		case 0x1800: {
-			return AceattacTrack1X & 0xff;
-		}
-		
-		case 0x1801: {
-			return ((AceattacTrack1X >> 8) & 0x0f) | (System16Input[2] & 0xf0);
-		}
-		
-		case 0x1802: {
-			return AceattacTrack1Y & 0xff;
-		}
-		
-		case 0x1803: {
-			return ((AceattacTrack1Y >> 8) & 0x0f);
-		}
-		
-		case 0x1808: {
-			return AceattacTrack2X & 0xff;
-		}
-		
-		case 0x1809: {
-			return ((AceattacTrack2X >> 8) & 0x0f) | (System16Input[6] & 0xf0);
-		}
-		
-		case 0x180a: {
-			return AceattacTrack2Y & 0xff;
-		}
-		
-		case 0x180b: {
-			return ((AceattacTrack2Y >> 8) & 0xff);
-		}
-		
-		case 0x1810: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0x1811: {
-			return 0xff - System16Input[5];
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static UINT8 Afighter_Accel_Read()
-{
-	UINT8 accel = System16AnalogPort1 >> 13;
-	if (accel > 4) accel = 4;
-	
-	switch (accel) {
-		case 0x00: return (1 << 2);
-		case 0x01: return (1 << 2);
-		case 0x02: return (1 << 1);
-		case 0x03: return (1 << 0);
-		case 0x04: return 0;
-	}
-	
-	return 0;
-}
-
-static UINT8 Afighter_Steer_Left_Read()
-{
-	UINT8 steer = System16AnalogPort0 >> 12;
-	switch (steer) {
-		case 0x00: return (1 << 0);
-		case 0x01: return (1 << 1);
-		case 0x02: return (1 << 2);
-		case 0x03: return (1 << 3);
-		case 0x04: return (1 << 4);
-		case 0x05: return (1 << 5);
-		case 0x06: return (1 << 6);
-		case 0x07: return (1 << 7);
-	}
-	
-	return 0;
-}
-
-static UINT8 Afighter_Steer_Right_Read()
-{
-	UINT8 steer = System16AnalogPort0 >> 12;
-	switch (steer) {
-//		case 0x08: return (1 << 7);
-		case 0x09: return (1 << 6);
-		case 0x0a: return (1 << 5);
-		case 0x0b: return (1 << 4);
-		case 0x0c: return (1 << 3);
-		case 0x0d: return (1 << 2);
-		case 0x0e: return (1 << 1);
-		case 0x0f: return (1 << 0);
-	}
-	
-	return 0;
-}
-
-static UINT8 __fastcall AfighterAnalogReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0xc41001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0xc41003: {
-			return 0xff - System16Input[1] - Afighter_Accel_Read();
-		}
-		
-		case 0xc41005: {
-			return 0xff - Afighter_Steer_Right_Read();
-		}
-		
-		case 0xc41007: {
-			return 0xff - Afighter_Steer_Left_Read();
-		}
-		
-		case 0xc42001: {
-			return System16Dip[0];
-		}
-
-		case 0xc42003: {
-			return System16Dip[1];
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
-#endif
-
-	return 0xff;
-}
-
-static void __fastcall AltbeastblSoundWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0xc42007: {
-			System16SoundLatch = d;
-			bprintf(PRINT_NORMAL, _T("Sound Latch Wrote %x\n"), d);
-//			ZetOpen(0);
-//			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-//			ZetClose();
-			return;
-		}
-	}
-}
-
-static void __fastcall AltbeastblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0x418000: {
-			System16ScrollY[0] = d + 1;
-			return;
-		}
-	
-		case 0x418008: {
-			System16ScrollX[0] = ((d ^ 0xffff) & 0x3ff) + 2;
-			return;
-		}
-		
-		case 0x418010: {
-			System16ScrollY[1] = d + 1;
-			return;
-		}
-		
-		case 0x418018: {
-			System16ScrollX[1] = ((d ^ 0xffff) & 0x3ff) + 4;
-			return;
-		}
-		
-		case 0x418020: {
-			BootlegBgPage[3] = (d >> 0) & 0xf;
-			BootlegFgPage[3] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0x418022: {
-			BootlegBgPage[2] = (d >> 0) & 0xf;
-			BootlegFgPage[2] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0x418024: {
-			BootlegBgPage[1] = (d >> 0) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0x418026: {
-			BootlegBgPage[0] = (d >> 0) & 0xf;
-			BootlegFgPage[0] = (d >> 4) & 0xf;
-			return;
-		}
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
-#endif
-}
-
-static void __fastcall DduxblGfxWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0xc46021: {
-			BootlegFgPage[1] = d & 0xf;
-			BootlegBgPage[1] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0xc46023: {
-			BootlegFgPage[0] = d & 0xf;
-			BootlegBgPage[0] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0xc46025: {
-			BootlegFgPage[3] = d & 0xf;
-			BootlegBgPage[3] = (d >> 4) & 0xf;
-			return;
-		}
-		
-		case 0xc46027: {
-			BootlegFgPage[2] = d & 0xf;
-			BootlegBgPage[2] = (d >> 4) & 0xf;
-			return;
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-#endif
-}
-
-static void __fastcall DduxblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0xc46000: {
-			System16ScrollY[1] = d;
-			return;
-		}
-		
-		case 0xc46008: {
-			System16ScrollX[1] = (d ^ 0xffff) & 0x1ff;
-			return;
-		}
-		
-		case 0xc46010: {
-			System16ScrollY[0] = d;
-			return;
-		}
-		
-		case 0xc46018: {
-			System16ScrollX[0] = (d ^ 0xffff) & 0x1ff;
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
-#endif
-}
-
-static void __fastcall DduxblWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x3f0001: {
-			if (System16TileBanks[0] != (d & 0x07)) {
-				System16TileBanks[0] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3f0003: {
-			if (System16TileBanks[1] != (d & 0x07)) {
-				System16TileBanks[1] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0xc40001: {
-			System16VideoEnable = d & 0x20;
-			System16ScreenFlip = d & 0x40;
-			return;
-		}
-		
-		case 0xc40007: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-#endif
-}
-
-static INT16 DunkshotTrack1X = 0;
-static INT16 DunkshotTrack1Y = 0;
-static INT16 DunkshotTrack2X = 0;
-static INT16 DunkshotTrack2Y = 0;
-static INT16 DunkshotTrack3X = 0;
-static INT16 DunkshotTrack3Y = 0;
-static INT16 DunkshotTrack4X = 0;
-static INT16 DunkshotTrack4Y = 0;
-
-static void DunkshotMakeAnalogInputs()
-{
-	if (System16InputPort2[0]) DunkshotTrack1X += 0x40;
-	if (System16InputPort2[1]) DunkshotTrack1X -= 0x40;
-	if (DunkshotTrack1X >= 0x1000) DunkshotTrack1X = 0;
-	if (DunkshotTrack1X < 0) DunkshotTrack1X = 0xfc0;
-	
-	if (System16InputPort2[2]) DunkshotTrack1Y -= 0x40;
-	if (System16InputPort2[3]) DunkshotTrack1Y += 0x40;
-	if (DunkshotTrack1Y >= 0x1000) DunkshotTrack1Y = 0;
-	if (DunkshotTrack1Y < 0) DunkshotTrack1Y = 0xfc0;
-	
-	if (System16InputPort2[4]) DunkshotTrack2X += 0x40;
-	if (System16InputPort2[5]) DunkshotTrack2X -= 0x40;
-	if (DunkshotTrack2X >= 0x1000) DunkshotTrack2X = 0;
-	if (DunkshotTrack2X < 0) DunkshotTrack2X = 0xfc0;
-	
-	if (System16InputPort2[6]) DunkshotTrack2Y -= 0x40;
-	if (System16InputPort2[7]) DunkshotTrack2Y += 0x40;
-	if (DunkshotTrack2Y >= 0x1000) DunkshotTrack2Y = 0;
-	if (DunkshotTrack2Y < 0) DunkshotTrack2Y = 0xfc0;
-	
-	if (System16InputPort3[0]) DunkshotTrack3X += 0x40;
-	if (System16InputPort3[1]) DunkshotTrack3X -= 0x40;
-	if (DunkshotTrack3X >= 0x1000) DunkshotTrack3X = 0;
-	if (DunkshotTrack3X < 0) DunkshotTrack3X = 0xfc0;
-	
-	if (System16InputPort3[2]) DunkshotTrack3Y -= 0x40;
-	if (System16InputPort3[3]) DunkshotTrack3Y += 0x40;
-	if (DunkshotTrack3Y >= 0x1000) DunkshotTrack3Y = 0;
-	if (DunkshotTrack3Y < 0) DunkshotTrack3Y = 0xfc0;
-
-	if (System16InputPort3[4]) DunkshotTrack4X += 0x40;
-	if (System16InputPort3[5]) DunkshotTrack4X -= 0x40;
-	if (DunkshotTrack4X >= 0x1000) DunkshotTrack4X = 0;
-	if (DunkshotTrack4X < 0) DunkshotTrack4X = 0xfc0;
-	
-	if (System16InputPort3[6]) DunkshotTrack4Y -= 0x40;
-	if (System16InputPort3[7]) DunkshotTrack4Y += 0x40;
-	if (DunkshotTrack4Y >= 0x1000) DunkshotTrack4Y = 0;
-	if (DunkshotTrack4Y < 0) DunkshotTrack4Y = 0xfc0;
-}
-
-static UINT8 DunkshotReadIO(UINT32 offset)
-{
-	switch (offset & (0x3000 / 2)) {
-		case 0x3000 / 2: {
-			switch (offset & 0x0f) {
-				case 0x00: return DunkshotTrack1X & 0xff;
-				case 0x01: return DunkshotTrack1X >> 8;
-				case 0x02: return DunkshotTrack1Y & 0xff;
-				case 0x03: return DunkshotTrack1Y >> 8;
-				case 0x04: return DunkshotTrack2X & 0xff;
-				case 0x05: return DunkshotTrack2X >> 8;
-				case 0x06: return DunkshotTrack2Y & 0xff;
-				case 0x07: return DunkshotTrack2Y >> 8;
-				case 0x08: return DunkshotTrack3X & 0xff;
-				case 0x09: return DunkshotTrack3X >> 8;
-				case 0x0a: return DunkshotTrack3Y & 0xff;
-				case 0x0b: return DunkshotTrack3Y >> 8;
-				case 0x0c: return DunkshotTrack4X & 0xff;
-				case 0x0d: return DunkshotTrack4X >> 8;
-				case 0x0e: return DunkshotTrack4Y & 0xff;
-				case 0x0f: return DunkshotTrack4Y >> 8;
-			}
-			break;
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static void __fastcall EswatblBankWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x3e2001: {
-			if (System16TileBanks[0] != (d & 0x07)) {
-				System16TileBanks[0] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3e2003: {
-			if (System16TileBanks[1] != (d & 0x07)) {
-				System16TileBanks[1] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-	}
-}
-
-static void __fastcall EswatblSoundWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0xc42007: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-	}
-}
-
-static void __fastcall EswatblGfxWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x418031: {
-			System16TileBanks[1] = d & 7;
-			return;
-		}
-	}
-}
-
-static void __fastcall EswatblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0x418000: {
-			System16ScrollY[0] = d;
-			return;
-		}
-	
-		case 0x418008: {
-			System16ScrollX[0] = (d ^ 0xffff);
-			return;
-		}
-		
-		case 0x418010: {
-			System16ScrollY[1] = d;
-			return;
-		}
-		
-		case 0x418018: {
-			System16ScrollX[1] = (d ^ 0xffff);
-			return;
-		}
-		
-		case 0x418020: {
-			BootlegFgPage[3] = (d >> 12) & 0xf;
-			BootlegFgPage[2] = (d >> 8) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			BootlegFgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-		
-		case 0x418028: {
-			BootlegBgPage[3] = (d >> 12) & 0xf;
-			BootlegBgPage[2] = (d >> 8) & 0xf;
-			BootlegBgPage[1] = (d >> 4) & 0xf;
-			BootlegBgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
-#endif
-}
-
-static INT16 ExctleagTrack1X = 0;
-static INT16 ExctleagTrack1Y = 0;
-static INT16 ExctleagTrack2X = 0;
-static INT16 ExctleagTrack2Y = 0;
-
-static void ExctleagMakeAnalogInputs()
-{
-	if (System16InputPort4[0]) ExctleagTrack1X += 0x1;
-	if (System16InputPort4[1]) ExctleagTrack1X -= 0x1;
-	if (ExctleagTrack1X >= 0x100) ExctleagTrack1X = 0;
-	if (ExctleagTrack1X < 0) ExctleagTrack1X = 0xff;
-	
-	if (System16InputPort4[2]) ExctleagTrack1Y -= 0x1;
-	if (System16InputPort4[3]) ExctleagTrack1Y += 0x1;
-	if (ExctleagTrack1Y >= 0x100) ExctleagTrack1Y = 0;
-	if (ExctleagTrack1Y < 0) ExctleagTrack1Y = 0xff;
-	
-	if (System16InputPort4[4]) ExctleagTrack2X += 0x4;
-	if (System16InputPort4[5]) ExctleagTrack2X -= 0x4;
-	if (ExctleagTrack2X >= 0x100) ExctleagTrack2X = 0;
-	if (ExctleagTrack2X < 0) ExctleagTrack2X = 0xfc;
-	
-	if (System16InputPort4[6]) ExctleagTrack2Y -= 0x4;
-	if (System16InputPort4[7]) ExctleagTrack2Y += 0x4;
-	if (ExctleagTrack2Y >= 0x100) ExctleagTrack2Y = 0;
-	if (ExctleagTrack2Y < 0) ExctleagTrack2Y = 0xfc;
-}
-
-static UINT8 ExctleagReadIO(UINT32 offset)
-{
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x0801: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0x0802: {
-			return 0xff - System16Input[3];
-		}
-		
-		case 0x0803: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0x1000: {
-			return System16Dip[0];
-		}
-
-		case 0x1001: {
-			return System16Dip[1];
-		}
-		
-		case 0x1800:
-		case 0x1801: {
-			return ExctleagTrack1X;
-		}
-		
-		case 0x1802:
-		case 0x1803: {
-			return ExctleagTrack1Y;
-		}
-		
-		case 0x1804:
-		case 0x1805: {
-			return ExctleagTrack2X;
-		}
-		
-		case 0x1806:
-		case 0x1807: {
-			return ExctleagTrack2Y;
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static UINT8 __fastcall FpointblReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0x601001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x601003: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0x601005: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0x600001: {
-			return System16Dip[0];
-		}
-
-		case 0x600003: {
-			return System16Dip[1];
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
-#endif
-
-	return 0xff;
-}
-
-static void __fastcall FpointblWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x600007: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-
-		}
-		
-		case 0x843001: {
-			System16VideoEnable = d & 0x20;
-			System16ScreenFlip = d & 0x40;
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-#endif
-}
-
-static void __fastcall FpointblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0xc46000: {
-			System16ScrollY[0] = d;
-			return;
-		}
-	
-		case 0xc46008: {
-			System16ScrollX[0] = (d ^ 0xffff);
-			return;
-		}
-		
-		case 0xc46010: {
-			System16ScrollY[1] = d + 2;
-			return;
-		}
-		
-		case 0xc46018: {
-			System16ScrollX[1] = (d ^ 0xffff);
-			return;
-		}
-		
-		case 0xc46022: {
-			BootlegFgPage[3] = (d >> 12) & 0xf;
-			BootlegFgPage[2] = (d >> 8) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			BootlegFgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-		
-		case 0xc46026: {
-			BootlegBgPage[0] = (d >> 12) & 0xf;
-			BootlegBgPage[1] = (d >> 8) & 0xf;
-			BootlegBgPage[2] = (d >> 4) & 0xf;
-			BootlegBgPage[3] = (d >> 0) & 0xf;			
-			return;
-		}
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
-#endif
-}
-
-static UINT8 HwchampInputVal;
-
-static UINT8 HwchampReadIO(UINT32 offset)
-{
-	UINT16 result;
-	
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x1000: {
-			return System16Dip[1];
-		}
-		
-		case 0x1001: {
-			return System16Dip[0];
-		}
-	
-		case 0x1810:
-		case 0x1811:
-		case 0x1812:
-		case 0x1818: 
-		case 0x1819: 
-		case 0x181a: {
-			result = (HwchampInputVal & 0x80) >> 7;
-			HwchampInputVal <<= 1;
-			return result & 0xff;
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static void HwchampWriteIO(UINT32 offset, UINT8 d)
-{
-	UINT8 temp = 0;
-	
-	switch (offset) {
-		case 0x1810:
-		case 0x1818: {
-			temp = 0x80 + (System16AnalogPort0 >> 4);
-			if (temp < 0x01) temp = 0x01;
-			if (temp > 0xfe) temp = 0xfe;
-			HwchampInputVal = temp;
-			return;
-		}
-		
-		case 0x1811:
-		case 0x1819: {
-			temp = 0x26;
-			if (System16AnalogPort2 > 1) temp = 0xfe;
-			HwchampInputVal = temp;
-			return;
-		}
-		
-		case 0x1812:
-		case 0x181a: {
-			temp = 0x26;
-			if (System16AnalogPort1 > 1) temp = 0xfe;
-			HwchampInputVal = temp;
-			return;
-		}
-	}
-
-	sega_315_5195_io_write(offset, d);
-}
-
-static UINT8 __fastcall LockonphZ80PortRead(UINT16 a)
-{
-	a &= 0xff;
-	
-	switch (a) {
-		case 0x01: {
-			return BurnYM2151Read();
-		}
-		
-		case 0x80: {
-			return MSM6295Read(0);
-		}
-		
-		case 0xc0: {
-			ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
-			return System16SoundLatch;
-		}
-	}
-	
-	bprintf(PRINT_NORMAL, _T("Z80 Read Port -> %02X\n"), a);
-
-	return 0;
-}
-
-static void __fastcall LockonphZ80PortWrite(UINT16 a, UINT8 d)
-{
-	a &= 0xff;
-	d &= 0xff;
-	
-	switch (a) {
-		case 0x00: {
-			BurnYM2151SelectRegister(d);
-			return;
-		}
-		
-		case 0x01: {
-			BurnYM2151WriteRegister(d);
-			return;
-		}
-		
-		case 0x40: {
-			return;
-		}
-		
-		case 0x80: {
-			MSM6295Write(0, d);
-			return;
-		}
-	}
-
-	bprintf(PRINT_NORMAL, _T("Z80 Write Port -> %02X, %02X\n"), a, d);
-}
-
-static UINT8 __fastcall LockonphReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0xc41001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0xc41003: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0xc41005: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0xc42001: {
-			return System16Dip[0];
-		}
-		
-		case 0xc42003: {
-			return System16Dip[1];
-		}
-	}
-	
-	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
-	
-	return 0;
-}
-
-static void __fastcall LockonphWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x3f0001: {
-			if (System16TileBanks[0] != (d & 0x07)) {
-				System16TileBanks[0] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3f0003: {
-			if (System16TileBanks[1] != (d & 0x07)) {
-				System16TileBanks[1] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x777707: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-		
-		case 0xc40001: {
-			return;
-		}
-	}
-	
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-}
-
-static UINT16 __fastcall LockonphReadWord(UINT32 a)
-{
-	bprintf(PRINT_NORMAL, _T("68000 Read Word -> 0x%06X\n"), a);
-	
-	return 0;
-}
-
-static void __fastcall LockonphWriteWord(UINT32 a, UINT16 d)
-{
-	if (a >= 0x400000 && a <= 0x40ffff) {
-		System16BTileWordWrite(a - 0x400000, d);
-		return;
-	}
-
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
-}
-
-static void __fastcall PassshtbGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0xc46000: {
-			System16ScrollY[0] = d;
-			return;
-		}
-	
-		case 0xc46002: {
-			System16ScrollX[0] = (d ^ 0xffff) & 0x1ff;
-			return;
-		}
-		
-		case 0xc46004: {
-			System16ScrollY[1] = d;
-			return;
-		}
-		
-		case 0xc46006: {
-			System16ScrollX[1] = (d ^ 0xffff) & 0x1ff;
-			return;
-		}
-		
-/*		case 0xc46022: {
-			BootlegFgPage[3] = (d >> 12) & 0xf;
-			BootlegFgPage[2] = (d >> 8) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			BootlegFgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-		
-		case 0xc46026: {
-			BootlegBgPage[0] = (d >> 12) & 0xf;
-			BootlegBgPage[1] = (d >> 8) & 0xf;
-			BootlegBgPage[2] = (d >> 4) & 0xf;
-			BootlegBgPage[3] = (d >> 0) & 0xf;			
-			return;
-		}*/
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, (d ^ 0xffff) & 0x1ff);
-#endif
-}
-
-static INT16 SdiTrack1X = 0;
-static INT16 SdiTrack1Y = 0;
-static INT16 SdiTrack2X = 0;
-static INT16 SdiTrack2Y = 0;
-
-static void SdibMakeAnalogInputs()
-{
-	SdiTrack1X -= (System16AnalogPort0 >> 8) & 0xff;
-	SdiTrack1Y += (System16AnalogPort1 >> 8) & 0xff;
-	
-	SdiTrack2X -= (System16AnalogPort2 >> 8) & 0xff;
-	SdiTrack2Y += (System16AnalogPort3 >> 8) & 0xff;
-}
-
-static UINT8 SdibReadIO(UINT32 offset)
-{
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x0802: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0x1000: {
-			return System16Dip[1];
-		}
-		
-		case 0x1001: {
-			return System16Dip[0];
-		}
-		
-		case 0x1800: {
-			return SdiTrack1X;
-		}
-		
-		case 0x1802: {
-			return SdiTrack1Y;
-		}
-		
-		case 0x1804: {
-			return SdiTrack2X;
-		}
-		
-		case 0x1806: {
-			return SdiTrack2Y;
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static UINT8 __fastcall SdiblReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0xc41001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0xc41005: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0xc42003: {
-			return System16Dip[1];
-		}
-		
-		case 0xc42005: {
-			return System16Dip[0];
-		}
-		
-		case 0xc43001: {
-			return SdiTrack1X;
-		}
-		
-		case 0xc43005: {
-			return SdiTrack1Y;
-		}
-		
-		case 0xc43009: {
-			return SdiTrack2X;
-		}
-		
-		case 0xc4300d: {
-			return SdiTrack2Y;
-		}
-	}
-	
-	return 0xff;
-}
-
-static void __fastcall SdiblSoundWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0x123407: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-	}
-}
-
-static UINT8 MahjongInputNum;
-
-static UINT8 SjryukoReadIO(UINT32 offset)
-{
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0x0801: {
-			if (System16Input[MahjongInputNum + 1] != 0xff) return 0xff & ~(1 << MahjongInputNum);
-			return 0xff;
-		}
-		
-		case 0x802: {
-			return 0xff - System16Input[MahjongInputNum + 1];
-		}
-		
-		case 0x803: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0x1000: {
-			return System16Dip[0];
-		}
-
-		case 0x1001: {
-			return System16Dip[1];
-		}
-	}
-	
-	return sega_315_5195_io_read(offset);
-}
-
-static void SjryukoWriteIO(UINT32 offset, UINT8 d)
-{
-	switch (offset) {
-		case 0x0001: {
-			System16VideoEnable = d & 0x20;
-			System16ScreenFlip = d & 0x40;
-			if (d & 4) MahjongInputNum = (MahjongInputNum + 1) % 6;
-			return;
-		}
-	}
-	
-	sega_315_5195_io_write(offset, d);
-}
-
-static void __fastcall TetrisblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0x418000: {
-			System16ScrollY[0] = d;
-			return;
-		}
-	
-		case 0x418008: {
-			System16ScrollX[0] = (d ^ 0xffff) & 0x3ff;
-			return;
-		}
-		
-		case 0x418010: {
-			System16ScrollY[1] = d;
-			return;
-		}
-		
-		case 0x418018: {
-			System16ScrollX[1] = ((d ^ 0xffff) & 0x3ff) + 2;
-			return;
-		}
-		
-		case 0x418020: {
-			BootlegFgPage[3] = (d >> 12) & 0xf;
-			BootlegFgPage[2] = (d >> 8) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			BootlegFgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-		
-		case 0x418028: {
-			BootlegBgPage[0] = (d >> 12) & 0xf;
-			BootlegBgPage[1] = (d >> 8) & 0xf;
-			BootlegBgPage[2] = (d >> 4) & 0xf;
-			BootlegBgPage[3] = (d >> 0) & 0xf;
-			return;
-		}
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, (d ^ 0xffff) & 0x3ff);
-#endif
-}
-
-static void __fastcall TetrisblSndWriteByte(UINT32 a, UINT8 d)
-{
-	switch (a) {
-		case 0xc42007: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-	}
-}
-
-static void __fastcall Wb3bblGfxWriteWord(UINT32 a, UINT16 d)
-{
-	switch (a) {
-		case 0xc46000: {
-			System16ScrollY[0] = d;
-			return;
-		}
-	
-		case 0xc46002: {
-			System16ScrollX[0] = (d ^ 0xffff) & 0x3ff;
-			return;
-		}
-		
-		case 0xc46004: {
-			System16ScrollY[1] = d;
-			return;
-		}
-		
-		case 0xc46006: {
-			System16ScrollX[1] = (d ^ 0xffff) & 0x3ff;
-			return;
-		}
-		
-/*		case 0xc46022: {
-			BootlegFgPage[3] = (d >> 12) & 0xf;
-			BootlegFgPage[2] = (d >> 8) & 0xf;
-			BootlegFgPage[1] = (d >> 4) & 0xf;
-			BootlegFgPage[0] = (d >> 0) & 0xf;
-			return;
-		}
-		
-		case 0xc46026: {
-			BootlegBgPage[0] = (d >> 12) & 0xf;
-			BootlegBgPage[1] = (d >> 8) & 0xf;
-			BootlegBgPage[2] = (d >> 4) & 0xf;
-			BootlegBgPage[3] = (d >> 0) & 0xf;			
-			return;
-		}*/
-	}
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
-#endif
-}
-
-/*====================================================
-Driver Inits
-====================================================*/
-
-static INT32 Fantzn2xPlaneOffsets[3] = { 1, 2, 3 };
-static INT32 Fantzn2xXOffsets[8]     = { 0, 4, 8, 12, 16, 20, 24, 28 };
-static INT32 Fantzn2xYOffsets[8]     = { 0, 32, 64, 96, 128, 160, 192, 224 };
-static INT32 LockonphPlaneOffsets[4] = { 0x300000, 0x200000, 0x100000, 0 };
-static INT32 LockonphXOffsets[8]     = { 0, 1, 2, 3, 4, 5, 6, 7 };
-static INT32 LockonphYOffsets[8]     = { 0, 8, 16, 24, 32, 40, 48, 56 };
-
-static INT32 AceattacInit()
-{
-	System16MakeAnalogInputsDo = AceattacMakeAnalogInputs;
-	sega_315_5195_custom_io_do = AceattacReadIO;
-	
-	return System16Init();
-}
-
-static INT32 AfighterInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x80000 - 0x40000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x40000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x40000);
-			memset(System16Sprites, 0, 0x40000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x10000);
-			memcpy(System16Sprites + 0x020000, pTemp + 0x10000, 0x10000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x10000);
-			memcpy(System16Sprites + 0x060000, pTemp + 0x30000, 0x10000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 AfighterAnalogInit()
-{
-	INT32 nRet = AfighterInit();
-	
-	if (!nRet) {
-		SekOpen(0);
-		SekSetReadByteHandler(0, AfighterAnalogReadByte);
-		SekClose();
-	}
-	
-	return nRet;
-}
-
-static INT32 AliensynInit()
-{
-	INT32 nRet = System16Init();
-	AlienSyndrome = true;
-	
-	return nRet;
-}
-
-static void Altbeastj_Sim8751()
-{
-	// System Inputs
-	*((UINT16*)(System16Ram + 0x30d0)) = BURN_ENDIAN_SWAP_INT16((UINT16)(System16Input[0] << 8));
-	
-	// Tile Banking
-	INT32 Bank = (System16Ram[0x3094 + 1] << 8) | System16Ram[0x3094 + 0];
-	Bank &= 0xff;
-	Bank = (Bank & 0x01) | ((Bank & 0xfe) << 1);
-	System16TileBanks[1] = Bank & 7;
-	
-	// Sound command
-	UINT16 temp = (System16Ram[0x30d4 + 1] << 8) | System16Ram[0x30d4 + 0];
-	if ((temp & 0xff00) != 0x0000) {
-		System16SoundLatch = temp >> 8;
-		ZetOpen(0);
-		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-		ZetClose();
-		*((UINT16*)(System16Ram + 0x30d4)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff));
-	}
-}
-
-static INT32 AltbeastInit()
-{
-	AltbeastMode = true;
-
-	return System16Init();
-}
-
-static INT32 AltbeastjInit()
-{
-	Simulate8751 = Altbeastj_Sim8751;
-	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1a0000 - 0xe0000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0xe0000);
-			memset(System16Sprites, 0, 0x1a0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 Altbeast6Init()
-{	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1a0000 - 0xe0000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0xe0000);
-			memset(System16Sprites, 0, 0x1a0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 Altbeast4Init()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1a0000 - 0xe0000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0xe0000);
-			memset(System16Sprites, 0, 0x1a0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static void AltbeastblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
-	SekSetWriteWordHandler(1, AltbeastblGfxWriteWord);
-	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
-	SekSetWriteByteHandler(2, AltbeastblSoundWriteByte);
-	SekClose();
-}
-
-static INT32 AltbeastblInit()
-{
-	System16Map68KDo = AltbeastblMap68K;
-	
-	INT32 nRet = System16Init();
-	
-	System16SpriteXOffset = 114;
-	
-	if (!nRet) {
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 AtomicpInit()
-{
-	INT32 nRet = System16Init();
-	
-	System16IgnoreVideoEnable = 1;
-	System16YM2413IRQInterval = 166;
-	
-	return nRet;
-}
-
-static INT32 Blox16bLoadRom()
-{
-	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
-	
-	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-	BurnLoadRom(System16TempGfx, 1, 1);
-	GfxDecode(0x2000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
-	System16NumTiles = 0x2000;
-	BurnFree(System16TempGfx);
-	
-	BurnLoadRom(System16Sprites, 2, 1);
-	BurnByteswap(System16Sprites, System16SpriteRomSize);
-	
-	if (BurnLoadRom(System16Z80Rom, 3, 1)) return 1;
-	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x08000);
-		
-	return 0;
-}
-
-static INT32 Blox16bInit()
-{
-	System16CustomLoadRomDo = Blox16bLoadRom;
-	System16UPD7759DataSize = 0x08000;
-	
-	return System16Init();
-}
-
-static void DduxblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekSetWriteByteHandler(0, DduxblWriteByte);
-	SekMapHandler(2, 0xc46000, 0xc46027, MAP_WRITE);
-	SekSetWriteByteHandler(2, DduxblGfxWriteByte);
-	SekSetWriteWordHandler(2, DduxblGfxWriteWord);
-	SekClose();
-}
-
-static INT32 DduxblInit()
-{
-	System16CustomLoadRomDo = CustomLoadRom40000;
-	System16Map68KDo = DduxblMap68K;
-	
-	System16SpriteXOffset = 112;
-	
-	System16MapZ80Do = BootlegMapZ80;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 DunkshotInit()
-{
-	System16MakeAnalogInputsDo = DunkshotMakeAnalogInputs;
-	sega_315_5195_custom_io_do = DunkshotReadIO;
-	
-	System16BTileAlt = true;
-	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x80000 - 0x40000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x80000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x80000);
-			memset(System16Sprites, 0, 0x80000);
-			memcpy(System16Sprites + 0x00000, pTemp + 0x00000, 0x10000);
-			memcpy(System16Sprites + 0x10000, pTemp + 0x00000, 0x10000);
-			memcpy(System16Sprites + 0x20000, pTemp + 0x10000, 0x10000);
-			memcpy(System16Sprites + 0x30000, pTemp + 0x10000, 0x10000);
-			memcpy(System16Sprites + 0x40000, pTemp + 0x20000, 0x10000);
-			memcpy(System16Sprites + 0x50000, pTemp + 0x20000, 0x10000);
-			memcpy(System16Sprites + 0x60000, pTemp + 0x30000, 0x10000);
-			memcpy(System16Sprites + 0x70000, pTemp + 0x30000, 0x10000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 DunkshotExit()
-{
-	DunkshotTrack1X = 0;
-	DunkshotTrack1Y = 0;
-	DunkshotTrack2X = 0;
-	DunkshotTrack2Y = 0;
-	DunkshotTrack3X = 0;
-	DunkshotTrack3Y = 0;
-	DunkshotTrack4X = 0;
-	DunkshotTrack4Y = 0;
-
-	return System16Exit();
-}
-
-static INT32 DunkshotScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {					// Return minimum compatible version
-		*pnMin =  0x029660;
-	}
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		SCAN_VAR(DunkshotTrack1X);
-		SCAN_VAR(DunkshotTrack1Y);
-		SCAN_VAR(DunkshotTrack2X);
-		SCAN_VAR(DunkshotTrack2Y);
-		SCAN_VAR(DunkshotTrack3X);
-		SCAN_VAR(DunkshotTrack3Y);
-		SCAN_VAR(DunkshotTrack4X);
-		SCAN_VAR(DunkshotTrack4Y);
-	}
-	
-	return System16Scan(nAction, pnMin);;
-}
-
-static void EswatblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0bffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0bffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
-	SekSetWriteWordHandler(1, EswatblGfxWriteWord);
-	SekSetWriteByteHandler(1, EswatblGfxWriteByte);
-	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
-	SekSetWriteByteHandler(2, EswatblSoundWriteByte);
-	SekMapHandler(3, 0x3e2000, 0x3e2003, MAP_WRITE);
-	SekSetWriteByteHandler(3, EswatblBankWriteByte);
-	SekClose();
-}
-
-static INT32 EswatInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 Eswatj1Init()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-	
-	System16TileRomSize = 0x0c0000 - 0x090000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x0c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites + 0x0c0000, 0x0c0000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x000000, 0xc0000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-		
-		System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-		if (System16TempGfx) {
-			BurnLoadRom(System16TempGfx + 0x000000, 4, 1);
-			BurnLoadRom(System16TempGfx + 0x020000, 5, 1);
-			BurnLoadRom(System16TempGfx + 0x040000, 6, 1);
-			BurnLoadRom(System16TempGfx + 0x060000, 7, 1);
-			BurnLoadRom(System16TempGfx + 0x080000, 8, 1);
-			BurnLoadRom(System16TempGfx + 0x0a0000, 9, 1);
-			System16Decode8x8Tiles(System16Tiles, System16NumTiles, System16TileRomSize * 2 / 3, System16TileRomSize * 1 / 3, 0);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(System16TempGfx);
-	}
-	
-	return nRet;
-}
-
-static INT32 EswatblInit()
-{
-	System16Map68KDo = EswatblMap68K;
-	
-	System16SpriteXOffset = 124;
-	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-		
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 ExctleagInit()
-{
-	System16MakeAnalogInputsDo = ExctleagMakeAnalogInputs;
-	sega_315_5195_custom_io_do = ExctleagReadIO;
-	
-	return System16Init();
-}
-
-static INT32 ExctleagExit()
-{
-	ExctleagTrack1X = 0;
-	ExctleagTrack1Y = 0;
-	ExctleagTrack2X = 0;
-	ExctleagTrack2Y = 0;
-
-	return System16Exit();
-}
-
-static INT32 ExctleagScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {					// Return minimum compatible version
-		*pnMin =  0x029660;
-	}
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		SCAN_VAR(ExctleagTrack1X);
-		SCAN_VAR(ExctleagTrack1Y);
-		SCAN_VAR(ExctleagTrack2X);
-		SCAN_VAR(ExctleagTrack2Y);
-	}
-	
-	return System16Scan(nAction, pnMin);;
-}
-
-static INT32 FantzonetaInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x180000 - 0x80000;
-
-	INT32 nRet = System16Init();
-	memcpy(System16Sprites + 0x100000, System16Sprites + 0x040000, 0x40000);
-	
-	return nRet;
-}
-
-static INT32 Fantzn2xLoadRom()
-{
-	return System16LoadRoms(1);
-}
-
-static INT32 Fantzn2xps2LoadRom()
-{
-	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
-	if (BurnLoadRom(System16Rom + 0x40000, 1, 1)) return 1;
-	
-	memcpy(System16Code, System16Rom, 0x100000);
-	
-	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-	BurnLoadRom(System16TempGfx, 2, 1);
-	GfxDecode(0x4000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
-	System16NumTiles = 0x4000;
-	BurnFree(System16TempGfx);
-	
-	BurnLoadRom(System16Sprites, 3, 1);
-	
-	if (BurnLoadRom(System16Z80Rom, 4, 1)) return 1;
-	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x20000);
-		
-	return 0;
-}
-
-static INT32 Fantzn2xInit()
-{
-	System16CustomLoadRomDo = Fantzn2xLoadRom;
-	
-	return System16Init();
-}
-
-static INT32 Fantzn2xps2Init()
-{
-	System16CustomLoadRomDo = Fantzn2xps2LoadRom;
-	System16UPD7759DataSize = 0x20000;
-	
-	return System16Init();
-}
-
-static INT32 FantzntaLoadRom()
-{
-	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
-	
-	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-	BurnLoadRom(System16TempGfx, 1, 1);
-	GfxDecode(0x2000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
-	System16NumTiles = 0x2000;
-	BurnFree(System16TempGfx);
-	
-	BurnLoadRom(System16Sprites, 2, 1);
-	BurnByteswap(System16Sprites, System16SpriteRomSize);
-	
-	if (BurnLoadRom(System16Z80Rom, 3, 1)) return 1;
-	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x10000);
-		
-	return 0;
-}
-
-static INT32 FantzntaInit()
-{
-	System16CustomLoadRomDo = FantzntaLoadRom;
-	System16UPD7759DataSize = 0x10000;
-	
-	return System16Init();
-}
-
-static void FpointblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekSetReadByteHandler(0, FpointblReadByte);
-	SekSetWriteByteHandler(0, FpointblWriteByte);
-	SekMapHandler(1, 0xc46000, 0xc46031, MAP_WRITE);
-	SekSetWriteWordHandler(1, FpointblGfxWriteWord);
-	SekClose();
-}
-
-static INT32 FpointblInit()
-{
-	System16Map68KDo = FpointblMap68K;
-	System16MapZ80Do = BootlegMapZ80;
-	
-	INT32 nRet = System16Init();
-	
-	System16SpriteXOffset = 109;
-	
-	if (!nRet) {
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 GoldnaxeInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 Goldnaxe3Init()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 HwchampInit()
-{
-	sega_315_5195_custom_io_do = HwchampReadIO;
-	sega_315_5195_custom_io_write_do = HwchampWriteIO;
-	
-	return System16Init();
-}
-
-static INT32 HwchampExit()
-{
-	HwchampInputVal = 0;
-	
-	return System16Exit();
-}
-
-static INT32 HwchampScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {					// Return minimum compatible version
-		*pnMin =  0x029660;
-	}
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		SCAN_VAR(HwchampInputVal);
-	}
-	
-	return System16Scan(nAction, pnMin);;
-}
-
-static void LockonphMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0bffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0bffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x841fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xff0000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, LockonphReadByte);
-	SekSetWriteByteHandler(0, LockonphWriteByte);
-	SekSetReadWordHandler(0, LockonphReadWord);
-	SekSetWriteWordHandler(0, LockonphWriteWord);
-	SekClose();
-}
-
-static void LockonphMapZ80()
-{
-	ZetMapArea(0x0000, 0xf7ff, 0, System16Z80Rom);
-	ZetMapArea(0x0000, 0xf7ff, 2, System16Z80Rom);
-
-	ZetMapArea(0xf800, 0xffff, 0, System16Z80Ram);
-	ZetMapArea(0xf800, 0xffff, 1, System16Z80Ram);
-	ZetMapArea(0xf800, 0xffff, 2, System16Z80Ram);
-	
-	ZetSetInHandler(LockonphZ80PortRead);
-	ZetSetOutHandler(LockonphZ80PortWrite);
-}
-
-static INT32 LockonphInit()
-{
-	Lockonph = true;
-	
-	System16Map68KDo = LockonphMap68K;
-	System16MapZ80Do = LockonphMapZ80;
-	
-	System16SpriteRomSize = 0x40000;
-
-	INT32 nRet = System16Init();
-	
-	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-	BurnLoadRom(System16TempGfx + 0x00000, 4, 1);
-	BurnLoadRom(System16TempGfx + 0x20000, 5, 1);
-	BurnLoadRom(System16TempGfx + 0x40000, 6, 1);
-	BurnLoadRom(System16TempGfx + 0x60000, 7, 1);
-	GfxDecode(0x4000, 4, 8, 8, LockonphPlaneOffsets, LockonphXOffsets, LockonphYOffsets, 0x40, System16TempGfx, System16Tiles);
-	System16NumTiles = 0x4000;
-	BurnFree(System16TempGfx);
-	
-	System16ClockSpeed = 8000000;
-	System16Z80ClockSpeed = 4000000;
-	System16IgnoreVideoEnable = 1;
-	System16SpritePalOffset = 0x800;
-	System16YM2413IRQInterval = 166; // used to drive the YM2151
-	
-	return nRet;
-}
-
-static INT32 MvpInit()
-{
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x200000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x200000);
-			memset(System16Sprites, 0, 0x200000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x180000, 0x40000);
-			memcpy(System16Sprites + 0x1c0000, pTemp + 0x1c0000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static INT32 MvpjInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x200000 - 0x180000;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x200000);
-		if (pTemp) {
-			memset(pTemp, 0, 0x200000);
-			memcpy(pTemp, System16Sprites, 0x200000);
-			memset(System16Sprites, 0, 0x200000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0xc0000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x0c0000, 0xc0000);
-		} else {
-			nRet = 1;
-		}		
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static UINT8 Passsht4ReadIO(UINT32 offset)
-{
-	switch (offset) {
-		case 0x0800: {
-			return 0xff - System16Input[0];
-		}
-
-		case 0x1800: {
-			return 0xff - System16Input[1];
-		}
-
-		case 0x1801: {
-			return 0xff - System16Input[2];
-		}
-
-		case 0x1802: {
-			return 0xff - System16Input[3];
-		}
-
-		case 0x1803: {
-			return 0xff - System16Input[4];
-		}
-	}
-
-	return sega_315_5195_io_read(offset);
-}
-
-static INT32 Passsht4Init()
-{
-	sega_315_5195_custom_io_do = Passsht4ReadIO;
-
-	return System16Init();
-}
-
-static void PassshtbMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekMapHandler(1, 0xc46000, 0xc46031, MAP_WRITE);
-	SekSetWriteWordHandler(1, PassshtbGfxWriteWord);
-	SekClose();
-}
-
-static INT32 PassshtbInit()
-{
-	System16Map68KDo = PassshtbMap68K;
-	
-	INT32 nRet = System16Init();
-	
-//	System16SpriteXOffset = 114;
-	
-	if (!nRet) {
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 RiotcityInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-static INT32 SdibInit()
-{
-	System16MakeAnalogInputsDo = SdibMakeAnalogInputs;
-	sega_315_5195_custom_io_do = SdibReadIO;
-	
-	return System16Init();
-}
-
-static void SdiblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekSetReadByteHandler(0, SdiblReadByte);
-	SekMapHandler(1, 0x123406, 0x123407, MAP_WRITE);
-	SekSetWriteByteHandler(1, SdiblSoundWriteByte);
-	SekClose();
-}
-
-static INT32 SdiblInit()
-{
-	System16Map68KDo = SdiblMap68K;
-	System16MakeAnalogInputsDo = SdibMakeAnalogInputs;
-	
-	return System16Init();
-}
-
-static INT32 SdibExit()
-{
-	SdiTrack1X = 0;
-	SdiTrack1Y = 0;
-	SdiTrack2X = 0;
-	SdiTrack2Y = 0;
-
-	return System16Exit();
-}
-
-static INT32 SdibScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {					// Return minimum compatible version
-		*pnMin =  0x029660;
-	}
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		SCAN_VAR(SdiTrack1X);
-		SCAN_VAR(SdiTrack1Y);
-		SCAN_VAR(SdiTrack2X);
-		SCAN_VAR(SdiTrack2Y);
-	}
-	
-	return System16Scan(nAction, pnMin);;
-}
-
-static INT32 Sdibl2LoadRom()
-{
-	memset(System16Code, 0, System16RomSize);
-	memcpy(System16Code, System16Rom + 0x30000, 0x30000);
-	memset(System16Rom + 0x30000, 0, 0x30000);
-	
-	return 0;
-}
-
-static INT32 Sdibl2Init()
-{
-	System16CustomDecryptOpCodeDo = Sdibl2LoadRom;
-			
-	return SdiblInit();
-}
-
-static INT32 SjryukoInit()
-{
-	sega_315_5195_custom_io_do = SjryukoReadIO;
-	sega_315_5195_custom_io_write_do = SjryukoWriteIO;
-	
-	System16BTileAlt = true;
-	
-	return System16Init();
-}
-
-static INT32 SjryukoExit()
-{
-	MahjongInputNum = 0;
-	
-	return System16Exit();
-}
-
-static INT32 SjryukoScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {					// Return minimum compatible version
-		*pnMin =  0x029660;
-	}
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		SCAN_VAR(MahjongInputNum);
-	}
-	
-	return System16Scan(nAction, pnMin);;
-}
-
-static INT32 SnapperInit()
-{
-	INT32 nRet = System16Init();
-	
-	System16IgnoreVideoEnable = 1;
-	System16YM2413IRQInterval = 41;
-	
-	return nRet;
-}
-
-static INT32 SonicbomInit()
-{
-	INT32 nRet = System16Init();
-
-	System16ScreenFlipXoffs = 7;
-	System16ScreenFlipYoffs = 7;
-
-	return nRet;
-}
-
-static void TetrisblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
-	SekSetWriteWordHandler(1, TetrisblGfxWriteWord);
-	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
-	SekSetWriteByteHandler(2, TetrisblSndWriteByte);
-	SekClose();
-}
-
-static INT32 TetrisblInit()
-{
-	System16Map68KDo = TetrisblMap68K;
-	
-	INT32 nRet = System16Init();
-	
-	System16SpriteXOffset = 114;
-	
-	if (!nRet) {
-		bSystem16BootlegRender = true;
-	}
-	
-	return nRet;
-}
-
-static INT32 TimescanInit()
-{
-	System16BTileAlt = true;
-
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x80000 - 0x40000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x80000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x40000);
-			memset(System16Sprites, 0, 0x80000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x020000, pTemp + 0x10000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x060000, pTemp + 0x30000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static void Tturf_Sim8751()
-{
-	// Inputs
-	*((UINT16*)(System16Ram + 0x01e6)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[0] << 8));
-	*((UINT16*)(System16Ram + 0x01e8)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[1] << 8));
-	*((UINT16*)(System16Ram + 0x01ea)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[2] << 8));
-	
-	// Sound command
-	UINT16 temp = (System16Ram[0x01d0 + 1] << 8) | System16Ram[0x01d0 + 0];
-	if ((temp & 0xff00) != 0x0000) {
-		System16SoundLatch = temp & 0xff;
-		ZetOpen(0);
-		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-		ZetClose();
-		*((UINT16*)(System16Ram + 0x01d0)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff));
-	}
-}
-
-static INT32 TturfInit()
-{
-	Simulate8751 = Tturf_Sim8751;
-
-	TturfMode = 1;
-
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0xe0000 - 0x80000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			//re-arrange UPD7759 Data
-			memmove(&System16UPD7759Data[0x20000], &System16UPD7759Data[0x10000], 0x10000);
-			memset(&System16UPD7759Data[0x10000], 0xff, 0x10000);
-
-			// re-arrange Sprite Data
-			memcpy(pTemp, System16Sprites, 0x80000);
-			memset(System16Sprites, 0, 0xe0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static void UltracinMakeAnalogInputs()
-{
-	static UINT8 clock = 0;
-
-	if (System16Input[1] & (0xc0)) {
-		clock ^= 0x08;
-		System16Input[1] |= clock;
-	}
-	if (System16Input[2] & (0xc0)) {
-		clock ^= 0x08;
-		System16Input[2] |= clock;
-	}
-}
-
-static INT32 UltracinInit()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0x1c0000 - 0x180000;
-	
-	INT32 nRet = System16Init();
-
-	System16MakeAnalogInputsDo = UltracinMakeAnalogInputs;
-
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x1c0000);
-			memset(System16Sprites, 0, 0x1c0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
-			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
-			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
-			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-	
-	return nRet;
-}
-
-void Wb3_Sim8751()
-{
-	// Sound command
-	UINT16 temp = (System16Ram[0x0008 + 1] << 8) | System16Ram[0x0008 + 0];
-	if ((temp & 0x00ff) != 0x0000) {
-		System16SoundLatch = temp >> 8;
-		ZetOpen(0);
-		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-		ZetClose();
-		*((UINT16*)(System16Ram + 0x0008)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff00));
-	}
-}
-
-static INT32 Wb3Init()
-{
-	Simulate8751 = Wb3_Sim8751;
-	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0xe0000 - 0x80000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x80000);
-			memset(System16Sprites, 0, 0xe0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static INT32 Wb33Init()
-{
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0xe0000 - 0x80000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x80000);
-			memset(System16Sprites, 0, 0xe0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-	}
-
-	return nRet;
-}
-
-static void Wb3bblMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
-	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
-	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadByteHandler(0, System16BReadByte);
-	SekSetWriteByteHandler(0, System16BWriteByte);
-	SekSetWriteWordHandler(0, System16BWriteWord);
-	SekMapHandler(1, 0xc44000, 0xc46031, MAP_WRITE);
-	SekSetWriteWordHandler(1, Wb3bblGfxWriteWord);
-	SekClose();
-}
-
-static INT32 Wb3bblInit()
-{
-	System16Map68KDo = Wb3bblMap68K;
-	
-	// Start off with some sprite rom and let the load routine add on the rest
-	System16SpriteRomSize = 0xe0000 - 0x80000;
-
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
-		if (pTemp) {
-			memcpy(pTemp, System16Sprites, 0x80000);
-			memset(System16Sprites, 0, 0xe0000);
-			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
-			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
-			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
-			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
-		} else {
-			nRet = 1;
-		}
-		BurnFree(pTemp);
-		
-		bSystem16BootlegRender = true;
-	}
-
-	return nRet;
-}
-
-/*====================================================
-Driver defs
-====================================================*/
-
-struct BurnDriver BurnDrvAceattac = {
-	"aceattac", NULL, NULL, NULL, "1988",
-	"Ace Attacker (FD1094 317-0059)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
-	NULL, AceattacRomInfo, AceattacRomName, NULL, NULL, NULL, NULL, AceattacInputInfo, AceattacDIPInfo,
-	AceattacInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvAfightere = {
-	"afightere", "afighter", NULL, NULL, "1991",
-	"Action Fighter (System 16B, unprotected, analog controls)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
-	NULL, AfightereRomInfo, AfightereRomName, NULL, NULL, NULL, NULL, Afighter_analogInputInfo, Afighter_analogDIPInfo,
-	AfighterAnalogInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvAfighterf = {
-	"afighterf", "afighter", NULL, NULL, "1991",
-	"Action Fighter (System 16B, FD1089B 317-unknown, analog controls)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
-	NULL, AfighterfRomInfo, AfighterfRomName, NULL, NULL, NULL, NULL, Afighter_analogInputInfo, Afighter_analogDIPInfo,
-	AfighterAnalogInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvAfighterg = {
-	"afighterg", "afighter", NULL, NULL, "1991",
-	"Action Fighter (System 16B, FD1089B 317-unknown)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
-	NULL, AfightergRomInfo, AfightergRomName, NULL, NULL, NULL, NULL, System16bInputInfo, AfighterDIPInfo,
-	AfighterInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvAfighterh = {
-	"afighterh", "afighter", NULL, NULL, "1991",
-	"Action Fighter (System 16B, FD1089A 317-0018)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
-	NULL, AfighterhRomInfo, AfighterhRomName, NULL, NULL, NULL, NULL, System16bInputInfo, AfighterDIPInfo,
-	AfighterInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvAliensyn = {
-	"aliensyn", NULL, NULL, NULL, "1987",
-	"Alien Syndrome (set 4, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_MAZE, 0,
-	NULL, AliensynRomInfo, AliensynRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
-	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAliensyn3 = {
-	"aliensyn3", "aliensyn", NULL, NULL, "1987",
-	"Alien Syndrome (set 3, System 16B, FD1089A 317-0033)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1089A_ENC, GBF_MAZE, 0,
-	NULL, Aliensyn3RomInfo, Aliensyn3RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
-	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAliensyn7 = {
-	"aliensyn7", "aliensyn", NULL, NULL, "1987",
-	"Alien Syndrome (set 7, System 16B, MC-8123B 317-00xx)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_MC8123_ENC, GBF_MAZE, 0,
-	NULL, Aliensyn7RomInfo, Aliensyn7RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
-	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAliensynj = {
-	"aliensynj", "aliensyn", NULL, NULL, "1987",
-	"Alien Syndrome (set 6, Japan, new, System 16B, FD1089A 317-0033)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1089A_ENC, GBF_MAZE, 0,
-	NULL, AliensynjRomInfo, AliensynjRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynjDIPInfo,
-	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast = {
-	"altbeast", NULL, NULL, NULL, "1988",
-	"Altered Beast (set 8, 8751 317-0078)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, AltbeastRomInfo, AltbeastRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	AltbeastInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeastj = {
-	"altbeastj", "altbeast", NULL, NULL, "1988",
-	"Juuouki (set 7, Japan, 8751 317-0077)\0", NULL, "Sega", "System 16B",
-	L"Juuoki (set 7, Japan, 8751 317-0077)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, AltbeastjRomInfo, AltbeastjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	AltbeastjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast2 = {
-	"altbeast2", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (set 2, MC-8123B 317-0066)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_SCRFIGHT, 0,
-	NULL, Altbeast2RomInfo, Altbeast2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeastj1 = {
-	"altbeastj1", "altbeast", NULL, NULL, "1988",
-	"Juuouki (set 1, Japan, FD1094 317-0065)\0", NULL, "Sega", "System 16B",
-	L"Juuoki (set 1, Japan, FD1094 317-0065)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, Altbeastj1RomInfo, Altbeastj1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeastj3 = {
-	"altbeastj3", "altbeast", NULL, NULL, "1988",
-	"Juuouki (set 3, Japan, FD1094 317-0068)\0", NULL, "Sega", "System 16B",
-	L"Juuoki (set 3, Japan, FD1094 317-0068)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, Altbeastj3RomInfo, Altbeastj3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeastj3d = {
-	"altbeastj3d", "altbeast", NULL, NULL, "1988",
-	"Juuouki (set 3, Japan, FD1094 317-0068 decrypted)\0", NULL, "Sega", "System 16B",
-	L"Juuoki (set 3, Japan, FD1094 317-0068 decrypted)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, Altbeastj3dRomInfo, Altbeastj3dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast4 = {
-	"altbeast4", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (set 4, MC-8123B 317-0066)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_SCRFIGHT, 0,
-	NULL, Altbeast4RomInfo, Altbeast4RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast5 = {
-	"altbeast5", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (set 5, FD1094 317-0069)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, Altbeast5RomInfo, Altbeast5RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast5d = {
-	"altbeast5d", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (set 5, FD1094 317-0069 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, Altbeast5dRomInfo, Altbeast5dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAltbeast6 = {
-	"altbeast6", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (set 6, 8751 317-0076)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, Altbeast6RomInfo, Altbeast6RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	Altbeast6Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriverD BurnDrvAltbeastbl = {
-	"altbeastbl", "altbeast", NULL, NULL, "1988",
-	"Altered Beast (Datsu bootleg)\0", "no Sound", "bootleg (Datsu)", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_INVERT_TILES, GBF_SCRFIGHT, 0,
-	NULL, AltbeastblRomInfo, AltbeastblRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	AltbeastblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriverD BurnDrvMutantwarr = {
-	"mutantwarr", "altbeast", NULL, NULL, "1988",
-	"Mutant Warrior (Altered Beast - Datsu bootleg)\0", "no Sound", "bootleg (Datsu)", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_INVERT_TILES, GBF_SCRFIGHT, 0,
-	NULL, MutantwarrRomInfo, MutantwarrRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
-	AltbeastblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAtomicp = {
-	"atomicp", NULL, NULL, NULL, "1990",
-	"Atomic Point (Korea)\0", NULL, "Philco", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_YM2413, GBF_PUZZLE, 0,
-	NULL, AtomicpRomInfo, AtomicpRomName, NULL, NULL, NULL, NULL, AtomicpInputInfo, AtomicpDIPInfo,
-	AtomicpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAurail = {
-	"aurail", NULL, NULL, NULL, "1990",
-	"Aurail (set 3, US, unprotected)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
-	NULL, AurailRomInfo, AurailRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAurail1 = {
-	"aurail1", "aurail", NULL, NULL, "1990",
-	"Aurail (set 2, World, FD1089B 317-0168)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1089B_ENC, GBF_VERSHOOT, 0,
-	NULL, Aurail1RomInfo, Aurail1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAurail1d = {
-	"aurail1d", "aurail", NULL, NULL, "1990",
-	"Aurail (set 2, World, FD1089B 317-0168 decrypted)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
-	NULL, Aurail1dRomInfo, Aurail1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAurailj = {
-	"aurailj", "aurail", NULL, NULL, "1990",
-	"Aurail (set 1, Japan, FD1089A 317-0167)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1089A_ENC, GBF_VERSHOOT, 0,
-	NULL, AurailjRomInfo, AurailjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvAurailjd = {
-	"aurailjd", "aurail", NULL, NULL, "1990",
-	"Aurail (set 1, Japan, FD1089A 317-0167 decrypted)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
-	NULL, AurailjdRomInfo, AurailjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBayroute = {
-	"bayroute", NULL, NULL, NULL, "1989",
-	"Bay Route (set 3, World, FD1094 317-0116)\0", NULL, "Sunsoft / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, BayrouteRomInfo, BayrouteRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBayrouted = {
-	"bayrouted", "bayroute", NULL, NULL, "1989",
-	"Bay Route (set 3, World, FD1094 317-0116 decrypted)\0", NULL, "Sunsoft / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
-	NULL, BayroutedRomInfo, BayroutedRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBayroutej = {
-	"bayroutej", "bayroute", NULL, NULL, "1989",
-	"Bay Route (set 2, Japan, FD1094 317-0115)\0", NULL, "Sunsoft / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, BayroutejRomInfo, BayroutejRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBayroutejd = {
-	"bayroutejd", "bayroute", NULL, NULL, "1989",
-	"Bay Route (set 2, Japan, FD1094 317-0115 decrypted)\0", NULL, "Sunsoft / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
-	NULL, BayroutejdRomInfo, BayroutejdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBayroute1 = {
-	"bayroute1", "bayroute", NULL, NULL, "1989",
-	"Bay Route (set 1, US, unprotected)\0", "", "Sunsoft / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_RUNGUN, 0,
-	NULL, Bayroute1RomInfo, Bayroute1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBlox16b = {
-	"blox16b", "bloxeed", NULL, NULL, "2008",
-	"Bloxeed (System 16B, PS2 data file)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_PUZZLE, 0,
-	NULL, Blox16bRomInfo, Blox16bRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, Blox16bDIPInfo,
-	Blox16bInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBullet = {
-	"bullet", NULL, NULL, NULL, "1987",
-	"Bullet (FD1094 317-0041)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 3, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358_SMALL, GBF_RUNGUN, 0,
-	NULL, BulletRomInfo, BulletRomName, NULL, NULL, NULL, NULL, BulletInputInfo, BulletDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvBulletd = {
-	"bulletd", "bullet", NULL, NULL, "1987",
-	"Bullet (FD1094 317-0041 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 3, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_RUNGUN, 0,
-	NULL, BulletdRomInfo, BulletdRomName, NULL, NULL, NULL, NULL, BulletInputInfo, BulletDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCotton = {
-	"cotton", NULL, NULL, NULL, "1991",
-	"Cotton (set 3, World, FD1094 317-0181a)\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
-	NULL, CottonRomInfo, CottonRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottond = {
-	"cottond", "cotton", NULL, NULL, "1991",
-	"Cotton (set 3, World, FD1094 317-0181a decrypted)\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
-	NULL, CottondRomInfo, CottondRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonu = {
-	"cottonu", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, US, FD1094 317-0180)\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
-	NULL, CottonuRomInfo, CottonuRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonud = {
-	"cottonud", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, US, FD1094 317-0180 decrypted)\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
-	NULL, CottonudRomInfo, CottonudRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonj = {
-	"cottonj", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b))\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
-	NULL, CottonjRomInfo, CottonjRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonjd = {
-	"cottonjd", "cotton", NULL, NULL, "1991",
-	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted))\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
-	NULL, CottonjdRomInfo, CottonjdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonja = {
-	"cottonja", "cotton", NULL, NULL, "1991",
-	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a))\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
-	NULL, CottonjaRomInfo, CottonjaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvCottonjad = {
-	"cottonjad", "cotton", NULL, NULL, "1991",
-	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted))\0", NULL, "Success / Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
-	NULL, CottonjadRomInfo, CottonjadRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDdux = {
-	"ddux", NULL, NULL, NULL, "1989",
-	"Dynamite Dux (set 2, FD1094 317-0096)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, DduxRomInfo, DduxRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDduxd = {
-	"dduxd", "ddux", NULL, NULL, "1989",
-	"Dynamite Dux (set 2, FD1094 317-0096 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, DduxdRomInfo, DduxdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDduxj = {
-	"dduxj", "ddux", NULL, NULL, "1989",
-	"Dynamite Dux (set 2, Japan, FD1094 317-0094)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, DduxjRomInfo, DduxjRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDduxjd = {
-	"dduxjd", "ddux", NULL, NULL, "1989",
-	"Dynamite Dux (set 2, Japan, FD1094 317-0094 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, DduxjdRomInfo, DduxjdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDdux1 = {
-	"ddux1", "ddux", NULL, NULL, "1989",
-	"Dynamite Dux (set 1, World, 8751 317-0095)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, Ddux1RomInfo, Ddux1RomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDduxbl = {
-	"dduxbl", "ddux", NULL, NULL, "1989",
-	"Dynamite Dux (bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_NOT_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES | HARDWARE_SEGA_5358, GBF_SCRFIGHT, 0,
-	NULL, DduxblRomInfo, DduxblRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
-	DduxblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDunkshot = {
-	"dunkshot", NULL, NULL, NULL, "1987",
-	"Dunk Shot (Rev C, FD1089 317-0022)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
-	NULL, DunkshotRomInfo, DunkshotRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
-	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDunkshota = {
-	"dunkshota", "dunkshot", NULL, NULL, "1987",
-	"Dunk Shot (Rev A, FD1089 317-0022)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
-	NULL, DunkshotaRomInfo, DunkshotaRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
-	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDunkshoto = {
-	"dunkshoto", "dunkshot", NULL, NULL, "1986",
-	"Dunk Shot (FD1089 317-0022)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
-	NULL, DunkshotoRomInfo, DunkshotoRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
-	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswat = {
-	"eswat", NULL, NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 4, World, FD1094 317-0130)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, EswatRomInfo, EswatRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatd = {
-	"eswatd", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 4, World, FD1094 317-0130 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
-	NULL, EswatdRomInfo, EswatdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatj = {
-	"eswatj", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 2, Japan, FD1094 317-0128)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, EswatjRomInfo, EswatjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatjd = {
-	"eswatjd", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 2, Japan, FD1094 317-0128 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
-	NULL, EswatjdRomInfo, EswatjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatj1 = {
-	"eswatj1", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 1, Japan, FD1094 317-0131)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, Eswatj1RomInfo, Eswatj1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	Eswatj1Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatj1d = {
-	"eswatj1d", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 1, Japan, FD1094 317-0131 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
-	NULL, Eswatj1dRomInfo, Eswatj1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	Eswatj1Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatu = {
-	"eswatu", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 3, US, FD1094 317-0129)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
-	NULL, EswatuRomInfo, EswatuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatud = {
-	"eswatud", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (set 3, US, FD1094 317-0129 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
-	NULL, EswatudRomInfo, EswatudRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvEswatbl = {
-	"eswatbl", "eswat", NULL, NULL, "1989",
-	"E-Swat - Cyber Police (bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
-	NULL, EswatblRomInfo, EswatblRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
-	EswatblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvExctleag = {
-	"exctleag", NULL, NULL, NULL, "1989",
-	"Excite League (FD1094 317-0079)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, ExctleagRomInfo, ExctleagRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
-	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvExctleagd = {
-	"exctleagd", "exctleag", NULL, NULL, "1989",
-	"Excite League (FD1094 317-0079 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, ExctleagdRomInfo, ExctleagdRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
-	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFantzoneta = {
-	"fantzoneta", "fantzone", NULL, NULL, "2008",
-	"Fantasy Zone (Time Attack, bootleg)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
-	NULL, FantzonetaRomInfo, FantzonetaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, FantzonetaDIPInfo,
-	FantzonetaInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFantzn2x = {
-	"fantzn2x", NULL, NULL, NULL, "2008",
-	"Fantasy Zone II - The Tears of Opa-Opa (System 16C)\0", NULL, "Sega / M2", "System 16C",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
-	NULL, Fantzn2xRomInfo, Fantzn2xRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
-	Fantzn2xInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFantzn2xp = {
-	"fantzn2xp", "fantzn2x", NULL, NULL, "2008",
-	"Fantasy Zone II - The Tears of Opa-Opa (System 16C, prototype)\0", NULL, "Sega / M2", "System 16C",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
-	NULL, Fantzn2xpRomInfo, Fantzn2xpRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
-	Fantzn2xInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFantzn2xps2 = {
-	"fantzn2xps2", "fantzn2x", NULL, NULL, "2008",
-	"Fantasy Zone II - The Tears of Opa-Opa (System 16C, PS2 data file)\0", NULL, "Sega / M2", "System 16C",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
-	NULL, Fantzn2xps2RomInfo, Fantzn2xps2RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
-	Fantzn2xps2Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFantznta = {
-	"fantznta", "fantzn2x", NULL, NULL, "2008",
-	"Fantasy Zone Time Attack (System 16B, PS2 data file)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
-	NULL, FantzntaRomInfo, FantzntaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
-	FantzntaInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpoint = {
-	"fpoint", NULL, NULL, NULL, "1989",
-	"Flash Point (set 2, Japan, FD1094 317-0127A)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_PUZZLE, 0,
-	NULL, FpointRomInfo, FpointRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpointd = {
-	"fpointd", "fpoint", NULL, NULL, "1989",
-	"Flash Point (set 2, Japan, FD1094 317-0127A decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PUZZLE, 0,
-	NULL, FpointdRomInfo, FpointdRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpoint1 = {
-	"fpoint1", "fpoint", NULL, NULL, "1989",
-	"Flash Point (set 1, Japan, FD1094 317-0127A)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
-	NULL, Fpoint1RomInfo, Fpoint1RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpoint1d = {
-	"fpoint1d", "fpoint", NULL, NULL, "1989",
-	"Flash Point (set 1, Japan, FD1094 317-0127A decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
-	NULL, Fpoint1dRomInfo, Fpoint1dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpointbl = {
-	"fpointbl", "fpoint", NULL, NULL, "1989",
-	"Flash Point (World, bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PUZZLE, 0,
-	NULL, FpointblRomInfo, FpointblRomName, NULL, NULL, NULL, NULL, FpointblInputInfo, FpointDIPInfo,
-	FpointblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvFpointbj = {
-	"fpointbj", "fpoint", NULL, NULL, "1989",
-	"Flash Point (Japan, bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PUZZLE, 0,
-	NULL, FpointbjRomInfo, FpointbjRomName, NULL, NULL, NULL, NULL, FpointblInputInfo, FpointDIPInfo,
-	FpointblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe = {
-	"goldnaxe", NULL, NULL, NULL, "1989",
-	"Golden Axe (set 6, US, 8751 317-123A)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
-	NULL, GoldnaxeRomInfo, GoldnaxeRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	GoldnaxeInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe1 = {
-	"goldnaxe1", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 1, World, FD1094 317-0110)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, Goldnaxe1RomInfo, Goldnaxe1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe1d = {
-	"goldnaxe1d", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 1, World, FD1094 317-0110 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
-	NULL, Goldnaxe1dRomInfo, Goldnaxe1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe2 = {
-	"goldnaxe2", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 2, US, 8751 317-0112)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, Goldnaxe2RomInfo, Goldnaxe2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	GoldnaxeInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe3 = {
-	"goldnaxe3", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 3, World, FD1094 317-0120)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, Goldnaxe3RomInfo, Goldnaxe3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxe3d = {
-	"goldnaxe3d", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 3, World, FD1094 317-0120 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, Goldnaxe3dRomInfo, Goldnaxe3dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxej = {
-	"goldnaxej", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 4, Japan, FD1094 317-0121)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, GoldnaxejRomInfo, GoldnaxejRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxejd = {
-	"goldnaxejd", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 4, Japan, FD1094 317-0121 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, GoldnaxejdRomInfo, GoldnaxejdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxeu = {
-	"goldnaxeu", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 5, US, FD1094 317-0122)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
-	NULL, GoldnaxeuRomInfo, GoldnaxeuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvGoldnaxeud = {
-	"goldnaxeud", "goldnaxe", NULL, NULL, "1989",
-	"Golden Axe (set 5, US, FD1094 317-0122 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
-	NULL, GoldnaxeudRomInfo, GoldnaxeudRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
-	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvHwchamp = {
-	"hwchamp", NULL, NULL, NULL, "1987",
-	"Heavyweight Champ (set 1)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
-	NULL, HwchampRomInfo, HwchampRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
-	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvHwchampa = {
-	"hwchampa", "hwchamp", NULL, NULL, "1987",
-	"Heavyweight Champ (set 2)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
-	NULL, HwchampaRomInfo, HwchampaRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
-	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvHwchampj = {
-	"hwchampj", "hwchamp", NULL, NULL, "1987",
-	"Heavyweight Champ (Japan, FD1094 317-0046)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
-	NULL, HwchampjRomInfo, HwchampjRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
-	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvHwchampjd = {
-	"hwchampjd", "hwchamp", NULL, NULL, "1987",
-	"Heavyweight Champ (Japan, FD1094 317-0046 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
-	NULL, HwchampjdRomInfo, HwchampjdRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
-	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvLockonph = {
-	"lockonph", NULL, NULL, NULL, "1991",
-	"Lock On (Philko)\0", NULL, "Philco", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B, GBF_HORSHOOT, 0,
-	NULL,LockonphRomInfo, LockonphRomName, NULL, NULL, NULL, NULL, LockonphInputInfo, LockonphDIPInfo,
-	LockonphInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvMvp = {
-	"mvp", NULL, NULL, NULL, "1989",
-	"MVP (set 2, US, FD1094 317-0143)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
-	NULL, MvpRomInfo, MvpRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
-	MvpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvMvpd = {
-	"mvpd", "mvp", NULL, NULL, "1989",
-	"MVP (set 2, US, FD1094 317-0143 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SPORTSMISC, 0,
-	NULL, MvpdRomInfo, MvpdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
-	MvpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvMvpj = {
-	"mvpj", "mvp", NULL, NULL, "1989",
-	"MVP (set 1, Japan, FD1094 317-0142)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
-	NULL, MvpjRomInfo, MvpjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
-	MvpjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvMvpjd = {
-	"mvpjd", "mvp", NULL, NULL, "1989",
-	"MVP (set 1, Japan, FD1094 317-0142 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SPORTSMISC, 0,
-	NULL, MvpjdRomInfo, MvpjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
-	MvpjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvPasssht = {
-	"passsht", NULL, NULL, NULL, "1988",
-	"Passing Shot (World, 2 Players, FD1094 317-0080)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtRomInfo, PassshtRomName, NULL, NULL, NULL, NULL, System16bfire4InputInfo, PassshtDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvPassshtd = {
-	"passshtd", "passsht", NULL, NULL, "1988",
-	"Passing Shot (World, 2 Players, FD1094 317-0080 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtdRomInfo, PassshtdRomName, NULL, NULL, NULL, NULL, System16bfire4InputInfo, PassshtDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvPassshta = {
-	"passshta", "passsht", NULL, NULL, "1988",
-	"Passing Shot (World, 4 Players, FD1094 317-0074)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtaRomInfo, PassshtaRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
-	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvPassshtad = {
-	"passshtad", "passsht", NULL, NULL, "1988",
-	"Passing Shot (World, 4 Players, FD1094 317-0074 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtadRomInfo, PassshtadRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
-	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvPassshtj = {
-	"passshtj", "passsht", NULL, NULL, "1988",
-	"Passing Shot (Japan, 4 Players, FD1094 317-0070)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtjRomInfo, PassshtjRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
-	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvPassshtjd = {
-	"passshtjd", "passsht", NULL, NULL, "1988",
-	"Passing Shot (Japan, 4 Players, FD1094 317-0070 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtjdRomInfo, PassshtjdRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
-	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriverD BurnDrvPassshtb = {
-	"passshtb", "passsht", NULL, NULL, "1988",
-	"Passing Shot (bootleg, 2 Players)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	0 | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, PassshtbRomInfo, PassshtbRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtDIPInfo,
-	PassshtbInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvCencourt = {
-	"cencourt", "passsht", NULL, NULL, "1988",
-	"Center Court (World, 4 Players, prototype, MC-8123B)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_MC8123_ENC, GBF_SPORTSMISC, 0,
-	NULL, CencourtRomInfo, CencourtRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, CencourtDIPInfo,
-	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvRiotcity = {
-	"riotcity", NULL, NULL, NULL, "1991",
-	"Riot City (Japan)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, RiotcityRomInfo, RiotcityRomName, NULL, NULL, NULL, NULL, System16bInputInfo, RiotcityDIPInfo,
-	RiotcityInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvRyukyu = {
-	"ryukyu", NULL, NULL, NULL, "1990",
-	"RyuKyu (Rev A, Japan) (FD1094 317-5023A)\0", NULL, "Success / Sega", "System 16B",
-	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023)\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
-	NULL, RyukyuRomInfo, RyukyuRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvRyukyua = {
-	"ryukyua", "ryukyu", NULL, NULL, "1990",
-	"RyuKyu (Japan) (FD1094 317-5023)\0", NULL, "Success / Sega", "System 16B",
-	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023 decrypted)\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
-	NULL, RyukyuaRomInfo, RyukyuaRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvRyukyud = {
-	"ryukyud", "ryukyu", NULL, NULL, "1990",
-	"RyuKyu (Japan, FD1094 317-5023 decrypted)\0", NULL, "Success / Sega", "System 16B",
-	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023 decrypted)\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
-	NULL, RyukyudRomInfo, RyukyudRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdib = {
-	"sdib", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (System 16B, FD1089A 317-0028)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, SdibRomInfo, SdibRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	SdibInit, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl = {
-	"sdibl", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, original hardware)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, SdiblRomInfo, SdiblRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	SdiblInit, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl2 = {
-	"sdibl2", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, set 1)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, Sdibl2RomInfo, Sdibl2RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl3 = {
-	"sdibl3", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, set 2)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, Sdibl3RomInfo, Sdibl3RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl4 = {
-	"sdibl4", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, set 3)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, Sdibl4RomInfo, Sdibl4RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl5 = {
-	"sdibl5", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, set 4)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, Sdibl5RomInfo, Sdibl5RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSdibl6 = {
-	"sdibl6", "sdi", NULL, NULL, "1987",
-	"SDI - Strategic Defense Initiative (bootleg, set 5)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, Sdibl6RomInfo, Sdibl6RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvDefense = {
-	"defense", "sdi", NULL, NULL, "1987",
-	"Defense (System 16B, FD1089A 317-0028)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
-	NULL, DefenseRomInfo, DefenseRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
-	SdibInit, SdibExit, System16BFrame, System16BRender, SdibScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi2 = {
-	"shinobi2", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 2, System 16B, FD1094 317-0049)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
-	NULL, Shinobi2RomInfo, Shinobi2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi2d = {
-	"shinobi2d", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 2, System 16B, FD1094 317-0049 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
-	NULL, Shinobi2dRomInfo, Shinobi2dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi3 = {
-	"shinobi3", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 3, System 16B, MC-8123B 317-0054)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_MC8123_ENC, GBF_PLATFORM, 0,
-	NULL, Shinobi3RomInfo, Shinobi3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi4 = {
-	"shinobi4", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 4, System 16B, MC-8123B 317-0054)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_PLATFORM, 0,
-	NULL, Shinobi4RomInfo, Shinobi4RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi5 = {
-	"shinobi5", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 5, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
-	NULL, Shinobi5RomInfo, Shinobi5RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinobi6 = {
-	"shinobi6", "shinobi", NULL, NULL, "1987",
-	"Shinobi (set 6, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_PLATFORM, 0,
-	NULL, Shinobi6RomInfo, Shinobi6RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSjryuko = {
-	"sjryuko", NULL, NULL, NULL, "1987",
-	"Sukeban Jansi Ryuko (set 2, System 16B, FD1089B 317-5021)\0", NULL, "White Board", "System 16B",
-	L"Sukeban Jansi Ryuko (set 2, System 16B, FD1089B 317-5021)\0\u30B9\u30B1\u30D0\u30F3\u96C0\u58EB \u7ADC\u5B50\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_MAHJONG, 0,
-	NULL, SjryukoRomInfo, SjryukoRomName, NULL, NULL, NULL, NULL, SjryukoInputInfo, SjryukoDIPInfo,
-	SjryukoInit, SjryukoExit, System16BFrame, System16BAltRender, SjryukoScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSnapper = {
-	"snapper", NULL, NULL, NULL, "1990",
-	"Snapper (Korea)\0", NULL, "Philko", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_YM2413, GBF_MAZE, 0,
-	NULL, SnapperRomInfo, SnapperRomName, NULL, NULL, NULL, NULL, SnapperInputInfo, SnapperDIPInfo,
-	SnapperInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvSonicbom = {
-	"sonicbom", NULL, NULL, NULL, "1987",
-	"Sonic Boom (FD1094 317-0053)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_ORIENTATION_FLIPPED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_VERSHOOT, 0,
-	NULL, SonicbomRomInfo, SonicbomRomName, NULL, NULL, NULL, NULL, System16bInputInfo, SonicbomDIPInfo,
-	SonicbomInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvSonicbomd = {
-	"sonicbomd", "sonicbom", NULL, NULL, "1987",
-	"Sonic Boom (FD1094 317-0053 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_ORIENTATION_FLIPPED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_VERSHOOT, 0,
-	NULL, SonicbomdRomInfo, SonicbomdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, SonicbomDIPInfo,
-	SonicbomInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvSuprleag = {
-	"suprleag", NULL, NULL, NULL, "1987",
-	"Super League (FD1094 317-0045)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
-	NULL, SuprleagRomInfo, SuprleagRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
-	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetris1 = {
-	"tetris1", "tetris", NULL, NULL, "1988",
-	"Tetris (set 1, Japan, System 16B, FD1094 317-0091)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
-	NULL, Tetris1RomInfo, Tetris1RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetris1d = {
-	"tetris1d", "tetris", NULL, NULL, "1988",
-	"Tetris (set 1, Japan, System 16B, FD1094 317-0091 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_PUZZLE, 0,
-	NULL, Tetris1dRomInfo, Tetris1dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetris2 = {
-	"tetris2", "tetris", NULL, NULL, "1988",
-	"Tetris (set 2, Japan, System 16B, FD1094 317-0092)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
-	NULL, Tetris2RomInfo, Tetris2RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetris2d = {
-	"tetris2d", "tetris", NULL, NULL, "1988",
-	"Tetris (set 2, Japan, System 16B, FD1094 317-0092 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
-	NULL, Tetris2dRomInfo, Tetris2dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetrisbl = {
-	"tetrisbl", "tetris", NULL, NULL, "1988",
-	"Tetris (bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B, GBF_PUZZLE, 0,
-	NULL, TetrisblRomInfo, TetrisblRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
-	TetrisblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTimescan = {
-	"timescan", NULL, NULL, NULL, "1987",
-	"Time Scanner (set 2, System 16B)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_PINBALL, 0,
-	NULL, TimescanRomInfo, TimescanRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, TimescanDIPInfo,
-	TimescanInit, System16Exit, System16BFrame, System16BAltRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvToryumon = {
-	"toryumon", NULL, NULL, NULL, "1994",
-	"Toryumon\0", NULL, "Sega / Westone", "System 16B",
-	L"Toryumon\0\u767B\u9F8D\u9580\0", NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_PUZZLE, 0,
-	NULL, ToryumonRomInfo, ToryumonRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, ToryumonDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTturf = {
-	"tturf", NULL, NULL, NULL, "1989",
-	"Tough Turf (set 2, Japan, 8751 317-0104)\0", NULL, "Sega / Sunsoft", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
-	NULL, TturfRomInfo, TturfRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, TturfDIPInfo,
-	TturfInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTturfu = {
-	"tturfu", "tturf", NULL, NULL, "1989",
-	"Tough Turf (set 1, US, 8751 317-0099)\0", NULL, "Sega / Sunsoft", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SCRFIGHT, 0,
-	NULL, TturfuRomInfo, TturfuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, TturfDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvUltracin = {
-	"ultracin", NULL, NULL, NULL, "1996",
-	"Waku Waku Ultraman Racing\0", "Emulation not complete", "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RACING, 0,
-	NULL, UltracinRomInfo, UltracinRomName, NULL, NULL, NULL, NULL, UltracinInputInfo, UltracinDIPInfo,
-	UltracinInit, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb3 = {
-	"wb3", NULL, NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 6, World, System 16B, 8751 317-0098)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
-	NULL, Wb3RomInfo, Wb3RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb32 = {
-	"wb32", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 2, Japan, System 16B, FD1094 317-0085)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
-	NULL, Wb32RomInfo, Wb32RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb32d = {
-	"wb32d", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 2, Japan, System 16B, FD1094 317-0085 decrypted)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
-	NULL, Wb32dRomInfo, Wb32dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb33 = {
-	"wb33", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 3, World, System 16B, FD1094 317-0089)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
-	NULL, Wb33RomInfo, Wb33RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb33d = {
-	"wb33d", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 3, World, System 16B, FD1094 317-0089 decrypted)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
-	NULL, Wb33dRomInfo, Wb33dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb34 = {
-	"wb34", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 4, Japan, System 16B, FD1094 317-0087)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
-	NULL, Wb34RomInfo, Wb34RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWb34d = {
-	"wb34d", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (set 4, Japan, System 16B, FD1094 317-0087 decrypted)\0", NULL, "Sega / Westone", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
-	NULL, Wb34dRomInfo, Wb34dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriverD BurnDrvWb3bbl = {
-	"wb3bbl", "wb3", NULL, NULL, "1988",
-	"Wonder Boy III - Monster Lair (bootleg)\0", NULL, "bootleg", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PLATFORM, 0,
-	NULL, Wb3bblRomInfo, Wb3bblRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
-	Wb3bblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvWrestwar = {
-	"wrestwar", NULL, NULL, NULL, "1988",
-	"Wrestle War (set 3, World, 8751 317-0103)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
-	NULL, WrestwarRomInfo, WrestwarRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvWrestwar1 = {
-	"wrestwar1", "wrestwar", NULL, NULL, "1988",
-	"Wrestle War (set 1, Japan, FD1094 317-0090)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
-	NULL, Wrestwar1RomInfo, Wrestwar1RomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvWrestwar1d = {
-	"wrestwar1d", "wrestwar", NULL, NULL, "1988",
-	"Wrestle War (set 1, Japan, FD1094 317-0090 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
-	NULL, Wrestwar1dRomInfo, Wrestwar1dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvWrestwar2 = {
-	"wrestwar2", "wrestwar", NULL, NULL, "1988",
-	"Wrestle War (set 2, World, FD1094 317-0102)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
-	NULL, Wrestwar2RomInfo, Wrestwar2RomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-struct BurnDriver BurnDrvWrestwar2d = {
-	"wrestwar2d", "wrestwar", NULL, NULL, "1988",
-	"Wrestle War (set 2, World, FD1094 317-0102 decrypted)\0", NULL, "Sega", "System 16B",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
-	NULL, Wrestwar2dRomInfo, Wrestwar2dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
-	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
-	NULL, 0x1800, 224, 320, 3, 4
-};
-
-// ISG Selection Master Type 2006 hardware
-
-static UINT16 IsgsmCartAddrLatch;
-static UINT32 IsgsmCartAddr;
-static INT32 IsgsmType = 0;
-static UINT32 IsgsmAddr;
-static UINT8  IsgsmMode;
-static UINT16 IsgsmAddrLatch;
-static UINT32 IsgsmSecurity;
-static UINT16 IsgsmSecurityLatch;
-static UINT8 IsgsmRleControlPosition = 8;
-static UINT8 IsgsmRleControlByte;
-static INT32 IsgsmRleLatched;
-static UINT8 IsgsmRleByte;
-static UINT8 IsgsmReadXor;
-static UINT32 nCartSize;
-static INT32 GameRomMapped = 0;
-
-typedef UINT32 (*isgsm_security_callback)(UINT32 input);
-isgsm_security_callback IsgsmSecurityCallback;
-
-static INT32 IsgsmTilePlaneOffsets[3] = { 0x200000, 0x100000, 0 };
-static INT32 IsgsmTileXOffsets[8]     = { 0, 1, 2, 3, 4, 5, 6, 7 };
-static INT32 IsgsmTileYOffsets[8]     = { 0, 8, 16, 24, 32, 40, 48, 56 };
-
-static struct BurnDIPInfo ShinfzDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xfc, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-	{0x15, 0xff, 0xff, 0x00, NULL                                 },
-
-	// Dip 1
-	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
-	{0x13, 0x01, 0x01, 0x00, "Upright"                            },
-	{0x13, 0x01, 0x01, 0x01, "Cocktail"                           },
-	
-	{0   , 0xfe, 0   , 4   , "Lives"                              },
-	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
-	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
-	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
-	{0x13, 0x01, 0x0c, 0x00, "240"                                },
-	
-	{0   , 0xfe, 0   , 4   , "Extra Ship Cost"                    },
-	{0x13, 0x01, 0x30, 0x30, "5000"                               },
-	{0x13, 0x01, 0x30, 0x20, "10000"                              },
-	{0x13, 0x01, 0x30, 0x10, "15000"                              },
-	{0x13, 0x01, 0x30, 0x00, "20000"                              },
-	
-	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
-	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
-	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
-	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
-	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
-		
-	// Dip 2
-	
-	// Dip 3
-	{0   , 0xfe, 0   , 3   , "Game Select"                        },
-	{0x15, 0x01, 0x03, 0x00, "Shinobi Ninja Game"                 },
-	{0x15, 0x01, 0x03, 0x01, "FZ-2006 Game I"                     },
-	{0x15, 0x01, 0x03, 0x02, "FZ-2006 Game II"                    },
-};
-
-STDDIPINFO(Shinfz)
-
-static struct BurnDIPInfo TetrbxDIPList[]=
-{
-	// Default Values
-	{0x13, 0xff, 0xff, 0xff, NULL                                 },
-	{0x14, 0xff, 0xff, 0xff, NULL                                 },
-	{0x15, 0xff, 0xff, 0x00, NULL                                 },
-
-	// Dip 1
-			
-	// Dip 2
-	
-	// Dip 3
-	{0   , 0xfe, 0   , 3   , "Game Select"                        },
-	{0x15, 0x01, 0x03, 0x00, "Tetris"                             },
-	{0x15, 0x01, 0x03, 0x01, "Tetris II (Blox)"                   },
-	{0x15, 0x01, 0x03, 0x02, "Tetris Turbo"                       },
-};
-
-STDDIPINFO(Tetrbx)
-
-static struct BurnRomInfo emptyRomDesc[] = {
-	{ "",                    0,          0, 0 },
-};
-
-static struct BurnRomInfo IsgsmRomDesc[] = {
-	{ "ism2006v00.u1",  0x020000, 0x2292585c, BRF_ESS | BRF_PRG | BRF_BIOS },
-};
-
-STD_ROM_PICK(Isgsm)
-STD_ROM_FN(Isgsm)
-
-static struct BurnRomInfo ShinfzRomDesc[] = {
-	{ "shin06.u13",     0x200000, 0x39d773e9, BRF_ESS | BRF_PRG },
-};
-
-STDROMPICKEXT(Shinfz, Shinfz, Isgsm)
-STD_ROM_FN(Shinfz)
-
-static struct BurnRomInfo TetrbxRomDesc[] = {
-	{ "tetr06.u13",     0x080000, 0x884dd693, BRF_ESS | BRF_PRG },
-};
-
-STDROMPICKEXT(Tetrbx, Tetrbx, Isgsm)
-STD_ROM_FN(Tetrbx)
-
-static UINT32 ShinfzSecurity(UINT32 input)
-{
-	return BITSWAP32(input, 19, 20, 25, 26, 15, 0, 16, 2, 8, 9, 13, 14, 31, 21, 7, 18, 11, 30, 22, 17, 3, 4, 12, 28, 29, 5, 27, 10, 23, 24, 1, 6);
-}
-
-static UINT32 TetrbxSecurity(UINT32 input)
-{
-	return input;
-}
-
-UINT8 __fastcall IsgsmReadByte(UINT32 a)
-{
-	switch (a) {
-		case 0xc41001: {
-			return 0xff - System16Input[0];
-		}
-		
-		case 0xc41003: {
-			return 0xff - System16Input[1];
-		}
-		
-		case 0xc41007: {
-			return 0xff - System16Input[2];
-		}
-		
-		case 0xc42001: {
-			return System16Dip[0];
-		}
-
-		case 0xc42003: {
-			return System16Dip[1];
-		}
-		
-		case 0xe80001: {
-			UINT32 Address;
-			UINT8 Data;
-			
-			IsgsmCartAddr++;
-			Address = (IsgsmCartAddr & (nCartSize - 1));
-			Data = System16Rom[(0x100000 + Address) ^ 1] ^ IsgsmReadXor;
-			
-			return Data;
-		}
-		
-		case 0xe80003: {
-			return System16Dip[2];
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
-#endif
-
-	return 0xff;
-}
-
-void __fastcall IsgsmWriteByte(UINT32 a, UINT8 d)
-{
-	if (a >= 0x400000 && a <= 0x40ffff) {
-		System16BTileByteWrite((a - 0x400000) ^ 1, d);
-		return;
-	}
-	
-	switch (a) {
-		case 0x3f0001: {
-			if (System16TileBanks[0] != (d & 0x07)) {
-				System16TileBanks[0] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3f0003: {
-			if (System16TileBanks[1] != (d & 0x07)) {
-				System16TileBanks[1] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3f2001: {
-			if (System16TileBanks[0] != (d & 0x07)) {
-				System16TileBanks[0] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0x3f2003: {
-			if (System16TileBanks[1] != (d & 0x07)) {
-				System16TileBanks[1] = d & 0x07;
-				System16RecalcBgTileMap = 1;
-				System16RecalcBgAltTileMap = 1;
-				System16RecalcFgTileMap = 1;
-				System16RecalcFgAltTileMap = 1;
-			}
-			return;
-		}
-		
-		case 0xc40001: {
-			System16VideoEnable = d & 0x20;
-			System16ScreenFlip = d & 0x40;
-			return;
-		}
-		
-		case 0xc43001: {
-			// ????
-			return;
-		}
-		
-		case 0xe00001: {
-			UINT8 *pDest = 0;
-			int AddressMask = 0;
-			
-			switch (IsgsmType & 0x0f) {
-				case 0x00: {
-					pDest = System16Sprites;
-					AddressMask = 0x1fffff;
-					break;
-				}
-
-				case 0x01: {
-					pDest = System16TempGfx;
-					AddressMask = 0xfffff;
-					break;
-				}
-
-				case 0x02: {
-					pDest = System16Z80Rom;
-					AddressMask = 0x3ffff;
-					break;
-				}
-
-				case 0x03: {
-					pDest = System16Rom + 0x300000;
-					AddressMask = 0xfffff;
-					break;
-				}
-			}
-
-			if ((IsgsmType & 0x10) == 0x00) {
-				switch (IsgsmType & 0xe0) {
-					case 0x00: d = BITSWAP08(d, 0, 7, 6, 5, 4, 3, 2, 1); break;
-					case 0x20: d = BITSWAP08(d, 7, 6, 5, 4, 3, 2, 1, 0); break;
-					case 0x40: d = BITSWAP08(d, 6, 5, 4, 3, 2, 1, 0, 7); break;
-					case 0x60: d = BITSWAP08(d, 5, 4, 3, 2, 1, 0, 7, 6); break;
-					case 0x80: d = BITSWAP08(d, 4, 3, 2, 1, 0, 7, 6, 5); break;
-					case 0xa0: d = BITSWAP08(d, 3, 2, 1, 0, 7, 6, 5, 4); break;
-					case 0xc0: d = BITSWAP08(d, 2, 1, 0, 7, 6, 5, 4, 3); break;
-					case 0xe0: d = BITSWAP08(d, 1, 0, 7, 6, 5, 4, 3, 2); break;
-				}
-			}
-
-			if (pDest) {
-				INT32 BytesToWrite;
-				BytesToWrite = 1;
-
-				if (IsgsmMode & 0x04) {
-					if (!IsgsmRleLatched)	{
-						if (IsgsmRleControlPosition == 8) {
-							IsgsmRleControlByte = d;
-							IsgsmRleControlPosition = 0;
-							BytesToWrite = 0;
-						} else {
-							if (((IsgsmRleControlByte << IsgsmRleControlPosition) & 0x80) == 0) {
-								IsgsmRleByte = d;
-								IsgsmRleLatched = 1;
-							} else {
-								BytesToWrite = 1;
-							}
-
-							IsgsmRleControlPosition++;
-						}
-					} else {
-						IsgsmRleLatched = 0;
-						BytesToWrite = d + 2;
-						d = IsgsmRleByte;
-					}
-				}
-
-				for (INT32 i = 0; i < BytesToWrite; i++) {
-					UINT8 Byte = 0;
-
-					if (IsgsmMode & 0x08) {
-						IsgsmAddr++;
-						IsgsmAddr &= 0xfffffff;
-					} else {
-						IsgsmAddr--;
-						IsgsmAddr &= 0xfffffff;
-					}
-					
-					switch (IsgsmMode & 0x03) {
-						case 0x00: Byte = d; break;
-						case 0x01: Byte = pDest[IsgsmAddr & AddressMask] ^ d; break;
-						case 0x02: Byte = pDest[IsgsmAddr & AddressMask] | d; break;
-						case 0x03: Byte = pDest[IsgsmAddr & AddressMask] & d; break;
-					}
-
-					if ((IsgsmType & 0x10) == 0x10) {
-						switch (IsgsmType & 0xe0) {
-							case 0x00: Byte = BITSWAP08(Byte, 0, 7, 6, 5, 4, 3, 2, 1); break;
-							case 0x20: Byte = BITSWAP08(Byte, 7, 6, 5, 4, 3, 2, 1, 0); break;
-							case 0x40: Byte = BITSWAP08(Byte, 6, 5, 4, 3, 2, 1, 0, 7); break;
-							case 0x60: Byte = BITSWAP08(Byte, 5, 4, 3, 2, 1, 0, 7, 6); break;
-							case 0x80: Byte = BITSWAP08(Byte, 4, 3, 2, 1, 0, 7, 6, 5); break;
-							case 0xa0: Byte = BITSWAP08(Byte, 3, 2, 1, 0, 7, 6, 5, 4); break;
-							case 0xc0: Byte = BITSWAP08(Byte, 2, 1, 0, 7, 6, 5, 4, 3); break;
-							case 0xe0: Byte = BITSWAP08(Byte, 1, 0, 7, 6, 5, 4, 3, 2); break;
-						}
-					}
-					
-					if ((IsgsmType & 0x0f) == 0x01) {
-						if (IsgsmAddr < System16TileRomSize) {
-							pDest[IsgsmAddr] = Byte;
-							GfxDecodeSingle((IsgsmAddr & 0x1ffff) / 8, 3, 8, 8, IsgsmTilePlaneOffsets, IsgsmTileXOffsets, IsgsmTileYOffsets, 0x40, System16TempGfx, System16Tiles);
-						}
-					} else {
-						pDest[IsgsmAddr & AddressMask] = Byte;
-					}
-				}
-			}
-			
-			return;
-		}
-		
-		case 0xe00003: {
-			IsgsmType = d;
-			return;
-		}
-		
-		case 0xfe0007: {
-			System16SoundLatch = d & 0xff;
-			ZetOpen(0);
-			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
-			ZetClose();
-			return;
-		}
-		
-		case 0xfe0009: {
-			if (d == 0) {
-				ZetOpen(0);
-				ZetReset();
-				ZetClose();
-				System16Z80Enable = true;
-			}
-			
-			if (d == 1) {
-				ZetOpen(0);
-				ZetReset();
-				ZetClose();
-				System16Z80Enable = false;
-			}
-			
-			return;
-		}
-		
-		case 0xfe000b: {
-			SekMapMemory(System16Rom + 0x300000, 0x000000, 0x0fffff, MAP_ROM);
-			GameRomMapped = 1;
-			return;
-		}
-	}
-
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
-#endif
-}
-
-UINT16 __fastcall IsgsmReadWord(UINT32 a)
-{
-	switch (a) {
-		case 0xe80008: {
-			return (IsgsmSecurity >> 16) & 0xffff;
-		}
-		
-		case 0xe8000a: {
-			return IsgsmSecurity & 0xffff;
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Read Word -> 0x%06X\n"), a);
-#endif
-
-	return 0xffff;
-}
-
-void __fastcall IsgsmWriteWord(UINT32 a, UINT16 d)
-{
-	if (a >= 0x400000 && a <= 0x40ffff) {
-		System16BTileWordWrite(a - 0x400000, d);
-		return;
-	}
-	
-	switch (a) {
-		case 0xe00004: {
-			IsgsmAddrLatch = d;
-			return;
-		}
-		
-		case 0xe00006: {
-			IsgsmMode = (IsgsmAddrLatch & 0xf000) >> 12;
-			IsgsmAddr = d | ((IsgsmAddrLatch & 0x0fff) << 16);
-
-			IsgsmRleControlPosition = 8;
-			IsgsmRleControlByte = 0;
-			IsgsmRleLatched = 0;
-			return;
-		}
-		
-		case 0xe80004: {
-			IsgsmCartAddrLatch = d;
-			return;
-		}
-		
-		case 0xe80006: {
-			IsgsmCartAddr = d | IsgsmCartAddrLatch << 16;
-			return;
-		}
-		
-		case 0xe80008: {
-			IsgsmSecurityLatch = d;
-			return;
-		}
-		
-		case 0xe8000a: {
-			IsgsmSecurity = d | IsgsmSecurityLatch << 16;
-			if (IsgsmSecurityCallback) IsgsmSecurity = IsgsmSecurityCallback(IsgsmSecurity);
-			return;
-		}
-	}
-	
-#if 0 && defined FBNEO_DEBUG
-	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
-#endif
-}
-
-static void IsgsmMap68K()
-{
-	SekInit(0, 0x68000);
-	SekOpen(0);
-	SekMapMemory(System16Rom            , 0x000000, 0x0fffff, MAP_ROM);
-	SekMapMemory(System16ExtraRam       , 0x200000, 0x23ffff, MAP_RAM);
-	SekMapMemory(System16TileRam        , 0x400000, 0x40ffff, MAP_READ);
-	SekMapMemory(System16TextRam        , 0x410000, 0x410fff, MAP_RAM);
-	SekMapMemory(System16SpriteRam      , 0x440000, 0x4407ff, MAP_RAM);
-	SekMapMemory(System16PaletteRam     , 0x840000, 0x840fff, MAP_RAM);
-	SekMapMemory(System16Rom + 0x100000 , 0xee0000, 0xefffff, MAP_ROM);
-	SekMapMemory(System16Ram            , 0xffc000, 0xffffff, MAP_RAM);
-	SekSetReadWordHandler(0, IsgsmReadWord);
-	SekSetWriteWordHandler(0, IsgsmWriteWord);
-	SekSetReadByteHandler(0, IsgsmReadByte);
-	SekSetWriteByteHandler(0, IsgsmWriteByte);
-	SekClose();
-}
-
-static INT32 IsgsmInit()
-{
-	System16RomSize        = 0x400000;
-	System16TileRomSize    = 0x60000;
-	System16SpriteRomSize  = 0x200000;
-	System16UPD7759DataSize = 0x30000;
-	
-	System16Map68KDo = IsgsmMap68K;
-	
-	INT32 nRet = System16Init();
-	
-	if (!nRet) {
-		memset(System16Rom, 0, 0x400000);
-		
-		// Load and Decrypt BIOS
-		UINT16 *pTemp = (UINT16*)BurnMalloc(0x20000);
-		memset(pTemp, 0, 0x20000);
-		UINT16 *Rom = (UINT16*)System16Rom;
-		
-		nRet = BurnLoadRom(System16Rom, 0x80, 1); if (nRet) return 1;
-		
-		for (UINT32 i = 0; i < 0x10000; i++) {
-			pTemp[i ^ 0x4127] = BITSWAP16(Rom[i], 6, 14, 4, 2, 12, 10, 8, 0, 1, 9, 11, 13, 3, 5, 7, 15);
-		}
-		
-		memcpy(Rom, pTemp, 0x20000);
-		BurnFree(pTemp);
-		
-		// Load program ROM
-		nRet = BurnLoadRom(System16Rom + 0x100000, 0, 1); if (nRet) return 1;
-		
-		System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
-		memset(System16TempGfx, 0, System16TileRomSize);
-		memset(System16Tiles, 0, System16NumTiles * 8 * 8);
-		memset(System16Sprites, 0, System16TileRomSize);
-		
-		System16UPD7759Data = (UINT8*)(System16Z80Rom + 0x10000);
-	}
-	
-	System16ClockSpeed = 16000000;
-
-	return nRet;
-}
-
-static INT32 ShinfzInit()
-{
-	INT32 nRet = IsgsmInit();
-	
-	if (!nRet) {
-		nCartSize = 0x200000;
-		UINT16 *pTemp = (UINT16*)BurnMalloc(0x200000);
-		memset(pTemp, 0, 0x200000);
-		UINT16 *Rom = (UINT16*)(System16Rom + 0x100000);
-		
-		for (UINT32 i = 0; i < 0x100000; i++) {
-			pTemp[i ^ 0x68956] = BITSWAP16(Rom[i], 8, 4, 12, 3, 6, 7, 1, 0, 15, 11, 5, 14, 10, 2, 9, 13);
-		}
-		
-		memcpy(Rom, pTemp, 0x200000);
-		BurnFree(pTemp);
-		
-		IsgsmReadXor = 0x66;
-		IsgsmSecurityCallback = ShinfzSecurity;
-	}
-
-	return nRet;
-}
-
-static INT32 TetrbxInit()
-{
-	INT32 nRet = IsgsmInit();
-	
-	if (!nRet) {
-		nCartSize = 0x80000;
-		UINT16 *pTemp = (UINT16*)BurnMalloc(nCartSize);
-		memset(pTemp, 0, nCartSize);
-		UINT16 *Rom = (UINT16*)(System16Rom + 0x100000);
-		
-		for (UINT32 i = 0; i < nCartSize >> 1; i++) {
-			pTemp[i ^ 0x2a6e6] = BITSWAP16(Rom[i], 4, 0, 12, 5, 7, 3, 1, 14, 10, 11, 9, 6, 15, 2, 13, 8);
-		}
-		
-		memcpy(Rom, pTemp, nCartSize);
-		BurnFree(pTemp);
-		
-		IsgsmReadXor = 0x73;
-		IsgsmSecurityCallback = TetrbxSecurity;
-	}
-
-	return nRet;
-}
-
-static INT32 IsgsmExit()
-{
-	INT32 nRet = System16Exit();
-	
-	BurnFree(System16TempGfx);
-	
-	IsgsmCartAddrLatch = 0;
-	IsgsmCartAddr = 0;
-	IsgsmType = 0;
-	IsgsmAddr = 0;
-	IsgsmMode = 0;
-	IsgsmAddrLatch = 0;
-	IsgsmSecurity = 0;
-	IsgsmSecurityLatch = 0;
-	IsgsmRleControlPosition = 0;
-	IsgsmRleControlByte = 0;
-	IsgsmRleLatched = 0;
-	IsgsmRleByte = 0;
-	IsgsmReadXor = 0;
-	nCartSize = 0;
-	IsgsmSecurityCallback = NULL;
-	GameRomMapped = 0;
-	
-	return nRet;
-}
-
-static INT32 IsgsmScan(INT32 nAction,INT32 *pnMin)
-{
-	if (pnMin != NULL) {
-		*pnMin =  0x029719;
-	}
-	
-	struct BurnArea ba;
-	
-	if (nAction & ACB_DRIVER_DATA) {
-		memset(&ba, 0, sizeof(ba));
-		ba.Data		= System16Sprites;
-		ba.nLen		= System16SpriteRomSize - 1;
-		ba.nAddress = 0;
-		ba.szName	= "SpriteROM";
-		BurnAcb(&ba);
-		
-		memset(&ba, 0, sizeof(ba));
-		ba.Data		= System16TempGfx;
-		ba.nLen		= System16TileRomSize - 1;
-		ba.nAddress = 0;
-		ba.szName	= "TileROM";
-		BurnAcb(&ba);
-		
-		memset(&ba, 0, sizeof(ba));
-		ba.Data		= System16Z80Rom;
-		ba.nLen		= 0x3ffff;
-		ba.nAddress = 0;
-		ba.szName	= "Z80ROM";
-		BurnAcb(&ba);
-		
-		memset(&ba, 0, sizeof(ba));
-		ba.Data		= System16Rom + 0x300000;
-		ba.nLen		= 0xfffff;
-		ba.nAddress = 0;
-		ba.szName	= "GameROM";
-		BurnAcb(&ba);
-		
-		SCAN_VAR(IsgsmCartAddrLatch);
-		SCAN_VAR(IsgsmCartAddr);
-		SCAN_VAR(IsgsmType);
-		SCAN_VAR(IsgsmAddr);
-		SCAN_VAR(IsgsmMode);
-		SCAN_VAR(IsgsmAddrLatch);
-		SCAN_VAR(IsgsmSecurity);
-		SCAN_VAR(IsgsmSecurityLatch);
-		SCAN_VAR(IsgsmRleControlPosition);
-		SCAN_VAR(IsgsmRleControlByte);
-		SCAN_VAR(IsgsmRleLatched);
-		SCAN_VAR(IsgsmRleByte);
-		SCAN_VAR(GameRomMapped);
-		
-		if (nAction & ACB_WRITE) {
-			if (GameRomMapped) {
-				SekOpen(0);
-				SekMapMemory(System16Rom + 0x300000, 0x000000, 0x0fffff, MAP_ROM);
-				SekClose();
-			}
-			
-			for (UINT32 i = 0; i < System16TileRomSize; i++) {
-				GfxDecodeSingle((i & 0x1ffff) / 8, 3, 8, 8, IsgsmTilePlaneOffsets, IsgsmTileXOffsets, IsgsmTileYOffsets, 0x40, System16TempGfx, System16Tiles);
-			}
-		}
-	}
-
-	return System16Scan(nAction, pnMin);
-}
-
-struct BurnDriver BurnDrvIsgsm = {
-	"isgsm", NULL, NULL, NULL, "2006",
-	"ISG Selection Master Type 2006 System BIOS\0", "BIOS only", "ISG", "ISG Selection Master Type 2006",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING | BDF_BOARDROM, 0, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_BIOS, 0,
-	NULL, IsgsmRomInfo, IsgsmRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, NULL,
-	IsgsmInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvShinfz = {
-	"shinfz", NULL, "isgsm", NULL, "2006",
-	"Shinobi / FZ-2006 (Korean System 16 bootleg) (ISG Selection Master Type 2006)\0", NULL, "ISG", "ISG Selection Master Type 2006",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, ShinfzRomInfo, ShinfzRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, ShinfzDIPInfo,
-	ShinfzInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
-
-struct BurnDriver BurnDrvTetrbx = {
-	"tetrbx", NULL, "isgsm", NULL, "2006",
-	"Tetris / Bloxeed (Korean System 16 bootleg) (ISG Selection Master Type 2006)\0", NULL, "ISG", "ISG Selection Master Type 2006",
-	NULL, NULL, NULL, NULL,
-	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
-	NULL, TetrbxRomInfo, TetrbxRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, TetrbxDIPInfo,
-	TetrbxInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
-	NULL, 0x1800, 320, 224, 4, 3
-};
+#include "sys16.h"
+
+/*====================================================
+Input defs
+====================================================*/
+
+#define A(a, b, c, d) {a, b, (UINT8*)(c), d}
+
+static struct BurnInputInfo System16bInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 2" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(System16b)
+
+static struct BurnInputInfo System16bfire1InputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(System16bfire1)
+
+static struct BurnInputInfo System16bfire3InputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 2" },
+	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 3" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 2" },
+	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 3" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(System16bfire3)
+
+static struct BurnInputInfo System16bfire4InputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 2" },
+	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 3" },
+	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 3, "p1 fire 4" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 2" },
+	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 3" },
+	{"P2 Fire 4"         , BIT_DIGITAL  , System16InputPort2 + 3, "p2 fire 4" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(System16bfire4)
+
+static struct BurnInputInfo System16bDip3InputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 1, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 2" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+	{"Dip 3"             , BIT_DIPSWITCH, System16Dip + 2        , "dip"      },
+};
+
+STDINPUTINFO(System16bDip3)
+
+static struct BurnInputInfo UltracinInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 1" },
+
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 fire 1" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Ultracin)
+
+static struct BurnInputInfo AceattacInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort3 + 2, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort3 + 3, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort3 + 0, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort3 + 1, "p1 right"  },
+	{"P1 Dial Left"      , BIT_DIGITAL  , System16InputPort4 + 0, "p1 fire 14"},
+	{"P1 Dial Right"     , BIT_DIGITAL  , System16InputPort4 + 1, "p1 fire 15"},
+	{"P1 Block"          , BIT_DIGITAL  , System16InputPort0 + 6, "p1 fire 1" },
+	{"P1 Select"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 2" },
+	{"P1 Attack Dir0"    , BIT_DIGITAL  , System16InputPort1 + 0, "p1 fire 3" },
+	{"P1 Attack Dir1"    , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 4" },
+	{"P1 Attack Dir2"    , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 5" },
+	{"P1 Attack Dir3"    , BIT_DIGITAL  , System16InputPort1 + 3, "p1 fire 6" },
+	{"P1 Attack Dir4"    , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 7" },
+	{"P1 Attack Dir5"    , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 8" },
+	{"P1 Attack Dir6"    , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 9" },
+	{"P1 Attack Dir7"    , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 10"},
+	{"P1 Attack Pow0"    , BIT_DIGITAL  , System16InputPort2 + 4, "p1 fire 11"},
+	{"P1 Attack Pow1"    , BIT_DIGITAL  , System16InputPort2 + 5, "p1 fire 12"},
+	{"P1 Attack Pow2"    , BIT_DIGITAL  , System16InputPort2 + 6, "p1 fire 13"},
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort3 + 6, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort3 + 7, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort3 + 4, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort3 + 5, "p2 right"  },
+	{"P2 Dial Left"      , BIT_DIGITAL  , System16InputPort4 + 2, "p2 fire 14"},
+	{"P2 Dial Right"     , BIT_DIGITAL  , System16InputPort4 + 3, "p2 fire 15"},
+	{"P2 Block"          , BIT_DIGITAL  , System16InputPort0 + 7, "p2 fire 1" },
+	{"P2 Select"         , BIT_DIGITAL  , System16InputPort5 + 4, "p2 fire 2" },
+	{"P2 Attack Dir0"    , BIT_DIGITAL  , System16InputPort5 + 0, "p2 fire 3" },
+	{"P2 Attack Dir1"    , BIT_DIGITAL  , System16InputPort5 + 1, "p2 fire 4" },
+	{"P2 Attack Dir2"    , BIT_DIGITAL  , System16InputPort5 + 2, "p2 fire 5" },
+	{"P2 Attack Dir3"    , BIT_DIGITAL  , System16InputPort5 + 3, "p2 fire 6" },
+	{"P2 Attack Dir4"    , BIT_DIGITAL  , System16InputPort5 + 4, "p2 fire 7" },
+	{"P2 Attack Dir5"    , BIT_DIGITAL  , System16InputPort5 + 5, "p2 fire 8" },
+	{"P2 Attack Dir6"    , BIT_DIGITAL  , System16InputPort5 + 6, "p2 fire 9" },
+	{"P2 Attack Dir7"    , BIT_DIGITAL  , System16InputPort5 + 7, "p2 fire 10"},
+	{"P2 Attack Pow0"    , BIT_DIGITAL  , System16InputPort6 + 4, "p2 fire 11"},
+	{"P2 Attack Pow1"    , BIT_DIGITAL  , System16InputPort6 + 5, "p2 fire 12"},
+	{"P2 Attack Pow2"    , BIT_DIGITAL  , System16InputPort6 + 6, "p2 fire 13"},
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
+};
+
+STDINPUTINFO(Aceattac)
+
+static struct BurnInputInfo Afighter_analogInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	A("Steering"         , BIT_ANALOG_ABS, &System16AnalogPort0,  "p1 x-axis" ),
+	A("Accelerate"       , BIT_ANALOG_ABS, &System16AnalogPort1,  "p1 y-axis" ),
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 2" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 3" },
+	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 4" },
+	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 5" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
+};
+
+STDINPUTINFO(Afighter_analog)
+
+static struct BurnInputInfo AtomicpInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort1 + 7, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 6, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 7, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort1 + 6, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 0, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 1, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 2, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 3, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 4, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 5, "p1 fire 2" },
+	
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort1 + 0, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort1 + 1, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort1 + 2, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort1 + 3, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p2 fire 2" },
+
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Atomicp)
+
+static struct BurnInputInfo BulletInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+	{"Coin 3"            , BIT_DIGITAL  , System16InputPort0 + 7, "p3 coin"   },
+	{"Start 3"           , BIT_DIGITAL  , System16InputPort0 + 6, "p3 start"  },
+
+	{"P1 Up 1"           , BIT_DIGITAL  , System16InputPort1 + 1, "p1 up"     },
+	{"P1 Down 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p1 down"   },
+	{"P1 Left 1"         , BIT_DIGITAL  , System16InputPort1 + 3, "p1 left"   },
+	{"P1 Right 1"        , BIT_DIGITAL  , System16InputPort1 + 2, "p1 right"  },
+	{"P1 Up 2"           , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up 2"   },
+	{"P1 Down 2"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down 2" },
+	{"P1 Left 2"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left 2" },
+	{"P1 Right 2"        , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right 2"},	
+
+	{"P2 Up 1"           , BIT_DIGITAL  , System16InputPort2 + 1, "p2 up"     },
+	{"P2 Down 1"         , BIT_DIGITAL  , System16InputPort2 + 0, "p2 down"   },
+	{"P2 Left 1"         , BIT_DIGITAL  , System16InputPort2 + 3, "p2 left"   },
+	{"P2 Right 1"        , BIT_DIGITAL  , System16InputPort2 + 2, "p2 right"  },
+	{"P2 Up 2"           , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up 2"   },
+	{"P2 Down 2"         , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down 2" },
+	{"P2 Left 2"         , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left 2" },
+	{"P2 Right 2"        , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right 2"},	
+	
+	{"P3 Up 1"           , BIT_DIGITAL  , System16InputPort3 + 1, "p3 up"     },
+	{"P3 Down 1"         , BIT_DIGITAL  , System16InputPort3 + 0, "p3 down"   },
+	{"P3 Left 1"         , BIT_DIGITAL  , System16InputPort3 + 3, "p3 left"   },
+	{"P3 Right 1"        , BIT_DIGITAL  , System16InputPort3 + 2, "p3 right"  },
+	{"P3 Up 2"           , BIT_DIGITAL  , System16InputPort3 + 5, "p3 up 2"   },
+	{"P3 Down 2"         , BIT_DIGITAL  , System16InputPort3 + 4, "p3 down 2" },
+	{"P3 Left 2"         , BIT_DIGITAL  , System16InputPort3 + 7, "p3 left 2" },
+	{"P3 Right 2"        , BIT_DIGITAL  , System16InputPort3 + 6, "p3 right 2"},
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Bullet)
+
+static struct BurnInputInfo DunkshotInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"  },
+	{"Start 3"           , BIT_DIGITAL   , System16InputPort0 + 6, "p3 start"  },
+	{"Start 4"           , BIT_DIGITAL   , System16InputPort0 + 7, "p4 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL   , System16InputPort2 + 2, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL   , System16InputPort2 + 3, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL   , System16InputPort2 + 0, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL   , System16InputPort2 + 1, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 0, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 1, "p1 fire 2" },
+
+	{"P2 Up"             , BIT_DIGITAL   , System16InputPort2 + 6, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL   , System16InputPort2 + 7, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL   , System16InputPort2 + 4, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL   , System16InputPort2 + 5, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 2, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 3, "p2 fire 2" },
+	
+	{"P3 Up"             , BIT_DIGITAL   , System16InputPort3 + 2, "p3 up"     },
+	{"P3 Down"           , BIT_DIGITAL   , System16InputPort3 + 3, "p3 down"   },
+	{"P3 Left"           , BIT_DIGITAL   , System16InputPort3 + 0, "p3 left"   },
+	{"P3 Right"          , BIT_DIGITAL   , System16InputPort3 + 1, "p3 right"  },
+	{"P3 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 4, "p3 fire 1" },
+	{"P3 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 5, "p3 fire 2" },
+
+	{"P4 Up"             , BIT_DIGITAL   , System16InputPort3 + 6, "p4 up"     },
+	{"P4 Down"           , BIT_DIGITAL   , System16InputPort3 + 7, "p4 down"   },
+	{"P4 Left"           , BIT_DIGITAL   , System16InputPort3 + 4, "p4 left"   },
+	{"P4 Right"          , BIT_DIGITAL   , System16InputPort3 + 5, "p4 right"  },
+	{"P4 Fire 1"         , BIT_DIGITAL   , System16InputPort1 + 6, "p4 fire 1" },
+	{"P4 Fire 2"         , BIT_DIGITAL   , System16InputPort1 + 7, "p4 fire 2" },
+
+	{"Service"           , BIT_DIGITAL   , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL   , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL   , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH , System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH , System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Dunkshot)
+
+static struct BurnInputInfo ExctleagInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"      },
+	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"     },
+	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"      },
+	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"     },
+
+	{"P1 Up"             , BIT_DIGITAL   , System16InputPort4 + 2, "p1 up"        },
+	{"P1 Down"           , BIT_DIGITAL   , System16InputPort4 + 3, "p1 down"      },
+	{"P1 Left"           , BIT_DIGITAL   , System16InputPort4 + 0, "p1 left"      },
+	{"P1 Right"          , BIT_DIGITAL   , System16InputPort4 + 1, "p1 right"     },
+	{"P1 Bant0"          , BIT_DIGITAL   , System16InputPort1 + 0, "p1 fire 1"    },
+	{"P1 Bant1"          , BIT_DIGITAL   , System16InputPort1 + 1, "p1 fire 2"    },
+	{"P1 Bant2"          , BIT_DIGITAL   , System16InputPort1 + 2, "p1 fire 3"    },
+	{"P1 Swing0"         , BIT_DIGITAL   , System16InputPort1 + 3, "p1 fire 4"    },
+	{"P1 Swing1"         , BIT_DIGITAL   , System16InputPort1 + 4, "p1 fire 5"    },
+	{"P1 Low"            , BIT_DIGITAL   , System16InputPort1 + 5, "p1 fire 6"    },
+	{"P1 Mid"            , BIT_DIGITAL   , System16InputPort1 + 6, "p1 fire 7"    },
+	{"P1 Hi"             , BIT_DIGITAL   , System16InputPort1 + 7, "p1 fire 8"    },
+	{"P1 Change"         , BIT_DIGITAL   , System16InputPort3 + 1, "p1 fire 9"    },
+	{"P1 Select"         , BIT_DIGITAL   , System16InputPort3 + 2, "p1 fire 10"   },
+	{"P1 Chase"          , BIT_DIGITAL   , System16InputPort3 + 0, "p1 fire 11"   },
+	
+	{"P2 Up"             , BIT_DIGITAL   , System16InputPort4 + 6, "p2 up"        },
+	{"P2 Down"           , BIT_DIGITAL   , System16InputPort4 + 7, "p2 down"      },
+	{"P2 Left"           , BIT_DIGITAL   , System16InputPort4 + 4, "p2 left"      },
+	{"P2 Right"          , BIT_DIGITAL   , System16InputPort4 + 5, "p2 right"     },
+	{"P2 Bant0"          , BIT_DIGITAL   , System16InputPort2 + 0, "p2 fire 1"    },
+	{"P2 Bant1"          , BIT_DIGITAL   , System16InputPort2 + 1, "p2 fire 2"    },
+	{"P2 Bant2"          , BIT_DIGITAL   , System16InputPort2 + 2, "p2 fire 3"    },
+	{"P2 Swing0"         , BIT_DIGITAL   , System16InputPort2 + 3, "p2 fire 4"    },
+	{"P2 Swing1"         , BIT_DIGITAL   , System16InputPort2 + 4, "p2 fire 5"    },
+	{"P2 Low"            , BIT_DIGITAL   , System16InputPort2 + 5, "p2 fire 6"    },
+	{"P2 Mid"            , BIT_DIGITAL   , System16InputPort2 + 6, "p2 fire 7"    },
+	{"P2 Hi"             , BIT_DIGITAL   , System16InputPort2 + 7, "p2 fire 8"    },
+	{"P2 Change"         , BIT_DIGITAL   , System16InputPort3 + 5, "p2 fire 9"    },
+	{"P2 Select"         , BIT_DIGITAL   , System16InputPort3 + 6, "p2 fire 10"   },
+	{"P2 Chase"          , BIT_DIGITAL   , System16InputPort3 + 4, "p2 fire 11"   },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"      },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"         },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"        },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"          },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"          },
+};
+
+STDINPUTINFO(Exctleag)
+
+static struct BurnInputInfo FpointblInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 1" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 2, "p2 fire 1" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Fpointbl)
+
+static struct BurnInputInfo HwchampInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"  },
+
+	A("Left/Right"       , BIT_ANALOG_REL, &System16AnalogPort0,   "p1 x-axis"  ),
+	A("Left"             , BIT_ANALOG_REL, &System16AnalogPort1,   "p1 fire 1"  ),
+	A("Right"            , BIT_ANALOG_REL, &System16AnalogPort2,   "p1 fire 2"  ),
+	
+	{"Service"           , BIT_DIGITAL   , System16InputPort0 + 3 , "service"   },
+	{"Diagnostics"       , BIT_DIGITAL   , System16InputPort0 + 2 , "diag"      },
+	{"Reset"             , BIT_DIGITAL   , &System16Reset         , "reset"     },
+	{"Dip 1"             , BIT_DIPSWITCH , System16Dip + 0        , "dip"       },
+	{"Dip 2"             , BIT_DIPSWITCH , System16Dip + 1        , "dip"       },
+};
+
+STDINPUTINFO(Hwchamp)
+
+static struct BurnInputInfo LockonphInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort2 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort2 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort2 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort2 + 5, "p2 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 0, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 1, "p1 fire 2" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 0, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 1, "p2 fire 2" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort2 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort2 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Lockonph)
+
+static struct BurnInputInfo PassshtInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+	{"Start 3"           , BIT_DIGITAL  , System16InputPort0 + 6, "p3 start"  },
+	{"Start 4"           , BIT_DIGITAL  , System16InputPort0 + 7, "p4 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 1, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 0, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 3, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 2, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 4, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 5, "p1 fire 2" },
+	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort1 + 6, "p1 fire 3" },
+	{"P1 Fire 4"         , BIT_DIGITAL  , System16InputPort1 + 7, "p1 fire 4" },
+
+	{"P2 Up"             , BIT_DIGITAL  , System16InputPort2 + 1, "p2 up"     },
+	{"P2 Down"           , BIT_DIGITAL  , System16InputPort2 + 0, "p2 down"   },
+	{"P2 Left"           , BIT_DIGITAL  , System16InputPort2 + 3, "p2 left"   },
+	{"P2 Right"          , BIT_DIGITAL  , System16InputPort2 + 2, "p2 right"  },
+	{"P2 Fire 1"         , BIT_DIGITAL  , System16InputPort2 + 4, "p2 fire 1" },
+	{"P2 Fire 2"         , BIT_DIGITAL  , System16InputPort2 + 5, "p2 fire 2" },
+	{"P2 Fire 3"         , BIT_DIGITAL  , System16InputPort2 + 6, "p2 fire 3" },
+	{"P2 Fire 4"         , BIT_DIGITAL  , System16InputPort2 + 7, "p2 fire 4" },
+	
+	{"P3 Up"             , BIT_DIGITAL  , System16InputPort3 + 1, "p3 up"     },
+	{"P3 Down"           , BIT_DIGITAL  , System16InputPort3 + 0, "p3 down"   },
+	{"P3 Left"           , BIT_DIGITAL  , System16InputPort3 + 3, "p3 left"   },
+	{"P3 Right"          , BIT_DIGITAL  , System16InputPort3 + 2, "p3 right"  },
+	{"P3 Fire 1"         , BIT_DIGITAL  , System16InputPort3 + 4, "p3 fire 1" },
+	{"P3 Fire 2"         , BIT_DIGITAL  , System16InputPort3 + 5, "p3 fire 2" },
+	{"P3 Fire 3"         , BIT_DIGITAL  , System16InputPort3 + 6, "p3 fire 3" },
+	{"P3 Fire 4"         , BIT_DIGITAL  , System16InputPort3 + 7, "p3 fire 4" },
+
+	{"P4 Up"             , BIT_DIGITAL  , System16InputPort4 + 1, "p4 up"     },
+	{"P4 Down"           , BIT_DIGITAL  , System16InputPort4 + 0, "p4 down"   },
+	{"P4 Left"           , BIT_DIGITAL  , System16InputPort4 + 3, "p4 left"   },
+	{"P4 Right"          , BIT_DIGITAL  , System16InputPort4 + 2, "p4 right"  },
+	{"P4 Fire 1"         , BIT_DIGITAL  , System16InputPort4 + 4, "p4 fire 1" },
+	{"P4 Fire 2"         , BIT_DIGITAL  , System16InputPort4 + 5, "p4 fire 2" },
+	{"P4 Fire 3"         , BIT_DIGITAL  , System16InputPort4 + 6, "p4 fire 3" },
+	{"P4 Fire 4"         , BIT_DIGITAL  , System16InputPort4 + 7, "p4 fire 4" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Passsht)
+
+static struct BurnInputInfo RyukyuInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort0 + 4, "p1 start"  },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+	{"Start 2"           , BIT_DIGITAL  , System16InputPort0 + 5, "p2 start"  },
+	
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort1 + 5, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort1 + 4, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort1 + 7, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort1 + 6, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort1 + 1, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort1 + 2, "p1 fire 2" },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"  },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"     },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Ryukyu)
+
+static struct BurnInputInfo SdiInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL   , System16InputPort0 + 0, "p1 coin"      },
+	{"Start 1"           , BIT_DIGITAL   , System16InputPort0 + 4, "p1 start"     },
+	{"Coin 2"            , BIT_DIGITAL   , System16InputPort0 + 1, "p2 coin"      },
+	{"Start 2"           , BIT_DIGITAL   , System16InputPort0 + 5, "p2 start"     },
+
+	{"P1 Up"             , BIT_DIGITAL   , System16InputPort1 + 1, "p1 up"        },
+	{"P1 Down"           , BIT_DIGITAL   , System16InputPort1 + 0, "p1 down"      },
+	{"P1 Left"           , BIT_DIGITAL   , System16InputPort1 + 3, "p1 left"      },
+	{"P1 Right"          , BIT_DIGITAL   , System16InputPort1 + 2, "p1 right"     },
+	A("P1 Target L/R"    , BIT_ANALOG_REL, &System16AnalogPort0,   "mouse x-axis" ),
+	A("P1 Target U/D"    , BIT_ANALOG_REL, &System16AnalogPort1,   "mouse y-axis" ),
+	{"P1 Fire 1"         , BIT_DIGITAL   , System16InputPort0 + 6, "mouse button 1"},
+
+	{"P2 Up"             , BIT_DIGITAL   , System16InputPort1 + 5, "p2 up"        },
+	{"P2 Down"           , BIT_DIGITAL   , System16InputPort1 + 4, "p2 down"      },
+	{"P2 Left"           , BIT_DIGITAL   , System16InputPort1 + 7, "p2 left"      },
+	{"P2 Right"          , BIT_DIGITAL   , System16InputPort1 + 6, "p2 right"     },
+	A("P2 Target L/R"    , BIT_ANALOG_REL, &System16AnalogPort2,   "p2 x-axis"    ),
+	A("P2 Target U/D"    , BIT_ANALOG_REL, &System16AnalogPort3,   "p2 y-axis"    ),
+	{"P2 Fire 1"         , BIT_DIGITAL   , System16InputPort0 + 7, "p2 fire 1"    },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"      },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"         },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"        },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"          },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"          },
+};
+
+STDINPUTINFO(Sdi)
+
+static struct BurnInputInfo SjryukoInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort0 + 0, "p1 coin"   },
+	{"Coin 2"            , BIT_DIGITAL  , System16InputPort0 + 1, "p2 coin"   },
+
+	{"P1 A"              , BIT_DIGITAL  , System16InputPort1 + 0, "mah a"     },
+	{"P1 B"              , BIT_DIGITAL  , System16InputPort1 + 1, "mah b"     },
+	{"P1 C"              , BIT_DIGITAL  , System16InputPort1 + 2, "mah c"     },
+	{"P1 D"              , BIT_DIGITAL  , System16InputPort1 + 3, "mah d"     },
+	{"P1 E"              , BIT_DIGITAL  , System16InputPort2 + 0, "mah e"     },
+	{"P1 F"              , BIT_DIGITAL  , System16InputPort2 + 1, "mah f"     },
+	{"P1 G"              , BIT_DIGITAL  , System16InputPort2 + 2, "mah g"     },
+	{"P1 H"              , BIT_DIGITAL  , System16InputPort2 + 3, "mah h"     },
+	{"P1 I"              , BIT_DIGITAL  , System16InputPort3 + 0, "mah i"     },
+	{"P1 J"              , BIT_DIGITAL  , System16InputPort3 + 1, "mah j"     },
+	{"P1 K"              , BIT_DIGITAL  , System16InputPort3 + 2, "mah k"     },
+	{"P1 L"              , BIT_DIGITAL  , System16InputPort3 + 3, "mah l"     },
+	{"P1 M"              , BIT_DIGITAL  , System16InputPort4 + 0, "mah m"     },
+	{"P1 N"              , BIT_DIGITAL  , System16InputPort4 + 1, "mah n"     },
+	{"P1 Kan"            , BIT_DIGITAL  , System16InputPort6 + 0, "mah kan"   },
+	{"P1 Pon"            , BIT_DIGITAL  , System16InputPort4 + 3, "mah pon"   },
+	{"P1 Chi"            , BIT_DIGITAL  , System16InputPort4 + 2, "mah chi"   },
+	{"P1 Reach"          , BIT_DIGITAL  , System16InputPort6 + 1, "mah reach" },
+	{"P1 Ron"            , BIT_DIGITAL  , System16InputPort6 + 2, "mah ron"   },
+	{"P1 Bet"            , BIT_DIGITAL  , System16InputPort5 + 1, "mah bet"   },
+	{"P1 Last Chance"    , BIT_DIGITAL  , System16InputPort1 + 4, "mah lc"    },
+	{"P1 Score"          , BIT_DIGITAL  , System16InputPort5 + 0, "mah score" },
+	{"P1 Flip Flop"      , BIT_DIGITAL  , System16InputPort4 + 4, "mah ff"    },
+
+	{"Service"           , BIT_DIGITAL  , System16InputPort0 + 3 , "service"   },
+	{"Diagnostics"       , BIT_DIGITAL  , System16InputPort0 + 2 , "diag"      },
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"     },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"       },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"       },
+};
+
+STDINPUTINFO(Sjryuko)
+
+static struct BurnInputInfo SnapperInputList[] = {
+	{"Coin 1"            , BIT_DIGITAL  , System16InputPort1 + 0, "p1 coin"   },
+	{"Start 1"           , BIT_DIGITAL  , System16InputPort1 + 1, "p1 start"  },
+
+	{"P1 Up"             , BIT_DIGITAL  , System16InputPort0 + 0, "p1 up"     },
+	{"P1 Down"           , BIT_DIGITAL  , System16InputPort0 + 1, "p1 down"   },
+	{"P1 Left"           , BIT_DIGITAL  , System16InputPort0 + 2, "p1 left"   },
+	{"P1 Right"          , BIT_DIGITAL  , System16InputPort0 + 3, "p1 right"  },
+	{"P1 Fire 1"         , BIT_DIGITAL  , System16InputPort0 + 4, "p1 fire 1" },
+	{"P1 Fire 2"         , BIT_DIGITAL  , System16InputPort0 + 5, "p1 fire 2" },
+	{"P1 Fire 3"         , BIT_DIGITAL  , System16InputPort0 + 6, "p1 fire 3" },
+
+	{"Reset"             , BIT_DIGITAL  , &System16Reset         , "reset"    },
+	{"Dip 1"             , BIT_DIPSWITCH, System16Dip + 0        , "dip"      },
+	{"Dip 2"             , BIT_DIPSWITCH, System16Dip + 1        , "dip"      },
+};
+
+STDINPUTINFO(Snapper)
+
+#undef A
+
+/*====================================================
+Dip defs
+====================================================*/
+
+#define SYSTEM16B_COINAGE(dipval)								\
+	{0   , 0xfe, 0   , 16  , "Coin A"                               },			\
+	{dipval, 0x01, 0x0f, 0x07, "4 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0x0f, 0x08, "3 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0x0f, 0x09, "2 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0x0f, 0x05, "2 Coins 1 Credit 5/3 6/4"           },			\
+	{dipval, 0x01, 0x0f, 0x04, "2 Coins 1 Credit 4/3"               },			\
+	{dipval, 0x01, 0x0f, 0x0f, "1 Coin  1 Credit"                   },			\
+	{dipval, 0x01, 0x0f, 0x01, "1 Coin  1 Credit 2/3"               },			\
+	{dipval, 0x01, 0x0f, 0x02, "1 Coin  1 Credit 4/5"               },			\
+	{dipval, 0x01, 0x0f, 0x03, "1 Coin  1 Credit 5/6"               },			\
+	{dipval, 0x01, 0x0f, 0x06, "2 Coins 3 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x0e, "1 Coin  2 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x0d, "1 Coin  3 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x0c, "1 Coin  4 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x0b, "1 Coin  5 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x0a, "1 Coin  6 Credits"                  },			\
+	{dipval, 0x01, 0x0f, 0x00, "Free Play (if coin B too) or 1C/1C" },			\
+												\
+	{0   , 0xfe, 0   , 16  , "Coin B"                               },			\
+	{dipval, 0x01, 0xf0, 0x70, "4 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0xf0, 0x80, "3 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0xf0, 0x90, "2 Coins 1 Credit"                   },			\
+	{dipval, 0x01, 0xf0, 0x50, "2 Coins 1 Credit 5/3 6/4"           },			\
+	{dipval, 0x01, 0xf0, 0x40, "2 Coins 1 Credit 4/3"               },			\
+	{dipval, 0x01, 0xf0, 0xf0, "1 Coin  1 Credit"                   },			\
+	{dipval, 0x01, 0xf0, 0x10, "1 Coin  1 Credit 2/3"               },			\
+	{dipval, 0x01, 0xf0, 0x20, "1 Coin  1 Credit 4/5"               },			\
+	{dipval, 0x01, 0xf0, 0x30, "1 Coin  1 Credit 5/6"               },			\
+	{dipval, 0x01, 0xf0, 0x60, "2 Coins 3 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0xe0, "1 Coin  2 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0xd0, "1 Coin  3 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0xc0, "1 Coin  4 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0xb0, "1 Coin  5 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0xa0, "1 Coin  6 Credits"                  },			\
+	{dipval, 0x01, 0xf0, 0x00, "Free Play (if coin A too) or 1C/1C" },
+
+static struct BurnDIPInfo AceattacDIPList[]=
+{
+	// Default Values
+	{0x2d, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x2e, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x2d, 0x01, 0x01, 0x01, "Off"                                },
+	{0x2d, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 8   , "Starting Points"                    },
+	{0x2d, 0x01, 0x0e, 0x06, "2000"                               },
+	{0x2d, 0x01, 0x0e, 0x0a, "3000"                               },
+	{0x2d, 0x01, 0x0e, 0x0c, "4000"                               },
+	{0x2d, 0x01, 0x0e, 0x0e, "5000"                               },	
+	{0x2d, 0x01, 0x0e, 0x08, "6000"                               },	
+	{0x2d, 0x01, 0x0e, 0x04, "7000"                               },
+	{0x2d, 0x01, 0x0e, 0x02, "8000"                               },
+	{0x2d, 0x01, 0x0e, 0x00, "9000"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Point Table"                        },
+	{0x2d, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x2d, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x2d, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x2d, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x2d, 0x01, 0xc0, 0x20, "Easy"                               },
+	{0x2d, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x2d, 0x01, 0xc0, 0x10, "Hard"                               },
+	{0x2d, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x2e)
+};
+
+STDDIPINFO(Aceattac)
+
+static struct BurnDIPInfo AfighterDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfc, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x13, 0x01, 0x01, 0x00, "Upright"                            },
+	{0x13, 0x01, 0x01, 0x01, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x02, 0x02, "Off"                                },
+	{0x13, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x13, 0x01, 0x0c, 0x00, "Infinite"                           },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x13, 0x01, 0x30, 0x30, "10000 - 20000"                      },
+	{0x13, 0x01, 0x30, 0x20, "20000 - 40000"                      },
+	{0x13, 0x01, 0x30, 0x10, "30000 - 60000"                      },
+	{0x13, 0x01, 0x30, 0x00, "40000 - 80000"                      },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x13, 0x01, 0x40, 0x40, "Normal"                             },
+	{0x13, 0x01, 0x40, 0x00, "Hard"                               },
+
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x13, 0x01, 0x80, 0x00, "No"                                 },
+	{0x13, 0x01, 0x80, 0x80, "Yes"                                },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Afighter)
+
+static struct BurnDIPInfo Afighter_analogDIPList[]=
+{
+	// Default Values
+	{0x0d, 0xff, 0xff, 0xfc, NULL                                 },
+	{0x0e, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x0d, 0x01, 0x01, 0x00, "Upright"                            },
+	{0x0d, 0x01, 0x01, 0x01, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x0d, 0x01, 0x02, 0x02, "Off"                                },
+	{0x0d, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x0d, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x0d, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x0d, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x0d, 0x01, 0x0c, 0x00, "Infinite"                           },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x0d, 0x01, 0x30, 0x30, "10000 - 20000"                      },
+	{0x0d, 0x01, 0x30, 0x20, "20000 - 40000"                      },
+	{0x0d, 0x01, 0x30, 0x10, "30000 - 60000"                      },
+	{0x0d, 0x01, 0x30, 0x00, "40000 - 80000"                      },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x0d, 0x01, 0x40, 0x40, "Normal"                             },
+	{0x0d, 0x01, 0x40, 0x00, "Hard"                               },
+
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x0d, 0x01, 0x80, 0x00, "No"                                 },
+	{0x0d, 0x01, 0x80, 0x80, "Yes"                                },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x0e)
+};
+
+STDDIPINFO(Afighter_analog)
+
+static struct BurnDIPInfo AliensynDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x12, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x11, 0x01, 0x02, 0x02, "Off"                                },
+	{0x11, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x11, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x11, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x11, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x11, 0x01, 0x0c, 0x00, "127"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Timer"                              },
+	{0x11, 0x01, 0x30, 0x00, "120"                                },
+	{0x11, 0x01, 0x30, 0x10, "130"                                },
+	{0x11, 0x01, 0x30, 0x20, "140"                                },
+	{0x11, 0x01, 0x30, 0x30, "150"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x11, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x11, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x11, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x11, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x12)
+};
+
+STDDIPINFO(Aliensyn)
+
+static struct BurnDIPInfo AliensynjDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x12, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x11, 0x01, 0x02, 0x02, "Off"                                },
+	{0x11, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x11, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x11, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x11, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x11, 0x01, 0x0c, 0x00, "127"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Timer"                              },
+	{0x11, 0x01, 0x30, 0x00, "150"                                },
+	{0x11, 0x01, 0x30, 0x10, "160"                                },
+	{0x11, 0x01, 0x30, 0x20, "170"                                },
+	{0x11, 0x01, 0x30, 0x30, "180"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x11, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x11, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x11, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x11, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x12)
+};
+
+STDDIPINFO(Aliensynj)
+
+static struct BurnDIPInfo AltbeastDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Credits needed"                     },
+	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
+	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x15, 0x01, 0x0c, 0x00, "240"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Energy Meter"                       },
+	{0x15, 0x01, 0x30, 0x20, "2"                                  },
+	{0x15, 0x01, 0x30, 0x30, "3"                                  },
+	{0x15, 0x01, 0x30, 0x10, "4"                                  },
+	{0x15, 0x01, 0x30, 0x00, "5"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x15, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x15, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x15, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Altbeast)
+
+static struct BurnDIPInfo AtomicpDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xff, NULL                                 },
+	{0x12, 0xff, 0xff, 0x2f, NULL                                 },
+	
+	// Dip 1
+	{0   , 0xfe, 0   , 8   , "Coin A"                             },
+	{0x11, 0x01, 0x38, 0x00, "4 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x38, 0x20, "3 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x38, 0x18, "2 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x38, 0x38, "1 Coin  1 Credit"                   },
+	{0x11, 0x01, 0x38, 0x10, "1 Coin  2 Credits"                  },
+	{0x11, 0x01, 0x38, 0x28, "1 Coin  3 Credits"                  },
+	{0x11, 0x01, 0x38, 0x08, "1 Coin  4 Credits"                  },
+	{0x11, 0x01, 0x38, 0x30, "1 Coin  5 Credits"                  },
+
+	{0   , 0xfe, 0   , 8   , "Coin B"                             },
+	{0x11, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x07, 0x04, "3 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x07, 0x03, "2 Coins 1 Credit"                   },
+	{0x11, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
+	{0x11, 0x01, 0x07, 0x02, "1 Coin  2 Credits"                  },
+	{0x11, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
+	{0x11, 0x01, 0x07, 0x01, "1 Coin  4 Credits"                  },
+	{0x11, 0x01, 0x07, 0x06, "1 Coin  5 Credits"                  },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x11, 0x01, 0xc0, 0xc0, "1"                                  },
+	{0x11, 0x01, 0xc0, 0x80, "2"                                  },
+	{0x11, 0x01, 0xc0, 0x40, "3"                                  },
+	{0x11, 0x01, 0xc0, 0x00, "5"                                  },
+	
+	// Dip 2
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x12, 0x01, 0x03, 0x01, "Easy"                               },
+	{0x12, 0x01, 0x03, 0x03, "Normal"                             },
+	{0x12, 0x01, 0x03, 0x02, "Hard"                               },
+	{0x12, 0x01, 0x03, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 2   , "Level Select"                       },
+	{0x12, 0x01, 0x04, 0x04, "Off"                                },
+	{0x12, 0x01, 0x04, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
+	{0x12, 0x01, 0x08, 0x08, "Off"                                },
+	{0x12, 0x01, 0x08, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x12, 0x01, 0x10, 0x10, "Off"                                },
+	{0x12, 0x01, 0x10, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x12, 0x01, 0x20, 0x00, "Off"                                },
+	{0x12, 0x01, 0x20, 0x20, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Game Mode"                          },
+	{0x12, 0x01, 0x40, 0x40, "Normal Tetris"                      },
+	{0x12, 0x01, 0x40, 0x00, "Atomic Point"                       },
+	
+	{0   , 0xfe, 0   , 2   , "Service Mode"                       },
+	{0x12, 0x01, 0x80, 0x00, "Off"                                },
+	{0x12, 0x01, 0x80, 0x80, "On"                                 },
+};
+
+STDDIPINFO(Atomicp)
+
+static struct BurnDIPInfo AurailDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x15, 0x01, 0x01, 0x01, "Upright"                            },
+	{0x15, 0x01, 0x01, 0x00, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x00, "2"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x08, "4"                                  },
+	{0x15, 0x01, 0x0c, 0x04, "5"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Bonus Life"                         },
+	{0x15, 0x01, 0x10, 0x10, "80k, 200k, 500k, 1000k"             },
+	{0x15, 0x01, 0x10, 0x00, "100k, 300k, 700k, 1000k"            },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x15, 0x01, 0x20, 0x20, "Normal"                             },
+	{0x15, 0x01, 0x20, 0x00, "Hard"                               },
+	
+	{0   , 0xfe, 0   , 2   , "Controller Select"                  },
+	{0x15, 0x01, 0x40, 0x40, "1 Player Side"                      },
+	{0x15, 0x01, 0x40, 0x00, "2 Players Side"                     },
+	
+	{0   , 0xfe, 0   , 2   , "Special Function Mode"              },
+	{0x15, 0x01, 0x80, 0x80, "Off"                                },
+	{0x15, 0x01, 0x80, 0x00, "On"                                 },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Aurail)
+
+static struct BurnDIPInfo BayrouteDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x15, 0x01, 0x01, 0x00, "Off"                                },
+	{0x15, 0x01, 0x01, 0x01, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x04, "1"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x08, "5"                                  },
+	{0x15, 0x01, 0x0c, 0x00, "Unlimited"                          },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x15, 0x01, 0x30, 0x30, "100000"                             },
+	{0x15, 0x01, 0x30, 0x20, "150000"                             },
+	{0x15, 0x01, 0x30, 0x10, "200000"                             },
+	{0x15, 0x01, 0x30, 0x00, "None"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0xc0, 0xc0, "Easy"                               },
+	{0x15, 0x01, 0xc0, 0x80, "Normal"                             },
+	{0x15, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x15, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Bayroute)
+
+static struct BurnDIPInfo Blox16bDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+};
+
+STDDIPINFO(Blox16b)
+
+static struct BurnDIPInfo BulletDIPList[]=
+{
+	// Default Values
+	{0x21, 0xff, 0xff, 0xff, NULL                                 },
+	{0x22, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x22)
+};
+
+STDDIPINFO(Bullet)
+
+static struct BurnDIPInfo CottonDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x01, 0x01, "Off"                                },
+	{0x13, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x06, 0x04, "2"                                  },
+	{0x13, 0x01, 0x06, 0x06, "3"                                  },
+	{0x13, 0x01, 0x06, 0x02, "4"                                  },
+	{0x13, 0x01, 0x06, 0x00, "5"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x13, 0x01, 0x18, 0x10, "Easy"                               },
+	{0x13, 0x01, 0x18, 0x18, "Normal"                             },
+	{0x13, 0x01, 0x18, 0x08, "Hard"                               },
+	{0x13, 0x01, 0x18, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Cotton)
+
+static struct BurnDIPInfo DduxDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x01, 0x01, "Off"                                },
+	{0x13, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x13, 0x01, 0x06, 0x04, "Easy"                               },
+	{0x13, 0x01, 0x06, 0x06, "Normal"                             },
+	{0x13, 0x01, 0x06, 0x02, "Hard"                               },
+	{0x13, 0x01, 0x06, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x18, 0x10, "2"                                  },
+	{0x13, 0x01, 0x18, 0x18, "3"                                  },
+	{0x13, 0x01, 0x18, 0x08, "4"                                  },
+	{0x13, 0x01, 0x18, 0x00, "5"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x13, 0x01, 0x60, 0x40, "150000"                             },
+	{0x13, 0x01, 0x60, 0x60, "200000"                             },
+	{0x13, 0x01, 0x60, 0x20, "300000"                             },
+	{0x13, 0x01, 0x60, 0x00, "400000"                             },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Ddux)
+
+static struct BurnDIPInfo DunkshotDIPList[]=
+{
+	// Default Values
+	{0x21, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x22, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x21, 0x01, 0x02, 0x02, "Off"                                },
+	{0x21, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "VS Time"                            },
+	{0x21, 0x01, 0x0c, 0x08, "2P 1:30 | 3P 2:00 | 4P 2:30"        },
+	{0x21, 0x01, 0x0c, 0x0c, "2P 2:00 | 3P 2:30 | 4P 3:00"        },
+	{0x21, 0x01, 0x0c, 0x04, "2P 2:30 | 3P 3:00 | 4P 3:30"        },
+	{0x21, 0x01, 0x0c, 0x00, "2P 3:00 | 3P 3:30 | 4P 4:00"        },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x21, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x21, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x21, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x21, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 2   , "CPU starts with +6 pts"             },
+	{0x21, 0x01, 0x40, 0x40, "Off"                                },
+	{0x21, 0x01, 0x40, 0x00, "On"                                 },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x22)
+};
+
+STDDIPINFO(Dunkshot)
+
+static struct BurnDIPInfo EswatDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "2 Credits to Start"                 },
+	{0x15, 0x01, 0x01, 0x01, "Off"                                },
+	{0x15, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
+	{0x15, 0x01, 0x04, 0x04, "Off"                                },
+	{0x15, 0x01, 0x04, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Time"                               },
+	{0x15, 0x01, 0x08, 0x08, "Normal"                             },
+	{0x15, 0x01, 0x08, 0x00, "Hard"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0xc0, 0x00, "1"                                  },
+	{0x15, 0x01, 0xc0, 0x40, "2"                                  },
+	{0x15, 0x01, 0xc0, 0xc0, "3"                                  },
+	{0x15, 0x01, 0xc0, 0x80, "4"                                  },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Eswat)
+
+static struct BurnDIPInfo ExctleagDIPList[]=
+{
+	// Default Values
+	{0x25, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x26, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x25, 0x01, 0x01, 0x01, "Off"                                },
+	{0x25, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 8   , "Starting Points"                    },
+	{0x25, 0x01, 0x0e, 0x06, "2000"                               },
+	{0x25, 0x01, 0x0e, 0x0a, "3000"                               },
+	{0x25, 0x01, 0x0e, 0x0c, "4000"                               },
+	{0x25, 0x01, 0x0e, 0x0e, "5000"                               },	
+	{0x25, 0x01, 0x0e, 0x08, "6000"                               },	
+	{0x25, 0x01, 0x0e, 0x04, "7000"                               },
+	{0x25, 0x01, 0x0e, 0x02, "8000"                               },
+	{0x25, 0x01, 0x0e, 0x00, "9000"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x25, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x25, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x25, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x25, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Point Table"                        },
+	{0x25, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x25, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x25, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x25, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 1
+	SYSTEM16B_COINAGE(0x26)
+};
+
+STDDIPINFO(Exctleag)
+
+static struct BurnDIPInfo FantzonetaDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xff, NULL                                 },
+	{0x14, 0xff, 0xff, 0xfc, NULL                                 },
+	
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x14, 0x01, 0x01, 0x00, "Upright"                            },
+	{0x14, 0x01, 0x01, 0x01, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x14, 0x01, 0x02, 0x02, "Off"                                },
+	{0x14, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x14, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x14, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x14, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x14, 0x01, 0x0c, 0x00, "240"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Extra Ship Cost"                    },
+	{0x14, 0x01, 0x30, 0x30, "5000"                               },
+	{0x14, 0x01, 0x30, 0x20, "10000"                              },
+	{0x14, 0x01, 0x30, 0x10, "15000"                              },
+	{0x14, 0x01, 0x30, 0x00, "20000"                              },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x14, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x14, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x14, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x14, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Fantzoneta)
+
+static struct BurnDIPInfo Fantzn2xDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xff, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x13, 0x01, 0x0c, 0x00, "240"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
+};
+
+STDDIPINFO(Fantzn2x)
+
+static struct BurnDIPInfo FpointDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x12, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x11, 0x01, 0x02, 0x02, "Off"                                },
+	{0x11, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x11, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x11, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x11, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x11, 0x01, 0x30, 0x00, "Hardest"                            },
+
+	{0   , 0xfe, 0   , 2   , "Clear Round Allowed"                },
+	{0x11, 0x01, 0x40, 0x00, "1"                                  },
+	{0x11, 0x01, 0x40, 0x40, "2"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Cell Move"                          },
+	{0x11, 0x01, 0x80, 0x00, "Off"                                },
+	{0x11, 0x01, 0x80, 0x80, "On"                                 },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x12)
+};
+
+STDDIPINFO(Fpoint)
+
+static struct BurnDIPInfo GoldnaxeDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Credits needed"                     },
+	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
+	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x08, "1"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "2"                                  },
+	{0x15, 0x01, 0x0c, 0x04, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x00, "5"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Energy Meter"                       },
+	{0x15, 0x01, 0x30, 0x20, "2"                                  },
+	{0x15, 0x01, 0x30, 0x30, "3"                                  },
+	{0x15, 0x01, 0x30, 0x10, "4"                                  },
+	{0x15, 0x01, 0x30, 0x00, "5"                                  },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Goldnaxe)
+
+static struct BurnDIPInfo HwchampDIPList[]=
+{
+	// Default Values
+	{0x0a, 0xff, 0xff, 0xf9, NULL                                 },
+	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x0a, 0x01, 0x02, 0x02, "Off"                                },
+	{0x0a, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Start Level Select"                 },
+	{0x0a, 0x01, 0x04, 0x04, "Off"                                },
+	{0x0a, 0x01, 0x04, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x0a, 0x01, 0x08, 0x08, "Off"                                },
+	{0x0a, 0x01, 0x08, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x0a, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x0a, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x0a, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x0a, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Time Adjust"                        },
+	{0x0a, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x0a, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x0a, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x0a, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x0b)
+};
+
+STDDIPINFO(Hwchamp)
+
+static struct BurnDIPInfo LockonphDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xff, NULL                                 },
+	{0x14, 0xff, 0xff, 0xc4, NULL                                 },
+	
+	// Dip 1
+	{0   , 0xfe, 0   , 8   , "Coin A"                             },
+	{0x13, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x07, 0x04, "3 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x07, 0x02, "2 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
+	{0x13, 0x01, 0x07, 0x03, "1 Coin  2 Credits"                  },
+	{0x13, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
+	{0x13, 0x01, 0x07, 0x01, "1 Coin  4 Credits"                  },
+	{0x13, 0x01, 0x07, 0x06, "1 Coin  5 Credits"                  },
+												
+	{0   , 0xfe, 0   , 8   , "Coin B"                             },
+	{0x13, 0x01, 0x38, 0x00, "4 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x38, 0x20, "3 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x38, 0x10, "2 Coins 1 Credit"                   },
+	{0x13, 0x01, 0x38, 0x38, "1 Coin  1 Credit"                   },
+	{0x13, 0x01, 0x38, 0x18, "1 Coin  2 Credits"                  },
+	{0x13, 0x01, 0x38, 0x28, "1 Coin  3 Credits"                  },
+	{0x13, 0x01, 0x38, 0x08, "1 Coin  4 Credits"                  },
+	{0x13, 0x01, 0x38, 0x30, "1 Coin  5 Credits"                  },
+	
+	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
+	{0x13, 0x01, 0x80, 0x80, "Off"                                },
+	{0x13, 0x01, 0x80, 0x00, "On"                                 },
+
+	// Dip 2
+	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
+	{0x14, 0x01, 0x07, 0x00, "0"                                  },
+	{0x14, 0x01, 0x07, 0x01, "1"                                  },
+	{0x14, 0x01, 0x07, 0x02, "2"                                  },
+	{0x14, 0x01, 0x07, 0x03, "3"                                  },
+	{0x14, 0x01, 0x07, 0x04, "4"                                  },
+	{0x14, 0x01, 0x07, 0x05, "5"                                  },
+	{0x14, 0x01, 0x07, 0x06, "6"                                  },
+	{0x14, 0x01, 0x07, 0x07, "7"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x14, 0x01, 0x08, 0x08, "Off"                                },
+	{0x14, 0x01, 0x08, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Region"                             },
+	{0x14, 0x01, 0x10, 0x10, "Korea"                              },
+	{0x14, 0x01, 0x10, 0x00, "Europe"                             },
+};
+
+STDDIPINFO(Lockonph)
+
+static struct BurnDIPInfo MvpDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Credits Needed"                     },
+	{0x15, 0x01, 0x01, 0x01, "1 to start, 1 to continue"          },
+	{0x15, 0x01, 0x01, 0x00, "2 to start, 1 to continue"          },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Innings"                            },
+	{0x15, 0x01, 0x04, 0x04, "1 Credit 1 Inning Only"             },
+	{0x15, 0x01, 0x04, 0x0c, "+2 Credits 3 Innings"               },
+	
+	{0   , 0xfe, 0   , 8   , "Time Limits"                        },
+	{0x15, 0x01, 0x38, 0x18, "Easy"                               },
+	{0x15, 0x01, 0x38, 0x28, "Easy 2"                             },
+	{0x15, 0x01, 0x38, 0x08, "Easy 3"                             },
+	{0x15, 0x01, 0x38, 0x38, "Normal"                             },
+	{0x15, 0x01, 0x38, 0x30, "Hard"                               },
+	{0x15, 0x01, 0x38, 0x10, "Hard 2"                             },
+	{0x15, 0x01, 0x38, 0x20, "Hard 3"                             },
+	{0x15, 0x01, 0x38, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x15, 0x01, 0xc0, 0x40, "Easy 2"                             },
+	{0x15, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x15, 0x01, 0xc0, 0x30, "Hard"                               },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Mvp)
+
+static struct BurnDIPInfo PassshtDIPList[]=
+{
+	// Default Values
+	{0x17, 0xff, 0xff, 0xf0, NULL                                 },
+	{0x18, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x17, 0x01, 0x01, 0x01, "Off"                                },
+	{0x17, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
+	{0x17, 0x01, 0x0e, 0x06, "2000"                               },
+	{0x17, 0x01, 0x0e, 0x0a, "3000"                               },
+	{0x17, 0x01, 0x0e, 0x0c, "4000"                               },
+	{0x17, 0x01, 0x0e, 0x0e, "5000"                               },
+	{0x17, 0x01, 0x0e, 0x08, "6000"                               },
+	{0x17, 0x01, 0x0e, 0x04, "7000"                               },
+	{0x17, 0x01, 0x0e, 0x02, "8000"                               },
+	{0x17, 0x01, 0x0e, 0x00, "9000"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Point Table"                        },
+	{0x17, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x17, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x17, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x17, 0x01, 0x30, 0x00, "Hardest"                            },	
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x17, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x17, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x17, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x17, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x18)
+};
+
+STDDIPINFO(Passsht)
+
+
+static struct BurnDIPInfo PassshtaDIPList[]=
+{
+	// Default Values
+	{0x29, 0xff, 0xff, 0xf0, NULL                                 },
+	{0x2a, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x29, 0x01, 0x01, 0x01, "Off"                                },
+	{0x29, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
+	{0x29, 0x01, 0x0e, 0x06, "2000"                               },
+	{0x29, 0x01, 0x0e, 0x0a, "3000"                               },
+	{0x29, 0x01, 0x0e, 0x0c, "4000"                               },
+	{0x29, 0x01, 0x0e, 0x0e, "5000"                               },
+	{0x29, 0x01, 0x0e, 0x08, "6000"                               },
+	{0x29, 0x01, 0x0e, 0x04, "7000"                               },
+	{0x29, 0x01, 0x0e, 0x02, "8000"                               },
+	{0x29, 0x01, 0x0e, 0x00, "9000"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Point Table"                        },
+	{0x29, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x29, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x29, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x29, 0x01, 0x30, 0x00, "Hardest"                            },	
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x29, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x29, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x29, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x29, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x2a)
+};
+
+STDDIPINFO(Passshta)
+
+static struct BurnDIPInfo CencourtDIPList[]=
+{
+	// Default Values
+	{0x29, 0xff, 0xff, 0xf1, NULL                                 },
+	{0x2a, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Debug Display"                      },
+	{0x29, 0x01, 0x01, 0x01, "Off"                                },
+	{0x29, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 8   , "Initial Point"                      },
+	{0x29, 0x01, 0x0e, 0x06, "2000"                               },
+	{0x29, 0x01, 0x0e, 0x0a, "3000"                               },
+	{0x29, 0x01, 0x0e, 0x0c, "4000"                               },
+	{0x29, 0x01, 0x0e, 0x0e, "5000"                               },
+	{0x29, 0x01, 0x0e, 0x08, "6000"                               },
+	{0x29, 0x01, 0x0e, 0x04, "7000"                               },
+	{0x29, 0x01, 0x0e, 0x02, "8000"                               },
+	{0x29, 0x01, 0x0e, 0x00, "9000"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Point Table"                        },
+	{0x29, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x29, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x29, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x29, 0x01, 0x30, 0x00, "Hardest"                            },	
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x29, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x29, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x29, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x29, 0x01, 0xc0, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x2a)
+};
+
+STDDIPINFO(Cencourt)
+
+static struct BurnDIPInfo RiotcityDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "2 Credits to Start"                 },
+	{0x13, 0x01, 0x01, 0x01, "Off"                                },
+	{0x13, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x02, 0x02, "Off"                                },
+	{0x13, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x0c, 0x00, "1"                                  },
+	{0x13, 0x01, 0x0c, 0x0c, "2"                                  },
+	{0x13, 0x01, 0x0c, 0x08, "3"                                  },
+	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x13, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x13, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x13, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x13, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x13, 0x01, 0x40, 0x40, "Normal"                             },
+	{0x13, 0x01, 0x40, 0x00, "Hard"                               },
+	
+	{0   , 0xfe, 0   , 2   , "Attack button to start"             },
+	{0x13, 0x01, 0x80, 0x80, "Off"                                },
+	{0x13, 0x01, 0x80, 0x00, "On"                                 },
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Riotcity)
+
+static struct BurnDIPInfo RyukyuDIPList[]=
+{
+	// Default Values
+	{0x0d, 0xff, 0xff, 0xf8, NULL                                 },
+	{0x0e, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x0d, 0x01, 0x01, 0x01, "Off"                                },
+	{0x0d, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Cancel per credit"                  },
+	{0x0d, 0x01, 0x02, 0x00, "2"                                  },
+	{0x0d, 0x01, 0x02, 0x02, "3"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Timer Speed"                        },
+	{0x0d, 0x01, 0x04, 0x04, "20 seconds"                         },
+	{0x0d, 0x01, 0x04, 0x00, "30 seconds"                         },
+	
+	{0   , 0xfe, 0   , 2   , "PCM Voice"                          },
+	{0x0d, 0x01, 0x08, 0x00, "Off"                                },
+	{0x0d, 0x01, 0x08, 0x08, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Omikuji Difficulty"                 },
+	{0x0d, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x0d, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x0d, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x0d, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x0d, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x0d, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x0d, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x0d, 0x01, 0xc0, 0x00, "Hardest"                            },
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x0e)
+};
+
+STDDIPINFO(Ryukyu)
+
+static struct BurnDIPInfo SdibDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x15, 0x01, 0x01, 0x01, "No"                                 },
+	{0x15, 0x01, 0x01, 0x00, "Yes"                                },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x15, 0x01, 0x0c, 0x00, "Free"                               },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x15, 0x01, 0xc0, 0x80, "Every 50000"                        },
+	{0x15, 0x01, 0xc0, 0xc0, "50000"                              },
+	{0x15, 0x01, 0xc0, 0x40, "100000"                             },
+	{0x15, 0x01, 0xc0, 0x00, "None"                               },
+	
+	// Dip 1
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Sdib)
+
+static struct BurnDIPInfo ShinobiDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0xfc, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x15, 0x01, 0x01, 0x00, "Upright"                            },
+	{0x15, 0x01, 0x01, 0x01, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x02, 0x02, "Off"                                },
+	{0x15, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x15, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x15, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x15, 0x01, 0x0c, 0x04, "5"                                  },
+	{0x15, 0x01, 0x0c, 0x00, "240"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x15, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x15, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x15, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 2   , "Enemy Bullet Speed"                 },
+	{0x15, 0x01, 0x40, 0x40, "Slow"                               },
+	{0x15, 0x01, 0x40, 0x00, "Fast"                               },
+	
+	{0   , 0xfe, 0   , 2   , "Language"                           },
+	{0x15, 0x01, 0x80, 0x80, "Japanese"                           },
+	{0x15, 0x01, 0x80, 0x00, "English"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Shinobi)
+
+static struct BurnDIPInfo SonicbomDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0x7f, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
+	{0x13, 0x01, 0x07, 0x06, "Easy"                               },
+	{0x13, 0x01, 0x07, 0x07, "Normal"                             },
+	{0x13, 0x01, 0x07, 0x05, "Hard 1"                             },
+	{0x13, 0x01, 0x07, 0x04, "Hard 2"                             },
+	{0x13, 0x01, 0x07, 0x03, "Hard 3"                             },
+	{0x13, 0x01, 0x07, 0x02, "Hard 4"                             },
+	{0x13, 0x01, 0x07, 0x01, "Hard 5"                             },
+	{0x13, 0x01, 0x07, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x18, 0x10, "2"                                  },
+	{0x13, 0x01, 0x18, 0x18, "3"                                  },
+	{0x13, 0x01, 0x18, 0x08, "4"                                  },
+	{0x13, 0x01, 0x18, 0x00, "5"                                  },
+	
+	{0   , 0xfe, 0   , 4   , "Bonus Life"                         },
+	{0x13, 0x01, 0x60, 0x40, "30000"                              },
+	{0x13, 0x01, 0x60, 0x60, "40000"                              },
+	{0x13, 0x01, 0x60, 0x20, "50000"                              },
+	{0x13, 0x01, 0x60, 0x00, "60000"                              },
+	
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x13, 0x01, 0x80, 0x00, "Upright"                            },
+	{0x13, 0x01, 0x80, 0x80, "Cocktail"                           },
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Sonicbom)
+
+static struct BurnDIPInfo SjryukoDIPList[]=
+{
+	// Default Values
+	{0x1c, 0xff, 0xff, 0xff, NULL                                 },
+	{0x1d, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x1d)
+};
+
+STDDIPINFO(Sjryuko)
+
+static struct BurnDIPInfo SnapperDIPList[]=
+{
+	// Default Values
+	{0x0a, 0xff, 0xff, 0xff, NULL                                 },
+	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
+	
+	// Dip 1
+	{0   , 0xfe, 0   , 8   , "Coin A"                             },
+	{0x0a, 0x01, 0x07, 0x07, "1 Coin  1 Credit"                   },
+	{0x0a, 0x01, 0x07, 0x06, "1 Coin  2 Credits"                  },
+	{0x0a, 0x01, 0x07, 0x05, "1 Coin  3 Credits"                  },
+	{0x0a, 0x01, 0x07, 0x04, "1 Coin  4 Credits"                  },
+	{0x0a, 0x01, 0x07, 0x03, "1 Coin  5 Credits"                  },
+	{0x0a, 0x01, 0x07, 0x02, "2 Coins 1 Credit"                   },
+	{0x0a, 0x01, 0x07, 0x01, "3 Coins 1 Credit"                   },
+	{0x0a, 0x01, 0x07, 0x00, "4 Coins 1 Credit"                   },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x0a, 0x01, 0x18, 0x10, "3"                                  },
+	{0x0a, 0x01, 0x18, 0x18, "4"                                  },	
+	{0x0a, 0x01, 0x18, 0x08, "5"                                  },
+	{0x0a, 0x01, 0x18, 0x00, "6"                                  },
+	
+	// Dip 2
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x0b, 0x01, 0x10, 0x00, "Off"                                },
+	{0x0b, 0x01, 0x10, 0x10, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Service Mode"                       },
+	{0x0b, 0x01, 0x80, 0x80, "Off"                                },
+	{0x0b, 0x01, 0x80, 0x00, "On"                                 },
+};
+
+STDDIPINFO(Snapper)
+
+static struct BurnDIPInfo TetrisDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x12, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x11, 0x01, 0x02, 0x02, "Off"                                },
+	{0x11, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x11, 0x01, 0x30, 0x20, "Easy"                               },
+	{0x11, 0x01, 0x30, 0x30, "Normal"                             },
+	{0x11, 0x01, 0x30, 0x10, "Hard"                               },
+	{0x11, 0x01, 0x30, 0x00, "Hardest"                            },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x12)
+};
+
+STDDIPINFO(Tetris)
+
+static struct BurnDIPInfo TimescanDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xf5, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+	{0x15, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x13, 0x01, 0x01, 0x00, "Cocktail"                           },
+	{0x13, 0x01, 0x01, 0x01, "Upright"                            },
+	
+	{0   , 0xfe, 0   , 16  , "Bonus"                              },
+	{0x13, 0x01, 0x1e, 0x16, "Replay 1000000/2000000"             },
+	{0x13, 0x01, 0x1e, 0x14, "Replay 1200000/2500000"             },
+	{0x13, 0x01, 0x1e, 0x12, "Replay 1500000/3000000"             },
+	{0x13, 0x01, 0x1e, 0x10, "Replay 2000000/4000000"             },
+	{0x13, 0x01, 0x1e, 0x1c, "Replay 1000000"                     },
+	{0x13, 0x01, 0x1e, 0x1e, "Replay 1200000"                     },
+	{0x13, 0x01, 0x1e, 0x1a, "Replay 1500000"                     },
+	{0x13, 0x01, 0x1e, 0x18, "Replay 1800000"                     },
+	{0x13, 0x01, 0x1e, 0x0e, "Extra Ball 100000"                  },
+	{0x13, 0x01, 0x1e, 0x0c, "Extra Ball 200000"                  },
+	{0x13, 0x01, 0x1e, 0x0a, "Extra Ball 300000"                  },
+	{0x13, 0x01, 0x1e, 0x08, "Extra Ball 400000"                  },
+	{0x13, 0x01, 0x1e, 0x06, "Extra Ball 500000"                  },
+	{0x13, 0x01, 0x1e, 0x04, "Extra Ball 600000"                  },
+	{0x13, 0x01, 0x1e, 0x02, "Extra Ball 700000"                  },
+	{0x13, 0x01, 0x1e, 0x00, "None"                               },
+	
+	{0   , 0xfe, 0   , 2   , "Match"                              },
+	{0x13, 0x01, 0x20, 0x00, "Off"                                },
+	{0x13, 0x01, 0x20, 0x20, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Pin Rebound"                        },
+	{0x13, 0x01, 0x40, 0x40, "Well"                               },
+	{0x13, 0x01, 0x40, 0x00, "A Little"                           },
+	
+	{0   , 0xfe, 0   , 2   , "Lives"                              },
+	{0x13, 0x01, 0x80, 0x80, "3"                                  },
+	{0x13, 0x01, 0x80, 0x00, "5"                                  },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+	
+	// Dip 3
+	{0   , 0xfe, 0   , 2   , "Flip Screen"                        },
+	{0x15, 0x01, 0x01, 0x01, "Off"                                },
+	{0x15, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Out Lane Pin"                       },
+	{0x15, 0x01, 0x02, 0x02, "Near"                               },
+	{0x15, 0x01, 0x02, 0x00, "Far"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Special"                            },
+	{0x15, 0x01, 0x0c, 0x08, "7 Credits"                          },
+	{0x15, 0x01, 0x0c, 0x0c, "3 Credits"                          },
+	{0x15, 0x01, 0x0c, 0x04, "1 Credit"                           },
+	{0x15, 0x01, 0x0c, 0x00, "2000000 Points"                     },
+	
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x15, 0x01, 0x10, 0x00, "No"                                 },
+	{0x15, 0x01, 0x10, 0x10, "Yes"                                },
+};
+
+STDDIPINFO(Timescan)
+
+static struct BurnDIPInfo ToryumonDIPList[]=
+{
+	// Default Values
+	{0x11, 0xff, 0xff, 0xfe, NULL                                 },
+	{0x12, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x11, 0x01, 0x01, 0x01, "Off"                                },
+	{0x11, 0x01, 0x01, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "VS-Mode Battle"                     },
+	{0x11, 0x01, 0x10, 0x10, "1"                                  },
+	{0x11, 0x01, 0x10, 0x00, "3"                                  },
+	
+	{0   , 0xfe, 0   , 8   , "Difficulty"                         },
+	{0x11, 0x01, 0xe0, 0xc0, "Easy"                               },
+	{0x11, 0x01, 0xe0, 0xe0, "Normal"                             },
+	{0x11, 0x01, 0xe0, 0xa0, "Hard"                               },
+	{0x11, 0x01, 0xe0, 0x80, "Hard+1"                             },
+	{0x11, 0x01, 0xe0, 0x60, "Hard+2"                             },
+	{0x11, 0x01, 0xe0, 0x40, "Hard+3"                             },
+	{0x11, 0x01, 0xe0, 0x20, "Hard+4"                             },
+	{0x11, 0x01, 0xe0, 0x00, "Hard+5"                             },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x12)
+};
+
+STDDIPINFO(Toryumon)
+
+static struct BurnDIPInfo TturfDIPList[]=
+{
+	// Default Values
+	{0x15, 0xff, 0xff, 0x2c, NULL                                 },
+	{0x16, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 4   , "Continues"                          },
+	{0x15, 0x01, 0x03, 0x00, "None"                               },
+	{0x15, 0x01, 0x03, 0x01, "3"                                  },
+	{0x15, 0x01, 0x03, 0x02, "Unlimited"                          },
+	{0x15, 0x01, 0x03, 0x03, "Unlimited"                          },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x15, 0x01, 0x0c, 0x08, "Easy"                               },
+	{0x15, 0x01, 0x0c, 0x0c, "Normal"                             },
+	{0x15, 0x01, 0x0c, 0x04, "Hard"                               },
+	{0x15, 0x01, 0x0c, 0x00, "Hardest"                            },
+	
+	{0   , 0xfe, 0   , 4   , "Starting Energy"                    },
+	{0x15, 0x01, 0x30, 0x00, "3"                                  },
+	{0x15, 0x01, 0x30, 0x10, "4"                                  },
+	{0x15, 0x01, 0x30, 0x20, "6"                                  },
+	{0x15, 0x01, 0x30, 0x30, "8"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x15, 0x01, 0x40, 0x40, "Off"                                },
+	{0x15, 0x01, 0x40, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 2   , "Bonus Energy"                       },
+	{0x15, 0x01, 0x80, 0x80, "1"                                  },
+	{0x15, 0x01, 0x80, 0x00, "2"                                  },
+	
+	// Dip 2
+	SYSTEM16B_COINAGE(0x16)
+};
+
+STDDIPINFO(Tturf)
+
+static struct BurnDIPInfo UltracinDIPList[]=
+{
+	// Default Values
+	{0x0b, 0xff, 0xff, 0xff, NULL                                 },
+	{0x0c, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x0c)
+};
+
+STDDIPINFO(Ultracin)
+
+static struct BurnDIPInfo Wb3DIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x02, 0x02, "Off"                                },
+	{0x13, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x0c, 0x00, "2"                                  },
+	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x13, 0x01, 0x0c, 0x08, "4"                                  },
+	{0x13, 0x01, 0x0c, 0x04, "5"                                  },
+	
+	{0   , 0xfe, 0   , 2   , "Bonus Life"                         },
+	{0x13, 0x01, 0x10, 0x10, "5k, 10k, 18k, 30k"                  },
+	{0x13, 0x01, 0x10, 0x00, "5k, 15k, 30k"                       },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x13, 0x01, 0x20, 0x20, "Normal"                             },
+	{0x13, 0x01, 0x20, 0x00, "Hard"                               },
+	
+	{0   , 0xfe, 0   , 2   , "Invincible Mode"                    },
+	{0x13, 0x01, 0x40, 0x40, "No"                                 },
+	{0x13, 0x01, 0x40, 0x00, "Yes"                                },
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Wb3)
+
+static struct BurnDIPInfo WrestwarDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfd, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Demo Sounds"                        },
+	{0x13, 0x01, 0x02, 0x02, "Off"                                },
+	{0x13, 0x01, 0x02, 0x00, "On"                                 },
+	
+	{0   , 0xfe, 0   , 4   , "Round Time"                         },
+	{0x13, 0x01, 0x0c, 0x00, "100"                                },
+	{0x13, 0x01, 0x0c, 0x0c, "110"                                },
+	{0x13, 0x01, 0x0c, 0x08, "120"                                },
+	{0x13, 0x01, 0x0c, 0x04, "130"                                },
+	
+	{0   , 0xfe, 0   , 2   , "Allow Continue"                     },
+	{0x13, 0x01, 0x20, 0x00, "No"                                 },
+	{0x13, 0x01, 0x20, 0x20, "Yes"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Difficulty"                         },
+	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
+		
+	// Dip 2
+	SYSTEM16B_COINAGE(0x14)
+};
+
+STDDIPINFO(Wrestwar)
+
+#undef SYSTEM16B_COINAGE
+
+/*====================================================
+Rom defs
+====================================================*/
+
+static struct BurnRomInfo AceattacRomDesc[] = {
+	{ "epr-11491.a4",   0x10000, 0xf3c19c36, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11489.a1",   0x10000, 0xbbe623c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11492.a5",   0x10000, 0xd8bd3139, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11490.a2",   0x10000, 0x38cb3a41, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11493.b9",   0x10000, 0x654485d9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11494.b10",  0x10000, 0xb67971ab, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11495.b11",  0x10000, 0xb687ab61, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11501.b1",   0x10000, 0x09179ead, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11505.b5",   0x10000, 0xb67f1ecf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11502.b2",   0x10000, 0x7464bae4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11506.b6",   0x10000, 0xb0104def, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11503.b3",   0x10000, 0x344c0692, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11507.b7",   0x10000, 0xa2af710a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11504.b4",   0x10000, 0x42b4a5f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11508.b8",   0x10000, 0x5cbb833c, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11496.a7",   0x08000, 0x82cb40a9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11497.a8",   0x08000, 0xb04f62cc, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11498.a9",   0x08000, 0x97baf52b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11499.a10",  0x08000, 0xea332866, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11500.a11",  0x08000, 0x2ddf1c31, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	// reconstructed key; some of the RNG-independent bits could be incorrect
+	{ "317-0059.key",   0x02000, 0x4512e2fa, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Aceattac)
+STD_ROM_FN(Aceattac)
+
+static struct BurnRomInfo AfightereRomDesc[] = {
+	{ "epr10272.bin",  0x08000, 0xbc3b75b6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10269.bin",  0x08000, 0x688b4ff7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10273.bin",  0x08000, 0x0ca74019, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10270.bin",  0x08000, 0x53fab467, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10274.bin",  0x08000, 0xd2601561, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10271.bin",  0x08000, 0xd0d73af5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Afightere)
+STD_ROM_FN(Afightere)
+
+static struct BurnRomInfo AfighterfRomDesc[] = {
+	{ "epr10036.bin",  0x08000, 0xd0589391, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10033.bin",  0x08000, 0x1b836a91, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10037.bin",  0x08000, 0x3a312b9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10034.bin",  0x08000, 0x423e983e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10038.bin",  0x08000, 0x22c2b533, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10035.bin",  0x08000, 0x68177755, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Afighterf)
+STD_ROM_FN(Afighterf)
+
+static struct BurnRomInfo AfightergRomDesc[] = {
+	{ "epr10163.bin",  0x08000, 0x6d62eccd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10160.bin",  0x08000, 0x86f020da, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10164.bin",  0x08000, 0x3a312b9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10161.bin",  0x08000, 0x423e983e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10165.bin",  0x08000, 0xcc68a82d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10162.bin",  0x08000, 0xa20acfd5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Afighterg)
+STD_ROM_FN(Afighterg)
+
+static struct BurnRomInfo AfighterhRomDesc[] = {
+	{ "epr10357.bin",  0x08000, 0x69777a15, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10354.bin",  0x08000, 0x6dad6dd1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10358.bin",  0x08000, 0x8f9da9a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10355.bin",  0x08000, 0xac865097, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10359.bin",  0x08000, 0x1dc12296, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr10356.bin",  0x08000, 0xda7f05f2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr10048.bin",  0x10000, 0x643ca883, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10049.bin",  0x10000, 0xf8b5058b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr10050.bin",  0x10000, 0x0ffb48dd, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr10040.bin",  0x08000, 0x5a9f81f9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10044.bin",  0x08000, 0x71d0db1f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10041.bin",  0x08000, 0x8da050cf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10045.bin",  0x08000, 0x39354223, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10042.bin",  0x08000, 0xdd706d18, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10046.bin",  0x08000, 0xb49b3136, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10043.bin",  0x08000, 0x645ccfb9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr10047.bin",  0x08000, 0x84a49518, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr10039.bin",  0x08000, 0xb04757b0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0018.key",  0x02000, 0x65b5b1af, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Afighterh)
+STD_ROM_FN(Afighterh)
+
+static struct BurnRomInfo AliensynRomDesc[] = {
+	{ "epr-11083.a4",   0x08000, 0xcb2ad9b3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11080.a1",   0x08000, 0xfe7378d9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11084.a5",   0x08000, 0x2e1ec7b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11081.a2",   0x08000, 0x1308ee63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11085.a6",   0x08000, 0xcff78f39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11082.a3",   0x08000, 0x9cdc2a14, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Aliensyn)
+STD_ROM_FN(Aliensyn)
+
+static struct BurnRomInfo Aliensyn3RomDesc[] = {
+	{ "epr-10816.a4",   0x08000, 0x17bf5304, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10814.a1",   0x08000, 0x4cd134df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10817.a5",   0x08000, 0xc8b791b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10815.a2",   0x08000, 0xbdcf4a30, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10822a.a6",  0x08000, 0x1d0790aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10819a.a3",  0x08000, 0x1e7586b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0033.key",   0x02000, 0x68bb7745, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Aliensyn3)
+STD_ROM_FN(Aliensyn3)
+
+static struct BurnRomInfo Aliensyn7RomDesc[] = {
+	{ "epr-11083.a4",   0x08000, 0xcb2ad9b3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11080.a1",   0x08000, 0xfe7378d9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11084.a5",   0x08000, 0x2e1ec7b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11081.a2",   0x08000, 0x1308ee63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11085.a6",   0x08000, 0xcff78f39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11082.a3",   0x08000, 0x9cdc2a14, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11086.a7",   0x08000, 0xc7fddc28, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-00xx.key",   0x02000, 0x76b370cd, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Aliensyn7)
+STD_ROM_FN(Aliensyn7)
+
+static struct BurnRomInfo AliensynjRomDesc[] = {
+	{ "epr-10720a.a4",  0x08000, 0x1b920893, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10717a.a1",  0x08000, 0x972ae358, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10721a.a5",  0x08000, 0xf4d2d1c3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10718a.a2",  0x08000, 0xc79bf61b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10722a.a6",  0x08000, 0x1d0790aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10719a.a3",  0x08000, 0x1e7586b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10702.b9",   0x10000, 0x393bc813, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10703.b10",  0x10000, 0x6b6dd9f5, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10704.b11",  0x10000, 0x911e7ebc, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10709.b1",   0x10000, 0xaddf0a90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10713.b5",   0x10000, 0xececde3a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10710.b2",   0x10000, 0x992369eb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10714.b6",   0x10000, 0x91bf42fb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10711.b3",   0x10000, 0x29166ef6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10715.b7",   0x10000, 0xa7c57384, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10712.b4",   0x10000, 0x876ad019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10716.b8",   0x10000, 0x40ba1d48, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10723.a7",   0x08000, 0x99953526, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10724.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10725.a9",   0x08000, 0x6a50e08f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10726.a10",  0x08000, 0xd50b7736, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0033.key",   0x02000, 0x68bb7745, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Aliensynj)
+STD_ROM_FN(Aliensynj)
+
+static struct BurnRomInfo AltbeastRomDesc[] = {
+	{ "epr-11907.a7",   0x20000, 0x29e0c3ad, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11906.a5",   0x20000, 0x4c9e9cd8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0078.c2",    0x01000, 0x8101925f, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast)
+STD_ROM_FN(Altbeast)
+
+static struct BurnRomInfo AltbeastjRomDesc[] = {
+	{ "epr-11885.a7",   0x20000, 0x5bb715aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11884.a5",   0x20000, 0xe1707090, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0077.c2",    0x01000, 0x00000000, BRF_NODUMP },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeastj)
+STD_ROM_FN(Altbeastj)
+
+static struct BurnRomInfo Altbeast2RomDesc[] = {
+	{ "epr-11705.a7",   0x20000, 0x57dc5c7a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11704.a5",   0x20000, 0x33bbcf07, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11686.a10",  0x08000, 0x828a45b3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0066.key",   0x02000, 0xed85a054, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast2)
+STD_ROM_FN(Altbeast2)
+
+static struct BurnRomInfo Altbeastj1RomDesc[] = {
+	{ "epr-11670.a7",   0x20000, 0xb748eb07, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11669.a5",   0x20000, 0x005ecd11, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11674.a14",  0x20000, 0xa57a66d5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11675.a15",  0x20000, 0x2ef2f144, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11676.a16",  0x20000, 0x0c04acac, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11677.b1",   0x20000, 0xa01425cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11681.b5",   0x20000, 0xd9e03363, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11678.b2",   0x20000, 0x17a9fc53, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11682.b6",   0x20000, 0xe3f77c5e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11679.b3",   0x20000, 0x14dcc245, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11683.b7",   0x20000, 0xf9a60f06, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11680.b4",   0x20000, 0xf43dcdec, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11684.b8",   0x20000, 0xb20c0edb, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	// reconstructed key; some of the RNG-independent bits could be incorrect
+	{ "317-0065.key",   0x02000, 0x9e0f619d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeastj1)
+STD_ROM_FN(Altbeastj1)
+
+
+static struct BurnRomInfo Altbeastj3RomDesc[] = {
+	{ "epr-11721.a7",   0x20000, 0x1c5d11de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11720.a5",   0x20000, 0x735350cf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0068.key",   0x02000, 0xc1ed4310, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeastj3)
+STD_ROM_FN(Altbeastj3)
+
+static struct BurnRomInfo Altbeastj3dRomDesc[] = {
+	{ "bootleg_epr-11721.a7",   0x20000, 0xb9c963a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11720.a5",   0x20000, 0x6a1e91fc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",          0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",          0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",          0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",          0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",          0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",          0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+
+	{ "epr-11725.b1",           0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",           0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",           0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",           0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",           0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",           0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",           0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",           0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",           0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",          0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",           0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",          0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",           0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",          0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",          0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11672.a11",          0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",          0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeastj3d)
+STD_ROM_FN(Altbeastj3d)
+
+static struct BurnRomInfo Altbeast4RomDesc[] = {
+	{ "epr-11740.a7",   0x20000, 0xce227542, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11739.a5",   0x20000, 0xe466eb65, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11686.a10",  0x08000, 0x828a45b3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0066.key",   0x02000, 0xed85a054, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast4)
+STD_ROM_FN(Altbeast4)
+
+static struct BurnRomInfo Altbeast5RomDesc[] = {
+	{ "epr-11742.a7",   0x20000, 0x61839534, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11741.a5",   0x20000, 0x9b2159cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0069.key",   0x02000, 0x959e256a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast5)
+STD_ROM_FN(Altbeast5)
+
+static struct BurnRomInfo Altbeast5dRomDesc[] = {
+	{ "bootleg_epr-11742.a7",   0x20000, 0x62c517e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11741.a5",   0x20000, 0x5873f049, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",          0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",          0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",          0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",          0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",          0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",          0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+
+	{ "epr-11725.b1",           0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",           0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",           0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",           0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",           0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",           0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",           0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",           0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",           0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",          0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",           0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",          0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",           0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",          0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",          0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11672.a11",          0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",          0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast5d)
+STD_ROM_FN(Altbeast5d)
+
+static struct BurnRomInfo Altbeast6RomDesc[] = {
+	{ "epr-11883.a7",   0x20000, 0xc5b3e8f7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11882.a5",   0x20000, 0x9c01170b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11722.a14",  0x10000, 0xadaa8db5, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11736.b14",  0x10000, 0xe9ad5e89, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11723.a15",  0x10000, 0x131a3f9a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11737.b15",  0x10000, 0x2e420023, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11724.a16",  0x10000, 0x6f2ed50a, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "epr-11738.b16",  0x10000, 0xde3d6d02, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "epr-11725.b1",   0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11729.b5",   0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11726.b2",   0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11730.b6",   0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11727.b3",   0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11731.b7",   0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11728.b4",   0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11732.b8",   0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11717.a1",   0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11733.b10",  0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11718.a2",   0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11734.b11",  0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11719.a3",   0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11735.b12",  0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11671.a10",  0x08000, 0x2b71343b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11672.a11",  0x20000, 0xbbd7f460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-11673.a12",  0x20000, 0x400c4a36, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0076.c2",    0x01000, 0x32c91f89, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Altbeast6)
+STD_ROM_FN(Altbeast6)
+
+static struct BurnRomInfo AltbeastblRomDesc[] = {
+	{ "4.bin",          0x10000, 0x790b4b3a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "6.bin",          0x10000, 0x0f65f25d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "3.bin",          0x10000, 0x65cdd72b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "5.bin",          0x10000, 0x3393fbc4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "12.bin",         0x10000, 0xa4967d10, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "11.bin",         0x10000, 0x021e82ab, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "10.bin",         0x10000, 0x1a26cf3f, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "9.bin",          0x10000, 0x277ef086, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "8.bin",          0x10000, 0x661225af, SYS16_ROM_TILES_20000 | BRF_GRA },
+	{ "7.bin",          0x10000, 0xd7019da7, SYS16_ROM_TILES_20000 | BRF_GRA },
+	
+	{ "18.bin",         0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "22.bin",         0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "17.bin",         0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "21.bin",         0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "16.bin",         0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "20.bin",         0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "15.bin",         0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "19.bin",         0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "23.bin",         0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "25.bin",         0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "24.bin",         0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "26.bin",         0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "13.bin",         0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "14.bin",         0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "1.bin",          0x10000, 0x67e09da3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	{ "2.bin",          0x10000, 0x7c653d8b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Altbeastbl)
+STD_ROM_FN(Altbeastbl)
+
+static struct BurnRomInfo MutantwarrRomDesc[] = {
+	{ "4.bin",          0x10000, 0x1bed3505, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "6.bin",          0x10000, 0x8bfb70e4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "3.bin",          0x10000, 0x40b0afec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "5.bin",          0x10000, 0x2a9ef382, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "16.bin",         0x10000, 0xa4967d10, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	{ "15.bin",         0x10000, 0xe091ae2c, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	{ "14.bin",         0x10000, 0x1a26cf3f, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	{ "13.bin",         0x10000, 0x277ef086, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	{ "12.bin",         0x10000, 0x661225af, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	{ "11.bin",         0x10000, 0xd7019da7, SYS16_ROM_TILES_20000 | BRF_GRA }, 
+	
+	{ "20.bin",         0x10000, 0xf8b3684e, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "10.bin",         0x10000, 0xae3c2793, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "19.bin",         0x10000, 0x3cce5419, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "9.bin",          0x10000, 0x3af62b55, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "18.bin",         0x10000, 0xb0390078, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "8.bin",          0x10000, 0x2a87744a, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "17.bin",         0x10000, 0xf3a43fd8, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "7.bin",          0x10000, 0x2fb3e355, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "22.bin",         0x10000, 0x676be0cb, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "25.bin",         0x10000, 0x802cac94, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "23.bin",         0x10000, 0x882864c2, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "26.bin",         0x10000, 0x76c704d2, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "21.bin",         0x10000, 0x339987f7, SYS16_ROM_SPRITES | BRF_GRA }, 
+	{ "24.bin",         0x10000, 0x4fe406aa, SYS16_ROM_SPRITES | BRF_GRA }, 
+
+	{ "1.bin",          0x10000, 0x67e09da3, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, 
+	{ "2.bin",          0x10000, 0x7c653d8b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, 
+};
+
+
+STD_ROM_PICK(Mutantwarr)
+STD_ROM_FN(Mutantwarr)
+
+static struct BurnRomInfo AtomicpRomDesc[] = {
+	{ "ap-t2.bin",      0x10000, 0x97421047, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "ap-t1.bin",      0x10000, 0x5c65fe56, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "ap-t4.bin",      0x08000, 0x332e58f4, SYS16_ROM_TILES | BRF_GRA },
+	{ "ap-t3.bin",      0x08000, 0xdddc122c, SYS16_ROM_TILES | BRF_GRA },
+	{ "ap-t5.bin",      0x08000, 0xef5ecd6b, SYS16_ROM_TILES | BRF_GRA },
+};
+
+
+STD_ROM_PICK(Atomicp)
+STD_ROM_FN(Atomicp)
+
+static struct BurnRomInfo AurailRomDesc[] = {
+	{ "epr-13577.a7",   0x20000, 0x6701b686, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13576.a5",   0x20000, 0x1e428d94, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Aurail)
+STD_ROM_FN(Aurail)
+
+static struct BurnRomInfo Aurail1RomDesc[] = {
+	{ "epr-13469.a7",   0x20000, 0xc628b69d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13468.a5",   0x20000, 0xce092218, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0168.key",   0x02000, 0xfed38390, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Aurail1)
+STD_ROM_FN(Aurail1)
+
+static struct BurnRomInfo Aurail1dRomDesc[] = {
+	{ "bootleg_epr-13469.a7",   0x20000, 0x75ef3eec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13468.a5",   0x20000, 0xe46e4f55, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13447.a8",           0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13445.a6",           0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13450.a14",          0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13465.b14",          0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13451.a15",          0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13466.b15",          0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13452.a16",          0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13467.b16",          0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-13453.b1",           0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13457.b5",           0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13454.b2",           0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13458.b6",           0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13455.b3",           0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13459.b7",           0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13456.b4",           0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13460.b8",           0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13440.a1",           0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13461.b10",          0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13441.a2",           0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13462.b11",          0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13442.a3",           0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13463.b12",          0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13443.a4",           0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13464.b13",          0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13448.a10",          0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13449.a11",          0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Aurail1d)
+STD_ROM_FN(Aurail1d)
+
+static struct BurnRomInfo AurailjRomDesc[] = {
+	{ "epr-13446.a7",   0x20000, 0xd1f57b2a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13444.a5",   0x20000, 0x7a2b045f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13447.a8",   0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13445.a6",   0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-13450.a14",  0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13465.b14",  0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13451.a15",  0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13466.b15",  0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13452.a16",  0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13467.b16",  0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-13453.b1",   0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13457.b5",   0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13454.b2",   0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13458.b6",   0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13455.b3",   0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13459.b7",   0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13456.b4",   0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13460.b8",   0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13440.a1",   0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13461.b10",  0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13441.a2",   0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13462.b11",  0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13442.a3",   0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13463.b12",  0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13443.a4",   0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13464.b13",  0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13448.a10",  0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-13449.a11",  0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0167.key",   0x02000, 0xfed38390, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Aurailj)
+STD_ROM_FN(Aurailj)
+
+static struct BurnRomInfo AurailjdRomDesc[] = {
+	{ "bootleg_epr-13446.a7",   0x20000, 0x25221510, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13444.a5",   0x20000, 0x56ba5356, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13447.a8",           0x20000, 0x70a52167, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13445.a6",           0x20000, 0x28dfc3dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13450.a14",          0x20000, 0x0fc4a7a8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13465.b14",          0x20000, 0xe08135e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13451.a15",          0x20000, 0x1c49852f, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13466.b15",          0x20000, 0xe14c6684, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13452.a16",          0x20000, 0x047bde5e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-13467.b16",          0x20000, 0x6309fec4, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-13453.b1",           0x20000, 0x5fa0a9f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13457.b5",           0x20000, 0x0d1b54da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13454.b2",           0x20000, 0x5f6b33b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13458.b6",           0x20000, 0xbad340c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13455.b3",           0x20000, 0x4e80520b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13459.b7",           0x20000, 0x7e9165ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13456.b4",           0x20000, 0x5733c428, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13460.b8",           0x20000, 0x66b8f9b3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13440.a1",           0x20000, 0x4f370b2b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13461.b10",          0x20000, 0xf76014bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13441.a2",           0x20000, 0x37cf9cb4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13462.b11",          0x20000, 0x1061e7da, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13442.a3",           0x20000, 0x049698ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13463.b12",          0x20000, 0x7dbcfbf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13443.a4",           0x20000, 0x77a8989e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-13464.b13",          0x20000, 0x551df422, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13448.a10",          0x08000, 0xb5183fb9, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-13449.a11",          0x20000, 0xd3d9aaf9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Aurailjd)
+STD_ROM_FN(Aurailjd)
+
+static struct BurnRomInfo BayrouteRomDesc[] = {
+	{ "epr-12517.a7",   0x20000, 0x436728a9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12516.a5",   0x20000, 0x4ff0353f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12458.a8",   0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12456.a6",   0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-12462.a14",  0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12463.a15",  0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12464.a16",  0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12465.b1",   0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12467.b5",   0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12466.b2",   0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12468.b6",   0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12459.a10",  0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12460.a11",  0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12461.a12",  0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0116.key",   0x02000, 0x8778ee49, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Bayroute)
+STD_ROM_FN(Bayroute)
+
+static struct BurnRomInfo BayroutedRomDesc[] = {
+	{ "bootleg_epr-12517.a7",   0x20000, 0x7e90b39d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12516.a5",   0x20000, 0x34afc1fd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12458.a8",           0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12456.a6",           0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12462.a14",          0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12463.a15",          0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12464.a16",          0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12465.b1",           0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12467.b5",           0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12466.b2",           0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12468.b6",           0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12459.a10",          0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12460.a11",          0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12461.a12",          0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Bayrouted)
+STD_ROM_FN(Bayrouted)
+
+static struct BurnRomInfo BayroutejRomDesc[] = {
+	{ "epr-12457.a7",   0x20000, 0xbc726255, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12455.a5",   0x20000, 0xb6a722eb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12458.a8",   0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12456.a6",   0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-12462.a14",  0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12463.a15",  0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12464.a16",  0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12465.b1",   0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12467.b5",   0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12466.b2",   0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12468.b6",   0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12459.a10",  0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12460.a11",  0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12461.a12",  0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0115.key",   0x02000, 0x75a55614, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Bayroutej)
+STD_ROM_FN(Bayroutej)
+
+static struct BurnRomInfo BayroutejdRomDesc[] = {
+	{ "bootleg_epr-12457.a7",   0x20000, 0x43e9011c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12455.a5",   0x20000, 0x8f56ae92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12458.a8",           0x20000, 0xe7c7476a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12456.a6",           0x20000, 0x25dc2eaf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12462.a14",          0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12463.a15",          0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12464.a16",          0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12465.b1",           0x20000, 0x11d61b45, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12467.b5",           0x20000, 0xc3b4e4c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12466.b2",           0x20000, 0xa57f236f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12468.b6",           0x20000, 0xd89c77de, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12459.a10",          0x08000, 0x3e1d29d0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12460.a11",          0x20000, 0x0bae570d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12461.a12",          0x20000, 0xb03b8b46, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Bayroutejd)
+STD_ROM_FN(Bayroutejd)
+
+static struct BurnRomInfo Bayroute1RomDesc[] = {
+	{ "br.a4",         0x10000, 0x91c6424b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "br.a1",         0x10000, 0x76954bf3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "br.a5",         0x10000, 0x9d6fd183, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "br.a2",         0x10000, 0x5ca1e3d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "br.a6",         0x10000, 0xed97ad4c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "br.a3",         0x10000, 0x0d362905, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-12462.a14", 0x10000, 0xa19943b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12463.a15", 0x10000, 0x62f8200d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12464.a16", 0x10000, 0xc8c59703, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "br_obj0o.b1",   0x10000, 0x098a5e82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj0e.b5",   0x10000, 0x85238af9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj1o.b2",   0x10000, 0xcc641da1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj1e.b6",   0x10000, 0xd3123315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj2o.b3",   0x10000, 0x84efac1f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj2e.b7",   0x10000, 0xb73b12cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br_obj3o.b4",   0x10000, 0xa2e238ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "br.b8",         0x10000, 0xd8de78ff, SYS16_ROM_SPRITES | BRF_GRA },
+
+#if !defined ROM_VERIFY
+	{ "sound.a7",      0x08000, 0x9e1ce6ed, SYS16_ROM_Z80PROG | BRF_PRG }, // Needs to be verified
+
+	{ "sound.a8",      0x10000, 0x077e9981, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
+	{ "sound.a9",      0x10000, 0x3c3f5f41, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
+	{ "sound.a10",     0x10000, 0x7c251347, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
+	{ "sound.a11",     0x10000, 0xa602ea2d, SYS16_ROM_UPD7759DATA | BRF_SND }, // Needs to be verified
+#else
+    { "sound.a7",      0x08000, 0x00000000, SYS16_ROM_Z80PROG | BRF_NODUMP | BRF_PRG },
+	
+    { "sound.a8",      0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
+    { "sound.a9",      0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
+    { "sound.a10",     0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
+    { "sound.a11",     0x10000, 0x00000000, SYS16_ROM_UPD7759DATA | BRF_NODUMP | BRF_SND },
+#endif
+};
+
+
+STD_ROM_PICK(Bayroute1)
+STD_ROM_FN(Bayroute1)
+
+static struct BurnRomInfo Blox16bRomDesc[] = {
+	{ "bs16b.p00",      0x040000, 0xfd1978b9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "bs16b.scr",      0x040000, 0x1de4e95b, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "bs16b.obj",      0x020000, 0x05076220, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "bs16b.snd",      0x018000, 0x930c7e7b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Blox16b)
+STD_ROM_FN(Blox16b)
+
+static struct BurnRomInfo BulletRomDesc[] = {
+	{ "epr-11010.a4",   0x08000, 0xdd9001de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11007.a1",   0x08000, 0xd9e08110, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11011.a5",   0x08000, 0x7f446b9f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11008.a2",   0x08000, 0x34824d3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11012.a6",   0x08000, 0x3992f159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11009.a3",   0x08000, 0xdf199999, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10994.b9",   0x10000, 0x3035468a, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10995.b10",  0x10000, 0x6b97aff1, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10996.b11",  0x10000, 0x501bddd6, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10999.b1",   0x10000, 0x119f0008, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11003.b5",   0x10000, 0x2f429089, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11000.b2",   0x10000, 0xf5482bbe, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11004.b6",   0x10000, 0x8c886df0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11001.b3",   0x10000, 0x65ea71e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11005.b7",   0x10000, 0xea2f9d50, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11002.b4",   0x10000, 0x9e25042b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11006.b8",   0x10000, 0x6b7384f2, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10997.a7",   0x08000, 0x5dd9cab5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10998.a8",   0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+		
+	{ "317-0041.key",   0x02000, 0x4cd4861a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Bullet)
+STD_ROM_FN(Bullet)
+
+static struct BurnRomInfo BulletdRomDesc[] = {
+	{ "bootleg_epr-11010.a4",   0x08000, 0xc4b7cb63, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11007.a1",   0x08000, 0x2afa84c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11011.a5",           0x08000, 0x7f446b9f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11008.a2",           0x08000, 0x34824d3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11012.a6",           0x08000, 0x3992f159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11009.a3",           0x08000, 0xdf199999, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10994.b9",           0x10000, 0x3035468a, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10995.b10",          0x10000, 0x6b97aff1, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10996.b11",          0x10000, 0x501bddd6, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-10999.b1",           0x10000, 0x119f0008, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11003.b5",           0x10000, 0x2f429089, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11000.b2",           0x10000, 0xf5482bbe, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11004.b6",           0x10000, 0x8c886df0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11001.b3",           0x10000, 0x65ea71e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11005.b7",           0x10000, 0xea2f9d50, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11002.b4",           0x10000, 0x9e25042b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11006.b8",           0x10000, 0x6b7384f2, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10997.a7",           0x08000, 0x5dd9cab5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10998.a8",           0x08000, 0xf971a817, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Bulletd)
+STD_ROM_FN(Bulletd)
+
+static struct BurnRomInfo CottonRomDesc[] = {
+	{ "epr-13921a.a7",  0x20000, 0xf047a037, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13919a.a5",  0x20000, 0x651108b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13922a.a8",  0x20000, 0x1ca248c5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13920a.a6",  0x20000, 0xfa3610f9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13891.a3",   0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13894.b12",  0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-13892.a10",  0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13893.a11",  0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0181a.key",  0x02000, 0x5c419b36, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cotton)
+STD_ROM_FN(Cotton)
+
+static struct BurnRomInfo CottondRomDesc[] = {
+	{ "bootleg_epr-13921a.a7",   0x20000, 0x92947867, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13919a.a5",   0x20000, 0x30f131fb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13922a.a8",   0x20000, 0xf0f75329, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13920a.a6",   0x20000, 0xa3721aab, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13891.a3",            0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13894.b12",           0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13892.a10",           0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13893.a11",           0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottond)
+STD_ROM_FN(Cottond)
+
+static struct BurnRomInfo CottonuRomDesc[] = {
+	{ "cotton.a7",     0x20000, 0xe7ef7d10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cotton.a5",     0x20000, 0xabe4f83e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cotton.a8",     0x20000, 0xfc0f4401, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cotton.a6",     0x20000, 0xf50f1ea2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13891.a3",   0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13894.b12",  0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-13892.a10",  0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13893.a11",  0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0180.key",   0x02000, 0xa236b915, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonu)
+STD_ROM_FN(Cottonu)
+
+static struct BurnRomInfo CottonudRomDesc[] = {
+	{ "bootleg_cotton.a7",   0x20000, 0xf6b585ca, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_cotton.a5",   0x20000, 0x6b328522, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_cotton.a8",   0x20000, 0xf9147b71, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_cotton.a6",   0x20000, 0x10365de4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13862.a14",       0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",       0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",       0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",       0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",       0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",       0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-13865.b1",        0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",        0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",        0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",        0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",        0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",        0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",        0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",        0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",        0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",       0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",        0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",       0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13891.a3",        0x20000, 0xc6b3c414, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13894.b12",       0x20000, 0xe3d0bee2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",        0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",       0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13892.a10",       0x08000, 0xfdfbe6ad, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13893.a11",       0x20000, 0x384233df, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    	 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonud)
+STD_ROM_FN(Cottonud)
+
+static struct BurnRomInfo CottonjRomDesc[] = {
+	{ "epr-13858b.a7",  0x20000, 0x2d113dac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13856b.a5",  0x20000, 0x5aab2ac4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13859b.a8",  0x20000, 0x2e67367d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13857b.a6",  0x20000, 0x20361f02, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13854.a3",   0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13875.b12",  0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-13860.a10",  0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13061.a11",  0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0179b.key",  0x02000, 0x488096d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },  // Same key data, but labeled as REV B
+
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonj)
+STD_ROM_FN(Cottonj)
+
+static struct BurnRomInfo CottonjdRomDesc[] = {
+	{ "bootleg_epr-13858b.a7",   0x20000, 0x739acf3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13856b.a5",   0x20000, 0x19597b1f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13859b.a8",   0x20000, 0x10548c39, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13857b.a6",   0x20000, 0x6d289f3e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13854.a3",            0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13875.b12",           0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13860.a10",           0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13061.a11",           0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonjd)
+STD_ROM_FN(Cottonjd)
+
+static struct BurnRomInfo CottonjaRomDesc[] = {
+	{ "epr-13858a.a7",  0x20000, 0x276f42fe, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13856a.a5",  0x20000, 0x14e6b5e7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13859a.a8",  0x20000, 0x4703ef9d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13857a.a6",  0x20000, 0xde37e527, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13862.a14",  0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",  0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",  0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",  0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",  0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",  0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13865.b1",   0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",   0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",   0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",   0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",   0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",   0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",   0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",   0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",   0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",  0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",   0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",  0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13854.a3",   0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13875.b12",  0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",   0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",  0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-13860.a10",  0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13061.a11",  0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0179a.key",  0x02000, 0x488096d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonja)
+STD_ROM_FN(Cottonja)
+
+static struct BurnRomInfo CottonjadRomDesc[] = {
+	{ "bootleg_epr-13858a.a7",   0x20000, 0xf048fba4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13856a.a5",   0x20000, 0x04f5bbe1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13859a.a8",   0x20000, 0xfc259bef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13857a.a6",   0x20000, 0xe191e939, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13862.a14",           0x20000, 0xa47354b6, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13877.b14",           0x20000, 0xd38424b5, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13863.a15",           0x20000, 0x8c990026, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13878.b15",           0x20000, 0x21c15b8a, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13864.a16",           0x20000, 0xd2b175bf, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13879.b16",           0x20000, 0xb9d62531, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-13865.b1",            0x20000, 0x7024f404, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13869.b5",            0x20000, 0xab4b3468, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13866.b2",            0x20000, 0x6169bba4, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13870.b6",            0x20000, 0x69b41ac3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13867.b3",            0x20000, 0xb014f02d, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13871.b7",            0x20000, 0x0801cf02, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13868.b4",            0x20000, 0xe62a7cd6, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13872.b8",            0x20000, 0xf066f315, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13852.a1",            0x20000, 0x943aba8b, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13873.b10",           0x20000, 0x1bd145f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13853.a2",            0x20000, 0x7ea93200, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13874.b11",           0x20000, 0x4fd59bff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13854.a3",            0x20000, 0x1c942190, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13875.b12",           0x20000, 0x6a66868d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13855.a4",            0x20000, 0x856f3ee2, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "opr-13876.b13",           0x20000, 0x1c5ffad8, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13860.a10",           0x08000, 0x6a57b027, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13061.a11",           0x20000, 0x4d21153f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Cottonjad)
+STD_ROM_FN(Cottonjad)
+
+static struct BurnRomInfo DduxRomDesc[] = {
+	{ "epr-11191.a7",   0x20000, 0x500e400a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11190.a5",   0x20000, 0x2a698308, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0096.key",   0x02000, 0x6fd7d26e, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ddux)
+STD_ROM_FN(Ddux)
+
+static struct BurnRomInfo DduxdRomDesc[] = {
+	{ "bootleg_epr-11191.a7",   0x20000, 0x7721eeba, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11190.a5",   0x20000, 0x5ee350cd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11915.a8",           0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11913.a6",           0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-11917.a14",          0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11918.a15",          0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11919.a16",          0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-11920.b1",           0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11922.b5",           0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11921.b2",           0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11923.b6",           0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11916.a10",          0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    	    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Dduxd)
+STD_ROM_FN(Dduxd)
+
+static struct BurnRomInfo Ddux1RomDesc[] = {
+	{ "epr-12189.a7",   0x20000, 0x558e9b5d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12188.a5",   0x20000, 0x802a240f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0095.c2",    0x01000, 0xb06b4ca7, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ddux1)
+STD_ROM_FN(Ddux1)
+
+static struct BurnRomInfo DduxjRomDesc[] = {
+	{ "epr-11914.a7",   0x20000, 0xa3eedc3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11912.a5",   0x20000, 0x05989323, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11915.a8",   0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11913.a6",   0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11917.a14",  0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11918.a15",  0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11919.a16",  0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11920.b1",   0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11922.b5",   0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11921.b2",   0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11923.b6",   0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11916.a10",  0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0094.key",   0x02000, 0xdb98f594, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Dduxj)
+STD_ROM_FN(Dduxj)
+
+static struct BurnRomInfo DduxjdRomDesc[] = {
+	{ "bootleg_epr-11914.a7",   0x20000, 0x8d52572d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11912.a5",   0x20000, 0x811ceee9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11915.a8",           0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11913.a6",           0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-11917.a14",          0x10000, 0x6f772190, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11918.a15",          0x10000, 0xc731db95, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11919.a16",          0x10000, 0x64d5a491, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-11920.b1",           0x20000, 0xe5d1e3cd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11922.b5",           0x20000, 0x70b0c4dd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11921.b2",           0x20000, 0x61d2358c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11923.b6",           0x20000, 0xc9ffe47d, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11916.a10",          0x08000, 0x7ab541cf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Dduxjd)
+STD_ROM_FN(Dduxjd)
+
+static struct BurnRomInfo DduxblRomDesc[] = {
+	{ "dduxb03.bin",    0x20000, 0xe7526012, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "dduxb05.bin",    0x20000, 0x459d1237, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "dduxb02.bin",    0x20000, 0xd8ed3132, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "dduxb04.bin",    0x20000, 0x30c6cb92, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "dduxb14.bin",    0x10000, 0x664bd135, SYS16_ROM_TILES | BRF_GRA },
+	{ "dduxb15.bin",    0x10000, 0xce0d2b30, SYS16_ROM_TILES | BRF_GRA },
+	{ "dduxb16.bin",    0x10000, 0x6de95434, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "dduxb10.bin",    0x10000, 0x0be3aee5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb06.bin",    0x10000, 0xb0079e99, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb11.bin",    0x10000, 0xcfb2af18, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb07.bin",    0x10000, 0x0217369c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb12.bin",    0x10000, 0x28ce9b15, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb08.bin",    0x10000, 0x8844f336, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb13.bin",    0x10000, 0xefe57759, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "dduxb09.bin",    0x10000, 0x6b64f665, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "dduxb01.bin",    0x08000, 0x0dbef0d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "dduxb_5_82s129.b1",		0x00100, 0xa7c22d96, BRF_OPT },
+	{ "dduxb_4_18s030.a17",		0x00020, 0x58bcf8bd, BRF_OPT },
+	{ "dduxb_pal16l8.1",		0x00104, 0x3b406587, BRF_OPT },
+	{ "dduxb_p_gal16v8.a18",	0x00117, 0xce1ab1e1, BRF_OPT },
+	{ "dduxb_pal20l8.2",		0x00144, 0x09098fbe, BRF_OPT },
+};
+
+
+STD_ROM_PICK(Dduxbl)
+STD_ROM_FN(Dduxbl)
+
+static struct BurnRomInfo DunkshotRomDesc[] = {
+	{ "epr-10523c.a4",  0x08000, 0x106733c2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10520c.a1",  0x08000, 0xba9c5d10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10524.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10471.a5
+	{ "epr-10521.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10468.a2
+	{ "epr-10525.a6",   0x08000, 0x7f41f334, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10522.a3",   0x08000, 0xe5b5f754, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-10528.b9",   0x08000, 0xa8a3762d, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10529.b10",  0x08000, 0x80cbff50, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10530.b11",  0x08000, 0x2dbe1e52, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10526.b4",   0x08000, 0xbf200754, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10527.b8",   0x08000, 0x39b1a242, SYS16_ROM_SPRITES | BRF_GRA },	
+	
+	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Dunkshot)
+STD_ROM_FN(Dunkshot)
+
+static struct BurnRomInfo DunkshotaRomDesc[] = {
+	// several roms had replacement? (different style to others) labels with 'T' markings, content identical.
+	{ "epr-10523a.a4",  0x08000, 0x22e3f074, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, 
+	{ "epr-10520a.a1",  0x08000, 0x16e213ba, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, 
+	{ "epr-10524.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10471.a5
+	{ "epr-10521.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG }, // == epr-10468.a2
+	{ "epr-10525.a6",   0x08000, 0x7f41f334, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10522.a3",   0x08000, 0xe5b5f754, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-10528.b9",  	0x08000, 0xa8a3762d, SYS16_ROM_TILES | BRF_GRA }, 
+	{ "epr-10529.b10", 	0x08000, 0x80cbff50, SYS16_ROM_TILES | BRF_GRA }, 
+	{ "epr-10530.b11", 	0x08000, 0x2dbe1e52, SYS16_ROM_TILES | BRF_GRA }, 
+	
+	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10526.b4",  	0x08000, 0xbf200754, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10527.b8",  	0x08000, 0x39b1a242, SYS16_ROM_SPRITES | BRF_GRA },	
+	
+	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Dunkshota)
+STD_ROM_FN(Dunkshota)
+
+static struct BurnRomInfo DunkshotoRomDesc[] = {
+	{ "epr-10470.a4",   0x08000, 0x8c60761f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10467.a1",   0x08000, 0x29774114, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10471.a5",   0x08000, 0x22777314, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10468.a2",   0x08000, 0xe2d5f97a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10472.a6",   0x08000, 0x206027a6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10469.a3",   0x08000, 0xaa442b81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-10485.b9",   0x08000, 0xf16dda29, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10486.b10",  0x08000, 0x311d973c, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10487.b11",  0x08000, 0xa8fb179f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10477.b1",   0x08000, 0xf9d3b2cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10481.b5",   0x08000, 0xfeb04bc9, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10478.b2",   0x08000, 0x5b5c5c92, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10482.b6",   0x08000, 0x5bc07618, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10479.b3",   0x08000, 0xe84190a0, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10483.b7",   0x08000, 0x7cab4f9e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10480.b4",   0x08000, 0x5dffd9dd, SYS16_ROM_SPRITES | BRF_GRA },	
+	{ "epr-10484.b8",   0x08000, 0xbcb5fcc9, SYS16_ROM_SPRITES | BRF_GRA },	
+	
+	{ "epr-10473.a7",   0x08000, 0x7f1f5a27, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10474.a8",   0x08000, 0x419a656e, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10475.a9",   0x08000, 0x17d55e85, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-10476.a10",  0x08000, 0xa6be0956, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0022.key",   0x02000, 0x3f218333, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Dunkshoto)
+STD_ROM_FN(Dunkshoto)
+
+static struct BurnRomInfo EswatRomDesc[] = {
+	{ "epr-12659.a2",   0x40000, 0xc5ab2db9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12658.a1",   0x40000, 0xaf40bd71, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0130.key",   0x02000, 0xba7b717b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswat)
+STD_ROM_FN(Eswat)
+
+static struct BurnRomInfo EswatdRomDesc[] = {
+	{ "bootleg_epr-12659.a2",   0x40000, 0x3157f69d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12658.a1",   0x40000, 0x0feb544b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatd)
+STD_ROM_FN(Eswatd)
+
+static struct BurnRomInfo EswatjRomDesc[] = {
+	{ "epr-12615.a2",   0x40000, 0x388c2ea7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12614.a1",   0x40000, 0xd5f0fb47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0128.key",   0x02000, 0x95f96277, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatj)
+STD_ROM_FN(Eswatj)
+
+static struct BurnRomInfo EswatjdRomDesc[] = {
+	{ "bootleg_epr-12615.a2",   0x40000, 0x5103480e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12614.a1",   0x40000, 0x51f404a5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatjd)
+STD_ROM_FN(Eswatjd)
+
+static struct BurnRomInfo Eswatj1RomDesc[] = {
+	{ "epr-12683.a7",   0x20000, 0x33c34cfd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12681.a5",   0x20000, 0x6b2feb09, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12684.a8",   0x20000, 0x2e5b866b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12682.a6",   0x20000, 0x8e1f57d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12688.a14",  0x20000, 0x12f898db, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12700.b14",  0x10000, 0x37a721c7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12689.a15",  0x20000, 0x339746d0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12701.b15",  0x10000, 0x703bf496, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12690.a16",  0x20000, 0x33cf7a55, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12702.b16",  0x10000, 0x70b70211, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12691.b1",   0x20000, 0x2ff5cb9e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12694.b5",   0x20000, 0x10a27526, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12692.b2",   0x20000, 0x01b2e832, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12695.b6",   0x20000, 0xba3ba6fd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12693.b3",   0x20000, 0xd12ef57a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12696.b7",   0x20000, 0x54b51ca4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12678.a1",   0x20000, 0xa8afd649, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12697.b10",  0x20000, 0x6ac4cbfb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12679.a2",   0x20000, 0xb4c4a2ab, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12698.b11",  0x20000, 0x99784b36, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12680.a3",   0x20000, 0xf321452c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12699.b12",  0x20000, 0xac329586, SYS16_ROM_SPRITES | BRF_GRA },
+		
+	{ "epr-12685.a10",  0x08000, 0x5d0c16d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12686.a11",  0x20000, 0xf451705e, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12687.a12",  0x20000, 0x9e87571f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0131.key",   0x02000, 0x8f71726d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatj1)
+STD_ROM_FN(Eswatj1)
+
+static struct BurnRomInfo Eswatj1dRomDesc[] = {
+	{ "bootleg_epr-12683.a7",   0x20000, 0x4f9d7a85, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12681.a5",   0x20000, 0x3e113af2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12684.a8",           0x20000, 0x2e5b866b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12682.a6",           0x20000, 0x8e1f57d2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12688.a14",          0x20000, 0x12f898db, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12700.b14",          0x10000, 0x37a721c7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12689.a15",          0x20000, 0x339746d0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12701.b15",          0x10000, 0x703bf496, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12690.a16",          0x20000, 0x33cf7a55, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12702.b16",          0x10000, 0x70b70211, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12691.b1",           0x20000, 0x2ff5cb9e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12694.b5",           0x20000, 0x10a27526, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12692.b2",           0x20000, 0x01b2e832, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12695.b6",           0x20000, 0xba3ba6fd, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12693.b3",           0x20000, 0xd12ef57a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12696.b7",           0x20000, 0x54b51ca4, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12678.a1",           0x20000, 0xa8afd649, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12697.b10",          0x20000, 0x6ac4cbfb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12679.a2",           0x20000, 0xb4c4a2ab, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12698.b11",          0x20000, 0x99784b36, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12680.a3",           0x20000, 0xf321452c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12699.b12",          0x20000, 0xac329586, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12685.a10",          0x08000, 0x5d0c16d7, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12686.a11",          0x20000, 0xf451705e, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12687.a12",          0x20000, 0x9e87571f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatj1d)
+STD_ROM_FN(Eswatj1d)
+
+static struct BurnRomInfo EswatuRomDesc[] = {
+	{ "epr-12657.a2",   0x40000, 0x43ca72aa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12656.a1",   0x40000, 0x5f018967, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12624.b11",  0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",  0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",  0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12618.b1",   0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",   0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",   0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",   0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",   0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",   0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",  0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12616.a11",  0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0129.key",   0x02000, 0x128302c7, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatu)
+STD_ROM_FN(Eswatu)
+
+static struct BurnRomInfo EswatudRomDesc[] = {
+	{ "bootleg_epr-12657.a2",   0x40000, 0x85b42ecc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12656.a1",   0x40000, 0x0509949f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12624.b11",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12625.b12",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12626.b13",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12618.b1",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12621.b4",           0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12619.b2",           0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12622.b5",           0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12620.b3",           0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12623.b6",           0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12617.a13",          0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12616.a11",          0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Eswatud)
+STD_ROM_FN(Eswatud)
+
+static struct BurnRomInfo EswatblRomDesc[] = {
+	{ "eswat_c.rom",   0x10000, 0x1028cc81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "eswat_f.rom",   0x10000, 0xf7b2d388, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "eswat_b.rom",   0x10000, 0x87c6b1b5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "eswat_e.rom",   0x10000, 0x937ddf9a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "eswat_a.rom",   0x08000, 0x2af4fc62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "eswat_d.rom",   0x08000, 0xb4751e19, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "ic19",          0x40000, 0x375a5ec4, SYS16_ROM_TILES | BRF_GRA },
+	{ "ic20",          0x40000, 0x3b8c757e, SYS16_ROM_TILES | BRF_GRA },
+	{ "ic21",          0x40000, 0x3efca25c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "ic9",           0x40000, 0x0d1530bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "ic12",          0x40000, 0x18ff0799, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "ic10",          0x40000, 0x32069246, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "ic13",          0x40000, 0xa3dfe436, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "ic11",          0x40000, 0xf6b096e0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "ic14",          0x40000, 0x6773fef6, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "ic8",           0x08000, 0x7efecf23, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "ic6",           0x40000, 0x254347c2, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Eswatbl)
+STD_ROM_FN(Eswatbl)
+
+static struct BurnRomInfo ExctleagRomDesc[] = {
+	{ "epr-11939.a4",    0x10000, 0x117dd98f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11936.a1",    0x10000, 0x0863de60, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11940.a5",    0x10000, 0xdec83274, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11937.a2",    0x10000, 0x4ebda367, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11941.a6",    0x10000, 0x4df2d451, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11938.a3",    0x10000, 0x07c08d47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11942.b09",   0x10000, 0xeb70e827, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11943.b10",   0x10000, 0xd97c8982, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11944.b11",   0x10000, 0xa75cae80, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11950.b1",    0x10000, 0xaf497849, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11954.b5",    0x10000, 0x5fa2106c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11951.b2",    0x10000, 0xc04fa974, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11955.b6",    0x10000, 0x86a0c368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11952.b3",    0x10000, 0xe64a9761, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11956.b7",    0x10000, 0xaff5c2fa, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11953.b4",    0x10000, 0x4cae3999, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11957.b8",    0x10000, 0x218f835b, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11945.a7",    0x08000, 0xc2a83012, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11140.a8",    0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11141.a9",    0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11142.a10",   0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11143.a11",   0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0079.key",    0x02000, 0xeffefa1c, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Exctleag)
+STD_ROM_FN(Exctleag)
+
+static struct BurnRomInfo ExctleagdRomDesc[] = {
+	{ "bootleg_epr-11939.a4",   0x10000, 0x42db9082, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11936.a1",   0x10000, 0x8a0c126c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11940.a5",   0x10000, 0xe490bb47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11937.a2",   0x10000, 0xf1c07e10, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11941.a6",           0x10000, 0x4df2d451, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11938.a3",           0x10000, 0x07c08d47, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11942.b09",          0x10000, 0xeb70e827, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11943.b10",          0x10000, 0xd97c8982, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11944.b11",          0x10000, 0xa75cae80, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-11950.b1",           0x10000, 0xaf497849, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11954.b5",           0x10000, 0x5fa2106c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11951.b2",           0x10000, 0xc04fa974, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11955.b6",           0x10000, 0x86a0c368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11952.b3",           0x10000, 0xe64a9761, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11956.b7",           0x10000, 0xaff5c2fa, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11953.b4",           0x10000, 0x4cae3999, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11957.b8",           0x10000, 0x218f835b, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11945.a7",           0x08000, 0xc2a83012, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11140.a8",           0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11141.a9",           0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11142.a10",          0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11143.a11",          0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Exctleagd)
+STD_ROM_FN(Exctleagd)
+
+static struct BurnRomInfo FantzonetaRomDesc[] = {
+	{ "fzta__a07.bin",  0x020000, 0xad07d1fd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "fzta__a05.bin",  0x020000, 0x47dbe11b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "fzta__a14.bin",  0x010000, 0x9468ab33, SYS16_ROM_TILES | BRF_GRA },
+	{ "fzta__a15.bin",  0x010000, 0x22a3cf75, SYS16_ROM_TILES | BRF_GRA },
+	{ "fzta__a16.bin",  0x010000, 0x25cba87f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "fzta__b01.bin",  0x020000, 0x0beb4a22, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fzta__b05.bin",  0x020000, 0x7f676c69, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fzta__a01.bin",  0x020000, 0x40e1db9a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fzta__b10.bin",  0x020000, 0xacbb5cff, SYS16_ROM_SPRITES | BRF_GRA },
+			
+	{ "fzta__a10.bin",  0x008000, 0xdab6fcd0, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fantzoneta)
+STD_ROM_FN(Fantzoneta)
+
+static struct BurnRomInfo Fantzn2xRomDesc[] = {
+	{ "fz2.a7",         0x020000, 0x94c05f0b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "fz2.a5",         0x020000, 0xf3526895, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "fz2.a8",         0x020000, 0xb2ebb209, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "fz2.a6",         0x020000, 0x6833f546, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "fz2.a14",        0x020000, 0x1c0a4537, SYS16_ROM_TILES | BRF_GRA },
+	{ "fz2.a15",        0x020000, 0x2b933344, SYS16_ROM_TILES | BRF_GRA },
+	{ "fz2.a16",        0x020000, 0xe63281a1, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "fz2.b1",         0x020000, 0x46bba615, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b5",         0x020000, 0xbebeee5d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b2",         0x020000, 0x6681a7b6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b6",         0x020000, 0x42d3241f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b3",         0x020000, 0x5863926f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b7",         0x020000, 0xcd830510, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b4",         0x020000, 0xb98fa5b6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b8",         0x020000, 0xe8248f68, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.a1",         0x020000, 0x9d2f41f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b10",        0x020000, 0x7686ea33, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.a2",         0x020000, 0x3b4050b7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "fz2.b11",        0x020000, 0xda8a95dc, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "fz2.a10",        0x008000, 0x92c92924, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "fz2.a11",        0x020000, 0x8c641bb9, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Fantzn2x)
+STD_ROM_FN(Fantzn2x)
+
+static struct BurnRomInfo Fantzn2xpRomDesc[] = {
+	{ "cpu1b.bin",      0x020000, 0xd23ef944, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cpu1a.bin",      0x020000, 0x407490e4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cpu1d.bin",      0x020000, 0xc8c7716b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "cpu1c.bin",      0x020000, 0x242e7b6e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "tilea.bin",      0x020000, 0x47e0e5ce, SYS16_ROM_TILES | BRF_GRA },
+	{ "tileb.bin",      0x020000, 0x59e181b7, SYS16_ROM_TILES | BRF_GRA },
+	{ "tilec.bin",      0x020000, 0x375d354c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "obja.bin",       0x020000, 0x9af87a4d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objb.bin",       0x020000, 0x2fdbca68, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objc.bin",       0x020000, 0x2587487a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objd.bin",       0x020000, 0x8de4e7aa, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "obje.bin",       0x020000, 0xdfada4ff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objf.bin",       0x020000, 0x65e5d23d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objg.bin",       0x020000, 0xdc9fbb75, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objh.bin",       0x020000, 0x97bb7c19, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "obji.bin",       0x020000, 0xc7790fee, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "objj.bin",       0x020000, 0x4535eb0e, SYS16_ROM_SPRITES | BRF_GRA },
+		
+	{ "cpu2a.bin",      0x008000, 0x92c92924, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "cpu2b.bin",      0x020000, 0x2c8ad475, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Fantzn2xp)
+STD_ROM_FN(Fantzn2xp)
+
+static struct BurnRomInfo Fantzn2xps2RomDesc[] = {
+	{ "fz2_s16c.p00",   0x040000, 0xb7d16c1d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "fz2_s16c.p01",   0x040000, 0x2c47487c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "fz2_s16c.scr",   0x080000, 0xed3b1ac0, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "fz2_s16c.spr",   0x200000, 0x14d06fee, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "fz2_s16c.snd",   0x030000, 0x0ed30ec1, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fantzn2xps2)
+STD_ROM_FN(Fantzn2xps2)
+
+static struct BurnRomInfo FantzntaRomDesc[] = {
+	{ "fz1_s16b_ta.p00",0x040000, 0xbad0537a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "fz1_s16b.scr",   0x040000, 0x10ecd8b9, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "fz1_s16b_ta.obj",0x200000, 0x51fd438f, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "fz1_s16b.snd",   0x020000, 0xa00701fb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fantznta)
+STD_ROM_FN(Fantznta)
+
+static struct BurnRomInfo FpointRomDesc[] = {
+	{ "epr-12599b.a4",  0x10000, 0x26e3f354, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12598b.a1",  0x10000, 0xc0f2c97d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12593.a14",  0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12594.a15",  0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12595.a16",  0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-12596.b1",   0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12597.b5",   0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-12592.a10",  0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0127a.key",  0x02000, 0x5adb0042, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fpoint)
+STD_ROM_FN(Fpoint)
+
+static struct BurnRomInfo FpointdRomDesc[] = {
+	{ "bootleg_epr-12599b.a4",   0x10000, 0xf5102d28, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12598b.a1",   0x10000, 0x5335558c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12593.a14",           0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12594.a15",           0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12595.a16",           0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-12596.b1",            0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12597.b5",            0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12592.a10",           0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fpointd)
+STD_ROM_FN(Fpointd)
+
+static struct BurnRomInfo Fpoint1RomDesc[] = {
+	{ "epr-12591b.a7",  0x10000, 0x248b3e1b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12590b.a5",  0x10000, 0x75256e3d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12593.a14",  0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12594.a15",  0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12595.a16",  0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-12596.b1",   0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12597.b5",   0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-12592.a10",  0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0127a.key",  0x02000, 0x5adb0042, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Fpoint1)
+STD_ROM_FN(Fpoint1)
+
+static struct BurnRomInfo Fpoint1dRomDesc[] = {
+	{ "bootleg_epr-12591b.a7",   0x10000, 0xf778e067, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12590b.a5",   0x10000, 0xe6e2f2cc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12593.a14",           0x10000, 0xcc0582d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12594.a15",           0x10000, 0x8bfc4815, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12595.a16",           0x10000, 0x5b18d60b, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-12596.b1",            0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12597.b5",            0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12592.a10",           0x08000, 0x9a8c11bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Fpoint1d)
+STD_ROM_FN(Fpoint1d)
+
+static struct BurnRomInfo FpointblRomDesc[] = {
+	{ "flpoint.003",    0x10000, 0x4d6df514, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "flpoint.002",    0x10000, 0x4dff2ee8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "flpoint.006",    0x10000, 0xc539727d, SYS16_ROM_TILES | BRF_GRA },
+	{ "flpoint.005",    0x10000, 0x82c0b8b0, SYS16_ROM_TILES | BRF_GRA },
+	{ "flpoint.004",    0x10000, 0x522426ae, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "12596.bin",      0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "12597.bin",      0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "flpoint.001",    0x08000, 0xc5b8e0fe, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Fpointbl)
+STD_ROM_FN(Fpointbl)
+
+static struct BurnRomInfo FpointbjRomDesc[] = {
+	{ "boot2.003",      0x10000, 0x6c00d1b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "boot2.002",      0x10000, 0xc1fcd704, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "flpoint.006",    0x10000, 0xc539727d, SYS16_ROM_TILES | BRF_GRA },
+	{ "flpoint.005",    0x10000, 0x82c0b8b0, SYS16_ROM_TILES | BRF_GRA },
+	{ "flpoint.004",    0x10000, 0x522426ae, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "12596.bin",      0x10000, 0x4a4041f3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "12597.bin",      0x10000, 0x6961e676, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "flpoint.001",    0x08000, 0xc5b8e0fe, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "82s129.1",       0x00100, 0xa7c22d96, BRF_OPT },
+	{ "82s123.2",       0x00020, 0x58bcf8bd, BRF_OPT },
+	{ "fpointbj_gal16v8_1.bin", 0x00117, 0xba7f292c, BRF_OPT },
+	{ "fpointbj_gal16v8_3.bin", 0x00117, 0xce1ab1e1, BRF_OPT },
+	{ "fpointbj_gal20v8.bin", 	0x00400, 0x00000000, BRF_OPT | BRF_NODUMP },
+};
+
+
+STD_ROM_PICK(Fpointbj)
+STD_ROM_FN(Fpointbj)
+
+static struct BurnRomInfo GoldnaxeRomDesc[] = {
+	{ "epr-12545.ic2",  0x40000, 0xa97c4e4d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12544.ic1",  0x40000, 0x5e38f668, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0123a.c2",   0x01000, 0xcf19e7d4, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe)
+STD_ROM_FN(Goldnaxe)
+
+static struct BurnRomInfo Goldnaxe1RomDesc[] = {
+	{ "epr-12389.ic2",  0x40000, 0x35d5fa77, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12388.ic1",  0x40000, 0x72952a93, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0110.key",   0x02000, 0xcd517dc6, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe1)
+STD_ROM_FN(Goldnaxe1)
+
+static struct BurnRomInfo Goldnaxe1dRomDesc[] = {
+	{ "bootleg_epr-12389.ic2",   0x40000, 0x0c443d5e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12388.ic1",   0x40000, 0x841d70ed, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.ic19",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.ic20",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.ic21",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12378.ic9",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.ic12",          0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.ic10",          0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.ic13",          0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.ic11",          0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.ic14",          0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.ic8",           0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12384.ic6",           0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe1d)
+STD_ROM_FN(Goldnaxe1d)
+
+static struct BurnRomInfo Goldnaxe2RomDesc[] = {
+	{ "epr-12523.a7",   0x20000, 0x8e6128d7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12522.a5",   0x20000, 0xb6c35160, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0112.c2",    0x01000, 0xbda31044, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe2)
+STD_ROM_FN(Goldnaxe2)
+
+static struct BurnRomInfo Goldnaxe3RomDesc[] = {
+	{ "epr-12525.a7",   0x20000, 0x48332c76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12524.a5",   0x20000, 0x8e58f342, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0120.key",   0x02000, 0x946e9fa6, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe3)
+STD_ROM_FN(Goldnaxe3)
+
+static struct BurnRomInfo Goldnaxe3dRomDesc[] = {
+	{ "bootleg_epr-12525.a7",   0x20000, 0xf8dbae51, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12524.a5",   0x20000, 0x908e4159, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12521.a8",           0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12519.a6",           0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.a14",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.a15",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.a16",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12378.b1",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.b5",           0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.b2",           0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.b6",           0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.b3",           0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.b7",           0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.a10",          0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12384.a11",          0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxe3d)
+STD_ROM_FN(Goldnaxe3d)
+
+static struct BurnRomInfo GoldnaxejRomDesc[] = {
+	{ "epr-12540.a7",   0x20000, 0x0c7ccc6d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12539.a5",   0x20000, 0x1f24f7d0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12521.a8",   0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12519.a6",   0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.a14",  0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.a15",  0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.a16",  0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.b1",   0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.b5",   0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.b2",   0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.b6",   0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.b3",   0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.b7",   0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.a10",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.a11",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0121.key",   0x02000, 0x72afed01, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxej)
+STD_ROM_FN(Goldnaxej)
+
+static struct BurnRomInfo GoldnaxejdRomDesc[] = {
+	{ "bootleg_epr-12540.a7",   0x20000, 0x601bb784, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12539.a5",   0x20000, 0xc76c0969, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12521.a8",           0x20000, 0x5001d713, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12519.a6",           0x20000, 0x4438ca8e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.a14",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.a15",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.a16",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12378.b1",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.b5",           0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.b2",           0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.b6",           0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.b3",           0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.b7",           0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.a10",          0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12384.a11",          0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxejd)
+STD_ROM_FN(Goldnaxejd)
+
+static struct BurnRomInfo GoldnaxeuRomDesc[] = {
+	{ "epr-12543.ic2",  0x40000, 0xb0df9ca4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12542.ic1",  0x40000, 0xb7994d3c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.ic19", 0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.ic20", 0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.ic21", 0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12378.ic9",  0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.ic12", 0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.ic10", 0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.ic13", 0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.ic11", 0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.ic14", 0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.ic8",  0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12384.ic6",  0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0122.key",   0x02000, 0xf123c2fb, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxeu)
+STD_ROM_FN(Goldnaxeu)
+
+static struct BurnRomInfo GoldnaxeudRomDesc[] = {
+	{ "bootleg_epr-12543.ic2",   0x40000, 0xe3089080, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12542.ic1",   0x40000, 0x1e84364b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12385.ic19",          0x20000, 0xb8a4e7e0, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12386.ic20",          0x20000, 0x25d7d779, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12387.ic21",          0x20000, 0xc7fcadf3, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12378.ic9",           0x40000, 0x119e5a82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12379.ic12",          0x40000, 0x1a0e8c57, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12380.ic10",          0x40000, 0xbb2c0853, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12381.ic13",          0x40000, 0x81ba6ecc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12382.ic11",          0x40000, 0x81601c6f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12383.ic14",          0x40000, 0x5dbacf7a, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12390.ic8",           0x08000, 0x399fc5f5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12384.ic6",           0x20000, 0x6218d8e7, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		 0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Goldnaxeud)
+STD_ROM_FN(Goldnaxeud)
+
+static struct BurnRomInfo HwchampRomDesc[] = {
+	{ "epr-11239.a7",   0x20000, 0xe5abfed7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11238.a5",   0x20000, 0x25180124, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11241.a14",  0x20000, 0xfc586a86, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11166.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11242.a15",  0x20000, 0x7715a742, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11167.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11243.a16",  0x20000, 0xf30cd5fd, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11168.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11158.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11162.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11159.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11163.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11160.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11164.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11161.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11165.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11240.a10",  0x08000, 0x96a12d9d, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11244.a11",  0x20000, 0x4191c03d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-11245.a12",  0x20000, 0xa4d53f7b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Hwchamp)
+STD_ROM_FN(Hwchamp)
+
+static struct BurnRomInfo HwchampaRomDesc[] = {
+	{ "epr-11239.a7",   0x20000, 0x42d59e4b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11238.a5",   0x20000, 0x25180124, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11241.a14",  0x20000, 0xfc586a86, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11166.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11242.a15",  0x20000, 0x7715a742, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11167.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11243.a16",  0x20000, 0xf30cd5fd, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11168.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11158.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11162.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11159.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11163.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11160.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11164.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11161.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11165.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11240.a10",  0x08000, 0x96a12d9d, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11244.a11",  0x20000, 0x4191c03d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-11245.a12",  0x20000, 0xa4d53f7b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Hwchampa)
+STD_ROM_FN(Hwchampa)
+
+static struct BurnRomInfo HwchampjRomDesc[] = {
+	{ "epr-11152.a7",   0x20000, 0x8ab0ce62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11153.a5",   0x20000, 0x84a743de, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11202.a14",  0x20000, 0x7c94ede3, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11213.b14",  0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11203.a15",  0x20000, 0x327754f7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11214.b15",  0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11204.a16",  0x20000, 0xdfc4cd33, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11215.b16",  0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11205.b1",   0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11209.b5",   0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11206.b2",   0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11210.b6",   0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11207.b3",   0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11211.b7",   0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11208.b4",   0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11212.b8",   0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-11154.a10",  0x08000, 0x65791275, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11200.a11",  0x20000, 0x5c41a68a, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11201.a12",  0x20000, 0x9a993120, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0046.key",   0x02000, 0x488b3f8b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Hwchampj)
+STD_ROM_FN(Hwchampj)
+
+static struct BurnRomInfo HwchampjdRomDesc[] = {
+	{ "bootleg_epr-11152.a7",   0x20000, 0x3672978a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11153.a5",   0x20000, 0x804b65bc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11202.a14",          0x20000, 0x7c94ede3, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11213.b14",          0x20000, 0xaeaaa9d8, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11203.a15",          0x20000, 0x327754f7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11214.b15",          0x20000, 0x63a82afa, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11204.a16",          0x20000, 0xdfc4cd33, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11215.b16",          0x20000, 0x5b8494a8, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-11205.b1",           0x20000, 0xfc098a13, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11209.b5",           0x20000, 0x5db934a8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11206.b2",           0x20000, 0x1f27ee74, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11210.b6",           0x20000, 0x8a6a5cf1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11207.b3",           0x20000, 0xc0b2ba82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11211.b7",           0x20000, 0xd6c7917b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11208.b4",           0x20000, 0x35c9e44b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11212.b8",           0x20000, 0x57e8f9d2, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11154.a10",          0x08000, 0x65791275, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11200.a11",          0x20000, 0x5c41a68a, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11201.a12",          0x20000, 0x9a993120, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",     		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Hwchampjd)
+STD_ROM_FN(Hwchampjd)
+
+static struct BurnRomInfo LockonphRomDesc[] = {
+	{ "b4",             0x40000, 0xfbb896f4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "b2",             0x40000, 0xfc1c9f81, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "b3",             0x20000, 0x3f8c0215, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "b1",             0x20000, 0xf11a72ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "b10",            0x20000, 0xd3a8bd15, SYS16_ROM_TILES | BRF_GRA },
+	{ "b7",             0x20000, 0x787c382e, SYS16_ROM_TILES | BRF_GRA },
+	{ "b9",             0x20000, 0xaae2cef1, SYS16_ROM_TILES | BRF_GRA },
+	{ "b8",             0x20000, 0xcd30abe0, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "b14",            0x40000, 0xaf943525, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b12",            0x40000, 0x9088d980, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b13",            0x20000, 0x62f4b64f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b11",            0x20000, 0x5da3dfcd, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "b6",             0x10000, 0xaa7b1880, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "b5",             0x20000, 0xd6369a39, SYS16_ROM_MSM6295 | BRF_SND },
+};
+
+
+STD_ROM_PICK(Lockonph)
+STD_ROM_FN(Lockonph)
+
+static struct BurnRomInfo MvpRomDesc[] = {
+	{ "epr-13000.a2",   0x40000, 0x2e0e21ec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12999.a1",   0x40000, 0xfd213d28, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-13011.b11",  0x40000, 0x1cb871fc, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-13012.b12",  0x40000, 0xb75e6821, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-13013.b13",  0x40000, 0xf1944a3c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-13003.b1",   0x40000, 0x21424151, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13006.b4",   0x40000, 0x2e9afd2f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13004.b2",   0x40000, 0x0aa09dd3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13007.b5",   0x40000, 0x55c8605b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13005.b3",   0x40000, 0xc899c810, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13008.b6",   0x40000, 0xb3d46dfc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13009.b7",   0x40000, 0x126d2e37, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13010.b8",   0x40000, 0xdf37c567, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13002.a13",  0x08000, 0x1b6e1515, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-13001.a11",  0x40000, 0xe8cace8c, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0143.key",   0x02000, 0xfba2e8da, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Mvp)
+STD_ROM_FN(Mvp)
+
+static struct BurnRomInfo MvpdRomDesc[] = {
+	{ "bootleg_epr-13000.a2",   0x40000, 0xfa72e415, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12999.a1",   0x40000, 0x0af75927, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-13011.b11",          0x40000, 0x1cb871fc, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-13012.b12",          0x40000, 0xb75e6821, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-13013.b13",          0x40000, 0xf1944a3c, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-13003.b1",           0x40000, 0x21424151, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13006.b4",           0x40000, 0x2e9afd2f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13004.b2",           0x40000, 0x0aa09dd3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13007.b5",           0x40000, 0x55c8605b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13005.b3",           0x40000, 0xc899c810, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13008.b6",           0x40000, 0xb3d46dfc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13009.b7",           0x40000, 0x126d2e37, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-13010.b8",           0x40000, 0xdf37c567, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13002.a13",          0x08000, 0x1b6e1515, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-13001.a11",          0x40000, 0xe8cace8c, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Mvpd)
+STD_ROM_FN(Mvpd)
+
+static struct BurnRomInfo MvpjRomDesc[] = {
+	{ "epr-12967.a7",   0x20000, 0xe53ac137, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12965.a5",   0x20000, 0x4266cb9e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12968.a8",   0x20000, 0x91c772ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12966.a6",   0x20000, 0x39365a79, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12971.a14",  0x20000, 0x245dcd1f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12983.b14",  0x20000, 0xf3570fc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12972.a15",  0x20000, 0xff7c4278, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12984.b15",  0x20000, 0xd37d1876, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12973.a16",  0x20000, 0x8dc9b9ea, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12985.b16",  0x20000, 0xe3f33a8a, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12974.b1",   0x20000, 0xe1da5597, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12977.b5",   0x20000, 0xb9eb9762, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12975.b2",   0x20000, 0x364d51d1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12978.b6",   0x20000, 0x014b5442, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12976.b3",   0x20000, 0x43b549c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12979.b7",   0x20000, 0x20f603f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12962.a1",   0x20000, 0x9b678da3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12980.b10",  0x20000, 0x883b792a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12963.a2",   0x20000, 0x8870f95a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12981.b11",  0x20000, 0x48636cb0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12964.a3",   0x20000, 0xf9148c5d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12982.b12",  0x20000, 0xc4453292, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12969.a10",  0x08000, 0xec621893, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12970.a11",  0x20000, 0x8f7d7657, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0142.key",   0x02000, 0x90468045, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Mvpj)
+STD_ROM_FN(Mvpj)
+
+static struct BurnRomInfo MvpjdRomDesc[] = {
+	{ "bootleg_epr-12967.a7",   0x20000, 0x7eb52b77, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12965.a5",   0x20000, 0x62c961b0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12968.a8",           0x20000, 0x91c772ac, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12966.a6",           0x20000, 0x39365a79, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12971.a14",          0x20000, 0x245dcd1f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12983.b14",          0x20000, 0xf3570fc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12972.a15",          0x20000, 0xff7c4278, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12984.b15",          0x20000, 0xd37d1876, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12973.a16",          0x20000, 0x8dc9b9ea, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12985.b16",          0x20000, 0xe3f33a8a, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12974.b1",           0x20000, 0xe1da5597, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12977.b5",           0x20000, 0xb9eb9762, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12975.b2",           0x20000, 0x364d51d1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12978.b6",           0x20000, 0x014b5442, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12976.b3",           0x20000, 0x43b549c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12979.b7",           0x20000, 0x20f603f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12962.a1",           0x20000, 0x9b678da3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12980.b10",          0x20000, 0x883b792a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12963.a2",           0x20000, 0x8870f95a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12981.b11",          0x20000, 0x48636cb0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12964.a3",           0x20000, 0xf9148c5d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12982.b12",          0x20000, 0xc4453292, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12969.a10",          0x08000, 0xec621893, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12970.a11",          0x20000, 0x8f7d7657, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Mvpjd)
+STD_ROM_FN(Mvpjd)
+
+static struct BurnRomInfo PassshtRomDesc[] = {
+	{ "epr-11871.a4",   0x10000, 0x0f9ccea5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11870.a1",   0x10000, 0xdf43ebcf, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0080.key",   0x02000, 0x222d016f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Passsht)
+STD_ROM_FN(Passsht)
+
+static struct BurnRomInfo PassshtdRomDesc[] = {
+	{ "bootleg_epr-11871.a4",   0x10000, 0xf009c017, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11870.a1",   0x10000, 0x9cd5f12f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11854.b9",           0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",          0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",          0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-11862.b1",           0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",           0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",           0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",           0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",           0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",           0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",           0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11858.a8",           0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",           0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",          0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",          0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Passshtd)
+STD_ROM_FN(Passshtd)
+
+static struct BurnRomInfo PassshtaRomDesc[] = {
+	{ "8.a4",           0x10000, 0xb84dc139, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "5.a1",           0x10000, 0xeffe29df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0074.key",  0x02000, 0x71bd232d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Passshta)
+STD_ROM_FN(Passshta)
+
+static struct BurnRomInfo PassshtadRomDesc[] = {
+	{ "bootleg_8.a4",   0x10000, 0x6d63bf18, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_5.a1",   0x10000, 0xfd4d0419, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Passshtad)
+STD_ROM_FN(Passshtad)
+
+static struct BurnRomInfo PassshtjRomDesc[] = {
+	{ "epr-11853.a4",   0x10000, 0xfab337e7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11852.a1",   0x10000, 0x892a81fc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-11854.b9",   0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",  0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",  0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11862.b1",   0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",   0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",   0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",   0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",   0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",   0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",   0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11858.a8",   0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",   0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",  0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",  0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0070.key",   0x02000, 0x5d0308aa, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Passshtj)
+STD_ROM_FN(Passshtj)
+
+static struct BurnRomInfo PassshtjdRomDesc[] = {
+	{ "bootleg_epr-11853.a4",   0x10000, 0xaf289531, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11852.a1",   0x10000, 0xce765977, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11854.b9",           0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11855.b10",          0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11856.b11",          0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-11862.b1",           0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11865.b5",           0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11863.b2",           0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11866.b6",           0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11864.b3",           0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11867.b7",           0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11857.a7",           0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11858.a8",           0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11859.a9",           0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11860.a10",          0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11861.a11",          0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Passshtjd)
+STD_ROM_FN(Passshtjd)
+
+static struct BurnRomInfo PassshtbRomDesc[] = {
+	{ "pass3_2p.bin",   0x10000, 0x26bb9299, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pass4_2p.bin",   0x10000, 0x06ac6d5d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr11854.b9",    0x10000, 0xd31c0b6c, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr11855.b10",   0x10000, 0xb78762b4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr11856.b11",   0x10000, 0xea49f666, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr11862.b1",    0x10000, 0xb6e94727, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr11865.b5",    0x10000, 0x17e8d5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr11863.b2",    0x10000, 0x3e670098, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr11866.b6",    0x10000, 0x50eb71cc, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr11864.b3",    0x10000, 0x05733ca8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr11867.b7",    0x10000, 0x81e49697, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr11857.a7",    0x08000, 0x789edc06, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr11858.a8",    0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr11859.a9",    0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr11860.a10",   0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr11861.a11",   0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Passshtb)
+STD_ROM_FN(Passshtb)
+
+static struct BurnRomInfo CencourtRomDesc[] = {
+	{ "a4_56f6.a4",    	0x10000, 0x7116dce6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a1_478b.a1",    	0x10000, 0x37beb770, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-b-9.b9",     0x10000, 0x9a55cd88, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-b-10.b10",   0x10000, 0xfc13ca35, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-b-11.b11",   0x10000, 0x1503c203, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-b-1.b1",     0x10000, 0xb18bfccf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-5.b5",     0x10000, 0x3481a8e8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-2.b2",     0x10000, 0x61a996c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-6.b6",     0x10000, 0x2116bcb1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-3.b3",     0x10000, 0x69a2e109, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-7.b7",     0x10000, 0xccf6b09f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-4.b4",     0x10000, 0xbdf63cd2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-b-8.b8",     0x10000, 0x88a90641, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-a-7.a7",   	0x08000, 0x9e1b81c6, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG }, // encrypted
+		
+	{ "epr-a-8.a8",     0x08000, 0x08ab0018, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11858.a8
+	{ "epr-a-9.a9",     0x08000, 0x8673e01b, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11859.a9
+	{ "epr-a-10.a10",   0x08000, 0x10263746, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11860.a10
+	{ "epr-a-11.a11",   0x08000, 0x38b54a71, SYS16_ROM_UPD7759DATA | BRF_SND }, // == epr-11861.a11
+	
+	{ "mc-8123b_center_court.key",   0x02000, 0x2be5c90b, SYS16_ROM_KEY | BRF_ESS | BRF_PRG }, // No official 317-xxxx number
+};
+
+
+STD_ROM_PICK(Cencourt)
+STD_ROM_FN(Cencourt)
+
+static struct BurnRomInfo RiotcityRomDesc[] = {
+	{ "epr-14612.bin",  0x20000, 0xa1b331ec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-14610.bin",  0x20000, 0xcd4f2c50, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-14613.bin",  0x20000, 0x0659df4c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-14611.bin",  0x20000, 0xd9e6f80b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-14616.bin",  0x20000, 0x46d30368, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-14625.bin",  0x20000, 0xabfb80fe, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-14617.bin",  0x20000, 0x884e40f9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-14626.bin",  0x20000, 0x4ef55846, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-14618.bin",  0x20000, 0x00eb260e, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-14627.bin",  0x20000, 0x961e5f82, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-14619.bin",  0x40000, 0x6f2b5ef7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-14622.bin",  0x40000, 0x7ca7e40d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-14620.bin",  0x40000, 0x66183333, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-14623.bin",  0x40000, 0x98630049, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-14621.bin",  0x40000, 0xc0f2820e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-14624.bin",  0x40000, 0xd1a68448, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-14614.bin",  0x10000, 0xc65cc69a, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-14615.bin",  0x20000, 0x46653db1, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Riotcity)
+STD_ROM_FN(Riotcity)
+
+static struct BurnRomInfo RyukyuRomDesc[] = {
+	{ "epr-13348a.a7",  0x10000, 0x64f6ada9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13347a.a5",  0x10000, 0xfade1f50, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13351.a14",  0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13352.a15",  0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13353.a16",  0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13354.b1",   0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13356.b5",   0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13355.b2",   0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13357.b6",   0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
+		
+	{ "epr-13349.a10",  0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13350.a11",  0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
+		
+	{ "317-5023a.key",  0x02000, 0x5e372b89, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ryukyu)
+STD_ROM_FN(Ryukyu)
+
+static struct BurnRomInfo RyukyuaRomDesc[] = {
+	{ "epr-13348.a7",   0x10000, 0x5f0e0c86, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-13347.a5",   0x10000, 0x398031fa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13351.a14",  0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13352.a15",  0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13353.a16",  0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-13354.b1",   0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13356.b5",   0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13355.b2",   0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13357.b6",   0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
+		
+	{ "epr-13349.a10",  0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-13350.a11",  0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
+		
+	{ "317-5023.key",   0x02000, 0x43704331, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ryukyua)
+STD_ROM_FN(Ryukyua)
+
+static struct BurnRomInfo RyukyudRomDesc[] = {
+	{ "bootleg_epr-13348.a7",   0x10000, 0x3a96bdcd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-13347.a5",   0x10000, 0x99fddef0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13351.a14",          0x20000, 0xa68a4e6d, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13352.a15",          0x20000, 0x5e5531e4, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-13353.a16",          0x20000, 0x6d23dfd8, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-13354.b1",           0x20000, 0xf07aad99, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13356.b5",           0x20000, 0x5498290b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13355.b2",           0x20000, 0x67890019, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-13357.b6",           0x20000, 0xf9e7cf03, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-13349.a10",          0x08000, 0xb83183f8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-13350.a11",          0x20000, 0x3c59a658, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ryukyud)
+STD_ROM_FN(Ryukyud)
+
+static struct BurnRomInfo SdibRomDesc[] = {
+	{ "epr-10986a.a4",  0x08000, 0x3e136215, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10984a.a1",  0x08000, 0x44bf3cf5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10987a.a5",  0x08000, 0xcfd79404, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10985a.a2",  0x08000, 0x1c21a03f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10829.a6",   0x08000, 0xa431ab08, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10826.a3",   0x08000, 0x2ed8e4b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "10775.a7",       0x08000, 0x4cbd55a8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0028.key",   0x02000, 0x1514662f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdib)
+STD_ROM_FN(Sdib)
+
+static struct BurnRomInfo SdiblRomDesc[] = {
+	{ "a4.rom",         0x08000, 0xf2c41dd6, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a1.rom",         0x08000, 0xa9f816ef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a5.rom",         0x08000, 0x7952e27e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a2.rom",         0x08000, 0x369af326, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a6.rom",         0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "a3.rom",         0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "b1.rom",         0x10000, 0x30e2c50a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b5.rom",         0x10000, 0x794e3e8b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b2.rom",         0x10000, 0x6a8b3fd0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "b3.rom",         0x10000, 0xb9de3aeb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl)
+STD_ROM_FN(Sdibl)
+
+static struct BurnRomInfo Sdibl2RomDesc[] = {
+	{ "de1",            0x08000, 0x56f6fd26, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do1",            0x08000, 0x549c759f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de2",            0x08000, 0xb0a9ad05, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do2",            0x08000, 0x54b7ec04, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "pe1",            0x08000, 0xf0a190c0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po1",            0x08000, 0xf68c4d0e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe2",            0x08000, 0x109c9afd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po2",            0x08000, 0x6d614e76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe3",            0x08000, 0x589e2cfe, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po3",            0x08000, 0x57ba57b2, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl2)
+STD_ROM_FN(Sdibl2)
+
+static struct BurnRomInfo Sdibl3RomDesc[] = {
+	{ "de1a",           0x08000, 0x3908c6a0, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do1a",           0x08000, 0xcd7b7750, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de2a",           0x08000, 0xf45f6935, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do2a",           0x08000, 0xd3d3efaa, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "pe1a",           0x08000, 0xe4d8f399, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po1a",           0x08000, 0x910f9532, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe2a",           0x08000, 0x76a261b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po2a",           0x08000, 0x2cd18da8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl3)
+STD_ROM_FN(Sdibl3)
+
+static struct BurnRomInfo Sdibl4RomDesc[] = {
+	{ "de1b",           0x08000, 0x8045bfd1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do1b",           0x08000, 0x8f86f2ad, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de2b",           0x08000, 0x1b284afd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do2b",           0x08000, 0x8c979a2b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "pe1b",           0x08000, 0xaba84f5e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po1b",           0x08000, 0x249278a3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe2b",           0x08000, 0x480d4379, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po2b",           0x08000, 0xf27eae0b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl4)
+STD_ROM_FN(Sdibl4)
+
+static struct BurnRomInfo Sdibl5RomDesc[] = {
+	{ "de1c",           0x08000, 0x3e3d4cc1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do1c",           0x08000, 0xa71ad68c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de2c",           0x08000, 0x770bbec5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do2c",           0x08000, 0x0f1f339f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "pe1c",           0x08000, 0xd7d444d5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po1c",           0x08000, 0x1bc879dd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe2c",           0x08000, 0x5cd1bfc8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po2c",           0x08000, 0xb404d1be, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po3a",           0x08000, 0x4dce4361, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl5)
+STD_ROM_FN(Sdibl5)
+
+static struct BurnRomInfo Sdibl6RomDesc[] = {
+	{ "de1c",           0x08000, 0x3e3d4cc1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do1c",           0x08000, 0xa71ad68c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de2c",           0x08000, 0x770bbec5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do2c",           0x08000, 0x0f1f339f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "de3",            0x08000, 0x8ee2c287, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "do3",            0x08000, 0x193e4231, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "pe1d",           0x08000, 0xc8b9e556, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po1d",           0x08000, 0x38eaeeb1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe2c",           0x08000, 0x5cd1bfc8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po2c",           0x08000, 0xb404d1be, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "pe3a",           0x08000, 0x19120b62, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "po3d",           0x08000, 0xb1e5c2f1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10772.b9",   0x10000, 0x182b6301, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10773.b10",  0x10000, 0x8f7129a2, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10774.b11",  0x10000, 0x4409411f, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "a7.rom",         0x08000, 0x793f9f7f, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sdibl6)
+STD_ROM_FN(Sdibl6)
+
+static struct BurnRomInfo DefenseRomDesc[] = {
+	{ "epr-10917a.a4",  0x08000, 0xd91ac47c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10915.a1",   0x08000, 0x7344c510, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10918a.a5",  0x08000, 0xe41befcd, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10916a.a2",  0x08000, 0x7f58ba12, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10829.a6",   0x08000, 0xa431ab08, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10826.a3",   0x08000, 0x2ed8e4b7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "10919.b9",       0x10000, 0x23b88f82, SYS16_ROM_TILES | BRF_GRA },
+	{ "10920.b10",      0x10000, 0x22b1fb4c, SYS16_ROM_TILES | BRF_GRA },
+	{ "10921.b11",      0x10000, 0x7788f55d, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "10760.b1",       0x10000, 0x70de327b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10763.b5",       0x10000, 0x99ec5cb5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10761.b2",       0x10000, 0x4e80f80d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10764.b6",       0x10000, 0x602da5d5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10762.b3",       0x10000, 0x464b5f78, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "10765.b7",       0x10000, 0x0a73a057, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "10775.a7",       0x08000, 0x4cbd55a8, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0028.key",   0x02000, 0x1514662f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Defense)
+STD_ROM_FN(Defense)
+
+static struct BurnRomInfo Shinobi2RomDesc[] = {
+	{ "epr-11282.a4",   0x10000, 0x5f2e5524, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11280.a1",   0x10000, 0xbdfe5c38, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11287.a7",   0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0049.key",   0x02000, 0x8fac824f, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Shinobi2)
+STD_ROM_FN(Shinobi2)
+
+static struct BurnRomInfo Shinobi2dRomDesc[] = {
+	{ "bootleg_epr-11282.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11280.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11283.a5",           0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11281.a2",           0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11284.b9",           0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11285.b10",          0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11286.b11",          0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-11290.b1",           0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11294.b5",           0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11291.b2",           0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11295.b6",           0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11292.b3",           0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11296.b7",           0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11293.b4",           0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11297.b8",           0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11287.a7",           0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11288.a8",           0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11289.a9",           0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Shinobi2d)
+STD_ROM_FN(Shinobi2d)
+
+static struct BurnRomInfo Shinobi3RomDesc[] = {
+	{ "epr-11299.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11298.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11372.a7",   0x08000, 0x0824269a, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0054.key",   0x02000, 0x39fd4535, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Shinobi3)
+STD_ROM_FN(Shinobi3)
+
+static struct BurnRomInfo Shinobi4RomDesc[] = {
+	{ "epr-11360.a7",   0x20000, 0xb1f67ab9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11359.a5",   0x20000, 0x0f0306e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-11363.a14",  0x20000, 0x40914168, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11364.a15",  0x20000, 0xe63649a4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11365.a16",  0x20000, 0x1ef55d20, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11366.b1",   0x20000, 0x319ede73, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11368.b5",   0x20000, 0x0377d7ce, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11367.b2",   0x20000, 0x1d06c5c7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11369.b6",   0x20000, 0xd751d2a2, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11377.a10",  0x08000, 0x0fb6af34, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11362.a11",  0x20000, 0x256af749, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0054.key",   0x02000, 0x39fd4535, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Shinobi4)
+STD_ROM_FN(Shinobi4)
+
+static struct BurnRomInfo Shinobi5RomDesc[] = {
+	{ "epr-11299.a4",   0x10000, 0xb930399d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11298.a1",   0x10000, 0x343f4c46, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11283.a5",   0x10000, 0x9d46e707, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11281.a2",   0x10000, 0x7961d07e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11284.b9",   0x10000, 0x5f62e163, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11285.b10",  0x10000, 0x75f8fbc9, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11286.b11",  0x10000, 0x06508bb9, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11290.b1",   0x10000, 0x611f413a, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11294.b5",   0x10000, 0x5eb00fc1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11291.b2",   0x10000, 0x3c0797c0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11295.b6",   0x10000, 0x25307ef8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11292.b3",   0x10000, 0xc29ac34e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11296.b7",   0x10000, 0x04a437f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11293.b4",   0x10000, 0x41f41063, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11297.b8",   0x10000, 0xb6e1fd72, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11287.a7",   0x08000, 0xe8cccd42, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11288.a8",   0x08000, 0xc8df8460, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11289.a9",   0x08000, 0xe5a4cf30, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Shinobi5)
+STD_ROM_FN(Shinobi5)
+
+static struct BurnRomInfo Shinobi6RomDesc[] = {
+	{ "epr-11360.a7",   0x20000, 0xb1f67ab9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11359.a5",   0x20000, 0x0f0306e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-11363.a14",  0x20000, 0x40914168, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11364.a15",  0x20000, 0xe63649a4, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-11365.a16",  0x20000, 0x1ef55d20, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-11366.b1",   0x20000, 0x319ede73, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11368.b5",   0x20000, 0x0377d7ce, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11367.b2",   0x20000, 0x1d06c5c7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-11369.b6",   0x20000, 0xd751d2a2, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11361.a10",  0x08000, 0x1f47ebcb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-11362.a11",  0x20000, 0x256af749, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Shinobi6)
+STD_ROM_FN(Shinobi6)
+
+static struct BurnRomInfo SjryukoRomDesc[] = {
+	{ "epr-12256.a4",     0x08000, 0x5987ee1b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12253.a1",     0x08000, 0x26a822df, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12257.a5",     0x08000, 0x3a2acc3f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12254.a2",     0x08000, 0x7e908217, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12224-95.b9",  0x08000, 0xeac17ba1, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12225-94.b10", 0x08000, 0x2310fc98, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12226-93.b11", 0x08000, 0x210e6999, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12232-10.b1",  0x10000, 0x0adec62b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12236-11.b5",  0x10000, 0x286b9af8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12233-17.b2",  0x10000, 0x3e45969c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12237-18.b6",  0x10000, 0xe5058e96, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12234-23.b3",  0x10000, 0x8c8d54ef, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12238-24.b7",  0x10000, 0x7ada3304, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12235-29.b4",  0x10000, 0xfa45d511, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12239-30.b8",  0x10000, 0x91f70c8b, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-12244.a7",     0x08000, 0xcb2a47e5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12245.a8",     0x08000, 0x66164134, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12246.a9",     0x08000, 0xf1242582, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12247.a10",    0x08000, 0xef8a64c6, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12248.a11",    0x08000, 0xd1eabdab, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-5021.key",     0x02000, 0x8e40b2ab, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sjryuko)
+STD_ROM_FN(Sjryuko)
+
+static struct BurnRomInfo SnapperRomDesc[] = {
+	{ "snap2.r01",      0x10000, 0x9a9e4ed3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "snap1.r02",      0x10000, 0xcd468d6a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "snap4.r03",      0x08000, 0x0f848e1e, SYS16_ROM_TILES | BRF_GRA },
+	{ "snap3.r04",      0x08000, 0xc7f8cf0e, SYS16_ROM_TILES | BRF_GRA },
+	{ "snap5.r05",      0x08000, 0x378e08eb, SYS16_ROM_TILES | BRF_GRA },
+};
+
+
+STD_ROM_PICK(Snapper)
+STD_ROM_FN(Snapper)
+
+static struct BurnRomInfo SonicbomRomDesc[] = {
+	{ "epr-11342.a4",   0x10000, 0x454693f1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11340.a1",   0x10000, 0x03ba3fed, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11343.a5",   0x10000, 0xedfeb7d4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11341.a2",   0x10000, 0x0338f771, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11344.b9",   0x10000, 0x59a9f940, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11345.b10",  0x10000, 0xb44c068b, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11346.b11",  0x10000, 0xe5ada66c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-11350.b1",   0x10000, 0x525ba1df, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11354.b5",   0x10000, 0x793fa3ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11351.b2",   0x10000, 0x63b1f1ca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11355.b6",   0x10000, 0xfe0fa332, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11352.b3",   0x10000, 0x047fa4b0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11356.b7",   0x10000, 0xaea3c39d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11353.b4",   0x10000, 0x4e0791f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11357.b8",   0x10000, 0xa7c5ea41, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11347.a7",   0x08000, 0xb41f0ced, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11348.a8",   0x08000, 0x89924588, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11349.a9",   0x08000, 0x8e4b6204, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0053.key",   0x02000, 0x91c80c88, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Sonicbom)
+STD_ROM_FN(Sonicbom)
+
+static struct BurnRomInfo SonicbomdRomDesc[] = {
+	{ "bootleg_epr-11342.a4",   0x10000, 0x089158ef, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-11340.a1",   0x10000, 0x253cbd27, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11343.a5",           0x10000, 0xedfeb7d4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11341.a2",           0x10000, 0x0338f771, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-11344.b9",           0x10000, 0x59a9f940, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11345.b10",          0x10000, 0xb44c068b, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-11346.b11",          0x10000, 0xe5ada66c, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "opr-11350.b1",           0x10000, 0x525ba1df, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11354.b5",           0x10000, 0x793fa3ac, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11351.b2",           0x10000, 0x63b1f1ca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11355.b6",           0x10000, 0xfe0fa332, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11352.b3",           0x10000, 0x047fa4b0, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11356.b7",           0x10000, 0xaea3c39d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11353.b4",           0x10000, 0x4e0791f8, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-11357.b8",           0x10000, 0xa7c5ea41, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11347.a7",           0x08000, 0xb41f0ced, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11348.a8",           0x08000, 0x89924588, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11349.a9",           0x08000, 0x8e4b6204, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Sonicbomd)
+STD_ROM_FN(Sonicbomd)
+
+static struct BurnRomInfo SuprleagRomDesc[] = {
+	{ "epr-11133.a4",    0x10000, 0xeed72f37, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11130.a1",    0x10000, 0xe2451676, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11134.a5",    0x10000, 0xccd857f5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11131.a2",    0x10000, 0x9b78c2cc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11135.a6",    0x10000, 0x3735e0e1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-11132.a3",    0x10000, 0xff199325, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-11136.b9",    0x10000, 0xc3860ce4, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11137.b10",   0x10000, 0x92d96187, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-11138.b11",   0x10000, 0xc01dc773, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-11144.b1",    0x10000, 0xb31de51c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11148.b5",    0x10000, 0x126e1309, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11145.b2",    0x10000, 0x4223d2c3, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11149.b6",    0x10000, 0x694d3765, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11146.b3",    0x10000, 0xbf0359b6, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11150.b7",    0x10000, 0x9fc0aded, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11147.b4",    0x10000, 0x3e592772, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-11151.b8",    0x10000, 0x9de95169, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-11139.a7",    0x08000, 0x9cbd99da, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-11140.a8",    0x08000, 0xb297371b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11141.a9",    0x08000, 0x19756aa6, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11142.a10",   0x08000, 0x25d26c66, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-11143.a11",   0x08000, 0x848b7b77, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0045.key",    0x02000, 0x0594cc2e, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Suprleag)
+STD_ROM_FN(Suprleag)
+
+static struct BurnRomInfo Tetris1RomDesc[] = {
+	{ "epr-12164.a4",  0x08000, 0xb329cd6f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12163.a1",  0x08000, 0xd372d3f3, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-12165.b9",  0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12166.b10", 0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12167.b11", 0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12169.b1",  0x08000, 0xdacc6165, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12170.b5",  0x08000, 0x87354e42, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12168.a7",  0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0091.key",  0x02000, 0xa7937661, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Tetris1)
+STD_ROM_FN(Tetris1)
+
+static struct BurnRomInfo Tetris1dRomDesc[] = {
+	{ "bootleg_epr-12164.a4",   0x08000, 0x39469b3d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12163.a1",   0x08000, 0x451ea7a1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12165.b9",           0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12166.b10",          0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12167.b11",          0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12169.b1",           0x08000, 0xdacc6165, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12170.b5",           0x08000, 0x87354e42, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12168.a7",           0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Tetris1d)
+STD_ROM_FN(Tetris1d)
+
+static struct BurnRomInfo Tetris2RomDesc[] = {
+	{ "epr-12193.a7",  0x20000, 0x44466ed4, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12192.a5",  0x20000, 0xa1c8af00, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-12165.b9",  0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12166.b10", 0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12167.b11", 0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12194.b1",  0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12195.b5",  0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12168.a7",  0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0092.key",  0x02000, 0xd10e1ad9, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",   0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Tetris2)
+STD_ROM_FN(Tetris2)
+
+static struct BurnRomInfo Tetris2dRomDesc[] = {
+	{ "bootleg_epr-12193.a7",   0x10000, 0xe8c59f9d, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12192.a5",   0x10000, 0x8ff44f5f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12165.b9",           0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12166.b10",          0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12167.b11",          0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12194.b1",           0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12195.b5",           0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12168.a7",           0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Tetris2d)
+STD_ROM_FN(Tetris2d)
+
+static struct BurnRomInfo TetrisblRomDesc[] = {
+	{ "rom2.bin",      0x10000, 0x4d165c38, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "rom1.bin",      0x10000, 0x1e912131, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr12165.b9",   0x10000, 0x62640221, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr12166.b10",  0x10000, 0x9abd183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr12167.b11",  0x10000, 0x2495fd4e, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "obj0-o.rom",    0x10000, 0x2fb38880, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "obj0-e.rom",    0x10000, 0xd6a02cba, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr12168.a7",   0x08000, 0xbd9ba01b, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Tetrisbl)
+STD_ROM_FN(Tetrisbl)
+
+static struct BurnRomInfo TimescanRomDesc[] = {
+	{ "epr-10853.a4",   0x08000, 0x24d7c5fb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10850.a1",   0x08000, 0xf1575732, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10854.a5",   0x08000, 0x82d0b237, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10851.a2",   0x08000, 0xf5ce271b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10855.a6",   0x08000, 0x63e95a53, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-10852.a3",   0x08000, 0x7cd1382b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-10543.b9",   0x08000, 0x07dccc37, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10544.b10",  0x08000, 0x84fb9a3a, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-10545.b11",  0x08000, 0xc8694bc0, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-10548.b1",   0x08000, 0xaa150735, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10552.b5",   0x08000, 0x6fcbb9f7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10549.b2",   0x08000, 0x2f59f067, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10553.b6",   0x08000, 0x8a220a9f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10550.b3",   0x08000, 0xf05069ff, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10554.b7",   0x08000, 0xdc64f809, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10551.b4",   0x08000, 0x435d811f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-10555.b8",   0x08000, 0x2143c471, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-10562.a7",   0x08000, 0x3f5028bf, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-10563.a8",   0x08000, 0x9db7eddf, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Timescan)
+STD_ROM_FN(Timescan)
+
+static struct BurnRomInfo ToryumonRomDesc[] = {
+	{ "epr-17689.a2",   0x20000, 0x4f0dee19, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-17688.a1",   0x20000, 0x717d81c7, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-17700.b11",  0x40000, 0x8f288b37, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-17701.b12",  0x40000, 0x6dfb025b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-17702.b13",  0x40000, 0xae0b7eab, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-17692.b1",   0x20000, 0x543c4327, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17695.b4",   0x20000, 0xee60f244, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17693.b2",   0x20000, 0x4a350b3e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17696.b5",   0x20000, 0x6edb54f1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17694.b3",   0x20000, 0xb296d71d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17697.b6",   0x20000, 0x6ccb7b28, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17698.b7",   0x20000, 0xcd4dfb82, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-17699.b8",   0x20000, 0x2694ecce, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-17691.a13",  0x08000, 0x14205388, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-17690.a11",  0x40000, 0x4f9ba4e4, SYS16_ROM_UPD7759DATA | BRF_SND },
+};
+
+
+STD_ROM_PICK(Toryumon)
+STD_ROM_FN(Toryumon)
+
+static struct BurnRomInfo TturfRomDesc[] = {
+	{ "epr-12327.a7",   0x20000, 0x0376c593, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12326.a5",   0x20000, 0xf998862b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "opr-12268.a14",  0x10000, 0xe0dac07f, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12269.a15",  0x10000, 0x457a8790, SYS16_ROM_TILES | BRF_GRA },
+	{ "opr-12270.a16",  0x10000, 0x69fc025b, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "opr-12279.b1",   0x10000, 0x7a169fb1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12283.b5",   0x10000, 0xae0fa085, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12278.b2",   0x10000, 0x961d06b7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12282.b6",   0x10000, 0xe8671ee1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12277.b3",   0x10000, 0xf16b6ba2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12281.b7",   0x10000, 0x1ef1077f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12276.b4",   0x10000, 0x838bd71f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12280.b8",   0x10000, 0x639a57cb, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12328.a10",  0x08000, 0x13a346de, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "opr-12329.a11",  0x10000, 0xed9a686d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "opr-12330.a12",  0x10000, 0xfb762bca, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0104.c2",    0x01000, 0x00000000, BRF_NODUMP }, // Intel i8751 protection MCU
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Tturf)
+STD_ROM_FN(Tturf)
+
+static struct BurnRomInfo TturfuRomDesc[] = {
+	{ "epr-12266.a4",   0x10000, 0xf549def8, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12264.a1",   0x10000, 0xf7cdb289, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12267.a5",   0x10000, 0x3c3ce191, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12265.a2",   0x10000, 0x8cdadd9a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12268.b9",   0x10000, 0xe0dac07f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12269.b10",  0x10000, 0x457a8790, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12270.b11",  0x10000, 0x69fc025b, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12276.b1",   0x10000, 0x838bd71f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12280.b5",   0x10000, 0x639a57cb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12277.b2",   0x10000, 0xf16b6ba2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12281.b6",   0x10000, 0x1ef1077f, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12278.b3",   0x10000, 0x961d06b7, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12282.b7",   0x10000, 0xe8671ee1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12279.b4",   0x10000, 0x7a169fb1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12283.b8",   0x10000, 0xae0fa085, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-12271.a7",   0x08000, 0x99671e52, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12272.a8",   0x08000, 0x7cf7e69f, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12273.a9",   0x08000, 0x28f0bb8b, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12274.a10",  0x08000, 0x8207f0c4, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-12275.a11",  0x08000, 0x182f3c3d, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0099.c2",    0x01000, 0xf676e3e4, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG }, // Intel i8751 protection MCU
+};
+
+
+STD_ROM_PICK(Tturfu)
+STD_ROM_FN(Tturfu)
+
+static struct BurnRomInfo UltracinRomDesc[] = {
+	{ "epr-18946.ic2",  0x40000, 0x7e70d62f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-18945.ic1",  0x40000, 0x22bc0fd9, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-18956.ic19", 0x20000, 0x58ce183b, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-18957.ic20", 0x20000, 0xc807b164, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-18958.ic21", 0x20000, 0xb263bd0c, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-18950.ic9",   0x40000, 0xa2724dc5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-18953.ic12",  0x40000, 0xf58fdf96, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-18951.ic10",  0x40000, 0x8a35ddca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-18954.ic13",  0x40000, 0x1255c0bf, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-18952.ic11",  0x40000, 0x77634b5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-18955.ic14",  0x40000, 0x8c161f97, SYS16_ROM_SPRITES | BRF_GRA },
+	
+	{ "epr-18949.ic8",  0x08000, 0x4f7f8bf5, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-18947.ic6",  0x40000, 0x23122c51, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "epr-18948.ic7",  0x40000, 0x6d060a08, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Ultracin)
+STD_ROM_FN(Ultracin)
+
+static struct BurnRomInfo Wb3RomDesc[] = {
+	{ "epr-12259.a7",   0x20000, 0x54927c7e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12258.a5",   0x20000, 0x01f5898c, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0098.c2",    0x01000, 0x00000000, BRF_NODUMP }, // Intel i8751 protection MCU
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wb3)
+STD_ROM_FN(Wb3)
+
+static struct BurnRomInfo Wb32RomDesc[] = {
+	{ "epr-12100.a4",   0x10000, 0xf5ca4abc, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12098.a1",   0x10000, 0xd998e5e5, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12101.a5",   0x10000, 0x6146492b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12099.a2",   0x10000, 0x3e243b45, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-12124.b9",   0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.b10",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.b11",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a7",   0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0085.key",   0x02000, 0x8150f38d, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Wb32)
+STD_ROM_FN(Wb32)
+
+static struct BurnRomInfo Wb32dRomDesc[] = {
+	{ "bootleg_epr-12100.a4",   0x10000, 0x15e3117e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12098.a1",   0x10000, 0x41a46e75, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12101.a5",           0x10000, 0x6146492b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12099.a2",           0x10000, 0x3e243b45, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12124.b9",           0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.b10",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.b11",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a7",           0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Wb32d)
+STD_ROM_FN(Wb32d)
+
+static struct BurnRomInfo Wb33RomDesc[] = {
+	{ "epr-12137.a7",   0x20000, 0x6f81238e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12136.a5",   0x20000, 0x4cf05003, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0089.key",   0x02000, 0x597d30d3, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wb33)
+STD_ROM_FN(Wb33)
+
+static struct BurnRomInfo Wb33dRomDesc[] = {
+	{ "bootleg_epr-12137.a7",   0x20000, 0x18a898af, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12136.a5",   0x20000, 0xe3d21248, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12124.a14",          0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.a15",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.a16",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a10",          0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wb33d)
+STD_ROM_FN(Wb33d)
+
+static struct BurnRomInfo Wb34RomDesc[] = {
+	{ "epr-12131.a7",   0x20000, 0xb95ecf88, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12128.a5",   0x20000, 0xb711372b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+		
+	{ "epr-12124.a14",  0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.a15",  0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.a16",  0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr-12090.b1",   0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",   0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",   0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",   0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",   0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",   0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",   0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",   0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a10",  0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "317-0087.key",   0x02000, 0x162cb531, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wb34)
+STD_ROM_FN(Wb34)
+
+static struct BurnRomInfo Wb34dRomDesc[] = {
+	{ "bootleg_epr-12131.a7",   0x20000, 0x64e864b1, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12128.a5",   0x20000, 0x1b0fdaec, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "epr-12124.a14",          0x10000, 0xdacefb6f, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12125.a15",          0x10000, 0x9fc36df7, SYS16_ROM_TILES | BRF_GRA },
+	{ "epr-12126.a16",          0x10000, 0xa693fd94, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "epr-12090.b1",           0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12094.b5",           0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12091.b2",           0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12095.b6",           0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12092.b3",           0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12096.b7",           0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12093.b4",           0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr-12097.b8",           0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12127.a10",          0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wb34d)
+STD_ROM_FN(Wb34d)
+
+static struct BurnRomInfo Wb3bblRomDesc[] = {
+	{ "wb3_03",         0x10000, 0x0019ab3b, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "wb3_05",         0x10000, 0x196e17ee, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "wb3_02",         0x10000, 0xc87350cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "wb3_04",         0x10000, 0x565d5035, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "wb3_14",         0x10000, 0xd3f20bca, SYS16_ROM_TILES | BRF_GRA },
+	{ "wb3_15",         0x10000, 0x96ff9d52, SYS16_ROM_TILES | BRF_GRA },
+	{ "wb3_16",         0x10000, 0xafaf0d31, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "epr12090.b1",    0x10000, 0xaeeecfca, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12094.b5",    0x10000, 0x615e4927, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12091.b2",    0x10000, 0x8409a243, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12095.b6",    0x10000, 0xe774ec2c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12092.b3",    0x10000, 0x5c2f0d90, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12096.b7",    0x10000, 0x0cd59d6e, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12093.b4",    0x10000, 0x4891e7bb, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "epr12097.b8",    0x10000, 0xe645902c, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr12127.a10",   0x08000, 0x0bb901bb, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+};
+
+
+STD_ROM_PICK(Wb3bbl)
+STD_ROM_FN(Wb3bbl)
+
+static struct BurnRomInfo WrestwarRomDesc[] = {
+	{ "epr-12372.a7",   0x20000, 0xeeaba126, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12371.a5",   0x20000, 0x6714600a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0103.c2",    0x01000, 0xaa0710f5, SYS16_ROM_I8751 | BRF_ESS | BRF_PRG }, // Intel i8751 protection MCU
+
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wrestwar)
+STD_ROM_FN(Wrestwar)
+
+static struct BurnRomInfo Wrestwar1RomDesc[] = {
+	{ "epr-12145.a7",   0x20000, 0x2af51e2e, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12143.a5",   0x20000, 0x4131e345, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0090.key",   0x02000, 0xb7c24c4a, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wrestwar1)
+STD_ROM_FN(Wrestwar1)
+
+static struct BurnRomInfo Wrestwar1dRomDesc[] = {
+	{ "bootleg_epr-12145.a7",   0x20000, 0x6a50d373, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12143.a5",   0x20000, 0x02e24543, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12146.a8",           0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12144.a6",           0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12150.a14",          0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12151.a15",          0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12152.a16",          0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12153.b1",           0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12157.b5",           0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12154.b2",           0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12158.b6",           0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12155.b3",           0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12159.b7",           0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12156.b4",           0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12160.b8",           0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12141.a1",           0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12161.b10",          0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12142.a2",           0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12162.b11",          0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12147.a10",          0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12148.a11",          0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12149.a12",          0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wrestwar1d)
+STD_ROM_FN(Wrestwar1d)
+
+static struct BurnRomInfo Wrestwar2RomDesc[] = {
+	{ "epr-12370.a7",   0x20000, 0xcb5dbb76, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12369.a5",   0x20000, 0x6f47dd2f, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12146.a8",   0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12144.a6",   0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12150.a14",  0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12151.a15",  0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12152.a16",  0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
+	
+	{ "mpr-12153.b1",   0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12157.b5",   0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12154.b2",   0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12158.b6",   0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12155.b3",   0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12159.b7",   0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12156.b4",   0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12160.b8",   0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12141.a1",   0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12161.b10",  0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12142.a2",   0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12162.b11",  0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12147.a10",  0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+	
+	{ "mpr-12148.a11",  0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12149.a12",  0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "317-0102.key",   0x02000, 0x28ba1bf0, SYS16_ROM_KEY | BRF_ESS | BRF_PRG },
+	
+	{ "315-5298.b9",    0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wrestwar2)
+STD_ROM_FN(Wrestwar2)
+
+static struct BurnRomInfo Wrestwar2dRomDesc[] = {
+	{ "bootleg_epr-12370.a7",   0x20000, 0xf4d09243, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "bootleg_epr-12369.a5",   0x20000, 0xd5f5e59a, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12146.a8",           0x20000, 0xb77ba665, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+	{ "epr-12144.a6",           0x20000, 0xddf075cb, SYS16_ROM_PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12150.a14",          0x20000, 0x6a821ab9, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12151.a15",          0x20000, 0x2b1a0751, SYS16_ROM_TILES | BRF_GRA },
+	{ "mpr-12152.a16",          0x20000, 0xf6e190fe, SYS16_ROM_TILES | BRF_GRA },
+
+	{ "mpr-12153.b1",           0x20000, 0xffa7d368, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12157.b5",           0x20000, 0x8d7794c1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12154.b2",           0x20000, 0x0ed343f2, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12158.b6",           0x20000, 0x99458d58, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12155.b3",           0x20000, 0x3087104d, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "mpr-12159.b7",           0x20000, 0xabcf9bed, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12156.b4",           0x20000, 0x41b6068b, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12160.b8",           0x20000, 0x97eac164, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12141.a1",           0x20000, 0x260311c5, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12161.b10",          0x20000, 0x35a4b1b1, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12142.a2",           0x10000, 0x12e38a5c, SYS16_ROM_SPRITES | BRF_GRA },
+	{ "opr-12162.b11",          0x10000, 0xfa06fd24, SYS16_ROM_SPRITES | BRF_GRA },
+
+	{ "epr-12147.a10",          0x08000, 0xc3609607, SYS16_ROM_Z80PROG | BRF_ESS | BRF_PRG },
+
+	{ "mpr-12148.a11",          0x20000, 0xfb9a7f29, SYS16_ROM_UPD7759DATA | BRF_SND },
+	{ "mpr-12149.a12",          0x20000, 0xd6617b19, SYS16_ROM_UPD7759DATA | BRF_SND },
+	
+	{ "315-5298.b9",    		0x000eb, 0x39b47212, BRF_OPT }, // PLD
+};
+
+
+STD_ROM_PICK(Wrestwar2d)
+STD_ROM_FN(Wrestwar2d)
+
+/*====================================================
+Bootleg Z80 Handling
+====================================================*/
+
+UINT8 __fastcall BootlegZ80PortRead(UINT16 a)
+{
+	a &= 0xff;
+	
+	switch (a) {
+		case 0x01: {
+			return BurnYM2151Read();
+		}
+		
+		case 0x40:
+		case 0xc0: {
+			return System16SoundLatch;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("Z80 Read Port -> %02X\n"), a);
+#endif
+
+	return 0;
+}
+
+void __fastcall BootlegZ80PortWrite(UINT16 a, UINT8 d)
+{
+	a &= 0xff;
+	d &= 0xff;
+	
+	switch (a) {
+		case 0x00: {
+			BurnYM2151SelectRegister(d);
+			return;
+		}
+		
+		case 0x01: {
+			BurnYM2151WriteRegister(d);
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("Z80 Write Port -> %02X, %02X\n"), a, d);
+#endif
+}
+
+UINT8 __fastcall BootlegZ80Read(UINT16 a)
+{
+	switch (a) {
+		case 0xe000:
+		case 0xe800: {
+			ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
+			return System16SoundLatch;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("Z80 Read -> %04X\n"), a);
+#endif
+
+	return 0;
+}
+
+#if 0 && defined FBNEO_DEBUG
+void __fastcall BootlegZ80Write(UINT16 a, UINT8 d)
+{
+
+	bprintf(PRINT_NORMAL, _T("Z80 Write -> %04X, %02X\n"), a, d);
+}
+#endif
+
+void BootlegMapZ80()
+{
+	ZetMapArea(0x0000, 0x7fff, 0, System16Z80Rom);
+	ZetMapArea(0x0000, 0x7fff, 2, System16Z80Rom);
+
+	ZetMapArea(0xf800, 0xffff, 0, System16Z80Ram);
+	ZetMapArea(0xf800, 0xffff, 1, System16Z80Ram);
+	ZetMapArea(0xf800, 0xffff, 2, System16Z80Ram);
+	
+	ZetSetReadHandler(BootlegZ80Read);
+#if 0 && defined FBNEO_DEBUG
+	ZetSetWriteHandler(BootlegZ80Write);
+#endif
+	ZetSetInHandler(BootlegZ80PortRead);
+	ZetSetOutHandler(BootlegZ80PortWrite);
+}
+
+/*====================================================
+Memory Handlers - used by games not using the mapper
+====================================================*/
+
+static UINT8 __fastcall System16BReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0xc41001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0xc41003: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0xc41005: {
+			return System16Dip[2];
+		}
+		
+		case 0xc41007: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0xc42001: {
+			return System16Dip[0];
+		}
+
+		case 0xc42003: {
+			return System16Dip[1];
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
+#endif
+
+	return 0xff;
+}
+
+static void __fastcall System16BWriteByte(UINT32 a, UINT8 d)
+{
+	if (a >= 0x400000 && a <= 0x40ffff) {
+		System16BTileByteWrite((a - 0x400000) ^ 1, d);
+		return;
+	}
+
+	switch (a) {
+		case 0xc40001: {
+			System16VideoEnable = d & 0x20;
+			System16ScreenFlip = d & 0x40;
+			return;
+		}
+		
+		case 0xfe0007: {
+			System16SoundLatch = d;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+#endif
+}
+
+static void __fastcall System16BWriteWord(UINT32 a, UINT16 d)
+{
+	if (a >= 0x400000 && a <= 0x40ffff) {
+		System16BTileWordWrite(a - 0x400000, d);
+		return;
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
+#endif
+}
+
+static INT16 AceattacTrack1X = 0;
+static INT16 AceattacTrack1Y = 0;
+static INT16 AceattacTrack2X = 0;
+static INT16 AceattacTrack2Y = 0;
+static INT8 AceattacDial1 = 0;
+static INT8 AceattacDial2 = 0;
+
+static void AceattacMakeAnalogInputs()
+{
+	if (System16InputPort3[0]) AceattacTrack1X += 0x40;
+	if (System16InputPort3[1]) AceattacTrack1X -= 0x40;
+	if (AceattacTrack1X >= 0x100) AceattacTrack1X = 0;
+	if (AceattacTrack1X < 0) AceattacTrack1X = 0xfd;
+	
+	if (System16InputPort3[2]) AceattacTrack1Y -= 0x40;
+	if (System16InputPort3[3]) AceattacTrack1Y += 0x40;
+	if (AceattacTrack1Y >= 0x100) AceattacTrack1Y = 0;
+	if (AceattacTrack1Y < 0) AceattacTrack1Y = 0xfd;
+	
+	if (System16InputPort4[0]) AceattacDial1 += 0x01;
+	if (System16InputPort4[1]) AceattacDial1 -= 0x01;
+	if (AceattacDial1 >= 0x10) AceattacDial1 = 0;
+	if (AceattacDial1 < 0) AceattacDial1 = 0x0f;
+	
+	if (System16InputPort3[4]) AceattacTrack2X += 0x40;
+	if (System16InputPort3[5]) AceattacTrack2X -= 0x40;
+	if (AceattacTrack2X >= 0x100) AceattacTrack2X = 0;
+	if (AceattacTrack2X < 0) AceattacTrack2X = 0xfd;
+	
+	if (System16InputPort3[6]) AceattacTrack2Y -= 0x40;
+	if (System16InputPort3[7]) AceattacTrack2Y += 0x40;
+	if (AceattacTrack2Y >= 0x100) AceattacTrack2Y = 0;
+	if (AceattacTrack2Y < 0) AceattacTrack2Y = 0xfd;
+	
+	if (System16InputPort4[2]) AceattacDial2 += 0x01;
+	if (System16InputPort4[3]) AceattacDial2 -= 0x01;
+	if (AceattacDial2 >= 0x10) AceattacDial2 = 0;
+	if (AceattacDial2 < 0) AceattacDial2 = 0x0f;
+}
+
+static UINT8 AceattacReadIO(UINT32 offset)
+{
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x0802: {
+			return AceattacDial1 | (AceattacDial2 << 4);
+		}
+		
+		case 0x1000: {
+			return System16Dip[0];
+		}
+		
+		case 0x1001: {
+			return System16Dip[1];
+		}
+		
+		case 0x1800: {
+			return AceattacTrack1X & 0xff;
+		}
+		
+		case 0x1801: {
+			return ((AceattacTrack1X >> 8) & 0x0f) | (System16Input[2] & 0xf0);
+		}
+		
+		case 0x1802: {
+			return AceattacTrack1Y & 0xff;
+		}
+		
+		case 0x1803: {
+			return ((AceattacTrack1Y >> 8) & 0x0f);
+		}
+		
+		case 0x1808: {
+			return AceattacTrack2X & 0xff;
+		}
+		
+		case 0x1809: {
+			return ((AceattacTrack2X >> 8) & 0x0f) | (System16Input[6] & 0xf0);
+		}
+		
+		case 0x180a: {
+			return AceattacTrack2Y & 0xff;
+		}
+		
+		case 0x180b: {
+			return ((AceattacTrack2Y >> 8) & 0xff);
+		}
+		
+		case 0x1810: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0x1811: {
+			return 0xff - System16Input[5];
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static UINT8 Afighter_Accel_Read()
+{
+	UINT8 accel = System16AnalogPort1 >> 13;
+	if (accel > 4) accel = 4;
+	
+	switch (accel) {
+		case 0x00: return (1 << 2);
+		case 0x01: return (1 << 2);
+		case 0x02: return (1 << 1);
+		case 0x03: return (1 << 0);
+		case 0x04: return 0;
+	}
+	
+	return 0;
+}
+
+static UINT8 Afighter_Steer_Left_Read()
+{
+	UINT8 steer = System16AnalogPort0 >> 12;
+	switch (steer) {
+		case 0x00: return (1 << 0);
+		case 0x01: return (1 << 1);
+		case 0x02: return (1 << 2);
+		case 0x03: return (1 << 3);
+		case 0x04: return (1 << 4);
+		case 0x05: return (1 << 5);
+		case 0x06: return (1 << 6);
+		case 0x07: return (1 << 7);
+	}
+	
+	return 0;
+}
+
+static UINT8 Afighter_Steer_Right_Read()
+{
+	UINT8 steer = System16AnalogPort0 >> 12;
+	switch (steer) {
+//		case 0x08: return (1 << 7);
+		case 0x09: return (1 << 6);
+		case 0x0a: return (1 << 5);
+		case 0x0b: return (1 << 4);
+		case 0x0c: return (1 << 3);
+		case 0x0d: return (1 << 2);
+		case 0x0e: return (1 << 1);
+		case 0x0f: return (1 << 0);
+	}
+	
+	return 0;
+}
+
+static UINT8 __fastcall AfighterAnalogReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0xc41001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0xc41003: {
+			return 0xff - System16Input[1] - Afighter_Accel_Read();
+		}
+		
+		case 0xc41005: {
+			return 0xff - Afighter_Steer_Right_Read();
+		}
+		
+		case 0xc41007: {
+			return 0xff - Afighter_Steer_Left_Read();
+		}
+		
+		case 0xc42001: {
+			return System16Dip[0];
+		}
+
+		case 0xc42003: {
+			return System16Dip[1];
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
+#endif
+
+	return 0xff;
+}
+
+static void __fastcall AltbeastblSoundWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0xc42007: {
+			System16SoundLatch = d;
+			bprintf(PRINT_NORMAL, _T("Sound Latch Wrote %x\n"), d);
+//			ZetOpen(0);
+//			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+//			ZetClose();
+			return;
+		}
+	}
+}
+
+static void __fastcall AltbeastblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0x418000: {
+			System16ScrollY[0] = d + 1;
+			return;
+		}
+	
+		case 0x418008: {
+			System16ScrollX[0] = ((d ^ 0xffff) & 0x3ff) + 2;
+			return;
+		}
+		
+		case 0x418010: {
+			System16ScrollY[1] = d + 1;
+			return;
+		}
+		
+		case 0x418018: {
+			System16ScrollX[1] = ((d ^ 0xffff) & 0x3ff) + 4;
+			return;
+		}
+		
+		case 0x418020: {
+			BootlegBgPage[3] = (d >> 0) & 0xf;
+			BootlegFgPage[3] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0x418022: {
+			BootlegBgPage[2] = (d >> 0) & 0xf;
+			BootlegFgPage[2] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0x418024: {
+			BootlegBgPage[1] = (d >> 0) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0x418026: {
+			BootlegBgPage[0] = (d >> 0) & 0xf;
+			BootlegFgPage[0] = (d >> 4) & 0xf;
+			return;
+		}
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
+#endif
+}
+
+static void __fastcall DduxblGfxWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0xc46021: {
+			BootlegFgPage[1] = d & 0xf;
+			BootlegBgPage[1] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0xc46023: {
+			BootlegFgPage[0] = d & 0xf;
+			BootlegBgPage[0] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0xc46025: {
+			BootlegFgPage[3] = d & 0xf;
+			BootlegBgPage[3] = (d >> 4) & 0xf;
+			return;
+		}
+		
+		case 0xc46027: {
+			BootlegFgPage[2] = d & 0xf;
+			BootlegBgPage[2] = (d >> 4) & 0xf;
+			return;
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+#endif
+}
+
+static void __fastcall DduxblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0xc46000: {
+			System16ScrollY[1] = d;
+			return;
+		}
+		
+		case 0xc46008: {
+			System16ScrollX[1] = (d ^ 0xffff) & 0x1ff;
+			return;
+		}
+		
+		case 0xc46010: {
+			System16ScrollY[0] = d;
+			return;
+		}
+		
+		case 0xc46018: {
+			System16ScrollX[0] = (d ^ 0xffff) & 0x1ff;
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
+#endif
+}
+
+static void __fastcall DduxblWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x3f0001: {
+			if (System16TileBanks[0] != (d & 0x07)) {
+				System16TileBanks[0] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3f0003: {
+			if (System16TileBanks[1] != (d & 0x07)) {
+				System16TileBanks[1] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0xc40001: {
+			System16VideoEnable = d & 0x20;
+			System16ScreenFlip = d & 0x40;
+			return;
+		}
+		
+		case 0xc40007: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+#endif
+}
+
+static INT16 DunkshotTrack1X = 0;
+static INT16 DunkshotTrack1Y = 0;
+static INT16 DunkshotTrack2X = 0;
+static INT16 DunkshotTrack2Y = 0;
+static INT16 DunkshotTrack3X = 0;
+static INT16 DunkshotTrack3Y = 0;
+static INT16 DunkshotTrack4X = 0;
+static INT16 DunkshotTrack4Y = 0;
+
+static void DunkshotMakeAnalogInputs()
+{
+	if (System16InputPort2[0]) DunkshotTrack1X += 0x40;
+	if (System16InputPort2[1]) DunkshotTrack1X -= 0x40;
+	if (DunkshotTrack1X >= 0x1000) DunkshotTrack1X = 0;
+	if (DunkshotTrack1X < 0) DunkshotTrack1X = 0xfc0;
+	
+	if (System16InputPort2[2]) DunkshotTrack1Y -= 0x40;
+	if (System16InputPort2[3]) DunkshotTrack1Y += 0x40;
+	if (DunkshotTrack1Y >= 0x1000) DunkshotTrack1Y = 0;
+	if (DunkshotTrack1Y < 0) DunkshotTrack1Y = 0xfc0;
+	
+	if (System16InputPort2[4]) DunkshotTrack2X += 0x40;
+	if (System16InputPort2[5]) DunkshotTrack2X -= 0x40;
+	if (DunkshotTrack2X >= 0x1000) DunkshotTrack2X = 0;
+	if (DunkshotTrack2X < 0) DunkshotTrack2X = 0xfc0;
+	
+	if (System16InputPort2[6]) DunkshotTrack2Y -= 0x40;
+	if (System16InputPort2[7]) DunkshotTrack2Y += 0x40;
+	if (DunkshotTrack2Y >= 0x1000) DunkshotTrack2Y = 0;
+	if (DunkshotTrack2Y < 0) DunkshotTrack2Y = 0xfc0;
+	
+	if (System16InputPort3[0]) DunkshotTrack3X += 0x40;
+	if (System16InputPort3[1]) DunkshotTrack3X -= 0x40;
+	if (DunkshotTrack3X >= 0x1000) DunkshotTrack3X = 0;
+	if (DunkshotTrack3X < 0) DunkshotTrack3X = 0xfc0;
+	
+	if (System16InputPort3[2]) DunkshotTrack3Y -= 0x40;
+	if (System16InputPort3[3]) DunkshotTrack3Y += 0x40;
+	if (DunkshotTrack3Y >= 0x1000) DunkshotTrack3Y = 0;
+	if (DunkshotTrack3Y < 0) DunkshotTrack3Y = 0xfc0;
+
+	if (System16InputPort3[4]) DunkshotTrack4X += 0x40;
+	if (System16InputPort3[5]) DunkshotTrack4X -= 0x40;
+	if (DunkshotTrack4X >= 0x1000) DunkshotTrack4X = 0;
+	if (DunkshotTrack4X < 0) DunkshotTrack4X = 0xfc0;
+	
+	if (System16InputPort3[6]) DunkshotTrack4Y -= 0x40;
+	if (System16InputPort3[7]) DunkshotTrack4Y += 0x40;
+	if (DunkshotTrack4Y >= 0x1000) DunkshotTrack4Y = 0;
+	if (DunkshotTrack4Y < 0) DunkshotTrack4Y = 0xfc0;
+}
+
+static UINT8 DunkshotReadIO(UINT32 offset)
+{
+	switch (offset & (0x3000 / 2)) {
+		case 0x3000 / 2: {
+			switch (offset & 0x0f) {
+				case 0x00: return DunkshotTrack1X & 0xff;
+				case 0x01: return DunkshotTrack1X >> 8;
+				case 0x02: return DunkshotTrack1Y & 0xff;
+				case 0x03: return DunkshotTrack1Y >> 8;
+				case 0x04: return DunkshotTrack2X & 0xff;
+				case 0x05: return DunkshotTrack2X >> 8;
+				case 0x06: return DunkshotTrack2Y & 0xff;
+				case 0x07: return DunkshotTrack2Y >> 8;
+				case 0x08: return DunkshotTrack3X & 0xff;
+				case 0x09: return DunkshotTrack3X >> 8;
+				case 0x0a: return DunkshotTrack3Y & 0xff;
+				case 0x0b: return DunkshotTrack3Y >> 8;
+				case 0x0c: return DunkshotTrack4X & 0xff;
+				case 0x0d: return DunkshotTrack4X >> 8;
+				case 0x0e: return DunkshotTrack4Y & 0xff;
+				case 0x0f: return DunkshotTrack4Y >> 8;
+			}
+			break;
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static void __fastcall EswatblBankWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x3e2001: {
+			if (System16TileBanks[0] != (d & 0x07)) {
+				System16TileBanks[0] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3e2003: {
+			if (System16TileBanks[1] != (d & 0x07)) {
+				System16TileBanks[1] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+	}
+}
+
+static void __fastcall EswatblSoundWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0xc42007: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+	}
+}
+
+static void __fastcall EswatblGfxWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x418031: {
+			System16TileBanks[1] = d & 7;
+			return;
+		}
+	}
+}
+
+static void __fastcall EswatblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0x418000: {
+			System16ScrollY[0] = d;
+			return;
+		}
+	
+		case 0x418008: {
+			System16ScrollX[0] = (d ^ 0xffff);
+			return;
+		}
+		
+		case 0x418010: {
+			System16ScrollY[1] = d;
+			return;
+		}
+		
+		case 0x418018: {
+			System16ScrollX[1] = (d ^ 0xffff);
+			return;
+		}
+		
+		case 0x418020: {
+			BootlegFgPage[3] = (d >> 12) & 0xf;
+			BootlegFgPage[2] = (d >> 8) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			BootlegFgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+		
+		case 0x418028: {
+			BootlegBgPage[3] = (d >> 12) & 0xf;
+			BootlegBgPage[2] = (d >> 8) & 0xf;
+			BootlegBgPage[1] = (d >> 4) & 0xf;
+			BootlegBgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
+#endif
+}
+
+static INT16 ExctleagTrack1X = 0;
+static INT16 ExctleagTrack1Y = 0;
+static INT16 ExctleagTrack2X = 0;
+static INT16 ExctleagTrack2Y = 0;
+
+static void ExctleagMakeAnalogInputs()
+{
+	if (System16InputPort4[0]) ExctleagTrack1X += 0x1;
+	if (System16InputPort4[1]) ExctleagTrack1X -= 0x1;
+	if (ExctleagTrack1X >= 0x100) ExctleagTrack1X = 0;
+	if (ExctleagTrack1X < 0) ExctleagTrack1X = 0xff;
+	
+	if (System16InputPort4[2]) ExctleagTrack1Y -= 0x1;
+	if (System16InputPort4[3]) ExctleagTrack1Y += 0x1;
+	if (ExctleagTrack1Y >= 0x100) ExctleagTrack1Y = 0;
+	if (ExctleagTrack1Y < 0) ExctleagTrack1Y = 0xff;
+	
+	if (System16InputPort4[4]) ExctleagTrack2X += 0x4;
+	if (System16InputPort4[5]) ExctleagTrack2X -= 0x4;
+	if (ExctleagTrack2X >= 0x100) ExctleagTrack2X = 0;
+	if (ExctleagTrack2X < 0) ExctleagTrack2X = 0xfc;
+	
+	if (System16InputPort4[6]) ExctleagTrack2Y -= 0x4;
+	if (System16InputPort4[7]) ExctleagTrack2Y += 0x4;
+	if (ExctleagTrack2Y >= 0x100) ExctleagTrack2Y = 0;
+	if (ExctleagTrack2Y < 0) ExctleagTrack2Y = 0xfc;
+}
+
+static UINT8 ExctleagReadIO(UINT32 offset)
+{
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x0801: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0x0802: {
+			return 0xff - System16Input[3];
+		}
+		
+		case 0x0803: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0x1000: {
+			return System16Dip[0];
+		}
+
+		case 0x1001: {
+			return System16Dip[1];
+		}
+		
+		case 0x1800:
+		case 0x1801: {
+			return ExctleagTrack1X;
+		}
+		
+		case 0x1802:
+		case 0x1803: {
+			return ExctleagTrack1Y;
+		}
+		
+		case 0x1804:
+		case 0x1805: {
+			return ExctleagTrack2X;
+		}
+		
+		case 0x1806:
+		case 0x1807: {
+			return ExctleagTrack2Y;
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static UINT8 __fastcall FpointblReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0x601001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x601003: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0x601005: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0x600001: {
+			return System16Dip[0];
+		}
+
+		case 0x600003: {
+			return System16Dip[1];
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
+#endif
+
+	return 0xff;
+}
+
+static void __fastcall FpointblWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x600007: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+
+		}
+		
+		case 0x843001: {
+			System16VideoEnable = d & 0x20;
+			System16ScreenFlip = d & 0x40;
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+#endif
+}
+
+static void __fastcall FpointblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0xc46000: {
+			System16ScrollY[0] = d;
+			return;
+		}
+	
+		case 0xc46008: {
+			System16ScrollX[0] = (d ^ 0xffff);
+			return;
+		}
+		
+		case 0xc46010: {
+			System16ScrollY[1] = d + 2;
+			return;
+		}
+		
+		case 0xc46018: {
+			System16ScrollX[1] = (d ^ 0xffff);
+			return;
+		}
+		
+		case 0xc46022: {
+			BootlegFgPage[3] = (d >> 12) & 0xf;
+			BootlegFgPage[2] = (d >> 8) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			BootlegFgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+		
+		case 0xc46026: {
+			BootlegBgPage[0] = (d >> 12) & 0xf;
+			BootlegBgPage[1] = (d >> 8) & 0xf;
+			BootlegBgPage[2] = (d >> 4) & 0xf;
+			BootlegBgPage[3] = (d >> 0) & 0xf;			
+			return;
+		}
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
+#endif
+}
+
+static UINT8 HwchampInputVal;
+
+static UINT8 HwchampReadIO(UINT32 offset)
+{
+	UINT16 result;
+	
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x1000: {
+			return System16Dip[1];
+		}
+		
+		case 0x1001: {
+			return System16Dip[0];
+		}
+	
+		case 0x1810:
+		case 0x1811:
+		case 0x1812:
+		case 0x1818: 
+		case 0x1819: 
+		case 0x181a: {
+			result = (HwchampInputVal & 0x80) >> 7;
+			HwchampInputVal <<= 1;
+			return result & 0xff;
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static void HwchampWriteIO(UINT32 offset, UINT8 d)
+{
+	UINT8 temp = 0;
+	
+	switch (offset) {
+		case 0x1810:
+		case 0x1818: {
+			temp = 0x80 + (System16AnalogPort0 >> 4);
+			if (temp < 0x01) temp = 0x01;
+			if (temp > 0xfe) temp = 0xfe;
+			HwchampInputVal = temp;
+			return;
+		}
+		
+		case 0x1811:
+		case 0x1819: {
+			temp = 0x26;
+			if (System16AnalogPort2 > 1) temp = 0xfe;
+			HwchampInputVal = temp;
+			return;
+		}
+		
+		case 0x1812:
+		case 0x181a: {
+			temp = 0x26;
+			if (System16AnalogPort1 > 1) temp = 0xfe;
+			HwchampInputVal = temp;
+			return;
+		}
+	}
+
+	sega_315_5195_io_write(offset, d);
+}
+
+static UINT8 __fastcall LockonphZ80PortRead(UINT16 a)
+{
+	a &= 0xff;
+	
+	switch (a) {
+		case 0x01: {
+			return BurnYM2151Read();
+		}
+		
+		case 0x80: {
+			return MSM6295Read(0);
+		}
+		
+		case 0xc0: {
+			ZetSetIRQLine(0, CPU_IRQSTATUS_NONE);
+			return System16SoundLatch;
+		}
+	}
+	
+	bprintf(PRINT_NORMAL, _T("Z80 Read Port -> %02X\n"), a);
+
+	return 0;
+}
+
+static void __fastcall LockonphZ80PortWrite(UINT16 a, UINT8 d)
+{
+	a &= 0xff;
+	d &= 0xff;
+	
+	switch (a) {
+		case 0x00: {
+			BurnYM2151SelectRegister(d);
+			return;
+		}
+		
+		case 0x01: {
+			BurnYM2151WriteRegister(d);
+			return;
+		}
+		
+		case 0x40: {
+			return;
+		}
+		
+		case 0x80: {
+			MSM6295Write(0, d);
+			return;
+		}
+	}
+
+	bprintf(PRINT_NORMAL, _T("Z80 Write Port -> %02X, %02X\n"), a, d);
+}
+
+static UINT8 __fastcall LockonphReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0xc41001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0xc41003: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0xc41005: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0xc42001: {
+			return System16Dip[0];
+		}
+		
+		case 0xc42003: {
+			return System16Dip[1];
+		}
+	}
+	
+	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
+	
+	return 0;
+}
+
+static void __fastcall LockonphWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x3f0001: {
+			if (System16TileBanks[0] != (d & 0x07)) {
+				System16TileBanks[0] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3f0003: {
+			if (System16TileBanks[1] != (d & 0x07)) {
+				System16TileBanks[1] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x777707: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+		
+		case 0xc40001: {
+			return;
+		}
+	}
+	
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+}
+
+static UINT16 __fastcall LockonphReadWord(UINT32 a)
+{
+	bprintf(PRINT_NORMAL, _T("68000 Read Word -> 0x%06X\n"), a);
+	
+	return 0;
+}
+
+static void __fastcall LockonphWriteWord(UINT32 a, UINT16 d)
+{
+	if (a >= 0x400000 && a <= 0x40ffff) {
+		System16BTileWordWrite(a - 0x400000, d);
+		return;
+	}
+
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
+}
+
+static void __fastcall PassshtbGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0xc46000: {
+			System16ScrollY[0] = d;
+			return;
+		}
+	
+		case 0xc46002: {
+			System16ScrollX[0] = (d ^ 0xffff) & 0x1ff;
+			return;
+		}
+		
+		case 0xc46004: {
+			System16ScrollY[1] = d;
+			return;
+		}
+		
+		case 0xc46006: {
+			System16ScrollX[1] = (d ^ 0xffff) & 0x1ff;
+			return;
+		}
+		
+/*		case 0xc46022: {
+			BootlegFgPage[3] = (d >> 12) & 0xf;
+			BootlegFgPage[2] = (d >> 8) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			BootlegFgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+		
+		case 0xc46026: {
+			BootlegBgPage[0] = (d >> 12) & 0xf;
+			BootlegBgPage[1] = (d >> 8) & 0xf;
+			BootlegBgPage[2] = (d >> 4) & 0xf;
+			BootlegBgPage[3] = (d >> 0) & 0xf;			
+			return;
+		}*/
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, (d ^ 0xffff) & 0x1ff);
+#endif
+}
+
+static INT16 SdiTrack1X = 0;
+static INT16 SdiTrack1Y = 0;
+static INT16 SdiTrack2X = 0;
+static INT16 SdiTrack2Y = 0;
+
+static void SdibMakeAnalogInputs()
+{
+	SdiTrack1X -= (System16AnalogPort0 >> 8) & 0xff;
+	SdiTrack1Y += (System16AnalogPort1 >> 8) & 0xff;
+	
+	SdiTrack2X -= (System16AnalogPort2 >> 8) & 0xff;
+	SdiTrack2Y += (System16AnalogPort3 >> 8) & 0xff;
+}
+
+static UINT8 SdibReadIO(UINT32 offset)
+{
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x0802: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0x1000: {
+			return System16Dip[1];
+		}
+		
+		case 0x1001: {
+			return System16Dip[0];
+		}
+		
+		case 0x1800: {
+			return SdiTrack1X;
+		}
+		
+		case 0x1802: {
+			return SdiTrack1Y;
+		}
+		
+		case 0x1804: {
+			return SdiTrack2X;
+		}
+		
+		case 0x1806: {
+			return SdiTrack2Y;
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static UINT8 __fastcall SdiblReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0xc41001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0xc41005: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0xc42003: {
+			return System16Dip[1];
+		}
+		
+		case 0xc42005: {
+			return System16Dip[0];
+		}
+		
+		case 0xc43001: {
+			return SdiTrack1X;
+		}
+		
+		case 0xc43005: {
+			return SdiTrack1Y;
+		}
+		
+		case 0xc43009: {
+			return SdiTrack2X;
+		}
+		
+		case 0xc4300d: {
+			return SdiTrack2Y;
+		}
+	}
+	
+	return 0xff;
+}
+
+static void __fastcall SdiblSoundWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0x123407: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+	}
+}
+
+static UINT8 MahjongInputNum;
+
+static UINT8 SjryukoReadIO(UINT32 offset)
+{
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0x0801: {
+			if (System16Input[MahjongInputNum + 1] != 0xff) return 0xff & ~(1 << MahjongInputNum);
+			return 0xff;
+		}
+		
+		case 0x802: {
+			return 0xff - System16Input[MahjongInputNum + 1];
+		}
+		
+		case 0x803: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0x1000: {
+			return System16Dip[0];
+		}
+
+		case 0x1001: {
+			return System16Dip[1];
+		}
+	}
+	
+	return sega_315_5195_io_read(offset);
+}
+
+static void SjryukoWriteIO(UINT32 offset, UINT8 d)
+{
+	switch (offset) {
+		case 0x0001: {
+			System16VideoEnable = d & 0x20;
+			System16ScreenFlip = d & 0x40;
+			if (d & 4) MahjongInputNum = (MahjongInputNum + 1) % 6;
+			return;
+		}
+	}
+	
+	sega_315_5195_io_write(offset, d);
+}
+
+static void __fastcall TetrisblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0x418000: {
+			System16ScrollY[0] = d;
+			return;
+		}
+	
+		case 0x418008: {
+			System16ScrollX[0] = (d ^ 0xffff) & 0x3ff;
+			return;
+		}
+		
+		case 0x418010: {
+			System16ScrollY[1] = d;
+			return;
+		}
+		
+		case 0x418018: {
+			System16ScrollX[1] = ((d ^ 0xffff) & 0x3ff) + 2;
+			return;
+		}
+		
+		case 0x418020: {
+			BootlegFgPage[3] = (d >> 12) & 0xf;
+			BootlegFgPage[2] = (d >> 8) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			BootlegFgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+		
+		case 0x418028: {
+			BootlegBgPage[0] = (d >> 12) & 0xf;
+			BootlegBgPage[1] = (d >> 8) & 0xf;
+			BootlegBgPage[2] = (d >> 4) & 0xf;
+			BootlegBgPage[3] = (d >> 0) & 0xf;
+			return;
+		}
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, (d ^ 0xffff) & 0x3ff);
+#endif
+}
+
+static void __fastcall TetrisblSndWriteByte(UINT32 a, UINT8 d)
+{
+	switch (a) {
+		case 0xc42007: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+	}
+}
+
+static void __fastcall Wb3bblGfxWriteWord(UINT32 a, UINT16 d)
+{
+	switch (a) {
+		case 0xc46000: {
+			System16ScrollY[0] = d;
+			return;
+		}
+	
+		case 0xc46002: {
+			System16ScrollX[0] = (d ^ 0xffff) & 0x3ff;
+			return;
+		}
+		
+		case 0xc46004: {
+			System16ScrollY[1] = d;
+			return;
+		}
+		
+		case 0xc46006: {
+			System16ScrollX[1] = (d ^ 0xffff) & 0x3ff;
+			return;
+		}
+		
+/*		case 0xc46022: {
+			BootlegFgPage[3] = (d >> 12) & 0xf;
+			BootlegFgPage[2] = (d >> 8) & 0xf;
+			BootlegFgPage[1] = (d >> 4) & 0xf;
+			BootlegFgPage[0] = (d >> 0) & 0xf;
+			return;
+		}
+		
+		case 0xc46026: {
+			BootlegBgPage[0] = (d >> 12) & 0xf;
+			BootlegBgPage[1] = (d >> 8) & 0xf;
+			BootlegBgPage[2] = (d >> 4) & 0xf;
+			BootlegBgPage[3] = (d >> 0) & 0xf;			
+			return;
+		}*/
+	}
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X, 0x%04X\n"), a, d, d ^ 0xffff);
+#endif
+}
+
+/*====================================================
+Driver Inits
+====================================================*/
+
+static INT32 Fantzn2xPlaneOffsets[3] = { 1, 2, 3 };
+static INT32 Fantzn2xXOffsets[8]     = { 0, 4, 8, 12, 16, 20, 24, 28 };
+static INT32 Fantzn2xYOffsets[8]     = { 0, 32, 64, 96, 128, 160, 192, 224 };
+static INT32 LockonphPlaneOffsets[4] = { 0x300000, 0x200000, 0x100000, 0 };
+static INT32 LockonphXOffsets[8]     = { 0, 1, 2, 3, 4, 5, 6, 7 };
+static INT32 LockonphYOffsets[8]     = { 0, 8, 16, 24, 32, 40, 48, 56 };
+
+static INT32 AceattacInit()
+{
+	System16MakeAnalogInputsDo = AceattacMakeAnalogInputs;
+	sega_315_5195_custom_io_do = AceattacReadIO;
+	
+	return System16Init();
+}
+
+static INT32 AfighterInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x80000 - 0x40000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x40000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x40000);
+			memset(System16Sprites, 0, 0x40000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x10000);
+			memcpy(System16Sprites + 0x020000, pTemp + 0x10000, 0x10000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x10000);
+			memcpy(System16Sprites + 0x060000, pTemp + 0x30000, 0x10000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 AfighterAnalogInit()
+{
+	INT32 nRet = AfighterInit();
+	
+	if (!nRet) {
+		SekOpen(0);
+		SekSetReadByteHandler(0, AfighterAnalogReadByte);
+		SekClose();
+	}
+	
+	return nRet;
+}
+
+static INT32 AliensynInit()
+{
+	INT32 nRet = System16Init();
+	AlienSyndrome = true;
+	
+	return nRet;
+}
+
+static void Altbeastj_Sim8751()
+{
+	// System Inputs
+	*((UINT16*)(System16Ram + 0x30d0)) = BURN_ENDIAN_SWAP_INT16((UINT16)(System16Input[0] << 8));
+	
+	// Tile Banking
+	INT32 Bank = (System16Ram[0x3094 + 1] << 8) | System16Ram[0x3094 + 0];
+	Bank &= 0xff;
+	Bank = (Bank & 0x01) | ((Bank & 0xfe) << 1);
+	System16TileBanks[1] = Bank & 7;
+	
+	// Sound command
+	UINT16 temp = (System16Ram[0x30d4 + 1] << 8) | System16Ram[0x30d4 + 0];
+	if ((temp & 0xff00) != 0x0000) {
+		System16SoundLatch = temp >> 8;
+		ZetOpen(0);
+		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+		ZetClose();
+		*((UINT16*)(System16Ram + 0x30d4)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff));
+	}
+}
+
+static INT32 AltbeastInit()
+{
+	AltbeastMode = true;
+
+	return System16Init();
+}
+
+static INT32 AltbeastjInit()
+{
+	Simulate8751 = Altbeastj_Sim8751;
+	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1a0000 - 0xe0000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0xe0000);
+			memset(System16Sprites, 0, 0x1a0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 Altbeast6Init()
+{	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1a0000 - 0xe0000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0xe0000);
+			memset(System16Sprites, 0, 0x1a0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 Altbeast4Init()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1a0000 - 0xe0000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0xe0000);
+			memset(System16Sprites, 0, 0x1a0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x80000, 0x20000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0xa0000, 0x20000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0xc0000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static void AltbeastblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
+	SekSetWriteWordHandler(1, AltbeastblGfxWriteWord);
+	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
+	SekSetWriteByteHandler(2, AltbeastblSoundWriteByte);
+	SekClose();
+}
+
+static INT32 AltbeastblInit()
+{
+	System16Map68KDo = AltbeastblMap68K;
+	
+	INT32 nRet = System16Init();
+	
+	System16SpriteXOffset = 114;
+	
+	if (!nRet) {
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 AtomicpInit()
+{
+	INT32 nRet = System16Init();
+	
+	System16IgnoreVideoEnable = 1;
+	System16YM2413IRQInterval = 166;
+	
+	return nRet;
+}
+
+static INT32 Blox16bLoadRom()
+{
+	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
+	
+	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+	BurnLoadRom(System16TempGfx, 1, 1);
+	GfxDecode(0x2000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
+	System16NumTiles = 0x2000;
+	BurnFree(System16TempGfx);
+	
+	BurnLoadRom(System16Sprites, 2, 1);
+	BurnByteswap(System16Sprites, System16SpriteRomSize);
+	
+	if (BurnLoadRom(System16Z80Rom, 3, 1)) return 1;
+	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x08000);
+		
+	return 0;
+}
+
+static INT32 Blox16bInit()
+{
+	System16CustomLoadRomDo = Blox16bLoadRom;
+	System16UPD7759DataSize = 0x08000;
+	
+	return System16Init();
+}
+
+static void DduxblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekSetWriteByteHandler(0, DduxblWriteByte);
+	SekMapHandler(2, 0xc46000, 0xc46027, MAP_WRITE);
+	SekSetWriteByteHandler(2, DduxblGfxWriteByte);
+	SekSetWriteWordHandler(2, DduxblGfxWriteWord);
+	SekClose();
+}
+
+static INT32 DduxblInit()
+{
+	System16CustomLoadRomDo = CustomLoadRom40000;
+	System16Map68KDo = DduxblMap68K;
+	
+	System16SpriteXOffset = 112;
+	
+	System16MapZ80Do = BootlegMapZ80;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 DunkshotInit()
+{
+	System16MakeAnalogInputsDo = DunkshotMakeAnalogInputs;
+	sega_315_5195_custom_io_do = DunkshotReadIO;
+	
+	System16BTileAlt = true;
+	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x80000 - 0x40000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x80000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x80000);
+			memset(System16Sprites, 0, 0x80000);
+			memcpy(System16Sprites + 0x00000, pTemp + 0x00000, 0x10000);
+			memcpy(System16Sprites + 0x10000, pTemp + 0x00000, 0x10000);
+			memcpy(System16Sprites + 0x20000, pTemp + 0x10000, 0x10000);
+			memcpy(System16Sprites + 0x30000, pTemp + 0x10000, 0x10000);
+			memcpy(System16Sprites + 0x40000, pTemp + 0x20000, 0x10000);
+			memcpy(System16Sprites + 0x50000, pTemp + 0x20000, 0x10000);
+			memcpy(System16Sprites + 0x60000, pTemp + 0x30000, 0x10000);
+			memcpy(System16Sprites + 0x70000, pTemp + 0x30000, 0x10000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 DunkshotExit()
+{
+	DunkshotTrack1X = 0;
+	DunkshotTrack1Y = 0;
+	DunkshotTrack2X = 0;
+	DunkshotTrack2Y = 0;
+	DunkshotTrack3X = 0;
+	DunkshotTrack3Y = 0;
+	DunkshotTrack4X = 0;
+	DunkshotTrack4Y = 0;
+
+	return System16Exit();
+}
+
+static INT32 DunkshotScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {					// Return minimum compatible version
+		*pnMin =  0x029660;
+	}
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		SCAN_VAR(DunkshotTrack1X);
+		SCAN_VAR(DunkshotTrack1Y);
+		SCAN_VAR(DunkshotTrack2X);
+		SCAN_VAR(DunkshotTrack2Y);
+		SCAN_VAR(DunkshotTrack3X);
+		SCAN_VAR(DunkshotTrack3Y);
+		SCAN_VAR(DunkshotTrack4X);
+		SCAN_VAR(DunkshotTrack4Y);
+	}
+	
+	return System16Scan(nAction, pnMin);;
+}
+
+static void EswatblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0bffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0bffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
+	SekSetWriteWordHandler(1, EswatblGfxWriteWord);
+	SekSetWriteByteHandler(1, EswatblGfxWriteByte);
+	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
+	SekSetWriteByteHandler(2, EswatblSoundWriteByte);
+	SekMapHandler(3, 0x3e2000, 0x3e2003, MAP_WRITE);
+	SekSetWriteByteHandler(3, EswatblBankWriteByte);
+	SekClose();
+}
+
+static INT32 EswatInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 Eswatj1Init()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+	
+	System16TileRomSize = 0x0c0000 - 0x090000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x0c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites + 0x0c0000, 0x0c0000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x000000, 0xc0000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+		
+		System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+		if (System16TempGfx) {
+			BurnLoadRom(System16TempGfx + 0x000000, 4, 1);
+			BurnLoadRom(System16TempGfx + 0x020000, 5, 1);
+			BurnLoadRom(System16TempGfx + 0x040000, 6, 1);
+			BurnLoadRom(System16TempGfx + 0x060000, 7, 1);
+			BurnLoadRom(System16TempGfx + 0x080000, 8, 1);
+			BurnLoadRom(System16TempGfx + 0x0a0000, 9, 1);
+			System16Decode8x8Tiles(System16Tiles, System16NumTiles, System16TileRomSize * 2 / 3, System16TileRomSize * 1 / 3, 0);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(System16TempGfx);
+	}
+	
+	return nRet;
+}
+
+static INT32 EswatblInit()
+{
+	System16Map68KDo = EswatblMap68K;
+	
+	System16SpriteXOffset = 124;
+	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+		
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 ExctleagInit()
+{
+	System16MakeAnalogInputsDo = ExctleagMakeAnalogInputs;
+	sega_315_5195_custom_io_do = ExctleagReadIO;
+	
+	return System16Init();
+}
+
+static INT32 ExctleagExit()
+{
+	ExctleagTrack1X = 0;
+	ExctleagTrack1Y = 0;
+	ExctleagTrack2X = 0;
+	ExctleagTrack2Y = 0;
+
+	return System16Exit();
+}
+
+static INT32 ExctleagScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {					// Return minimum compatible version
+		*pnMin =  0x029660;
+	}
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		SCAN_VAR(ExctleagTrack1X);
+		SCAN_VAR(ExctleagTrack1Y);
+		SCAN_VAR(ExctleagTrack2X);
+		SCAN_VAR(ExctleagTrack2Y);
+	}
+	
+	return System16Scan(nAction, pnMin);;
+}
+
+static INT32 FantzonetaInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x180000 - 0x80000;
+
+	INT32 nRet = System16Init();
+	memcpy(System16Sprites + 0x100000, System16Sprites + 0x040000, 0x40000);
+	
+	return nRet;
+}
+
+static INT32 Fantzn2xLoadRom()
+{
+	return System16LoadRoms(1);
+}
+
+static INT32 Fantzn2xps2LoadRom()
+{
+	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
+	if (BurnLoadRom(System16Rom + 0x40000, 1, 1)) return 1;
+	
+	memcpy(System16Code, System16Rom, 0x100000);
+	
+	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+	BurnLoadRom(System16TempGfx, 2, 1);
+	GfxDecode(0x4000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
+	System16NumTiles = 0x4000;
+	BurnFree(System16TempGfx);
+	
+	BurnLoadRom(System16Sprites, 3, 1);
+	
+	if (BurnLoadRom(System16Z80Rom, 4, 1)) return 1;
+	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x20000);
+		
+	return 0;
+}
+
+static INT32 Fantzn2xInit()
+{
+	System16CustomLoadRomDo = Fantzn2xLoadRom;
+	
+	return System16Init();
+}
+
+static INT32 Fantzn2xps2Init()
+{
+	System16CustomLoadRomDo = Fantzn2xps2LoadRom;
+	System16UPD7759DataSize = 0x20000;
+	
+	return System16Init();
+}
+
+static INT32 FantzntaLoadRom()
+{
+	if (BurnLoadRom(System16Rom + 0x00000, 0, 1)) return 1;
+	
+	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+	BurnLoadRom(System16TempGfx, 1, 1);
+	GfxDecode(0x2000, 3, 8, 8, Fantzn2xPlaneOffsets, Fantzn2xXOffsets, Fantzn2xYOffsets, 0x100, System16TempGfx, System16Tiles);
+	System16NumTiles = 0x2000;
+	BurnFree(System16TempGfx);
+	
+	BurnLoadRom(System16Sprites, 2, 1);
+	BurnByteswap(System16Sprites, System16SpriteRomSize);
+	
+	if (BurnLoadRom(System16Z80Rom, 3, 1)) return 1;
+	memcpy(System16UPD7759Data, System16Z80Rom + 0x10000, 0x10000);
+		
+	return 0;
+}
+
+static INT32 FantzntaInit()
+{
+	System16CustomLoadRomDo = FantzntaLoadRom;
+	System16UPD7759DataSize = 0x10000;
+	
+	return System16Init();
+}
+
+static void FpointblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekSetReadByteHandler(0, FpointblReadByte);
+	SekSetWriteByteHandler(0, FpointblWriteByte);
+	SekMapHandler(1, 0xc46000, 0xc46031, MAP_WRITE);
+	SekSetWriteWordHandler(1, FpointblGfxWriteWord);
+	SekClose();
+}
+
+static INT32 FpointblInit()
+{
+	System16Map68KDo = FpointblMap68K;
+	System16MapZ80Do = BootlegMapZ80;
+	
+	INT32 nRet = System16Init();
+	
+	System16SpriteXOffset = 109;
+	
+	if (!nRet) {
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 GoldnaxeInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 Goldnaxe3Init()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 HwchampInit()
+{
+	sega_315_5195_custom_io_do = HwchampReadIO;
+	sega_315_5195_custom_io_write_do = HwchampWriteIO;
+	
+	return System16Init();
+}
+
+static INT32 HwchampExit()
+{
+	HwchampInputVal = 0;
+	
+	return System16Exit();
+}
+
+static INT32 HwchampScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {					// Return minimum compatible version
+		*pnMin =  0x029660;
+	}
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		SCAN_VAR(HwchampInputVal);
+	}
+	
+	return System16Scan(nAction, pnMin);;
+}
+
+static void LockonphMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0bffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0bffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x841fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xff0000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, LockonphReadByte);
+	SekSetWriteByteHandler(0, LockonphWriteByte);
+	SekSetReadWordHandler(0, LockonphReadWord);
+	SekSetWriteWordHandler(0, LockonphWriteWord);
+	SekClose();
+}
+
+static void LockonphMapZ80()
+{
+	ZetMapArea(0x0000, 0xf7ff, 0, System16Z80Rom);
+	ZetMapArea(0x0000, 0xf7ff, 2, System16Z80Rom);
+
+	ZetMapArea(0xf800, 0xffff, 0, System16Z80Ram);
+	ZetMapArea(0xf800, 0xffff, 1, System16Z80Ram);
+	ZetMapArea(0xf800, 0xffff, 2, System16Z80Ram);
+	
+	ZetSetInHandler(LockonphZ80PortRead);
+	ZetSetOutHandler(LockonphZ80PortWrite);
+}
+
+static INT32 LockonphInit()
+{
+	Lockonph = true;
+	
+	System16Map68KDo = LockonphMap68K;
+	System16MapZ80Do = LockonphMapZ80;
+	
+	System16SpriteRomSize = 0x40000;
+
+	INT32 nRet = System16Init();
+	
+	System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+	BurnLoadRom(System16TempGfx + 0x00000, 4, 1);
+	BurnLoadRom(System16TempGfx + 0x20000, 5, 1);
+	BurnLoadRom(System16TempGfx + 0x40000, 6, 1);
+	BurnLoadRom(System16TempGfx + 0x60000, 7, 1);
+	GfxDecode(0x4000, 4, 8, 8, LockonphPlaneOffsets, LockonphXOffsets, LockonphYOffsets, 0x40, System16TempGfx, System16Tiles);
+	System16NumTiles = 0x4000;
+	BurnFree(System16TempGfx);
+	
+	System16ClockSpeed = 8000000;
+	System16Z80ClockSpeed = 4000000;
+	System16IgnoreVideoEnable = 1;
+	System16SpritePalOffset = 0x800;
+	System16YM2413IRQInterval = 166; // used to drive the YM2151
+	
+	return nRet;
+}
+
+static INT32 MvpInit()
+{
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x200000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x200000);
+			memset(System16Sprites, 0, 0x200000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x180000, 0x40000);
+			memcpy(System16Sprites + 0x1c0000, pTemp + 0x1c0000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static INT32 MvpjInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x200000 - 0x180000;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x200000);
+		if (pTemp) {
+			memset(pTemp, 0, 0x200000);
+			memcpy(pTemp, System16Sprites, 0x200000);
+			memset(System16Sprites, 0, 0x200000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0xc0000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x0c0000, 0xc0000);
+		} else {
+			nRet = 1;
+		}		
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static UINT8 Passsht4ReadIO(UINT32 offset)
+{
+	switch (offset) {
+		case 0x0800: {
+			return 0xff - System16Input[0];
+		}
+
+		case 0x1800: {
+			return 0xff - System16Input[1];
+		}
+
+		case 0x1801: {
+			return 0xff - System16Input[2];
+		}
+
+		case 0x1802: {
+			return 0xff - System16Input[3];
+		}
+
+		case 0x1803: {
+			return 0xff - System16Input[4];
+		}
+	}
+
+	return sega_315_5195_io_read(offset);
+}
+
+static INT32 Passsht4Init()
+{
+	sega_315_5195_custom_io_do = Passsht4ReadIO;
+
+	return System16Init();
+}
+
+static void PassshtbMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekMapHandler(1, 0xc46000, 0xc46031, MAP_WRITE);
+	SekSetWriteWordHandler(1, PassshtbGfxWriteWord);
+	SekClose();
+}
+
+static INT32 PassshtbInit()
+{
+	System16Map68KDo = PassshtbMap68K;
+	
+	INT32 nRet = System16Init();
+	
+//	System16SpriteXOffset = 114;
+	
+	if (!nRet) {
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 RiotcityInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+static INT32 SdibInit()
+{
+	System16MakeAnalogInputsDo = SdibMakeAnalogInputs;
+	sega_315_5195_custom_io_do = SdibReadIO;
+	
+	return System16Init();
+}
+
+static void SdiblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekSetReadByteHandler(0, SdiblReadByte);
+	SekMapHandler(1, 0x123406, 0x123407, MAP_WRITE);
+	SekSetWriteByteHandler(1, SdiblSoundWriteByte);
+	SekClose();
+}
+
+static INT32 SdiblInit()
+{
+	System16Map68KDo = SdiblMap68K;
+	System16MakeAnalogInputsDo = SdibMakeAnalogInputs;
+	
+	return System16Init();
+}
+
+static INT32 SdibExit()
+{
+	SdiTrack1X = 0;
+	SdiTrack1Y = 0;
+	SdiTrack2X = 0;
+	SdiTrack2Y = 0;
+
+	return System16Exit();
+}
+
+static INT32 SdibScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {					// Return minimum compatible version
+		*pnMin =  0x029660;
+	}
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		SCAN_VAR(SdiTrack1X);
+		SCAN_VAR(SdiTrack1Y);
+		SCAN_VAR(SdiTrack2X);
+		SCAN_VAR(SdiTrack2Y);
+	}
+	
+	return System16Scan(nAction, pnMin);;
+}
+
+static INT32 Sdibl2LoadRom()
+{
+	memset(System16Code, 0, System16RomSize);
+	memcpy(System16Code, System16Rom + 0x30000, 0x30000);
+	memset(System16Rom + 0x30000, 0, 0x30000);
+	
+	return 0;
+}
+
+static INT32 Sdibl2Init()
+{
+	System16CustomDecryptOpCodeDo = Sdibl2LoadRom;
+			
+	return SdiblInit();
+}
+
+static INT32 SjryukoInit()
+{
+	sega_315_5195_custom_io_do = SjryukoReadIO;
+	sega_315_5195_custom_io_write_do = SjryukoWriteIO;
+	
+	System16BTileAlt = true;
+	
+	return System16Init();
+}
+
+static INT32 SjryukoExit()
+{
+	MahjongInputNum = 0;
+	
+	return System16Exit();
+}
+
+static INT32 SjryukoScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {					// Return minimum compatible version
+		*pnMin =  0x029660;
+	}
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		SCAN_VAR(MahjongInputNum);
+	}
+	
+	return System16Scan(nAction, pnMin);;
+}
+
+static INT32 SnapperInit()
+{
+	INT32 nRet = System16Init();
+	
+	System16IgnoreVideoEnable = 1;
+	System16YM2413IRQInterval = 41;
+	
+	return nRet;
+}
+
+static INT32 SonicbomInit()
+{
+	INT32 nRet = System16Init();
+
+	System16ScreenFlipXoffs = 7;
+	System16ScreenFlipYoffs = 7;
+
+	return nRet;
+}
+
+static void TetrisblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekMapHandler(1, 0x418000, 0x418031, MAP_WRITE);
+	SekSetWriteWordHandler(1, TetrisblGfxWriteWord);
+	SekMapHandler(2, 0xc42006, 0xc42007, MAP_WRITE);
+	SekSetWriteByteHandler(2, TetrisblSndWriteByte);
+	SekClose();
+}
+
+static INT32 TetrisblInit()
+{
+	System16Map68KDo = TetrisblMap68K;
+	
+	INT32 nRet = System16Init();
+	
+	System16SpriteXOffset = 114;
+	
+	if (!nRet) {
+		bSystem16BootlegRender = true;
+	}
+	
+	return nRet;
+}
+
+static INT32 TimescanInit()
+{
+	System16BTileAlt = true;
+
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x80000 - 0x40000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x80000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x40000);
+			memset(System16Sprites, 0, 0x80000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x020000, pTemp + 0x10000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x060000, pTemp + 0x30000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static void Tturf_Sim8751()
+{
+	// Inputs
+	*((UINT16*)(System16Ram + 0x01e6)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[0] << 8));
+	*((UINT16*)(System16Ram + 0x01e8)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[1] << 8));
+	*((UINT16*)(System16Ram + 0x01ea)) = BURN_ENDIAN_SWAP_INT16((UINT16)(~System16Input[2] << 8));
+	
+	// Sound command
+	UINT16 temp = (System16Ram[0x01d0 + 1] << 8) | System16Ram[0x01d0 + 0];
+	if ((temp & 0xff00) != 0x0000) {
+		System16SoundLatch = temp & 0xff;
+		ZetOpen(0);
+		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+		ZetClose();
+		*((UINT16*)(System16Ram + 0x01d0)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff));
+	}
+}
+
+static INT32 TturfInit()
+{
+	Simulate8751 = Tturf_Sim8751;
+
+	TturfMode = 1;
+
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0xe0000 - 0x80000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			//re-arrange UPD7759 Data
+			memmove(&System16UPD7759Data[0x20000], &System16UPD7759Data[0x10000], 0x10000);
+			memset(&System16UPD7759Data[0x10000], 0xff, 0x10000);
+
+			// re-arrange Sprite Data
+			memcpy(pTemp, System16Sprites, 0x80000);
+			memset(System16Sprites, 0, 0xe0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static void UltracinMakeAnalogInputs()
+{
+	static UINT8 clock = 0;
+
+	if (System16Input[1] & (0xc0)) {
+		clock ^= 0x08;
+		System16Input[1] |= clock;
+	}
+	if (System16Input[2] & (0xc0)) {
+		clock ^= 0x08;
+		System16Input[2] |= clock;
+	}
+}
+
+static INT32 UltracinInit()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0x1c0000 - 0x180000;
+	
+	INT32 nRet = System16Init();
+
+	System16MakeAnalogInputsDo = UltracinMakeAnalogInputs;
+
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0x1c0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x1c0000);
+			memset(System16Sprites, 0, 0x1c0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x000000, 0x40000);
+			memcpy(System16Sprites + 0x100000, pTemp + 0x040000, 0x40000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x080000, 0x40000);
+			memcpy(System16Sprites + 0x140000, pTemp + 0x0c0000, 0x40000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x100000, 0x40000);
+			memcpy(System16Sprites + 0x180000, pTemp + 0x140000, 0x40000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+	
+	return nRet;
+}
+
+void Wb3_Sim8751()
+{
+	// Sound command
+	UINT16 temp = (System16Ram[0x0008 + 1] << 8) | System16Ram[0x0008 + 0];
+	if ((temp & 0x00ff) != 0x0000) {
+		System16SoundLatch = temp >> 8;
+		ZetOpen(0);
+		ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+		ZetClose();
+		*((UINT16*)(System16Ram + 0x0008)) = BURN_ENDIAN_SWAP_INT16((UINT16)(temp & 0xff00));
+	}
+}
+
+static INT32 Wb3Init()
+{
+	Simulate8751 = Wb3_Sim8751;
+	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0xe0000 - 0x80000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x80000);
+			memset(System16Sprites, 0, 0xe0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static INT32 Wb33Init()
+{
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0xe0000 - 0x80000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x80000);
+			memset(System16Sprites, 0, 0xe0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+	}
+
+	return nRet;
+}
+
+static void Wb3bblMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom           , 0x000000, 0x0fffff, MAP_READ);
+	SekMapMemory(System16Code          , 0x000000, 0x0fffff, MAP_FETCH);
+	SekMapMemory(System16TileRam       , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam       , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam     , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam    , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Ram           , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadByteHandler(0, System16BReadByte);
+	SekSetWriteByteHandler(0, System16BWriteByte);
+	SekSetWriteWordHandler(0, System16BWriteWord);
+	SekMapHandler(1, 0xc44000, 0xc46031, MAP_WRITE);
+	SekSetWriteWordHandler(1, Wb3bblGfxWriteWord);
+	SekClose();
+}
+
+static INT32 Wb3bblInit()
+{
+	System16Map68KDo = Wb3bblMap68K;
+	
+	// Start off with some sprite rom and let the load routine add on the rest
+	System16SpriteRomSize = 0xe0000 - 0x80000;
+
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		UINT8 *pTemp = (UINT8*)BurnMalloc(0xe0000);
+		if (pTemp) {
+			memcpy(pTemp, System16Sprites, 0x80000);
+			memset(System16Sprites, 0, 0xe0000);
+			memcpy(System16Sprites + 0x000000, pTemp + 0x00000, 0x20000);
+			memcpy(System16Sprites + 0x040000, pTemp + 0x20000, 0x20000);
+			memcpy(System16Sprites + 0x080000, pTemp + 0x40000, 0x20000);
+			memcpy(System16Sprites + 0x0c0000, pTemp + 0x60000, 0x20000);
+		} else {
+			nRet = 1;
+		}
+		BurnFree(pTemp);
+		
+		bSystem16BootlegRender = true;
+	}
+
+	return nRet;
+}
+
+/*====================================================
+Driver defs
+====================================================*/
+
+struct BurnDriver BurnDrvAceattac = {
+	"aceattac", NULL, NULL, NULL, "1988",
+	"Ace Attacker (FD1094 317-0059)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
+	NULL, AceattacRomInfo, AceattacRomName, NULL, NULL, NULL, NULL, AceattacInputInfo, AceattacDIPInfo,
+	AceattacInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvAfightere = {
+	"afightere", "afighter", NULL, NULL, "1991",
+	"Action Fighter (System 16B, unprotected, analog controls)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
+	NULL, AfightereRomInfo, AfightereRomName, NULL, NULL, NULL, NULL, Afighter_analogInputInfo, Afighter_analogDIPInfo,
+	AfighterAnalogInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvAfighterf = {
+	"afighterf", "afighter", NULL, NULL, "1991",
+	"Action Fighter (System 16B, FD1089B 317-unknown, analog controls)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
+	NULL, AfighterfRomInfo, AfighterfRomName, NULL, NULL, NULL, NULL, Afighter_analogInputInfo, Afighter_analogDIPInfo,
+	AfighterAnalogInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvAfighterg = {
+	"afighterg", "afighter", NULL, NULL, "1991",
+	"Action Fighter (System 16B, FD1089B 317-unknown)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
+	NULL, AfightergRomInfo, AfightergRomName, NULL, NULL, NULL, NULL, System16bInputInfo, AfighterDIPInfo,
+	AfighterInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvAfighterh = {
+	"afighterh", "afighter", NULL, NULL, "1991",
+	"Action Fighter (System 16B, FD1089A 317-0018)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_HORSHOOT, 0,
+	NULL, AfighterhRomInfo, AfighterhRomName, NULL, NULL, NULL, NULL, System16bInputInfo, AfighterDIPInfo,
+	AfighterInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvAliensyn = {
+	"aliensyn", NULL, NULL, NULL, "1987",
+	"Alien Syndrome (set 4, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_MAZE, 0,
+	NULL, AliensynRomInfo, AliensynRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
+	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAliensyn3 = {
+	"aliensyn3", "aliensyn", NULL, NULL, "1987",
+	"Alien Syndrome (set 3, System 16B, FD1089A 317-0033)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1089A_ENC, GBF_MAZE, 0,
+	NULL, Aliensyn3RomInfo, Aliensyn3RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
+	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAliensyn7 = {
+	"aliensyn7", "aliensyn", NULL, NULL, "1987",
+	"Alien Syndrome (set 7, System 16B, MC-8123B 317-00xx)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_MC8123_ENC, GBF_MAZE, 0,
+	NULL, Aliensyn7RomInfo, Aliensyn7RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynDIPInfo,
+	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAliensynj = {
+	"aliensynj", "aliensyn", NULL, NULL, "1987",
+	"Alien Syndrome (set 6, Japan, new, System 16B, FD1089A 317-0033)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1089A_ENC, GBF_MAZE, 0,
+	NULL, AliensynjRomInfo, AliensynjRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, AliensynjDIPInfo,
+	AliensynInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast = {
+	"altbeast", NULL, NULL, NULL, "1988",
+	"Altered Beast (set 8, 8751 317-0078)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, AltbeastRomInfo, AltbeastRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	AltbeastInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeastj = {
+	"altbeastj", "altbeast", NULL, NULL, "1988",
+	"Juuouki (set 7, Japan, 8751 317-0077)\0", NULL, "Sega", "System 16B",
+	L"Juuoki (set 7, Japan, 8751 317-0077)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, AltbeastjRomInfo, AltbeastjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	AltbeastjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast2 = {
+	"altbeast2", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (set 2, MC-8123B 317-0066)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_SCRFIGHT, 0,
+	NULL, Altbeast2RomInfo, Altbeast2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeastj1 = {
+	"altbeastj1", "altbeast", NULL, NULL, "1988",
+	"Juuouki (set 1, Japan, FD1094 317-0065)\0", NULL, "Sega", "System 16B",
+	L"Juuoki (set 1, Japan, FD1094 317-0065)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, Altbeastj1RomInfo, Altbeastj1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeastj3 = {
+	"altbeastj3", "altbeast", NULL, NULL, "1988",
+	"Juuouki (set 3, Japan, FD1094 317-0068)\0", NULL, "Sega", "System 16B",
+	L"Juuoki (set 3, Japan, FD1094 317-0068)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, Altbeastj3RomInfo, Altbeastj3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeastj3d = {
+	"altbeastj3d", "altbeast", NULL, NULL, "1988",
+	"Juuouki (set 3, Japan, FD1094 317-0068 decrypted)\0", NULL, "Sega", "System 16B",
+	L"Juuoki (set 3, Japan, FD1094 317-0068 decrypted)\0\u7363\u738B\u8A18\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, Altbeastj3dRomInfo, Altbeastj3dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast4 = {
+	"altbeast4", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (set 4, MC-8123B 317-0066)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_SCRFIGHT, 0,
+	NULL, Altbeast4RomInfo, Altbeast4RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast5 = {
+	"altbeast5", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (set 5, FD1094 317-0069)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, Altbeast5RomInfo, Altbeast5RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast5d = {
+	"altbeast5d", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (set 5, FD1094 317-0069 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, Altbeast5dRomInfo, Altbeast5dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAltbeast6 = {
+	"altbeast6", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (set 6, 8751 317-0076)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, Altbeast6RomInfo, Altbeast6RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	Altbeast6Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriverD BurnDrvAltbeastbl = {
+	"altbeastbl", "altbeast", NULL, NULL, "1988",
+	"Altered Beast (Datsu bootleg)\0", "no Sound", "bootleg (Datsu)", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_INVERT_TILES, GBF_SCRFIGHT, 0,
+	NULL, AltbeastblRomInfo, AltbeastblRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	AltbeastblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriverD BurnDrvMutantwarr = {
+	"mutantwarr", "altbeast", NULL, NULL, "1988",
+	"Mutant Warrior (Altered Beast - Datsu bootleg)\0", "no Sound", "bootleg (Datsu)", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_INVERT_TILES, GBF_SCRFIGHT, 0,
+	NULL, MutantwarrRomInfo, MutantwarrRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AltbeastDIPInfo,
+	AltbeastblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAtomicp = {
+	"atomicp", NULL, NULL, NULL, "1990",
+	"Atomic Point (Korea)\0", NULL, "Philco", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_YM2413, GBF_PUZZLE, 0,
+	NULL, AtomicpRomInfo, AtomicpRomName, NULL, NULL, NULL, NULL, AtomicpInputInfo, AtomicpDIPInfo,
+	AtomicpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAurail = {
+	"aurail", NULL, NULL, NULL, "1990",
+	"Aurail (set 3, US, unprotected)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
+	NULL, AurailRomInfo, AurailRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAurail1 = {
+	"aurail1", "aurail", NULL, NULL, "1990",
+	"Aurail (set 2, World, FD1089B 317-0168)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1089B_ENC, GBF_VERSHOOT, 0,
+	NULL, Aurail1RomInfo, Aurail1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAurail1d = {
+	"aurail1d", "aurail", NULL, NULL, "1990",
+	"Aurail (set 2, World, FD1089B 317-0168 decrypted)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
+	NULL, Aurail1dRomInfo, Aurail1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAurailj = {
+	"aurailj", "aurail", NULL, NULL, "1990",
+	"Aurail (set 1, Japan, FD1089A 317-0167)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1089A_ENC, GBF_VERSHOOT, 0,
+	NULL, AurailjRomInfo, AurailjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvAurailjd = {
+	"aurailjd", "aurail", NULL, NULL, "1990",
+	"Aurail (set 1, Japan, FD1089A 317-0167 decrypted)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VERSHOOT, 0,
+	NULL, AurailjdRomInfo, AurailjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, AurailDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBayroute = {
+	"bayroute", NULL, NULL, NULL, "1989",
+	"Bay Route (set 3, World, FD1094 317-0116)\0", NULL, "Sunsoft / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, BayrouteRomInfo, BayrouteRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBayrouted = {
+	"bayrouted", "bayroute", NULL, NULL, "1989",
+	"Bay Route (set 3, World, FD1094 317-0116 decrypted)\0", NULL, "Sunsoft / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
+	NULL, BayroutedRomInfo, BayroutedRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBayroutej = {
+	"bayroutej", "bayroute", NULL, NULL, "1989",
+	"Bay Route (set 2, Japan, FD1094 317-0115)\0", NULL, "Sunsoft / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, BayroutejRomInfo, BayroutejRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBayroutejd = {
+	"bayroutejd", "bayroute", NULL, NULL, "1989",
+	"Bay Route (set 2, Japan, FD1094 317-0115 decrypted)\0", NULL, "Sunsoft / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
+	NULL, BayroutejdRomInfo, BayroutejdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBayroute1 = {
+	"bayroute1", "bayroute", NULL, NULL, "1989",
+	"Bay Route (set 1, US, unprotected)\0", "", "Sunsoft / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_RUNGUN, 0,
+	NULL, Bayroute1RomInfo, Bayroute1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, BayrouteDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBlox16b = {
+	"blox16b", "bloxeed", NULL, NULL, "2008",
+	"Bloxeed (System 16B, PS2 data file)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_PUZZLE, 0,
+	NULL, Blox16bRomInfo, Blox16bRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, Blox16bDIPInfo,
+	Blox16bInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBullet = {
+	"bullet", NULL, NULL, NULL, "1987",
+	"Bullet (FD1094 317-0041)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 3, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358_SMALL, GBF_RUNGUN, 0,
+	NULL, BulletRomInfo, BulletRomName, NULL, NULL, NULL, NULL, BulletInputInfo, BulletDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvBulletd = {
+	"bulletd", "bullet", NULL, NULL, "1987",
+	"Bullet (FD1094 317-0041 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 3, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_RUNGUN, 0,
+	NULL, BulletdRomInfo, BulletdRomName, NULL, NULL, NULL, NULL, BulletInputInfo, BulletDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCotton = {
+	"cotton", NULL, NULL, NULL, "1991",
+	"Cotton (set 3, World, FD1094 317-0181a)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
+	NULL, CottonRomInfo, CottonRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottond = {
+	"cottond", "cotton", NULL, NULL, "1991",
+	"Cotton (set 3, World, FD1094 317-0181a decrypted)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
+	NULL, CottondRomInfo, CottondRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonu = {
+	"cottonu", "cotton", NULL, NULL, "1991",
+	"Cotton (set 2, US, FD1094 317-0180)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
+	NULL, CottonuRomInfo, CottonuRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonud = {
+	"cottonud", "cotton", NULL, NULL, "1991",
+	"Cotton (set 2, US, FD1094 317-0180 decrypted)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
+	NULL, CottonudRomInfo, CottonudRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonj = {
+	"cottonj", "cotton", NULL, NULL, "1991",
+	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
+	NULL, CottonjRomInfo, CottonjRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonjd = {
+	"cottonjd", "cotton", NULL, NULL, "1991",
+	"Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
+	NULL, CottonjdRomInfo, CottonjdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonja = {
+	"cottonja", "cotton", NULL, NULL, "1991",
+	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_HORSHOOT, 0,
+	NULL, CottonjaRomInfo, CottonjaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvCottonjad = {
+	"cottonjad", "cotton", NULL, NULL, "1991",
+	"Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted)\0", NULL, "Success / Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
+	NULL, CottonjadRomInfo, CottonjadRomName, NULL, NULL, NULL, NULL, System16bInputInfo, CottonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDdux = {
+	"ddux", NULL, NULL, NULL, "1989",
+	"Dynamite Dux (set 2, FD1094 317-0096)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, DduxRomInfo, DduxRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDduxd = {
+	"dduxd", "ddux", NULL, NULL, "1989",
+	"Dynamite Dux (set 2, FD1094 317-0096 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, DduxdRomInfo, DduxdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDduxj = {
+	"dduxj", "ddux", NULL, NULL, "1989",
+	"Dynamite Dux (set 2, Japan, FD1094 317-0094)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, DduxjRomInfo, DduxjRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDduxjd = {
+	"dduxjd", "ddux", NULL, NULL, "1989",
+	"Dynamite Dux (set 2, Japan, FD1094 317-0094 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, DduxjdRomInfo, DduxjdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDdux1 = {
+	"ddux1", "ddux", NULL, NULL, "1989",
+	"Dynamite Dux (set 1, World, 8751 317-0095)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, Ddux1RomInfo, Ddux1RomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDduxbl = {
+	"dduxbl", "ddux", NULL, NULL, "1989",
+	"Dynamite Dux (bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_NOT_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES | HARDWARE_SEGA_5358, GBF_SCRFIGHT, 0,
+	NULL, DduxblRomInfo, DduxblRomName, NULL, NULL, NULL, NULL, System16bInputInfo, DduxDIPInfo,
+	DduxblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDunkshot = {
+	"dunkshot", NULL, NULL, NULL, "1987",
+	"Dunk Shot (Rev C, FD1089 317-0022)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
+	NULL, DunkshotRomInfo, DunkshotRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
+	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDunkshota = {
+	"dunkshota", "dunkshot", NULL, NULL, "1987",
+	"Dunk Shot (Rev A, FD1089 317-0022)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
+	NULL, DunkshotaRomInfo, DunkshotaRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
+	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDunkshoto = {
+	"dunkshoto", "dunkshot", NULL, NULL, "1986",
+	"Dunk Shot (FD1089 317-0022)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SPORTSMISC, 0,
+	NULL, DunkshotoRomInfo, DunkshotoRomName, NULL, NULL, NULL, NULL, DunkshotInputInfo, DunkshotDIPInfo,
+	DunkshotInit, DunkshotExit, System16BFrame, System16BAltRender, DunkshotScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswat = {
+	"eswat", NULL, NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 4, World, FD1094 317-0130)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, EswatRomInfo, EswatRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatd = {
+	"eswatd", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 4, World, FD1094 317-0130 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
+	NULL, EswatdRomInfo, EswatdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatj = {
+	"eswatj", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 2, Japan, FD1094 317-0128)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, EswatjRomInfo, EswatjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatjd = {
+	"eswatjd", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 2, Japan, FD1094 317-0128 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
+	NULL, EswatjdRomInfo, EswatjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatj1 = {
+	"eswatj1", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 1, Japan, FD1094 317-0131)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, Eswatj1RomInfo, Eswatj1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	Eswatj1Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatj1d = {
+	"eswatj1d", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 1, Japan, FD1094 317-0131 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_RUNGUN, 0,
+	NULL, Eswatj1dRomInfo, Eswatj1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	Eswatj1Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatu = {
+	"eswatu", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 3, US, FD1094 317-0129)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_RUNGUN, 0,
+	NULL, EswatuRomInfo, EswatuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatud = {
+	"eswatud", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (set 3, US, FD1094 317-0129 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
+	NULL, EswatudRomInfo, EswatudRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvEswatbl = {
+	"eswatbl", "eswat", NULL, NULL, "1989",
+	"E-Swat - Cyber Police (bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RUNGUN, 0,
+	NULL, EswatblRomInfo, EswatblRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, EswatDIPInfo,
+	EswatblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvExctleag = {
+	"exctleag", NULL, NULL, NULL, "1989",
+	"Excite League (FD1094 317-0079)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, ExctleagRomInfo, ExctleagRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
+	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvExctleagd = {
+	"exctleagd", "exctleag", NULL, NULL, "1989",
+	"Excite League (FD1094 317-0079 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, ExctleagdRomInfo, ExctleagdRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
+	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFantzoneta = {
+	"fantzoneta", "fantzone", NULL, NULL, "2008",
+	"Fantasy Zone (Time Attack, bootleg)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_HORSHOOT, 0,
+	NULL, FantzonetaRomInfo, FantzonetaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, FantzonetaDIPInfo,
+	FantzonetaInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFantzn2x = {
+	"fantzn2x", NULL, NULL, NULL, "2008",
+	"Fantasy Zone II - The Tears of Opa-Opa (System 16C)\0", NULL, "Sega / M2", "System 16C",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
+	NULL, Fantzn2xRomInfo, Fantzn2xRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
+	Fantzn2xInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFantzn2xp = {
+	"fantzn2xp", "fantzn2x", NULL, NULL, "2008",
+	"Fantasy Zone II - The Tears of Opa-Opa (System 16C, prototype)\0", NULL, "Sega / M2", "System 16C",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
+	NULL, Fantzn2xpRomInfo, Fantzn2xpRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
+	Fantzn2xInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFantzn2xps2 = {
+	"fantzn2xps2", "fantzn2x", NULL, NULL, "2008",
+	"Fantasy Zone II - The Tears of Opa-Opa (System 16C, PS2 data file)\0", NULL, "Sega / M2", "System 16C",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
+	NULL, Fantzn2xps2RomInfo, Fantzn2xps2RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
+	Fantzn2xps2Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFantznta = {
+	"fantznta", "fantzn2x", NULL, NULL, "2008",
+	"Fantasy Zone Time Attack (System 16B, PS2 data file)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704_PS2, GBF_HORSHOOT, 0,
+	NULL, FantzntaRomInfo, FantzntaRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Fantzn2xDIPInfo,
+	FantzntaInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpoint = {
+	"fpoint", NULL, NULL, NULL, "1989",
+	"Flash Point (set 2, Japan, FD1094 317-0127A)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_PUZZLE, 0,
+	NULL, FpointRomInfo, FpointRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpointd = {
+	"fpointd", "fpoint", NULL, NULL, "1989",
+	"Flash Point (set 2, Japan, FD1094 317-0127A decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PUZZLE, 0,
+	NULL, FpointdRomInfo, FpointdRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpoint1 = {
+	"fpoint1", "fpoint", NULL, NULL, "1989",
+	"Flash Point (set 1, Japan, FD1094 317-0127A)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
+	NULL, Fpoint1RomInfo, Fpoint1RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpoint1d = {
+	"fpoint1d", "fpoint", NULL, NULL, "1989",
+	"Flash Point (set 1, Japan, FD1094 317-0127A decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
+	NULL, Fpoint1dRomInfo, Fpoint1dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, FpointDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpointbl = {
+	"fpointbl", "fpoint", NULL, NULL, "1989",
+	"Flash Point (World, bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PUZZLE, 0,
+	NULL, FpointblRomInfo, FpointblRomName, NULL, NULL, NULL, NULL, FpointblInputInfo, FpointDIPInfo,
+	FpointblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvFpointbj = {
+	"fpointbj", "fpoint", NULL, NULL, "1989",
+	"Flash Point (Japan, bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PUZZLE, 0,
+	NULL, FpointbjRomInfo, FpointbjRomName, NULL, NULL, NULL, NULL, FpointblInputInfo, FpointDIPInfo,
+	FpointblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe = {
+	"goldnaxe", NULL, NULL, NULL, "1989",
+	"Golden Axe (set 6, US, 8751 317-123A)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
+	NULL, GoldnaxeRomInfo, GoldnaxeRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	GoldnaxeInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe1 = {
+	"goldnaxe1", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 1, World, FD1094 317-0110)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, Goldnaxe1RomInfo, Goldnaxe1RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe1d = {
+	"goldnaxe1d", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 1, World, FD1094 317-0110 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
+	NULL, Goldnaxe1dRomInfo, Goldnaxe1dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe2 = {
+	"goldnaxe2", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 2, US, 8751 317-0112)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, Goldnaxe2RomInfo, Goldnaxe2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	GoldnaxeInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe3 = {
+	"goldnaxe3", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 3, World, FD1094 317-0120)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, Goldnaxe3RomInfo, Goldnaxe3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxe3d = {
+	"goldnaxe3d", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 3, World, FD1094 317-0120 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, Goldnaxe3dRomInfo, Goldnaxe3dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxej = {
+	"goldnaxej", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 4, Japan, FD1094 317-0121)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, GoldnaxejRomInfo, GoldnaxejRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxejd = {
+	"goldnaxejd", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 4, Japan, FD1094 317-0121 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, GoldnaxejdRomInfo, GoldnaxejdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxeu = {
+	"goldnaxeu", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 5, US, FD1094 317-0122)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SCRFIGHT, 0,
+	NULL, GoldnaxeuRomInfo, GoldnaxeuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvGoldnaxeud = {
+	"goldnaxeud", "goldnaxe", NULL, NULL, "1989",
+	"Golden Axe (set 5, US, FD1094 317-0122 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SCRFIGHT, 0,
+	NULL, GoldnaxeudRomInfo, GoldnaxeudRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, GoldnaxeDIPInfo,
+	Goldnaxe3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvHwchamp = {
+	"hwchamp", NULL, NULL, NULL, "1987",
+	"Heavyweight Champ (set 1)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
+	NULL, HwchampRomInfo, HwchampRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
+	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvHwchampa = {
+	"hwchampa", "hwchamp", NULL, NULL, "1987",
+	"Heavyweight Champ (set 2)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
+	NULL, HwchampaRomInfo, HwchampaRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
+	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvHwchampj = {
+	"hwchampj", "hwchamp", NULL, NULL, "1987",
+	"Heavyweight Champ (Japan, FD1094 317-0046)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
+	NULL, HwchampjRomInfo, HwchampjRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
+	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvHwchampjd = {
+	"hwchampjd", "hwchamp", NULL, NULL, "1987",
+	"Heavyweight Champ (Japan, FD1094 317-0046 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_VSFIGHT, 0,
+	NULL, HwchampjdRomInfo, HwchampjdRomName, NULL, NULL, NULL, NULL, HwchampInputInfo, HwchampDIPInfo,
+	HwchampInit, HwchampExit, System16BFrame, System16BRender, HwchampScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvLockonph = {
+	"lockonph", NULL, NULL, NULL, "1991",
+	"Lock On (Philko)\0", NULL, "Philco", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B, GBF_HORSHOOT, 0,
+	NULL,LockonphRomInfo, LockonphRomName, NULL, NULL, NULL, NULL, LockonphInputInfo, LockonphDIPInfo,
+	LockonphInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvMvp = {
+	"mvp", NULL, NULL, NULL, "1989",
+	"MVP (set 2, US, FD1094 317-0143)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
+	NULL, MvpRomInfo, MvpRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
+	MvpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvMvpd = {
+	"mvpd", "mvp", NULL, NULL, "1989",
+	"MVP (set 2, US, FD1094 317-0143 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_SPORTSMISC, 0,
+	NULL, MvpdRomInfo, MvpdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
+	MvpInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvMvpj = {
+	"mvpj", "mvp", NULL, NULL, "1989",
+	"MVP (set 1, Japan, FD1094 317-0142)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_SPORTSMISC, 0,
+	NULL, MvpjRomInfo, MvpjRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
+	MvpjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvMvpjd = {
+	"mvpjd", "mvp", NULL, NULL, "1989",
+	"MVP (set 1, Japan, FD1094 317-0142 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SPORTSMISC, 0,
+	NULL, MvpjdRomInfo, MvpjdRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, MvpDIPInfo,
+	MvpjInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvPasssht = {
+	"passsht", NULL, NULL, NULL, "1988",
+	"Passing Shot (World, 2 Players, FD1094 317-0080)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtRomInfo, PassshtRomName, NULL, NULL, NULL, NULL, System16bfire4InputInfo, PassshtDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvPassshtd = {
+	"passshtd", "passsht", NULL, NULL, "1988",
+	"Passing Shot (World, 2 Players, FD1094 317-0080 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtdRomInfo, PassshtdRomName, NULL, NULL, NULL, NULL, System16bfire4InputInfo, PassshtDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvPassshta = {
+	"passshta", "passsht", NULL, NULL, "1988",
+	"Passing Shot (World, 4 Players, FD1094 317-0074)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtaRomInfo, PassshtaRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
+	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvPassshtad = {
+	"passshtad", "passsht", NULL, NULL, "1988",
+	"Passing Shot (World, 4 Players, FD1094 317-0074 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtadRomInfo, PassshtadRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
+	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvPassshtj = {
+	"passshtj", "passsht", NULL, NULL, "1988",
+	"Passing Shot (Japan, 4 Players, FD1094 317-0070)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtjRomInfo, PassshtjRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
+	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvPassshtjd = {
+	"passshtjd", "passsht", NULL, NULL, "1988",
+	"Passing Shot (Japan, 4 Players, FD1094 317-0070 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtjdRomInfo, PassshtjdRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtaDIPInfo,
+	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriverD BurnDrvPassshtb = {
+	"passshtb", "passsht", NULL, NULL, "1988",
+	"Passing Shot (bootleg, 2 Players)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	0 | BDF_ORIENTATION_VERTICAL | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, PassshtbRomInfo, PassshtbRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, PassshtDIPInfo,
+	PassshtbInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvCencourt = {
+	"cencourt", "passsht", NULL, NULL, "1988",
+	"Center Court (World, 4 Players, prototype, MC-8123B)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_CLONE, 4, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_MC8123_ENC, GBF_SPORTSMISC, 0,
+	NULL, CencourtRomInfo, CencourtRomName, NULL, NULL, NULL, NULL, PassshtInputInfo, CencourtDIPInfo,
+	Passsht4Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvRiotcity = {
+	"riotcity", NULL, NULL, NULL, "1991",
+	"Riot City (Japan)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_HISCORE_SUPPORTED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, RiotcityRomInfo, RiotcityRomName, NULL, NULL, NULL, NULL, System16bInputInfo, RiotcityDIPInfo,
+	RiotcityInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvRyukyu = {
+	"ryukyu", NULL, NULL, NULL, "1990",
+	"RyuKyu (Rev A, Japan) (FD1094 317-5023A)\0", NULL, "Success / Sega", "System 16B",
+	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
+	NULL, RyukyuRomInfo, RyukyuRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvRyukyua = {
+	"ryukyua", "ryukyu", NULL, NULL, "1990",
+	"RyuKyu (Japan) (FD1094 317-5023)\0", NULL, "Success / Sega", "System 16B",
+	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023 decrypted)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
+	NULL, RyukyuaRomInfo, RyukyuaRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvRyukyud = {
+	"ryukyud", "ryukyu", NULL, NULL, "1990",
+	"RyuKyu (Japan, FD1094 317-5023 decrypted)\0", NULL, "Success / Sega", "System 16B",
+	L"RyuKyu \u7409\u7403 (Japan, FD1094 317-5023 decrypted)\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
+	NULL, RyukyudRomInfo, RyukyudRomName, NULL, NULL, NULL, NULL, RyukyuInputInfo, RyukyuDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdib = {
+	"sdib", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (System 16B, FD1089A 317-0028)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, SdibRomInfo, SdibRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	SdibInit, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl = {
+	"sdibl", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, original hardware)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, SdiblRomInfo, SdiblRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	SdiblInit, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl2 = {
+	"sdibl2", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, set 1)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, Sdibl2RomInfo, Sdibl2RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl3 = {
+	"sdibl3", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, set 2)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, Sdibl3RomInfo, Sdibl3RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl4 = {
+	"sdibl4", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, set 3)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, Sdibl4RomInfo, Sdibl4RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl5 = {
+	"sdibl5", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, set 4)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, Sdibl5RomInfo, Sdibl5RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSdibl6 = {
+	"sdibl6", "sdi", NULL, NULL, "1987",
+	"SDI - Strategic Defense Initiative (bootleg, set 5)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, Sdibl6RomInfo, Sdibl6RomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	Sdibl2Init, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvDefense = {
+	"defense", "sdi", NULL, NULL, "1987",
+	"Defense (System 16B, FD1089A 317-0028)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089A_ENC | HARDWARE_SEGA_5358_SMALL, GBF_SHOOT, 0,
+	NULL, DefenseRomInfo, DefenseRomName, NULL, NULL, NULL, NULL, SdiInputInfo, SdibDIPInfo,
+	SdibInit, SdibExit, System16BFrame, System16BRender, SdibScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi2 = {
+	"shinobi2", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 2, System 16B, FD1094 317-0049)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
+	NULL, Shinobi2RomInfo, Shinobi2RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi2d = {
+	"shinobi2d", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 2, System 16B, FD1094 317-0049 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
+	NULL, Shinobi2dRomInfo, Shinobi2dRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi3 = {
+	"shinobi3", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 3, System 16B, MC-8123B 317-0054)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_MC8123_ENC, GBF_PLATFORM, 0,
+	NULL, Shinobi3RomInfo, Shinobi3RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi4 = {
+	"shinobi4", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 4, System 16B, MC-8123B 317-0054)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521 | HARDWARE_SEGA_MC8123_ENC, GBF_PLATFORM, 0,
+	NULL, Shinobi4RomInfo, Shinobi4RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi5 = {
+	"shinobi5", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 5, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
+	NULL, Shinobi5RomInfo, Shinobi5RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinobi6 = {
+	"shinobi6", "shinobi", NULL, NULL, "1987",
+	"Shinobi (set 6, System 16B, unprotected)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5521, GBF_PLATFORM, 0,
+	NULL, Shinobi6RomInfo, Shinobi6RomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, ShinobiDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSjryuko = {
+	"sjryuko", NULL, NULL, NULL, "1987",
+	"Sukeban Jansi Ryuko (set 2, System 16B, FD1089B 317-5021)\0", NULL, "White Board", "System 16B",
+	L"Sukeban Jansi Ryuko (set 2, System 16B, FD1089B 317-5021)\0\u30B9\u30B1\u30D0\u30F3\u96C0\u58EB \u7ADC\u5B50\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1089B_ENC | HARDWARE_SEGA_5358_SMALL, GBF_MAHJONG, 0,
+	NULL, SjryukoRomInfo, SjryukoRomName, NULL, NULL, NULL, NULL, SjryukoInputInfo, SjryukoDIPInfo,
+	SjryukoInit, SjryukoExit, System16BFrame, System16BAltRender, SjryukoScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSnapper = {
+	"snapper", NULL, NULL, NULL, "1990",
+	"Snapper (Korea)\0", NULL, "Philko", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_YM2413, GBF_MAZE, 0,
+	NULL, SnapperRomInfo, SnapperRomName, NULL, NULL, NULL, NULL, SnapperInputInfo, SnapperDIPInfo,
+	SnapperInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvSonicbom = {
+	"sonicbom", NULL, NULL, NULL, "1987",
+	"Sonic Boom (FD1094 317-0053)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_ORIENTATION_FLIPPED, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_VERSHOOT, 0,
+	NULL, SonicbomRomInfo, SonicbomRomName, NULL, NULL, NULL, NULL, System16bInputInfo, SonicbomDIPInfo,
+	SonicbomInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvSonicbomd = {
+	"sonicbomd", "sonicbom", NULL, NULL, "1987",
+	"Sonic Boom (FD1094 317-0053 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL | BDF_ORIENTATION_FLIPPED | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_VERSHOOT, 0,
+	NULL, SonicbomdRomInfo, SonicbomdRomName, NULL, NULL, NULL, NULL, System16bInputInfo, SonicbomDIPInfo,
+	SonicbomInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvSuprleag = {
+	"suprleag", NULL, NULL, NULL, "1987",
+	"Super League (FD1094 317-0045)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_FD1094_ENC | HARDWARE_SEGA_5358, GBF_SPORTSMISC, 0,
+	NULL, SuprleagRomInfo, SuprleagRomName, NULL, NULL, NULL, NULL, ExctleagInputInfo, ExctleagDIPInfo,
+	ExctleagInit, ExctleagExit, System16BFrame, System16BRender, ExctleagScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetris1 = {
+	"tetris1", "tetris", NULL, NULL, "1988",
+	"Tetris (set 1, Japan, System 16B, FD1094 317-0091)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
+	NULL, Tetris1RomInfo, Tetris1RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetris1d = {
+	"tetris1d", "tetris", NULL, NULL, "1988",
+	"Tetris (set 1, Japan, System 16B, FD1094 317-0091 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_PUZZLE, 0,
+	NULL, Tetris1dRomInfo, Tetris1dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetris2 = {
+	"tetris2", "tetris", NULL, NULL, "1988",
+	"Tetris (set 2, Japan, System 16B, FD1094 317-0092)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PUZZLE, 0,
+	NULL, Tetris2RomInfo, Tetris2RomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetris2d = {
+	"tetris2d", "tetris", NULL, NULL, "1988",
+	"Tetris (set 2, Japan, System 16B, FD1094 317-0092 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PUZZLE, 0,
+	NULL, Tetris2dRomInfo, Tetris2dRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetrisbl = {
+	"tetrisbl", "tetris", NULL, NULL, "1988",
+	"Tetris (bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B, GBF_PUZZLE, 0,
+	NULL, TetrisblRomInfo, TetrisblRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, TetrisDIPInfo,
+	TetrisblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTimescan = {
+	"timescan", NULL, NULL, NULL, "1987",
+	"Time Scanner (set 2, System 16B)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358_SMALL, GBF_PINBALL, 0,
+	NULL, TimescanRomInfo, TimescanRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, TimescanDIPInfo,
+	TimescanInit, System16Exit, System16BFrame, System16BAltRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvToryumon = {
+	"toryumon", NULL, NULL, NULL, "1994",
+	"Toryumon\0", NULL, "Sega / Westone", "System 16B",
+	L"Toryumon\0\u767B\u9F8D\u9580\0", NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_PUZZLE, 0,
+	NULL, ToryumonRomInfo, ToryumonRomName, NULL, NULL, NULL, NULL, System16bfire1InputInfo, ToryumonDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTturf = {
+	"tturf", NULL, NULL, NULL, "1989",
+	"Tough Turf (set 2, Japan, 8751 317-0104)\0", NULL, "Sega / Sunsoft", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_SCRFIGHT, 0,
+	NULL, TturfRomInfo, TturfRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, TturfDIPInfo,
+	TturfInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTturfu = {
+	"tturfu", "tturf", NULL, NULL, "1989",
+	"Tough Turf (set 1, US, 8751 317-0099)\0", NULL, "Sega / Sunsoft", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_SCRFIGHT, 0,
+	NULL, TturfuRomInfo, TturfuRomName, NULL, NULL, NULL, NULL, System16bfire3InputInfo, TturfDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvUltracin = {
+	"ultracin", NULL, NULL, NULL, "1996",
+	"Waku Waku Ultraman Racing\0", "Emulation not complete", "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5797, GBF_RACING, 0,
+	NULL, UltracinRomInfo, UltracinRomName, NULL, NULL, NULL, NULL, UltracinInputInfo, UltracinDIPInfo,
+	UltracinInit, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb3 = {
+	"wb3", NULL, NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 6, World, System 16B, 8751 317-0098)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
+	NULL, Wb3RomInfo, Wb3RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb3Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb32 = {
+	"wb32", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 2, Japan, System 16B, FD1094 317-0085)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
+	NULL, Wb32RomInfo, Wb32RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb32d = {
+	"wb32d", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 2, Japan, System 16B, FD1094 317-0085 decrypted)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5358, GBF_PLATFORM, 0,
+	NULL, Wb32dRomInfo, Wb32dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb33 = {
+	"wb33", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 3, World, System 16B, FD1094 317-0089)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
+	NULL, Wb33RomInfo, Wb33RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb33d = {
+	"wb33d", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 3, World, System 16B, FD1094 317-0089 decrypted)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
+	NULL, Wb33dRomInfo, Wb33dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb34 = {
+	"wb34", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 4, Japan, System 16B, FD1094 317-0087)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_PLATFORM, 0,
+	NULL, Wb34RomInfo, Wb34RomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWb34d = {
+	"wb34d", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (set 4, Japan, System 16B, FD1094 317-0087 decrypted)\0", NULL, "Sega / Westone", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_PLATFORM, 0,
+	NULL, Wb34dRomInfo, Wb34dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb33Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriverD BurnDrvWb3bbl = {
+	"wb3bbl", "wb3", NULL, NULL, "1988",
+	"Wonder Boy III - Monster Lair (bootleg)\0", NULL, "bootleg", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_CLONE | BDF_BOOTLEG, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_INVERT_TILES, GBF_PLATFORM, 0,
+	NULL, Wb3bblRomInfo, Wb3bblRomName, NULL, NULL, NULL, NULL, System16bInputInfo, Wb3DIPInfo,
+	Wb3bblInit, System16Exit, System16BFrame, System16BootlegRender, System16Scan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvWrestwar = {
+	"wrestwar", NULL, NULL, NULL, "1988",
+	"Wrestle War (set 3, World, 8751 317-0103)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
+	NULL, WrestwarRomInfo, WrestwarRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvWrestwar1 = {
+	"wrestwar1", "wrestwar", NULL, NULL, "1988",
+	"Wrestle War (set 1, Japan, FD1094 317-0090)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
+	NULL, Wrestwar1RomInfo, Wrestwar1RomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvWrestwar1d = {
+	"wrestwar1d", "wrestwar", NULL, NULL, "1988",
+	"Wrestle War (set 1, Japan, FD1094 317-0090 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
+	NULL, Wrestwar1dRomInfo, Wrestwar1dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvWrestwar2 = {
+	"wrestwar2", "wrestwar", NULL, NULL, "1988",
+	"Wrestle War (set 2, World, FD1094 317-0102)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704 | HARDWARE_SEGA_FD1094_ENC, GBF_VSFIGHT, 0,
+	NULL, Wrestwar2RomInfo, Wrestwar2RomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+struct BurnDriver BurnDrvWrestwar2d = {
+	"wrestwar2d", "wrestwar", NULL, NULL, "1988",
+	"Wrestle War (set 2, World, FD1094 317-0102 decrypted)\0", NULL, "Sega", "System 16B",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_CLONE | BDF_BOOTLEG | BDF_ORIENTATION_VERTICAL, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_5704, GBF_VSFIGHT, 0,
+	NULL, Wrestwar2dRomInfo, Wrestwar2dRomName, NULL, NULL, NULL, NULL, System16bInputInfo, WrestwarDIPInfo,
+	System16Init, System16Exit, System16BFrame, System16BRender, System16Scan,
+	NULL, 0x1800, 224, 320, 3, 4
+};
+
+// ISG Selection Master Type 2006 hardware
+
+static UINT16 IsgsmCartAddrLatch;
+static UINT32 IsgsmCartAddr;
+static INT32 IsgsmType = 0;
+static UINT32 IsgsmAddr;
+static UINT8  IsgsmMode;
+static UINT16 IsgsmAddrLatch;
+static UINT32 IsgsmSecurity;
+static UINT16 IsgsmSecurityLatch;
+static UINT8 IsgsmRleControlPosition = 8;
+static UINT8 IsgsmRleControlByte;
+static INT32 IsgsmRleLatched;
+static UINT8 IsgsmRleByte;
+static UINT8 IsgsmReadXor;
+static UINT32 nCartSize;
+static INT32 GameRomMapped = 0;
+
+typedef UINT32 (*isgsm_security_callback)(UINT32 input);
+isgsm_security_callback IsgsmSecurityCallback;
+
+static INT32 IsgsmTilePlaneOffsets[3] = { 0x200000, 0x100000, 0 };
+static INT32 IsgsmTileXOffsets[8]     = { 0, 1, 2, 3, 4, 5, 6, 7 };
+static INT32 IsgsmTileYOffsets[8]     = { 0, 8, 16, 24, 32, 40, 48, 56 };
+
+static struct BurnDIPInfo ShinfzDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xfc, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+	{0x15, 0xff, 0xff, 0x00, NULL                                 },
+
+	// Dip 1
+	{0   , 0xfe, 0   , 2   , "Cabinet"                            },
+	{0x13, 0x01, 0x01, 0x00, "Upright"                            },
+	{0x13, 0x01, 0x01, 0x01, "Cocktail"                           },
+	
+	{0   , 0xfe, 0   , 4   , "Lives"                              },
+	{0x13, 0x01, 0x0c, 0x08, "2"                                  },
+	{0x13, 0x01, 0x0c, 0x0c, "3"                                  },
+	{0x13, 0x01, 0x0c, 0x04, "4"                                  },
+	{0x13, 0x01, 0x0c, 0x00, "240"                                },
+	
+	{0   , 0xfe, 0   , 4   , "Extra Ship Cost"                    },
+	{0x13, 0x01, 0x30, 0x30, "5000"                               },
+	{0x13, 0x01, 0x30, 0x20, "10000"                              },
+	{0x13, 0x01, 0x30, 0x10, "15000"                              },
+	{0x13, 0x01, 0x30, 0x00, "20000"                              },
+	
+	{0   , 0xfe, 0   , 2   , "Difficulty"                         },
+	{0x13, 0x01, 0xc0, 0x80, "Easy"                               },
+	{0x13, 0x01, 0xc0, 0xc0, "Normal"                             },
+	{0x13, 0x01, 0xc0, 0x40, "Hard"                               },
+	{0x13, 0x01, 0xc0, 0x00, "Hardest"                            },
+		
+	// Dip 2
+	
+	// Dip 3
+	{0   , 0xfe, 0   , 3   , "Game Select"                        },
+	{0x15, 0x01, 0x03, 0x00, "Shinobi Ninja Game"                 },
+	{0x15, 0x01, 0x03, 0x01, "FZ-2006 Game I"                     },
+	{0x15, 0x01, 0x03, 0x02, "FZ-2006 Game II"                    },
+};
+
+STDDIPINFO(Shinfz)
+
+static struct BurnDIPInfo TetrbxDIPList[]=
+{
+	// Default Values
+	{0x13, 0xff, 0xff, 0xff, NULL                                 },
+	{0x14, 0xff, 0xff, 0xff, NULL                                 },
+	{0x15, 0xff, 0xff, 0x00, NULL                                 },
+
+	// Dip 1
+			
+	// Dip 2
+	
+	// Dip 3
+	{0   , 0xfe, 0   , 3   , "Game Select"                        },
+	{0x15, 0x01, 0x03, 0x00, "Tetris"                             },
+	{0x15, 0x01, 0x03, 0x01, "Tetris II (Blox)"                   },
+	{0x15, 0x01, 0x03, 0x02, "Tetris Turbo"                       },
+};
+
+STDDIPINFO(Tetrbx)
+
+static struct BurnRomInfo emptyRomDesc[] = {
+	{ "",                    0,          0, 0 },
+};
+
+static struct BurnRomInfo IsgsmRomDesc[] = {
+	{ "ism2006v00.u1",  0x020000, 0x2292585c, BRF_ESS | BRF_PRG | BRF_BIOS },
+};
+
+STD_ROM_PICK(Isgsm)
+STD_ROM_FN(Isgsm)
+
+static struct BurnRomInfo ShinfzRomDesc[] = {
+	{ "shin06.u13",     0x200000, 0x39d773e9, BRF_ESS | BRF_PRG },
+};
+
+STDROMPICKEXT(Shinfz, Shinfz, Isgsm)
+STD_ROM_FN(Shinfz)
+
+static struct BurnRomInfo TetrbxRomDesc[] = {
+	{ "tetr06.u13",     0x080000, 0x884dd693, BRF_ESS | BRF_PRG },
+};
+
+STDROMPICKEXT(Tetrbx, Tetrbx, Isgsm)
+STD_ROM_FN(Tetrbx)
+
+static UINT32 ShinfzSecurity(UINT32 input)
+{
+	return BITSWAP32(input, 19, 20, 25, 26, 15, 0, 16, 2, 8, 9, 13, 14, 31, 21, 7, 18, 11, 30, 22, 17, 3, 4, 12, 28, 29, 5, 27, 10, 23, 24, 1, 6);
+}
+
+static UINT32 TetrbxSecurity(UINT32 input)
+{
+	return input;
+}
+
+UINT8 __fastcall IsgsmReadByte(UINT32 a)
+{
+	switch (a) {
+		case 0xc41001: {
+			return 0xff - System16Input[0];
+		}
+		
+		case 0xc41003: {
+			return 0xff - System16Input[1];
+		}
+		
+		case 0xc41007: {
+			return 0xff - System16Input[2];
+		}
+		
+		case 0xc42001: {
+			return System16Dip[0];
+		}
+
+		case 0xc42003: {
+			return System16Dip[1];
+		}
+		
+		case 0xe80001: {
+			UINT32 Address;
+			UINT8 Data;
+			
+			IsgsmCartAddr++;
+			Address = (IsgsmCartAddr & (nCartSize - 1));
+			Data = System16Rom[(0x100000 + Address) ^ 1] ^ IsgsmReadXor;
+			
+			return Data;
+		}
+		
+		case 0xe80003: {
+			return System16Dip[2];
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Read Byte -> 0x%06X\n"), a);
+#endif
+
+	return 0xff;
+}
+
+void __fastcall IsgsmWriteByte(UINT32 a, UINT8 d)
+{
+	if (a >= 0x400000 && a <= 0x40ffff) {
+		System16BTileByteWrite((a - 0x400000) ^ 1, d);
+		return;
+	}
+	
+	switch (a) {
+		case 0x3f0001: {
+			if (System16TileBanks[0] != (d & 0x07)) {
+				System16TileBanks[0] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3f0003: {
+			if (System16TileBanks[1] != (d & 0x07)) {
+				System16TileBanks[1] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3f2001: {
+			if (System16TileBanks[0] != (d & 0x07)) {
+				System16TileBanks[0] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0x3f2003: {
+			if (System16TileBanks[1] != (d & 0x07)) {
+				System16TileBanks[1] = d & 0x07;
+				System16RecalcBgTileMap = 1;
+				System16RecalcBgAltTileMap = 1;
+				System16RecalcFgTileMap = 1;
+				System16RecalcFgAltTileMap = 1;
+			}
+			return;
+		}
+		
+		case 0xc40001: {
+			System16VideoEnable = d & 0x20;
+			System16ScreenFlip = d & 0x40;
+			return;
+		}
+		
+		case 0xc43001: {
+			// ????
+			return;
+		}
+		
+		case 0xe00001: {
+			UINT8 *pDest = 0;
+			int AddressMask = 0;
+			
+			switch (IsgsmType & 0x0f) {
+				case 0x00: {
+					pDest = System16Sprites;
+					AddressMask = 0x1fffff;
+					break;
+				}
+
+				case 0x01: {
+					pDest = System16TempGfx;
+					AddressMask = 0xfffff;
+					break;
+				}
+
+				case 0x02: {
+					pDest = System16Z80Rom;
+					AddressMask = 0x3ffff;
+					break;
+				}
+
+				case 0x03: {
+					pDest = System16Rom + 0x300000;
+					AddressMask = 0xfffff;
+					break;
+				}
+			}
+
+			if ((IsgsmType & 0x10) == 0x00) {
+				switch (IsgsmType & 0xe0) {
+					case 0x00: d = BITSWAP08(d, 0, 7, 6, 5, 4, 3, 2, 1); break;
+					case 0x20: d = BITSWAP08(d, 7, 6, 5, 4, 3, 2, 1, 0); break;
+					case 0x40: d = BITSWAP08(d, 6, 5, 4, 3, 2, 1, 0, 7); break;
+					case 0x60: d = BITSWAP08(d, 5, 4, 3, 2, 1, 0, 7, 6); break;
+					case 0x80: d = BITSWAP08(d, 4, 3, 2, 1, 0, 7, 6, 5); break;
+					case 0xa0: d = BITSWAP08(d, 3, 2, 1, 0, 7, 6, 5, 4); break;
+					case 0xc0: d = BITSWAP08(d, 2, 1, 0, 7, 6, 5, 4, 3); break;
+					case 0xe0: d = BITSWAP08(d, 1, 0, 7, 6, 5, 4, 3, 2); break;
+				}
+			}
+
+			if (pDest) {
+				INT32 BytesToWrite;
+				BytesToWrite = 1;
+
+				if (IsgsmMode & 0x04) {
+					if (!IsgsmRleLatched)	{
+						if (IsgsmRleControlPosition == 8) {
+							IsgsmRleControlByte = d;
+							IsgsmRleControlPosition = 0;
+							BytesToWrite = 0;
+						} else {
+							if (((IsgsmRleControlByte << IsgsmRleControlPosition) & 0x80) == 0) {
+								IsgsmRleByte = d;
+								IsgsmRleLatched = 1;
+							} else {
+								BytesToWrite = 1;
+							}
+
+							IsgsmRleControlPosition++;
+						}
+					} else {
+						IsgsmRleLatched = 0;
+						BytesToWrite = d + 2;
+						d = IsgsmRleByte;
+					}
+				}
+
+				for (INT32 i = 0; i < BytesToWrite; i++) {
+					UINT8 Byte = 0;
+
+					if (IsgsmMode & 0x08) {
+						IsgsmAddr++;
+						IsgsmAddr &= 0xfffffff;
+					} else {
+						IsgsmAddr--;
+						IsgsmAddr &= 0xfffffff;
+					}
+					
+					switch (IsgsmMode & 0x03) {
+						case 0x00: Byte = d; break;
+						case 0x01: Byte = pDest[IsgsmAddr & AddressMask] ^ d; break;
+						case 0x02: Byte = pDest[IsgsmAddr & AddressMask] | d; break;
+						case 0x03: Byte = pDest[IsgsmAddr & AddressMask] & d; break;
+					}
+
+					if ((IsgsmType & 0x10) == 0x10) {
+						switch (IsgsmType & 0xe0) {
+							case 0x00: Byte = BITSWAP08(Byte, 0, 7, 6, 5, 4, 3, 2, 1); break;
+							case 0x20: Byte = BITSWAP08(Byte, 7, 6, 5, 4, 3, 2, 1, 0); break;
+							case 0x40: Byte = BITSWAP08(Byte, 6, 5, 4, 3, 2, 1, 0, 7); break;
+							case 0x60: Byte = BITSWAP08(Byte, 5, 4, 3, 2, 1, 0, 7, 6); break;
+							case 0x80: Byte = BITSWAP08(Byte, 4, 3, 2, 1, 0, 7, 6, 5); break;
+							case 0xa0: Byte = BITSWAP08(Byte, 3, 2, 1, 0, 7, 6, 5, 4); break;
+							case 0xc0: Byte = BITSWAP08(Byte, 2, 1, 0, 7, 6, 5, 4, 3); break;
+							case 0xe0: Byte = BITSWAP08(Byte, 1, 0, 7, 6, 5, 4, 3, 2); break;
+						}
+					}
+					
+					if ((IsgsmType & 0x0f) == 0x01) {
+						if (IsgsmAddr < System16TileRomSize) {
+							pDest[IsgsmAddr] = Byte;
+							GfxDecodeSingle((IsgsmAddr & 0x1ffff) / 8, 3, 8, 8, IsgsmTilePlaneOffsets, IsgsmTileXOffsets, IsgsmTileYOffsets, 0x40, System16TempGfx, System16Tiles);
+						}
+					} else {
+						pDest[IsgsmAddr & AddressMask] = Byte;
+					}
+				}
+			}
+			
+			return;
+		}
+		
+		case 0xe00003: {
+			IsgsmType = d;
+			return;
+		}
+		
+		case 0xfe0007: {
+			System16SoundLatch = d & 0xff;
+			ZetOpen(0);
+			ZetSetIRQLine(0, CPU_IRQSTATUS_ACK);
+			ZetClose();
+			return;
+		}
+		
+		case 0xfe0009: {
+			if (d == 0) {
+				ZetOpen(0);
+				ZetReset();
+				ZetClose();
+				System16Z80Enable = true;
+			}
+			
+			if (d == 1) {
+				ZetOpen(0);
+				ZetReset();
+				ZetClose();
+				System16Z80Enable = false;
+			}
+			
+			return;
+		}
+		
+		case 0xfe000b: {
+			SekMapMemory(System16Rom + 0x300000, 0x000000, 0x0fffff, MAP_ROM);
+			GameRomMapped = 1;
+			return;
+		}
+	}
+
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Byte -> 0x%06X, 0x%02X\n"), a, d);
+#endif
+}
+
+UINT16 __fastcall IsgsmReadWord(UINT32 a)
+{
+	switch (a) {
+		case 0xe80008: {
+			return (IsgsmSecurity >> 16) & 0xffff;
+		}
+		
+		case 0xe8000a: {
+			return IsgsmSecurity & 0xffff;
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Read Word -> 0x%06X\n"), a);
+#endif
+
+	return 0xffff;
+}
+
+void __fastcall IsgsmWriteWord(UINT32 a, UINT16 d)
+{
+	if (a >= 0x400000 && a <= 0x40ffff) {
+		System16BTileWordWrite(a - 0x400000, d);
+		return;
+	}
+	
+	switch (a) {
+		case 0xe00004: {
+			IsgsmAddrLatch = d;
+			return;
+		}
+		
+		case 0xe00006: {
+			IsgsmMode = (IsgsmAddrLatch & 0xf000) >> 12;
+			IsgsmAddr = d | ((IsgsmAddrLatch & 0x0fff) << 16);
+
+			IsgsmRleControlPosition = 8;
+			IsgsmRleControlByte = 0;
+			IsgsmRleLatched = 0;
+			return;
+		}
+		
+		case 0xe80004: {
+			IsgsmCartAddrLatch = d;
+			return;
+		}
+		
+		case 0xe80006: {
+			IsgsmCartAddr = d | IsgsmCartAddrLatch << 16;
+			return;
+		}
+		
+		case 0xe80008: {
+			IsgsmSecurityLatch = d;
+			return;
+		}
+		
+		case 0xe8000a: {
+			IsgsmSecurity = d | IsgsmSecurityLatch << 16;
+			if (IsgsmSecurityCallback) IsgsmSecurity = IsgsmSecurityCallback(IsgsmSecurity);
+			return;
+		}
+	}
+	
+#if 0 && defined FBNEO_DEBUG
+	bprintf(PRINT_NORMAL, _T("68000 Write Word -> 0x%06X, 0x%04X\n"), a, d);
+#endif
+}
+
+static void IsgsmMap68K()
+{
+	SekInit(0, 0x68000);
+	SekOpen(0);
+	SekMapMemory(System16Rom            , 0x000000, 0x0fffff, MAP_ROM);
+	SekMapMemory(System16ExtraRam       , 0x200000, 0x23ffff, MAP_RAM);
+	SekMapMemory(System16TileRam        , 0x400000, 0x40ffff, MAP_READ);
+	SekMapMemory(System16TextRam        , 0x410000, 0x410fff, MAP_RAM);
+	SekMapMemory(System16SpriteRam      , 0x440000, 0x4407ff, MAP_RAM);
+	SekMapMemory(System16PaletteRam     , 0x840000, 0x840fff, MAP_RAM);
+	SekMapMemory(System16Rom + 0x100000 , 0xee0000, 0xefffff, MAP_ROM);
+	SekMapMemory(System16Ram            , 0xffc000, 0xffffff, MAP_RAM);
+	SekSetReadWordHandler(0, IsgsmReadWord);
+	SekSetWriteWordHandler(0, IsgsmWriteWord);
+	SekSetReadByteHandler(0, IsgsmReadByte);
+	SekSetWriteByteHandler(0, IsgsmWriteByte);
+	SekClose();
+}
+
+static INT32 IsgsmInit()
+{
+	System16RomSize        = 0x400000;
+	System16TileRomSize    = 0x60000;
+	System16SpriteRomSize  = 0x200000;
+	System16UPD7759DataSize = 0x30000;
+	
+	System16Map68KDo = IsgsmMap68K;
+	
+	INT32 nRet = System16Init();
+	
+	if (!nRet) {
+		memset(System16Rom, 0, 0x400000);
+		
+		// Load and Decrypt BIOS
+		UINT16 *pTemp = (UINT16*)BurnMalloc(0x20000);
+		memset(pTemp, 0, 0x20000);
+		UINT16 *Rom = (UINT16*)System16Rom;
+		
+		nRet = BurnLoadRom(System16Rom, 0x80, 1); if (nRet) return 1;
+		
+		for (UINT32 i = 0; i < 0x10000; i++) {
+			pTemp[i ^ 0x4127] = BITSWAP16(Rom[i], 6, 14, 4, 2, 12, 10, 8, 0, 1, 9, 11, 13, 3, 5, 7, 15);
+		}
+		
+		memcpy(Rom, pTemp, 0x20000);
+		BurnFree(pTemp);
+		
+		// Load program ROM
+		nRet = BurnLoadRom(System16Rom + 0x100000, 0, 1); if (nRet) return 1;
+		
+		System16TempGfx = (UINT8*)BurnMalloc(System16TileRomSize);
+		memset(System16TempGfx, 0, System16TileRomSize);
+		memset(System16Tiles, 0, System16NumTiles * 8 * 8);
+		memset(System16Sprites, 0, System16TileRomSize);
+		
+		System16UPD7759Data = (UINT8*)(System16Z80Rom + 0x10000);
+	}
+	
+	System16ClockSpeed = 16000000;
+
+	return nRet;
+}
+
+static INT32 ShinfzInit()
+{
+	INT32 nRet = IsgsmInit();
+	
+	if (!nRet) {
+		nCartSize = 0x200000;
+		UINT16 *pTemp = (UINT16*)BurnMalloc(0x200000);
+		memset(pTemp, 0, 0x200000);
+		UINT16 *Rom = (UINT16*)(System16Rom + 0x100000);
+		
+		for (UINT32 i = 0; i < 0x100000; i++) {
+			pTemp[i ^ 0x68956] = BITSWAP16(Rom[i], 8, 4, 12, 3, 6, 7, 1, 0, 15, 11, 5, 14, 10, 2, 9, 13);
+		}
+		
+		memcpy(Rom, pTemp, 0x200000);
+		BurnFree(pTemp);
+		
+		IsgsmReadXor = 0x66;
+		IsgsmSecurityCallback = ShinfzSecurity;
+	}
+
+	return nRet;
+}
+
+static INT32 TetrbxInit()
+{
+	INT32 nRet = IsgsmInit();
+	
+	if (!nRet) {
+		nCartSize = 0x80000;
+		UINT16 *pTemp = (UINT16*)BurnMalloc(nCartSize);
+		memset(pTemp, 0, nCartSize);
+		UINT16 *Rom = (UINT16*)(System16Rom + 0x100000);
+		
+		for (UINT32 i = 0; i < nCartSize >> 1; i++) {
+			pTemp[i ^ 0x2a6e6] = BITSWAP16(Rom[i], 4, 0, 12, 5, 7, 3, 1, 14, 10, 11, 9, 6, 15, 2, 13, 8);
+		}
+		
+		memcpy(Rom, pTemp, nCartSize);
+		BurnFree(pTemp);
+		
+		IsgsmReadXor = 0x73;
+		IsgsmSecurityCallback = TetrbxSecurity;
+	}
+
+	return nRet;
+}
+
+static INT32 IsgsmExit()
+{
+	INT32 nRet = System16Exit();
+	
+	BurnFree(System16TempGfx);
+	
+	IsgsmCartAddrLatch = 0;
+	IsgsmCartAddr = 0;
+	IsgsmType = 0;
+	IsgsmAddr = 0;
+	IsgsmMode = 0;
+	IsgsmAddrLatch = 0;
+	IsgsmSecurity = 0;
+	IsgsmSecurityLatch = 0;
+	IsgsmRleControlPosition = 0;
+	IsgsmRleControlByte = 0;
+	IsgsmRleLatched = 0;
+	IsgsmRleByte = 0;
+	IsgsmReadXor = 0;
+	nCartSize = 0;
+	IsgsmSecurityCallback = NULL;
+	GameRomMapped = 0;
+	
+	return nRet;
+}
+
+static INT32 IsgsmScan(INT32 nAction,INT32 *pnMin)
+{
+	if (pnMin != NULL) {
+		*pnMin =  0x029719;
+	}
+	
+	struct BurnArea ba;
+	
+	if (nAction & ACB_DRIVER_DATA) {
+		memset(&ba, 0, sizeof(ba));
+		ba.Data		= System16Sprites;
+		ba.nLen		= System16SpriteRomSize - 1;
+		ba.nAddress = 0;
+		ba.szName	= "SpriteROM";
+		BurnAcb(&ba);
+		
+		memset(&ba, 0, sizeof(ba));
+		ba.Data		= System16TempGfx;
+		ba.nLen		= System16TileRomSize - 1;
+		ba.nAddress = 0;
+		ba.szName	= "TileROM";
+		BurnAcb(&ba);
+		
+		memset(&ba, 0, sizeof(ba));
+		ba.Data		= System16Z80Rom;
+		ba.nLen		= 0x3ffff;
+		ba.nAddress = 0;
+		ba.szName	= "Z80ROM";
+		BurnAcb(&ba);
+		
+		memset(&ba, 0, sizeof(ba));
+		ba.Data		= System16Rom + 0x300000;
+		ba.nLen		= 0xfffff;
+		ba.nAddress = 0;
+		ba.szName	= "GameROM";
+		BurnAcb(&ba);
+		
+		SCAN_VAR(IsgsmCartAddrLatch);
+		SCAN_VAR(IsgsmCartAddr);
+		SCAN_VAR(IsgsmType);
+		SCAN_VAR(IsgsmAddr);
+		SCAN_VAR(IsgsmMode);
+		SCAN_VAR(IsgsmAddrLatch);
+		SCAN_VAR(IsgsmSecurity);
+		SCAN_VAR(IsgsmSecurityLatch);
+		SCAN_VAR(IsgsmRleControlPosition);
+		SCAN_VAR(IsgsmRleControlByte);
+		SCAN_VAR(IsgsmRleLatched);
+		SCAN_VAR(IsgsmRleByte);
+		SCAN_VAR(GameRomMapped);
+		
+		if (nAction & ACB_WRITE) {
+			if (GameRomMapped) {
+				SekOpen(0);
+				SekMapMemory(System16Rom + 0x300000, 0x000000, 0x0fffff, MAP_ROM);
+				SekClose();
+			}
+			
+			for (UINT32 i = 0; i < System16TileRomSize; i++) {
+				GfxDecodeSingle((i & 0x1ffff) / 8, 3, 8, 8, IsgsmTilePlaneOffsets, IsgsmTileXOffsets, IsgsmTileYOffsets, 0x40, System16TempGfx, System16Tiles);
+			}
+		}
+	}
+
+	return System16Scan(nAction, pnMin);
+}
+
+struct BurnDriver BurnDrvIsgsm = {
+	"isgsm", NULL, NULL, NULL, "2006",
+	"ISG Selection Master Type 2006 System BIOS\0", "BIOS only", "ISG", "ISG Selection Master Type 2006",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING | BDF_BOARDROM, 0, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_BIOS, 0,
+	NULL, IsgsmRomInfo, IsgsmRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, NULL,
+	IsgsmInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvShinfz = {
+	"shinfz", NULL, "isgsm", NULL, "2006",
+	"Shinobi / FZ-2006 (Korean System 16 bootleg) (ISG Selection Master Type 2006)\0", NULL, "ISG", "ISG Selection Master Type 2006",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, ShinfzRomInfo, ShinfzRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, ShinfzDIPInfo,
+	ShinfzInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
+
+struct BurnDriver BurnDrvTetrbx = {
+	"tetrbx", NULL, "isgsm", NULL, "2006",
+	"Tetris / Bloxeed (Korean System 16 bootleg) (ISG Selection Master Type 2006)\0", NULL, "ISG", "ISG Selection Master Type 2006",
+	NULL, NULL, NULL, NULL,
+	BDF_GAME_WORKING, 2, HARDWARE_SEGA_SYSTEM16B | HARDWARE_SEGA_ISGSM | HARDWARE_SEGA_5521, GBF_SCRFIGHT, 0,
+	NULL, TetrbxRomInfo, TetrbxRomName, NULL, NULL, NULL, NULL, System16bDip3InputInfo, TetrbxDIPInfo,
+	TetrbxInit, IsgsmExit, System16BFrame, System16BRender, IsgsmScan,
+	NULL, 0x1800, 320, 224, 4, 3
+};
diff --git a/src/burner/win32/neocdlist.cpp b/src/burner/win32/neocdlist.cpp
index 555f1d751..991708296 100644
--- a/src/burner/win32/neocdlist.cpp
+++ b/src/burner/win32/neocdlist.cpp
@@ -43,6 +43,7 @@ struct NGCDGAME games[] =
 	{ _T("bstars2")		, _T("Baseball Stars 2")									, _T("1992")	, _T("SNK")					, 0x0041 },		//
 	{ _T("3countb")		, _T("3 Count Bout / Fire Suplex")							, _T("1995")	, _T("SNK")					, 0x0043 },		//
 	{ _T("aof")			, _T("Art of Fighting / Ryuuko no Ken")						, _T("1994")	, _T("SNK")					, 0x0044 },		//
+	{ _T("aofk")		, _T("Art of Fighting / Ryuuko no Ken (Korean, Hack)")		, _T("1994")	, _T("SNK")					, 0x5044 },		//
 	{ _T("samsho")		, _T("Samurai Shodown / Samurai Spirits")					, _T("1993")	, _T("SNK")					, 0x0045 },		//
 	{ _T("tophuntr")	, _T("Top Hunter - Roddy & Cathy")							, _T("1994")	, _T("SNK")					, 0x0046 },		//
 	{ _T("fatfury2")	, _T("Fatal Fury 2 / Garou Densetsu 2 - Aratanaru Tatakai")	, _T("1994")	, _T("SNK")					, 0x0047 },		//
@@ -76,6 +77,7 @@ struct NGCDGAME games[] =
 	{ _T("pbobblen")	, _T("Puzzle Bobble / Bust-A-Move")							, _T("1994")	, _T("SNK")					, 0x0083 },		//
 	{ _T("kof95")		, _T("The King of Fighters '95 (JP-US)")					, _T("1995")	, _T("SNK")					, 0x0084 },		//
 	{ _T("kof95r1")		, _T("The King of Fighters '95 (JP-US)(Rev 1)")				, _T("1995")	, _T("SNK")					, 0x1084 },		//
+	{ _T("kof95k")		, _T("The King of Fighters '95 (Korean, Hack)")				, _T("1995")	, _T("SNK")					, 0x5084 },		//
 	{ _T("ssrpg")		, _T("Shinsetsu Samurai Spirits - Bushidohretsuden")		, _T("1997")	, _T("SNK")					, 0x0085 },		//
 	{ _T("samsho3")		, _T("Samurai Shodown 3 / Samurai Spirits 3")				, _T("1995")	, _T("SNK")					, 0x0087 },		//
 	{ _T("stakwin")		, _T("Stakes Winner - GI Kanzen Seiha Heno Machi")			, _T("1995")	, _T("Saurus")				, 0x0088 },		//
@@ -107,6 +109,7 @@ struct NGCDGAME games[] =
 	{ _T("kof96ngc")	, _T("The King of Fighters '96 NEOGEO Collection")			, _T("1996")	, _T("SNK")					, 0x0229 },		//
 	{ _T("breakers")	, _T("Breakers")											, _T("1996")	, _T("Visco")				, 0x0230 },		//
 	{ _T("kof97")		, _T("The King of Fighters '97")							, _T("1997")	, _T("SNK")					, 0x0232 },		//
+	{ _T("kof97b")		, _T("The King of Fighters '97 (Boss Hack)")				, _T("1997")	, _T("SNK")					, 0x5232 },		//
 	{ _T("lastblad")	, _T("The Last Blade / Bakumatsu Roman - Gekka no Kenshi")	, _T("1997")	, _T("SNK")					, 0x0234 },		//
 	{ _T("rbff2")		, _T("Real Bout Fatal Fury 2 / Garou Densetsu 2 - Aratanaru Tatakai"), _T("1998"), _T("SNK")			, 0x0240 },		//
 	{ _T("mslug2")		, _T("Metal Slug 2 - Super Vehicle-001/II")					, _T("1998")	, _T("SNK")					, 0x0241 },		//
diff --git a/src/dep/generated/driverlist.h b/src/dep/generated/driverlist.h
index b737bb88a..3c0db339c 100644
--- a/src/dep/generated/driverlist.h
+++ b/src/dep/generated/driverlist.h
@@ -1,4 +1,4 @@
-// This file was generated by ../../dep/scripts/gamelist.pl (perl 5.030003)
+// This file was generated by gamelist.pl (perl 5.026001)
 
 // Declaration of all drivers
 #define DRV extern struct BurnDriver
@@ -474,7 +474,6 @@ DRV		BurnDrvtg_acrush;
 DRV		BurnSpecAlienevolution;
 DRV		BurnSpecAliengirldemo;
 DRV		BurnDrvAlinvade;
-DRV		BurnDrvCHF_alieninv;
 DRV		BurnDrvalienres;
 DRV		BurnDrvAliensec;
 DRV		BurnDrvmd_aliensol;
@@ -533,6 +532,7 @@ DRV		BurnSpecAliensneo;
 DRV		BurnSpecAliensuk;
 DRV		BurnSpecAliensus;
 DRV		BurnDrvmd_alisiad;
+DRV		BurnDrvmd_alisiadk;
 DRV		BurnDrvmd_alisiads;
 DRV		BurnDrvmd_alisiadj;
 DRV		BurnDrvmd_alisiadu;
@@ -781,15 +781,19 @@ DRV		BurnDrvmd_arrows;
 DRV		BurnDrvmd_arrowp;
 DRV		BurnDrvmd_arrow;
 DRV		BurnDrvmd_artalive;
+DRV		BurnDrvAofb;
 DRV		BurnDrvmd_aof;
 DRV		BurnDrvmd_aofec;
 DRV		BurnDrvmd_aofs;
+DRV		BurnDrvAofk;
 DRV		BurnDrvmd_aofp;
 DRV		BurnDrvmd_aofu;
 DRV		BurnDrvAof;
+DRV		BurnDrvAof2b;
 DRV		BurnDrvAof2bh;
 DRV		BurnDrvAof2a;
 DRV		BurnDrvAof2;
+DRV		BurnDrvAof3b;
 DRV		BurnDrvAof3k;
 DRV		BurnDrvAof3bh;
 DRV		BurnDrvAof3;
@@ -1028,7 +1032,6 @@ DRV		BurnDrvBackfire;
 #if defined FBNEO_DEBUG
 DRV		BurnDrvBackfirea;		// Set inputs to \"Joystick\" in test mode [NOT WORKING]
 #endif
-DRV		BurnDrvCHF_backgamm;
 DRV		BurnDrvmd_badapple;
 DRV		BurnDrvnes_badapple;
 DRV		BurnDrvsms_badapple;
@@ -1092,6 +1095,7 @@ DRV		BurnDrvnes_bandikinancchi;
 DRV		BurnSpecBandito;
 DRV		BurnDrvBangball;
 DRV		BurnDrvb2b;
+DRV		BurnDrvbangbnd;
 DRV		BurnDrvbangbedp;
 DRV		BurnDrvbangbead;
 DRV		BurnDrvBang;
@@ -1151,7 +1155,6 @@ DRV		BurnDrvBstars2;
 DRV		BurnDrvnes_basebstaii;
 DRV		BurnDrvBstarsh;
 DRV		BurnDrvBstars;
-DRV		BurnDrvCHF_baseball;
 DRV		BurnDrvnes_basesloaded;
 DRV		BurnDrvnes_basesloaded3;
 DRV		BurnDrvnes_basesloaded4;
@@ -1230,6 +1233,7 @@ DRV		BurnDrvBattlex;
 DRV		BurnDrvBcruzm12;
 DRV		BurnDrvBtlfieldb;
 DRV		BurnDrvBtlfield;
+DRV		BurnDrvflipshtk;
 DRV		BurnDrvflipshot;
 DRV		BurnDrvnes_battleformula;
 DRV		BurnDrvBgareghk;
@@ -1480,6 +1484,7 @@ DRV		BurnDrvsms_blackblt;
 DRV		BurnDrvnes_blackboxcha;
 DRV		BurnDrvBlkdrgonb;
 DRV		BurnDrvBlkdrgon;
+DRV		BurnDrvBlkdrgnk;
 DRV		BurnDrvBlkheartj;
 DRV		BurnDrvBlkheart;
 DRV		BurnDrvnes_blackhol;
@@ -1775,7 +1780,6 @@ DRV		BurnSpecbounder;
 DRV		BurnDrvMSX_bounder;
 DRV		BurnSpecBountyhunter;
 DRV		BurnDrvBowlrama;
-DRV		BurnDrvCHF_bowling;
 DRV		BurnDrvnes_bowsette2;
 DRV		BurnSpecBoxreload;
 DRV		BurnDrvmd_boxinglg;
@@ -1803,6 +1807,8 @@ DRV		BurnDrvMSX_breakout;
 DRV		BurnDrvMSX_breakoutt;
 DRV		BurnDrvBrkthru;
 DRV		BurnDrvMSX_breaker;
+DRV		BurnDrvbreakerb;
+DRV		BurnDrvbreakreb;
 DRV		BurnDrvbreakrevbh;
 DRV		BurnDrvbrkrevext;
 DRV		BurnDrvbreakrev;
@@ -2143,6 +2149,7 @@ DRV		BurnDrvCpsCaptcommu;
 DRV		BurnDrvCpsCaptcommr1;
 DRV		BurnDrvCpsCaptcommj;
 DRV		BurnDrvCpsCaptcomm;
+DRV		BurnDrvCpsCaptcommv4;
 DRV		BurnDrvCpsCaptcommb;
 DRV		BurnDrvCpsCaptcommb2;
 DRV		BurnDrvCpsCaptcommb3;
@@ -2211,7 +2218,6 @@ DRV		BurnDrvsms_casinoc;
 DRV		BurnDrvsms_casino;
 DRV		BurnDrvnes_casinokid;
 DRV		BurnDrvnes_casinokid2;
-DRV		BurnDrvCHF_casinop;
 DRV		BurnDrvMSX_wrldopen;
 DRV		BurnDrvMSX_wrldopenk;
 DRV		BurnSpecCastaway;
@@ -2354,8 +2360,6 @@ DRV		BurnDrvChkun;
 DRV		BurnDrvCairblad;
 DRV		BurnDrvChangesa;
 DRV		BurnDrvChanges;
-DRV		BurnDrvCHF_multicrt;
-DRV		BurnDrvCHF_multicrto;
 DRV		BurnDrvmd_cjfuweng;
 DRV		Burnmd_Chaojimah;
 DRV		Burnmd_Chaojipok;
@@ -2391,7 +2395,6 @@ DRV		BurnDrvMSX_cheatwives;
 DRV		BurnDrvCheckmanj;
 DRV		BurnDrvCheckman;
 DRV		BurnDrvMSX_tantan;
-DRV		BurnDrvCHF_checkers;
 DRV		BurnDrvCheekyms;
 DRV		BurnDrvgg_cheese;
 DRV		BurnDrvmd_cheese;
@@ -2693,7 +2696,6 @@ DRV		BurnDrvsms_colors;
 DRV		BurnDrvMSX_colball;
 DRV		BurnDrvMSX_colballb;
 DRV		BurnDrvMSX_colballa;
-DRV		BurnDrvCHF_clrorgan;
 DRV		BurnSpecColoristic;
 DRV		BurnDrvMSX_colt36;
 DRV		BurnDrvgg_columns;
@@ -2817,6 +2819,7 @@ DRV		BurnDrvmd_contras;
 DRV		BurnDrvmd_contra;
 DRV		BurnDrvnes_contrredfalwar;
 DRV		BurnDrvnes_contrrevredfal;
+DRV		BurnDrvmd_contrak;
 DRV		BurnDrvmd_contraj;
 DRV		BurnDrvnes_contra168in1;
 DRV		BurnDrvnes_contraforcec;
@@ -3366,8 +3369,6 @@ DRV		BurnDrvDeluxe4u;
 DRV		BurnDrvDeluxe5;
 DRV		BurnDrvDeluxe5a;
 DRV		BurnDrvDeluxe5b;
-DRV		BurnDrvCHF_democrt1;
-DRV		BurnDrvCHF_democrt2;
 DRV		BurnDrvDemoderbc;
 DRV		BurnDrvDemoderm;
 DRV		BurnDrvDemoderb;
@@ -3418,7 +3419,6 @@ DRV		BurnDrvmd_desrtdemp4;
 DRV		BurnDrvmd_desrtdemp3;
 DRV		BurnDrvmd_desrtdemp2;
 DRV		BurnDrvmd_desrtdemp1;
-DRV		BurnDrvCHF_dsrtfox;
 DRV		BurnDrvgg_desert;
 DRV		BurnDrvsms_desert;
 DRV		BurnDrvgg_desertu;
@@ -3631,7 +3631,6 @@ DRV		BurnDrvDjboy;
 DRV		BurnSpecDjpuff;
 DRV		BurnDrvDorunrun;
 DRV		BurnDrvDockman;
-DRV		BurnDrvCHF_dodgeit;
 DRV		BurnDrvDodgeman;
 DRV		BurnDrvMSX_dgnraven;
 DRV		BurnDrvDoDonpachia;
@@ -3873,7 +3872,6 @@ DRV		BurnDrvnes_dracsnightout;
 DRV		BurnDrvMSX_draconic;
 DRV		BurnSpecDraconus;
 DRV		BurnDrvfds_dracuii;
-DRV		BurnDrvCHF_dragrace;
 DRV		BurnDrvgg_dragon;
 DRV		BurnDrvmd_dragon;
 DRV		BurnDrvsms_dragon;
@@ -4007,7 +4005,6 @@ DRV		BurnDrvKeithlcy;
 #if defined FBNEO_DEBUG
 DRV		BurnDrvDpoker;			// no comment [NOT WORKING]
 #endif
-DRV		BurnDrvCHF_drawpkr;
 DRV		BurnDrvDreambal;
 DRV		BurnDrvDland;
 DRV		BurnDrvdremshpr;
@@ -4091,6 +4088,7 @@ DRV		BurnDrvCpsDdsomr1;
 DRV		BurnDrvCpsDdsomh;
 DRV		BurnDrvCpsDdsomjr2;
 DRV		BurnDrvCpsDdsoma;
+DRV		BurnDrvCpsDdsomav4;
 DRV		BurnDrvCpsDdsom;
 DRV		BurnDrvCpsDdsomj;
 DRV		BurnDrvCpsDdsomud;
@@ -4277,11 +4275,13 @@ DRV		BurnDrvEightman;
 DRV		BurnDrvEfdt;
 DRV		BurnDrvMSX_sideral;
 DRV		BurnDrvMSX_mundoper;
+DRV		BurnDrvmd_elvientok;
 DRV		BurnDrvmd_elvientos;
 DRV		BurnDrvmd_elvientoj;
 DRV		BurnDrvmd_elviento;
 DRV		BurnDrvfds_electrician1;
 DRV		BurnDrvfds_electrician;
+DRV		BurnDrvmd_elemastk;
 DRV		BurnDrvmd_elemastj;
 DRV		BurnDrvmd_elemast;
 DRV		BurnDrvElevator;
@@ -4439,6 +4439,7 @@ DRV		BurnDrvMSX_exerion2a;
 DRV		BurnDrvExerizrb;
 DRV		BurnDrvExerizer;
 DRV		BurnDrvmd_exile;
+DRV		BurnDrvmd_exilek;
 DRV		BurnDrvmd_exilej;
 DRV		BurnDrvmd_exosquad;
 DRV		BurnDrvmd_exosquadu;
@@ -4554,7 +4555,6 @@ DRV		BurnDrvcv_facemakr;
 DRV		BurnSpecFactdaze;
 DRV		BurnDrvMSX_factory;
 DRV		BurnDrvgg_factoryp;
-DRV		BurnDrvCHF_Channelf;
 DRV		BurnSpecFairlight128;
 DRV		BurnSpecFairlight48;
 DRV		BurnSpecFairlight2;
@@ -4648,6 +4648,7 @@ DRV		BurnDrvpce_fantzone;
 DRV		BurnDrvtg_fantzone;
 DRV		BurnDrvFantazia;
 DRV		BurnDrvkabukiklb;
+DRV		BurnDrvkabukikb;
 DRV		BurnDrvkabukikl;
 #if defined FBNEO_DEBUG
 DRV		BurnDrvFarwest;			// no comment [NOT WORKING]
@@ -4668,16 +4669,20 @@ DRV		BurnDrvSqbert;
 DRV		BurnDrvmd_fastest1;
 DRV		BurnDrvmd_fatfury;
 DRV		BurnDrvmd_fatfuryu;
+DRV		BurnDrvFatFur1h;
 DRV		BurnDrvFatfury1bh;
 DRV		BurnDrvFatFury1;
 DRV		BurnDrvmd_fatfury2ec;
+DRV		BurnDrvFatfur2h;
 DRV		BurnDrvmd_fatfury2;
 DRV		BurnDrvFatfury2;
 DRV		BurnDrvFatfury2a;
+DRV		BurnDrvFatfur3b;
 DRV		BurnDrvFatfury3bh;
 DRV		BurnDrvFatfury3a;
 DRV		BurnDrvFatfury3;
 DRV		BurnDrvgg_fatfursp;
+DRV		BurnDrvFatfursh;
 DRV		BurnDrvgg_fatfurspu;
 DRV		BurnDrvFatfurspbs;
 DRV		BurnDrvFatfursp;
@@ -4736,6 +4741,7 @@ DRV		BurnDrvmd_fifa96;
 DRV		BurnDrvmd_fifa99;
 DRV		BurnDrvmd_fifa2k10;
 DRV		BurnDrvmd_fifa2k2;
+DRV		BurnDrvfightfeb;
 DRV		BurnDrvfightfev;
 DRV		BurnDrvfightfeva;
 DRV		BurnDrvFghtatck;
@@ -4797,10 +4803,12 @@ DRV		BurnDrvCpsFfightj2;
 DRV		BurnDrvCpsFfightj3;
 DRV		BurnDrvCpsFfightub;
 DRV		BurnDrvCpsFfightj4;
+DRV		BurnDrvCpsFfgtj4v2;
 DRV		BurnDrvCpsFfightuc;
 DRV		BurnDrvCpsFfightbl;
 DRV		BurnDrvCpsFfightbla;
 DRV		BurnDrvCpsFfightj;
+DRV		BurnDrvCpsFfgtj2sp;
 DRV		BurnDrvCpsFfightu;
 DRV		BurnDrvCpsFfightu1;
 DRV		BurnDrvCpsFfightu2;
@@ -5000,7 +5008,6 @@ DRV		BurnDrvFoodfc;
 DRV		BurnDrvFoodf1;
 DRV		BurnDrvFoodf2;
 DRV		BurnDrvFoodf;
-DRV		BurnDrvCHF_football;
 DRV		BurnDrvFootchmp;
 DRV		BurnSpecfootdire;
 DRV		BurnDrvFbfrenzy;
@@ -5203,8 +5210,6 @@ DRV		BurnDrvGground;
 DRV		BurnDrvsms_gboogers;
 DRV		BurnDrvnes_galaccru;
 DRV		BurnDrvsms_galactpr;
-DRV		BurnDrvCHF_galacticp;
-DRV		BurnDrvCHF_galactic;
 DRV		BurnDrvGalastrm;
 DRV		BurnDrvGwarrior;
 DRV		BurnDrvGalaga88a;
@@ -5266,6 +5271,7 @@ DRV		BurnDrvGalturbo;
 DRV		BurnDrvcv_galaxian;
 DRV		BurnDrvnes_galaxy5000;
 DRV		BurnDrvGalemp;
+DRV		BurnDrvgalaxyfh;
 DRV		BurnDrvgalaxyfg;
 DRV		BurnDrvsms_gforce;
 DRV		BurnDrvsms_gforceu;
@@ -5363,6 +5369,7 @@ DRV		BurnDrvGangwarsu;
 DRV		BurnDrvGangwars;
 DRV		BurnDrvsms_robocop;
 DRV		BurnDrvsms_gangster;
+DRV		BurnDrvganryund;
 DRV		BurnDrvganryu;
 DRV		BurnDrvnes_gansosaij;
 DRV		BurnDrvnes_gansosai;
@@ -5388,6 +5395,7 @@ DRV		BurnDrvmd_gargoyle;
 DRV		BurnDrvGarogun;
 DRV		BurnDrvgaroubl;
 DRV		BurnDrvGaroub;
+DRV		BurnDrvGaround;
 DRV		BurnDrvgarouha;
 DRV		BurnDrvgarouh;
 DRV		BurnDrvGarou;
@@ -5571,6 +5579,7 @@ DRV		BurnDrvGigasm2b;
 DRV		BurnSpecGimmebright;
 DRV		BurnDrvnes_gimmick;
 DRV		BurnDrvfds_gingaden;
+DRV		BurnDrvGinganink;
 DRV		BurnDrvGinganin;
 DRV		BurnDrvGinganina;
 DRV		BurnDrvGteikokub;
@@ -5587,6 +5596,7 @@ DRV		BurnDrvGlass10a;
 DRV		BurnDrvGlasskr;
 DRV		BurnDrvGlass;
 DRV		BurnDrvmd_gleylance;
+DRV		BurnDrvmd_gleylanck;
 DRV		BurnDrvmd_gleylanc;
 DRV		BurnDrvMSX_glider;
 DRV		BurnDrvMSX_glidera;
@@ -5994,6 +6004,7 @@ DRV		BurnDrvmd_gunship;
 DRV		BurnSpecgunship;
 DRV		BurnSpecGunstar;
 DRV		BurnDrvmd_gunstar;
+DRV		BurnDrvmd_gunstark;
 DRV		BurnDrvmd_gunstars;
 DRV		BurnDrvgg_gunstar;
 DRV		BurnDrvmd_gunstarj;
@@ -6081,7 +6092,6 @@ DRV		BurnDrvHangon1;
 DRV		BurnDrvhangly;
 DRV		BurnDrvhangly2;
 DRV		BurnDrvhangly3;
-DRV		BurnDrvCHF_hangman;
 DRV		BurnDrvHangzo;
 DRV		BurnDrvpce_haniisky;
 DRV		BurnDrvpce_haniirod;
@@ -6299,7 +6309,6 @@ DRV		BurnSpechobbit2;
 DRV		BurnSpechobbit;
 DRV		BurnDrvHoccer;
 DRV		BurnDrvHoccer2;
-DRV		BurnDrvCHF_builtin;
 DRV		BurnDrvnes_hogansalley;
 DRV		BurnDrvnes_hokutonoken;
 DRV		BurnDrvsms_hokuto;
@@ -6335,6 +6344,7 @@ DRV		BurnDrvRedfoxwp2;
 DRV		BurnDrvRedfoxwp2a;
 DRV		BurnDrvsms_hongkildong;
 DRV		BurnSpecHkphooey;
+DRV		BurnDrvmd_ddanpeik;
 DRV		BurnDrvgg_ddanpei;
 DRV		BurnDrvmd_ddanpei;
 DRV		BurnDrvpce_ddanpei;
@@ -6468,6 +6478,7 @@ DRV		BurnDrvHypsptsp;
 DRV		BurnDrvHyperspt;
 DRV		BurnSpecHypersports;
 DRV		BurnDrvCpsHsf2j1;
+DRV		BurnDrvCpsHsf2jh;
 DRV		BurnDrvCpsHsf2d;
 DRV		BurnDrvCpsHsf2da;
 DRV		BurnDrvCpsHsf2a;
@@ -7095,6 +7106,7 @@ DRV		BurnDrvKarnovj;
 DRV		BurnDrvKarnova;
 DRV		BurnDrvKarnov;
 DRV		BurnDrvnes_karnov;
+DRV		BurnDrvkarnovrb;
 DRV		BurnDrvkarnovr;
 DRV		BurnSpecKarnov;
 DRV		BurnDrvnes_kartfighter;
@@ -7271,6 +7283,7 @@ DRV		BurnDrvnes_kiterdai;
 DRV		BurnDrvKittenk;
 DRV		BurnDrvnes_kittyscatch;
 DRV		BurnDrvnes_kiwikra;
+DRV		BurnDrvkizunab;
 DRV		BurnDrvKizuna;
 DRV		BurnDrvnes_klashball;
 DRV		BurnSpecKlax;
@@ -7319,6 +7332,7 @@ DRV		BurnDrvsms_knightm2;
 DRV		BurnDrvMSX_knightm3;
 DRV		BurnDrvsg1k_moyuchua;
 DRV		BurnDrvCpsKnights;
+DRV		BurnDrvCpsKnightj3;
 DRV		BurnDrvCpsKnightsja;
 DRV		BurnDrvCpsKnightsj;
 DRV		BurnDrvCpsKnightsu;
@@ -7573,6 +7587,7 @@ DRV		BurnDrvsms_landill;
 DRV		BurnDrvgg_landill;
 DRV		BurnDrvLsasquad;
 DRV		BurnDrvmd_landstlkg;
+DRV		BurnDrvmd_landstlkk;
 DRV		BurnDrvmd_landstlkj;
 DRV		BurnDrvmd_landstlkc;
 DRV		BurnDrvmd_landstlkf;
@@ -7762,7 +7777,6 @@ DRV		BurnDrvLgtnfghta;
 DRV		BurnDrvLgtnfghtu;
 DRV		BurnDrvLgtnfght;
 DRV		BurnDrvLtswords;
-DRV		BurnDrvCHF_lightsout;
 DRV		BurnDrvShangonleeh;
 DRV		BurnDrvShangonle;
 DRV		BurnSpeclinefire;
@@ -8011,7 +8025,6 @@ DRV		BurnDrvnes_magicjohsfasbr;
 DRV		BurnDrvnes_magickidgoogoo;
 DRV		BurnDrvgg_rayearth;
 DRV		BurnDrvgg_rayeart2;
-DRV		BurnDrvCHF_magicnum;
 DRV		BurnDrvnes_magicschc;
 DRV		BurnDrvnes_magicsch;
 DRV		BurnDrvmd_magicpockets;
@@ -8250,6 +8263,7 @@ DRV		BurnDrvCpsMshu;
 DRV		BurnDrvCpsMshb;
 DRV		BurnDrvCpsMshh;
 DRV		BurnDrvCpsMshj;
+DRV		BurnDrvCpsMshjh;
 DRV		BurnDrvCpsMshvsfa1;
 DRV		BurnDrvCpsMshvsfa;
 DRV		BurnDrvCpsMshvsfb1;
@@ -8260,6 +8274,7 @@ DRV		BurnDrvCpsMshvsfu1d;
 DRV		BurnDrvCpsMshvsfu1;
 DRV		BurnDrvCpsMshvsfj1;
 DRV		BurnDrvCpsMshvsfj;
+DRV		BurnDrvCpsMshvsfjh;
 DRV		BurnDrvCpsMshvsfb;
 DRV		BurnDrvCpsMshvsfu;
 DRV		BurnDrvCpsMvscur1;
@@ -8315,9 +8330,9 @@ DRV		BurnSpecmtchotd;
 DRV		BurnDrvmd_maten;
 DRV		BurnDrvnes_matendouji;
 DRV		BurnDrvmd_mathblst;
-DRV		BurnDrvCHF_mthquiz1;
-DRV		BurnDrvCHF_mthquiz2;
 DRV		BurnDrvfds_matounohou;
+DRV		BurnDrvmatrimdh;
+DRV		BurnDrvmatrimnd;
 DRV		BurnDrvmatrimbl;
 DRV		BurnDrvMatrimbh;
 DRV		BurnDrvmatrim;
@@ -8328,8 +8343,6 @@ DRV		BurnDrvMayday;
 DRV		BurnDrvMaydaya;
 DRV		BurnDrvMaydayb;
 DRV		BurnDrvMSX_mayhem;
-DRV		BurnDrvCHF_mazea;
-DRV		BurnDrvCHF_maze;
 DRV		BurnDrvsms_mazehunt;
 DRV		BurnDrvMSX_Mazemax;
 DRV		BurnDrvMofflott;
@@ -8456,7 +8469,6 @@ DRV		BurnDrvMSX_melodyparty;
 DRV		BurnDrvngp_melonchn;
 DRV		BurnDrvngpc_memories;
 DRV		BurnDrvcv_memmanor;
-DRV		BurnDrvCHF_memory;
 DRV		BurnDrvMSX_menace;
 DRV		BurnDrvnes_menacebeach;
 DRV		BurnDrvMSX_mtriton;
@@ -8511,17 +8523,20 @@ DRV		BurnDrvmslug2fm;
 DRV		BurnDrvmslug2dg;
 DRV		BurnDrvMSlug2;
 DRV		BurnDrvMSlug2t;
+DRV		BurnDrvmslug3nd;
 DRV		BurnDrvmslug3g;
 DRV		BurnDrvmslug3v;
 DRV		BurnDrvmslug3h;
 DRV		BurnDrvmslug3;
 DRV		BurnDrvmslug3a;
+DRV		BurnDrvmslug4nd;
 DRV		BurnDrvmslug4dg;
 DRV		BurnDrvmslug4h;
 DRV		BurnDrvmslug4;
 DRV		BurnDrvms4plus;
 DRV		BurnDrvmslug5b;
 DRV		BurnDrvmslug5b2;
+DRV		BurnDrvmslug5nd;
 DRV		BurnDrvms5pcb;
 DRV		BurnDrvmslug5g;
 DRV		BurnDrvMslug5w;
@@ -9123,8 +9138,8 @@ DRV		BurnDrvMSX_suptenn;
 DRV		BurnDrvMSX_unleashed;
 DRV		BurnDrvmsx_msx;
 DRV		BurnDrvrocktrv2;
-DRV		BurnDrvCHF_muehle;
 DRV		BurnDrvMugsmash;
+DRV		BurnDrvmd_valisk;
 DRV		BurnDrvmd_valisj;
 DRV		BurnDrvMSX_valis;
 DRV		BurnDrvMSX_valisk;
@@ -9160,6 +9175,7 @@ DRV		BurnDrvCpsMbombrdj;
 DRV		BurnDrvCpsMbombrd;
 DRV		BurnDrvmd_mushas;
 DRV		BurnDrvmd_musha;
+DRV		BurnDrvmd_mushak;
 DRV		BurnDrvmd_mushaj;
 DRV		BurnDrvsg1k_musicj;
 DRV		BurnDrvMusicbal;
@@ -9462,6 +9478,7 @@ DRV		BurnDrvNsmb;
 DRV		BurnDrvsyscheck;
 DRV		BurnDrvneothndr;
 DRV		BurnDrvturfmast;
+DRV		BurnDrvNeocu98k;
 DRV		BurnDrvNeocup98;
 DRV		BurnDrvneotet;
 DRV		BurnDrvneo3ddmo;
@@ -9644,6 +9661,7 @@ DRV		BurnDrvmd_ncirc;
 DRV		BurnDrvmd_ncirc1;
 DRV		BurnDrvmd_ncircp;
 DRV		BurnDrvnitdbl;
+DRV		BurnDrvnitdnd;
 DRV		BurnDrvnitd;
 DRV		BurnDrvnes_nightonelmstra;
 DRV		BurnDrvnes_nightshade;
@@ -9689,6 +9707,7 @@ DRV		BurnDrvMSX_ninjajajk;
 DRV		BurnDrvKazan;
 DRV		BurnDrvnes_ninjakid;
 DRV		BurnSpecNinjamassacre;
+DRV		BurnDrvninjamab;
 DRV		BurnDrvNinjamasha;
 DRV		BurnDrvninjamas;
 DRV		BurnDrvnes_ninja4s;
@@ -9884,7 +9903,6 @@ DRV		BurnDrvcv_orbit;
 DRV		BurnDrvOrbitron;
 DRV		BurnDrvOrbs;
 DRV		BurnDrvtg_griffon;
-DRV		BurnDrvCHF_ordtvlng;
 DRV		BurnDrvOrdynej;
 DRV		BurnDrvOrdyneje;
 DRV		BurnDrvOrdyne;
@@ -10020,8 +10038,6 @@ DRV		BurnDrvpacmanvg;
 DRV		BurnDrvPacmanblc;
 DRV		BurnDrvPacmanbl;
 DRV		BurnDrvPacmanbla;
-DRV		BurnDrvCHF_pacman;
-DRV		BurnDrvCHF_pacmanv2;
 DRV		BurnDrvpacheart;
 DRV		BurnDrvgg_pacmanj;
 DRV		BurnDrvMSX_pacman;
@@ -10321,6 +10337,7 @@ DRV		BurnDrvsms_pstarj;
 DRV		BurnDrvsms_pstarjmd;
 DRV		BurnDrvsms_pstarje;
 DRV		BurnDrvsms_pstark;
+DRV		BurnDrvmd_pstar4k;
 DRV		BurnDrvmd_pstar4j;
 DRV		BurnDrvmd_pstar4;
 DRV		BurnDrvmd_pstar4p5;
@@ -10341,6 +10358,7 @@ DRV		BurnDrvmd_ps2abe;
 DRV		BurnDrvmd_ps2ab;
 DRV		BurnDrvmd_ps2ace;
 DRV		BurnDrvmd_ps2ac;
+DRV		BurnDrvmd_pstar2k;
 DRV		BurnDrvmd_pstar2j;
 DRV		BurnDrvmd_ps2ade;
 DRV		BurnDrvmd_ps2ad;
@@ -10422,8 +10440,6 @@ DRV		BurnDrvPbaction3;
 DRV		BurnDrvPbaction4;
 DRV		BurnDrvPbactiont;
 DRV		BurnDrvMSX_pinblast;
-DRV		BurnDrvCHF_pinballa;
-DRV		BurnDrvCHF_pinball;
 DRV		BurnDrvnes_pinbacvbyred;
 DRV		BurnDrvgg_pbdreams;
 DRV		BurnDrvnes_pinballquest;
@@ -10535,6 +10551,7 @@ DRV		BurnDrvCpsPnickj;
 DRV		BurnDrvnes_popoteam;
 DRV		BurnDrvmd_pocahont;
 DRV		BurnDrvmd_pocahontu;
+DRV		BurnDrvpnyaand;
 DRV		BurnDrvpnyaaa;
 DRV		BurnDrvpnyaa;
 DRV		BurnDrvngpc_neo21;
@@ -10730,6 +10747,7 @@ DRV		BurnDrvgg_predatr2;
 DRV		BurnDrvmd_predatr2s;
 DRV		BurnSpecPredator2;
 DRV		BurnSpecPredator;
+DRV		BurnDrvpisle2nd;
 DRV		BurnDrvpreisle2;
 DRV		BurnDrvPrehislk;
 DRV		BurnDrvPrehislu;
@@ -10796,7 +10814,6 @@ DRV		BurnDrvmd_par;
 DRV		BurnDrvmd_par2;
 DRV		BurnDrvmd_par2a;
 DRV		BurnDrvCprobowl;
-DRV		BurnDrvCHF_pfootbll;
 DRV		BurnSpecProgolfsim;
 DRV		BurnDrvfds_progolsarkagnoto;
 #if defined FBNEO_DEBUG
@@ -10981,6 +10998,8 @@ DRV		BurnDrvPuzlclub;
 DRV		BurnDrvPclubys;
 DRV		BurnDrvPclubysa;
 DRV		BurnDrvPzlbowl;
+DRV		BurnDrvpuzzldpk;
+DRV		BurnDrvpuzzldrk;
 DRV		BurnDrvpuzzldpr;
 DRV		BurnDrvpuzzledp;
 DRV		BurnDrvPuzzlekg;
@@ -11210,6 +11229,8 @@ DRV		BurnDrvmd_radrexp;
 DRV		BurnDrvmd_radrexu;
 DRV		BurnDrvnes_rafworld;
 DRV		BurnDrvRaflesia;
+DRV		BurnDrvrotdbh;
+DRV		BurnDrvrotdnd;
 DRV		BurnDrvrotdh;
 DRV		BurnDrvrotd;
 DRV		BurnSpecRagnablock;
@@ -11403,7 +11424,6 @@ DRV		BurnDrvmd_rastan2s;
 DRV		BurnDrvmd_rastan2j;
 DRV		BurnDrvmd_rastan2;
 DRV		BurnDrvpce_rastan2;
-DRV		BurnDrvCHF_ratmal;
 DRV		BurnSpecRatatat;
 DRV		BurnDrvMSX_raththa;
 DRV		BurnDrvRayforce;
@@ -11415,10 +11435,12 @@ DRV		BurnDrvrbff1a;
 DRV		BurnDrvrbff1k;
 DRV		BurnDrvrbff1ka;
 DRV		BurnDrvrbff1;
+DRV		BurnDrvrbff2hb;
 DRV		BurnDrvrbff2k;
 DRV		BurnDrvrbff2h;
 DRV		BurnDrvrbff2;
 DRV		BurnDrvrbff2bh;
+DRV		BurnDrvrbffspeh;
 DRV		BurnDrvrbffspbh;
 DRV		BurnDrvrbffspeck;
 DRV		BurnDrvrbffspec;
@@ -11674,8 +11696,6 @@ DRV		BurnDrvnes_robodemons;
 DRV		BurnDrvMSX_robofrog;
 DRV		BurnDrvMSX_robofroga;
 DRV		BurnDrvmd_robotbat;
-DRV		BurnDrvCHF_robotwarp;
-DRV		BurnDrvCHF_robotwar;
 DRV		BurnDrvMSX_robotwar;
 DRV		BurnDrvmd_robowrek;
 DRV		BurnDrvRobotron87;
@@ -11952,6 +11972,7 @@ DRV		BurnDrvSamuraiA;
 DRV		BurnDrvTsamuraih;
 DRV		BurnDrvTsamurai;
 DRV		BurnDrvTsamurai2;
+DRV		BurnDrvSamShob;
 DRV		BurnDrvmd_samsho;
 DRV		BurnDrvmd_samshoec;
 DRV		BurnDrvmd_samshos;
@@ -11960,18 +11981,24 @@ DRV		BurnDrvmd_samshou;
 DRV		BurnDrvSamShoh;
 DRV		BurnDrvSamsho;
 DRV		BurnDrvSamShoa;
+DRV		BurnDrvSamSho2b;
 DRV		BurnDrvSamsho2;
 DRV		BurnDrvSamsho2sp;
+DRV		BurnDrvSamSho3b;
 DRV		BurnDrvSamSho3h;
 DRV		BurnDrvSamSho3;
+DRV		BurnDrvSamSho4b;
 DRV		BurnDrvSamSho4;
 DRV		BurnDrvSamSho4sp;
+DRV		BurnDrvsamsh5ndb;
+DRV		BurnDrvsamsho5nd;
 DRV		BurnDrvsamsho5b;
 DRV		BurnDrvsamsho5x;
 DRV		BurnDrvsamsho5h;
 DRV		BurnDrvsamsho5;
 DRV		BurnDrvsamsho5a;
 DRV		BurnDrvsamsh5pf;
+DRV		BurnDrvssh5spnd;
 DRV		BurnDrvsamsh5spho;
 DRV		BurnDrvsamsh5sph;
 DRV		BurnDrvsamsh5fe;
@@ -12062,13 +12089,13 @@ DRV		BurnSpecsavage1;
 DRV		BurnSpecsavage2;
 DRV		BurnSpecsavage3;
 DRV		BurnDrvSavgbees;
+DRV		BurnDrvsavagerb;
 DRV		BurnDrvSavagereb;
 DRV		BurnDrvSavagere;
 DRV		BurnSpecSavingkong;
 DRV		BurnSpecSc0tb0t;
 DRV		BurnDrvMSX_scarlet7;
 DRV		BurnDrvMSX_scentipede;
-DRV		BurnDrvCHF_schach;
 DRV		BurnDrvSchmeisr;
 DRV		BurnDrvmd_msbp06;
 DRV		BurnDrvmd_msbp05;
@@ -12141,6 +12168,7 @@ DRV		BurnDrvnes_sdhstang;
 DRV		BurnDrvnes_sdkblade;	// no comment
 DRV		BurnDrvnes_sdkbladej;	// no comment
 #endif
+DRV		BurnDrvmd_sdvalisk;
 DRV		BurnDrvmd_sdvalis;
 DRV		BurnDrvsms_sdi;
 DRV		BurnDrvSdibl;
@@ -12223,6 +12251,8 @@ DRV		BurnDrvSengekisj;
 DRV		BurnDrvSengokuh;
 DRV		BurnDrvSengoku;
 DRV		BurnDrvSengoku2;
+DRV		BurnDrvSengo3nd;
+DRV		BurnDrvsengo3nh;
 DRV		BurnDrvSengoku3s;
 DRV		BurnDrvsengoku3fs;
 DRV		BurnDrvSengoku3;
@@ -12343,10 +12373,12 @@ DRV		BurnDrvmd_ragnacen;
 DRV		BurnDrvmd_ragnacenp;
 DRV		BurnDrvmd_ragnacenc;
 DRV		BurnDrvTshingen;
+DRV		BurnDrvmd_shindarkk;
 DRV		BurnDrvmd_shindarkj;
 DRV		BurnDrvmd_shinfrces;
 DRV		BurnDrvmd_shinfrce;
 DRV		BurnDrvmd_shinfrcep;
+DRV		BurnDrvmd_shinfrcek;
 DRV		BurnDrvmd_shinfrcej;
 DRV		BurnDrvgg_shinfrcg;
 DRV		BurnDrvgg_shinfrgfe;
@@ -12356,6 +12388,7 @@ DRV		BurnDrvmd_shinfrc2;
 DRV		BurnDrvmd_shinfrc2u;
 DRV		BurnDrvmd_shinfrc2p2;
 DRV		BurnDrvmd_shinfrc2p1;
+DRV		BurnDrvmd_shinfrc2k;
 DRV		BurnDrvmd_shinfrc2j;
 DRV		BurnDrvmd_shinfrc2c;
 DRV		BurnDrvgg_shinfrc2;
@@ -12623,7 +12656,6 @@ DRV		BurnDrvcv_danslither;
 DRV		BurnDrvSlither;
 DRV		BurnDrvSlithera;
 DRV		BurnDrvcv_slither;
-DRV		BurnDrvCHF_slotmchn;
 DRV		BurnDrvcv_slurpy;
 DRV		BurnDrvSlyspy2;
 DRV		BurnDrvSlyspy3;
@@ -12674,9 +12706,11 @@ DRV		BurnDrvngpc_svccardcj;
 DRV		BurnDrvngpc_svccardsja;
 DRV		BurnDrvngpc_svccardsj;
 DRV		BurnDrvsvcboot;
+DRV		BurnDrvsvcnd;
 DRV		BurnDrvsvcpcb;
 DRV		BurnDrvsvcpcba;
 DRV		BurnDrvsvc;
+DRV		BurnDrvsvcndps2;
 DRV		BurnDrvsvcplus;
 DRV		BurnDrvsvcplusa;
 DRV		BurnDrvsvcsplus;
@@ -12754,7 +12788,6 @@ DRV		BurnDrvnes_sonson;
 DRV		BurnDrvSonsonj;
 DRV		BurnDrvpce_sonson2;
 DRV		BurnDrvSonson;
-DRV		BurnDrvCHF_sonrsrch;
 DRV		BurnDrvmd_skp12;
 DRV		BurnDrvmd_skp10;
 DRV		BurnDrvmd_skp08;
@@ -13039,7 +13072,6 @@ DRV		BurnDrvSpacetrk;		// No sound
 DRV		BurnDrvSpctrek;
 DRV		BurnDrvMSX_spacetrb;
 DRV		BurnDrvMSX_spacewlk;
-DRV		BurnDrvCHF_spacewar;
 DRV		BurnDrvnes_spacegulls;
 DRV		BurnDrvSparkman;
 DRV		BurnDrvMSX_sparkie;
@@ -13125,8 +13157,6 @@ DRV		BurnDrvMSX_spirits;
 DRV		BurnDrvmd_spiritwf;
 DRV		BurnDrvmd_spirou;
 DRV		BurnDrvgg_spirou;
-DRV		BurnDrvCHF_spitfirep;
-DRV		BurnDrvCHF_spitfire;
 DRV		BurnDrvMSX_splash;
 DRV		BurnDrvSplat;
 DRV		BurnDrvSplatterj;
@@ -13475,6 +13505,7 @@ DRV		BurnDrvCpsSf2jf;
 DRV		BurnDrvCpsSf2uf;
 DRV		BurnDrvCpsSf2ef;
 DRV		BurnDrvCpsSf2jh;
+DRV		BurnDrvCpsSf2jhpp;
 DRV		BurnDrvCpsSf2ug;
 DRV		BurnDrvCpsSf2uh;
 DRV		BurnDrvCpsSf2ui;
@@ -13624,6 +13655,7 @@ DRV		BurnDrvCpsSfzjr1;
 DRV		BurnDrvCpsSfzh;
 DRV		BurnDrvCpsSfzbr1;
 DRV		BurnDrvCpsSfzj;
+DRV		BurnDrvCpsSfzjh;
 DRV		BurnDrvCpsSfzb;
 DRV		BurnDrvCpsSfzcha;
 //		BurnDrvCpsSfzbch;		// no comment
@@ -13635,12 +13667,14 @@ DRV		BurnDrvCpsSfz2ad;
 DRV		BurnDrvCpsSfz2a;
 DRV		BurnDrvCpsSfz2jd;
 DRV		BurnDrvCpsSfz2jr1;
+DRV		BurnDrvCpsSfz2jr1h;
 DRV		BurnDrvCpsSfz2n;
 DRV		BurnDrvCpsSfz2br1;
 DRV		BurnDrvCpsSfz2h;
 DRV		BurnDrvCpsSfz2j;
 DRV		BurnDrvCpsSfz2b;
 DRV		BurnDrvCpsSfz2alj;
+DRV		BurnDrvCpsSfz2aljh;
 DRV		BurnDrvCpsSfz2alb;
 DRV		BurnDrvCpsSfz2alh;
 DRV		BurnDrvCpsSfz2ald;
@@ -13652,6 +13686,7 @@ DRV		BurnDrvCpsSfz3ar1;
 DRV		BurnDrvCpsSfz3jr1;
 DRV		BurnDrvCpsSfz3a;
 DRV		BurnDrvCpsSfz3j;
+DRV		BurnDrvCpsSfz3jh;
 DRV		BurnDrvCpsSfz3te;
 DRV		BurnDrvSftm110;
 DRV		BurnDrvSftm111;
@@ -13750,6 +13785,7 @@ DRV		BurnDrvS1945;
 DRV		BurnDrvS1945n;
 DRV		BurnDrvS1945iii;
 DRV		BurnDrvS1945ii;
+DRV		BurnDrvs1945pnd;
 DRV		BurnDrvs1945p;
 DRV		BurnDrvpce_stripf2;
 DRV		BurnDrvStrongx;
@@ -13948,6 +13984,7 @@ DRV		BurnDrvMSX_supdrink;
 DRV		BurnDrvSupduck;
 DRV		BurnDrvUsg32;
 DRV		BurnDrvmd_sfzone;
+DRV		BurnDrvmd_sfzonek;
 DRV		BurnDrvmd_sfzones;
 DRV		BurnDrvmd_sfzonej;
 DRV		BurnDrvSformula;
@@ -14206,6 +14243,8 @@ DRV		BurnDrvCpsSsf2th;
 DRV		BurnDrvCpsSsf2tur1;
 DRV		BurnDrvCpsSsf2tu;
 DRV		BurnDrvCpsSsf2tnl;
+DRV		BurnDrvCpsSsf2xjh;
+DRV		BurnDrvCpsSsf2xjr1dt;
 DRV		BurnDrvCpsSsf2xjr1d;
 DRV		BurnDrvCpsSsf2xjr1r;
 DRV		BurnDrvCpsSsf2xjr1;
@@ -14639,7 +14678,9 @@ DRV		BurnDrvMSX_temptations;
 DRV		BurnDrvCpsDynwarjr;
 DRV		BurnDrvCpsDynwarj;
 DRV		BurnDrvnes_tenchiwokurau;
+DRV		BurnDrvCpsWofj103;
 DRV		BurnDrvCpsWofj;
+DRV		BurnDrvCpsWofch3p;
 DRV		BurnDrvCpsWofch;
 DRV		BurnDrvCpsWofjh;
 DRV		BurnDrvCpsWofjdr;
@@ -14713,7 +14754,6 @@ DRV		BurnDrvAtetrisc;
 DRV		BurnDrvAtetrisc2;
 DRV		BurnDrvtetrsark;
 DRV		BurnDrvmd_tetriss;
-DRV		BurnDrvCHF_tetris;
 DRV		BurnDrvTetrista;
 DRV		BurnDrvTetrist;
 DRV		BurnDrvTetrisse;
@@ -14951,6 +14991,7 @@ DRV		BurnDrvmd_hybridfp;
 DRV		BurnDrvmd_hybridfc;
 DRV		BurnDrvMSX_iceking;
 DRV		BurnDrvmd_immortal;
+DRV		BurnDrvmd_immortalk;
 DRV		BurnDrvmd_immortals;
 DRV		BurnDrvsms_crashdum;
 DRV		BurnDrvmd_crashdum;
@@ -14989,8 +15030,10 @@ DRV		BurnDrvCpsKodu;
 DRV		BurnDrvCpsKodr1;
 DRV		BurnDrvCpsKod;
 DRV		BurnDrvKof94rz;
+DRV		BurnDrvKof94kr;
 DRV		BurnDrvKof94;
 DRV		BurnDrvKof95b;
+DRV		BurnDrvKof95kr;
 DRV		BurnDrvKof95h;
 DRV		BurnDrvKof95a;
 DRV		BurnDrvKof95;
@@ -14998,6 +15041,7 @@ DRV		BurnDrvKof95sp;
 DRV		BurnDrvkof96ae;
 DRV		BurnDrvkof96ep;
 DRV		BurnDrvkof96cn;
+DRV		BurnDrvKof96kr;
 DRV		BurnDrvKof96h;
 DRV		BurnDrvKof96;
 DRV		BurnDrvKof96a;
@@ -15006,6 +15050,8 @@ DRV		BurnDrvkof97cn;
 DRV		BurnDrvKof97ps;
 DRV		BurnDrvkof97invplus;
 DRV		BurnDrvKof97k;
+DRV		BurnDrvkof97ps;
+DRV		BurnDrvKof97kr;
 DRV		BurnDrvKof97h;
 DRV		BurnDrvKof97;
 DRV		BurnDrvkof97t2020;
@@ -15019,11 +15065,15 @@ DRV		BurnDrvkof97rc;
 DRV		BurnDrvKof97oro;
 DRV		BurnDrvKof97pls;
 DRV		BurnDrvkof97pla;
+DRV		BurnDrvKof97ts;
 DRV		BurnDrvkof98ae2016;
 DRV		BurnDrvkof98ae;
 DRV		BurnDrvkof98cps;
 DRV		BurnDrvkof98cb;
+DRV		BurnDrvKof98kr;
+DRV		BurnDrvKof98cd;
 DRV		BurnDrvkof98pfe;
+DRV		BurnDrvKof98bf;
 DRV		BurnDrvkof98ult;
 DRV		BurnDrvKof98k;
 DRV		BurnDrvKof98ka;
@@ -15033,10 +15083,13 @@ DRV		BurnDrvKof98a;
 DRV		BurnDrvkof98eck20;
 DRV		BurnDrvkof98eckvs;
 DRV		BurnDrvKof98mix;
+DRV		BurnDrvkof99ae2016;
 DRV		BurnDrvmd_kof99a;
 DRV		BurnDrvkof99e;
+DRV		BurnDrvkof99nd;
 DRV		BurnDrvkof99k;
 DRV		BurnDrvkof99ka;
+DRV		BurnDrvkof99kr;
 DRV		BurnDrvkof99h;
 DRV		BurnDrvkof99;
 DRV		BurnDrvkof99p;
@@ -15051,17 +15104,23 @@ DRV		BurnDrvkof10thd;
 DRV		BurnDrvkf2k5uni;
 DRV		BurnDrvkof10thuo;
 DRV		BurnDrvkf10thep;
+DRV		BurnDrvkof2knd;
+DRV		BurnDrvkof2kkr;
 DRV		BurnDrvkof2000;
 DRV		BurnDrvkof2000n;
 DRV		BurnDrvkof2000otc;
 DRV		BurnDrvkof2000ps2;
 DRV		BurnDrvkof2000sp;
+DRV		BurnDrvkof2k1nd;
 DRV		BurnDrvkof2001h;
 DRV		BurnDrvkof2001;
+DRV		BurnDrvkof2k1ps2;
 DRV		BurnDrvkf2k1pkz;
 DRV		BurnDrvkf2k1pls;
 DRV		BurnDrvkf2k1pa;
 DRV		BurnDrvkof2002b;
+DRV		BurnDrvkof2k2nd;
+DRV		BurnDrvkof2k2kh;
 DRV		BurnDrvkof2002;
 DRV		BurnDrvkof2k2omg;
 DRV		BurnDrvkof2k2omg8;
@@ -15072,15 +15131,18 @@ DRV		BurnDrvkf2k2ps2;
 DRV		BurnDrvkf2k2ps2b;
 DRV		BurnDrvkof2k2plus;
 DRV		BurnDrvkf2k23rd;
+DRV		BurnDrvkof2k2cm;
 DRV		BurnDrvkf2k2mp;
 DRV		BurnDrvkf2k2mp2;
 DRV		BurnDrvkf2k2pls;
 DRV		BurnDrvkf2k2pla;
 DRV		BurnDrvkf2k2plb;
+DRV		BurnDrvkf2k2pls2017;
 DRV		BurnDrvkf2k2ru35;
 DRV		BurnDrvkf2k2plc;
 DRV		BurnDrvkf2k3bl;
 DRV		BurnDrvkf2k3bla;
+DRV		BurnDrvkof2k3nd;
 DRV		BurnDrvkf2k3pcb;
 DRV		BurnDrvkof2003h;
 DRV		BurnDrvkof2003;
@@ -15091,10 +15153,13 @@ DRV		BurnDrvkof2k4se;
 DRV		BurnDrvkf2k4pls;
 DRV		BurnDrvpce_kungfu;
 DRV		BurnDrvngpc_lastblad;
+DRV		BurnDrvlastbladb;
 DRV		BurnDrvlastbladh;
 DRV		BurnDrvlastblad;
 DRV		BurnDrvlastblada;
 DRV		BurnDrvlastbladsp;
+DRV		BurnDrvlastbl2h;
+DRV		BurnDrvlastbl2f;
 DRV		BurnDrvLb2b;
 DRV		BurnDrvDlastbld2eh;
 DRV		BurnDrvlastbld2;
@@ -15280,9 +15345,11 @@ DRV		BurnDrvmd_thors;
 DRV		BurnDrvmd_thorp2;
 DRV		BurnDrvmd_thorp1;
 DRV		BurnDrvmd_thorf;
+DRV		BurnDrvmd_thork2;
 DRV		BurnDrvmd_thorj;
 DRV		BurnDrvmd_thorc;
 DRV		BurnDrvmd_supshin;
+DRV		BurnDrvmd_supshin2k;
 DRV		BurnDrvmd_supshin2;
 DRV		BurnDrvmd_supshin2p1;
 DRV		BurnDrvmd_supshin2p2;
@@ -15414,7 +15481,6 @@ DRV		BurnSpecTcats48k;
 DRV		BurnDrvThunderja;
 DRV		BurnDrvThunderj;
 DRV		BurnDrvMSX_titipang;
-DRV		BurnDrvCHF_tctactoe;
 DRV		BurnDrvTigerhb1;
 DRV		BurnDrvTigerhb2;
 DRV		BurnDrvTigerhb3;
@@ -15903,8 +15969,10 @@ DRV		BurnDrvsg1k_sxpao;
 DRV		BurnDrvnes_twinb3;
 DRV		BurnDrvTwinkle;
 DRV		BurnDrvTwinklea;
+DRV		BurnDrvtwinsprh;
 DRV		BurnDrvtwinspri;
 DRV		BurnDrvmd_twinklete;
+DRV		BurnDrvmd_twinkletk;
 DRV		BurnDrvmd_twinklets;
 DRV		BurnDrvmd_twinklet;
 DRV		BurnSpecTwinlight;
@@ -16062,6 +16130,7 @@ DRV		BurnDrvvliner7e;
 DRV		BurnDrvmd_valiss;
 DRV		BurnDrvmd_valis;
 DRV		BurnDrvnes_valis;
+DRV		BurnDrvmd_valis3k;
 DRV		BurnDrvmd_valis3s;
 DRV		BurnDrvmd_valis3j;
 DRV		BurnDrvmd_valis3;
@@ -16083,6 +16152,7 @@ DRV		BurnDrvgg_vampire;
 DRV		BurnDrvCpsVampjr1;
 DRV		BurnDrvCpsVampj;
 DRV		BurnDrvCpsVampja;
+DRV		BurnDrvCpsVampjh;
 DRV		BurnDrvCpsVhuntjr2;
 DRV		BurnDrvCpsVhuntjr1s;
 DRV		BurnDrvCpsVhuntjr1;
@@ -16097,6 +16167,7 @@ DRV		BurnDrvCpsVsav;
 DRV		BurnDrvCpsVsavh;
 DRV		BurnDrvCpsVsavj;
 DRV		BurnDrvCpsVsavu;
+DRV		BurnDrvCpsVsavdt;
 DRV		BurnDrvCpsVsav2d;
 DRV		BurnDrvCpsVsav2;
 DRV		BurnSpecvampveng;
@@ -16186,7 +16257,6 @@ DRV		BurnDrvVictroad;
 DRV		BurnDrvpce_victoryr;
 DRV		BurnDrvtg_victoryr;
 DRV		BurnDrvcv_victory;
-DRV		BurnDrvCHF_vblckjck;
 DRV		BurnDrvHustlerb;
 DRV		BurnDrvMSX_hustler;
 DRV		BurnDrvMSX_hustlera;
@@ -16195,7 +16265,6 @@ DRV		BurnDrvcv_hustler1;
 DRV		BurnDrvHustler;
 DRV		BurnDrvVpool;
 DRV		BurnDrvVidvince;
-DRV		BurnDrvCHF_whizball;
 DRV		BurnDrvViewpoinp;
 DRV		BurnDrvmd_viewpoin;
 DRV		BurnDrvmd_viewpoinp;
@@ -16295,6 +16364,7 @@ DRV		BurnDrvMSX_volguard;
 DRV		BurnDrvnes_volguardii;
 DRV		BurnDrvfds_volleyball;
 DRV		BurnDrvnes_volleyball;
+DRV		BurnDrvgowcaizb;
 DRV		BurnDrvgowcaizr;
 DRV		BurnDrvMSX_vortraid;
 DRV		BurnDrvsms_voyage;
@@ -16344,6 +16414,7 @@ DRV		BurnDrvnes_waiwaiwor2;
 DRV		BurnDrvsms_waimanu;
 DRV		BurnDrvMj4simai;
 DRV		BurnDrvwakuwak7bh;
+DRV		BurnDrvwakuwa7h;
 DRV		BurnDrvwakuwak7;
 DRV		BurnDrvUltracin;
 DRV		BurnDrvfds_wakusatogai;
@@ -16440,7 +16511,6 @@ DRV		BurnDrvMSX_wbellsa;
 DRV		BurnDrvsms_wekainvaders;
 DRV		BurnDrvWelltrisj;
 DRV		BurnDrvWelltris;
-DRV		BurnDrvCHF_werbetxt;
 DRV		BurnDrvnes_werew;
 #if defined FBNEO_DEBUG
 DRV		BurnDrvWeststry;		// no comment [NOT WORKING]
@@ -16514,6 +16584,7 @@ DRV		BurnDrvmd_wimbledu;
 DRV		BurnDrvmd_wimbledup;
 DRV		BurnDrvsms_wimbled2;
 DRV		BurnDrvnes_winlosordra;
+DRV		BurnDrvwjammerk;
 DRV		BurnDrvwjammers;
 DRV		BurnDrvWingforc;
 DRV		BurnDrvMSX_wingman2;
@@ -16730,6 +16801,7 @@ DRV		BurnDrvsms_worldgpu;
 DRV		BurnDrvsms_worldgpp;
 DRV		BurnDrvwh1h;
 DRV		BurnDrvwh1;
+DRV		BurnDrvwh1b;
 DRV		BurnDrvmd_whs;
 DRV		BurnDrvmd_whj;
 DRV		BurnDrvmd_whjp5;
@@ -16754,8 +16826,11 @@ DRV		BurnDrvmd_whp01;
 DRV		BurnDrvmd_whp02;
 DRV		BurnDrvwh2h;
 DRV		BurnDrvwh2;
+DRV		BurnDrvwh2b;
 DRV		BurnDrvwh2j;
 DRV		BurnDrvwh2ja;
+DRV		BurnDrvwh2jb;
+DRV		BurnDrvwhpb;
 DRV		BurnDrvwhp;
 DRV		BurnDrvpce_wjockey;
 DRV		BurnDrvmd_worldillj;
@@ -16896,6 +16971,7 @@ DRV		BurnDrvCpsXmcotaar2;
 DRV		BurnDrvCpsXmcotaj3;
 DRV		BurnDrvCpsXmcotaar1;
 DRV		BurnDrvCpsXmcotaj2;
+DRV		BurnDrvCpsXmcotaj2h;
 DRV		BurnDrvCpsXmcotaj1;
 DRV		BurnDrvCpsXmcotaa;
 DRV		BurnDrvCpsXmcotar1d;
@@ -17096,6 +17172,7 @@ DRV		BurnDrvnes_ys;
 DRV		BurnDrvsms_ysd;
 DRV		BurnDrvsms_ys;
 DRV		BurnDrvsms_ysfm;
+DRV		BurnDrvmd_ys3k;
 DRV		BurnDrvmd_ys3j;
 DRV		BurnDrvnes_ysiic;
 DRV		BurnDrvnes_ysiij;
@@ -17274,6 +17351,7 @@ DRV		BurnSpecZorro;
 DRV		BurnDrvmd_zouzou;
 DRV		BurnSpecZub;
 DRV		BurnDrvnes_zunousengal;
+DRV		BurnDrvZupapand;
 DRV		BurnDrvZupapa;
 DRV		BurnSpecSpec128BIOS;
 DRV		BurnSpecSpec128;
@@ -17759,7 +17837,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecAlienevolution,	// Alien Evolution
 	&BurnSpecAliengirldemo,		// Alien Girl - 48k Demo (HB)
 	&BurnDrvAlinvade,			// Alien Invaders
-	&BurnDrvCHF_alieninv,		// Alien Invasion
 	&BurnDrvalienres,			// Alien Rescue (Homebrew, Test Build July 2019)
 	&BurnDrvAliensec,			// Alien Sector
 	&BurnDrvmd_aliensol,		// Alien Soldier (Euro)
@@ -17818,6 +17895,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecAliensuk,			// Aliens UK
 	&BurnSpecAliensus,			// Aliens US
 	&BurnDrvmd_alisiad,			// Alisia Dragoon (Euro)
+	&BurnDrvmd_alisiadk,		// Alisia Dragoon (Hack, Korean)
 	&BurnDrvmd_alisiads,		// Alisia Dragoon (Hack, Spanish)
 	&BurnDrvmd_alisiadj,		// Alisia Dragoon (Jpn)
 	&BurnDrvmd_alisiadu,		// Alisia Dragoon (USA)
@@ -18066,15 +18144,19 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_arrowp,			// Arrow Flash (USA, Prototype)
 	&BurnDrvmd_arrow,			// Arrow Flash (World)
 	&BurnDrvmd_artalive,		// Art Alive (World)
+	&BurnDrvAofb,				// Art of Fighting (Boss Hack)
 	&BurnDrvmd_aof,				// Art of Fighting (Euro)
 	&BurnDrvmd_aofec,			// Art of Fighting (Hack, Enhanced Colors)
 	&BurnDrvmd_aofs,			// Art Of Fighting (Hack, Spanish)
+	&BurnDrvAofk,				// Art of Fighting (Korean Patch, Boss Hack)
 	&BurnDrvmd_aofp,			// Art of Fighting (Prototype, 19940711)
 	&BurnDrvmd_aofu,			// Art of Fighting (USA)
 	&BurnDrvAof,				// Art of Fighting / Ryuuko no Ken (NGM-044)(NGH-044)
+	&BurnDrvAof2b,				// Art of Fighting 2 (Boss Hack)
 	&BurnDrvAof2bh,				// Art of Fighting 2 / Ryuuko no Ken 2 (Enable hidden characters V2)
 	&BurnDrvAof2a,				// Art of Fighting 2 / Ryuuko no Ken 2 (NGH-056)
 	&BurnDrvAof2,				// Art of Fighting 2 / Ryuuko no Ken 2 (NGM-056)
+	&BurnDrvAof3b,				// Art of Fighting 3 - The Path of the Warrior (Boss Hack)
 	&BurnDrvAof3k,				// Art of Fighting 3 - The Path of the Warrior (Korean release)
 	&BurnDrvAof3bh,				// Art of Fighting 3 - The Path of the Warrior / Art of Fighting - Ryuuko no Ken Gaiden (Enable Hidden Characters V2)
 	&BurnDrvAof3,				// Art of Fighting 3 - The Path of the Warrior / Art of Fighting - Ryuuko no Ken Gaiden
@@ -18313,7 +18395,6 @@ static struct BurnDriver* pDriver[] = {
 #if defined FBNEO_DEBUG
 	&BurnDrvBackfirea,			// Backfire! (set 2) [Set inputs to \"Joystick\" in test mode, NOT WORKING]
 #endif
-	&BurnDrvCHF_backgamm,		// Backgammon / Acey-Deucey
 	&BurnDrvmd_badapple,		// Bad Apple (HB, Tech-Demo)
 	&BurnDrvnes_badapple,		// Bad Apple (HB, Tech-Demo)
 	&BurnDrvsms_badapple,		// Bad Apple (HB, Tech-Demo)
@@ -18377,6 +18458,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecBandito,			// Bandito (HB)
 	&BurnDrvBangball,			// Bang Bang Ball (v1.05)
 	&BurnDrvb2b,				// Bang Bang Busters (2010 NCI release)
+	&BurnDrvbangbnd,			// Bang Bead (Fully Decrypted)
 	&BurnDrvbangbedp,			// Bang Bead (Prototype?)
 	&BurnDrvbangbead,			// Bang Bead
 	&BurnDrvBang,				// Bang!
@@ -18436,7 +18518,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_basebstaii,		// Baseball Stars II (USA)
 	&BurnDrvBstarsh,			// Baseball Stars Professional (NGH-002)
 	&BurnDrvBstars,				// Baseball Stars Professional (NGM-002)
-	&BurnDrvCHF_baseball,		// Baseball
 	&BurnDrvnes_basesloaded,	// Bases Loaded (USA)
 	&BurnDrvnes_basesloaded3,	// Bases Loaded 3 (USA)
 	&BurnDrvnes_basesloaded4,	// Bases Loaded 4 (USA)
@@ -18515,6 +18596,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvBcruzm12,			// Battle Cruiser M-12
 	&BurnDrvBtlfieldb,			// Battle Field (bootleg)
 	&BurnDrvBtlfield,			// Battle Field (Japan)
+	&BurnDrvflipshtk,			// Battle Flip Shot (Korean)
 	&BurnDrvflipshot,			// Battle Flip Shot
 	&BurnDrvnes_battleformula,	// Battle Formula (Japan)
 	&BurnDrvBgareghk,			// Battle Garegga (Austria / Hong Kong) (Sat Feb 3 1996)
@@ -18765,6 +18847,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_blackboxcha,	// Black Box Challenge (HB)
 	&BurnDrvBlkdrgonb,			// Black Dragon (bootleg)
 	&BurnDrvBlkdrgon,			// Black Dragon (Japan)
+	&BurnDrvBlkdrgnk,			// Black Dragon (Korean)
 	&BurnDrvBlkheartj,			// Black Heart (Japan)
 	&BurnDrvBlkheart,			// Black Heart
 	&BurnDrvnes_blackhol,		// Black Hole - Czarna Dziura (HB, v0.20)
@@ -19060,7 +19143,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_bounder,		// Bounder (Euro)
 	&BurnSpecBountyhunter,		// Bounty Hunter (128K)
 	&BurnDrvBowlrama,			// Bowl-O-Rama
-	&BurnDrvCHF_bowling,		// Bowling
 	&BurnDrvnes_bowsette2,		// Bowsette 2 (Hack, Red version)
 	&BurnSpecBoxreload,			// Box Reloaded (48K) (HB)
 	&BurnDrvmd_boxinglg,		// Boxing Legends of the Ring (USA)
@@ -19088,6 +19170,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_breakoutt,		// Break Out!
 	&BurnDrvBrkthru,			// Break Thru (US)
 	&BurnDrvMSX_breaker,		// Breaker Breaker (Euro)
+	&BurnDrvbreakerb,			// Breakers (Boss Hack)
+	&BurnDrvbreakreb,			// Breakers Revenge (Boss Hack)
 	&BurnDrvbreakrevbh,			// Breakers Revenge (Boss Hack)
 	&BurnDrvbrkrevext,			// Breakers Revenge - Extra Mode (Hack)
 	&BurnDrvbreakrev,			// Breakers Revenge
@@ -19428,6 +19512,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsCaptcommr1,		// Captain Commando (911014 World)
 	&BurnDrvCpsCaptcommj,		// Captain Commando (911202 Japan)
 	&BurnDrvCpsCaptcomm,		// Captain Commando (911202 World)
+	&BurnDrvCpsCaptcommv4,		// Captain Commando (911202 World, 1 vs 4 Hack)
 	&BurnDrvCpsCaptcommb,		// Captain Commando (bootleg set 1, 911014 other country)
 	&BurnDrvCpsCaptcommb2,		// Captain Commando (bootleg set 2 (with 2xMSM5205), 911014 other country) [unemulated graphics, NOT WORKING]
 	&BurnDrvCpsCaptcommb3,		// Captain Commando (bootleg set 3 (with YM2151 + 2xMSM5205), 911014 other country)
@@ -19496,7 +19581,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_casino,			// Casino Games (Euro, USA)
 	&BurnDrvnes_casinokid,		// Casino Kid (USA)
 	&BurnDrvnes_casinokid2,		// Casino Kid 2 (USA)
-	&BurnDrvCHF_casinop,		// Casino Poker
 	&BurnDrvMSX_wrldopen,		// Casio Worldopen (Jpn)
 	&BurnDrvMSX_wrldopenk,		// Casio Worldopen (Kor)
 	&BurnSpecCastaway,			// Castaway 48K (HB)
@@ -19639,8 +19723,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCairblad,			// Change Air Blade (Japan)
 	&BurnDrvChangesa,			// Changes (EME license)
 	&BurnDrvChanges,			// Changes
-	&BurnDrvCHF_multicrt,		// Channel F Multi-Cart (Final)
-	&BurnDrvCHF_multicrto,		// Channel F Multi-Cart (Older)
 	&BurnDrvmd_cjfuweng,		// Chao Ji Da Fu Weng (Chi)
 	&Burnmd_Chaojimah,			// Chao Ji Mahjong Club
 	&Burnmd_Chaojipok,			// Chao Ji Poker
@@ -19676,7 +19758,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCheckmanj,			// Check Man (Japan)
 	&BurnDrvCheckman,			// Check Man
 	&BurnDrvMSX_tantan,			// Checkers in Tan Tan Tanuki (Jpn)
-	&BurnDrvCHF_checkers,		// Checkers
 	&BurnDrvCheekyms,			// Cheeky Mouse
 	&BurnDrvgg_cheese,			// Cheese Cat-astrophe Starring Speedy Gonzales (Euro)
 	&BurnDrvmd_cheese,			// Cheese Cat-Astrophe Starring Speedy Gonzales (Euro)
@@ -19978,7 +20059,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_colball,		// Color Ball (Jpn)
 	&BurnDrvMSX_colballb,		// Color Ball (Jpn, Alt 2)
 	&BurnDrvMSX_colballa,		// Color Ball (Jpn, Alt)
-	&BurnDrvCHF_clrorgan,		// Color Organ (Prototype)
 	&BurnSpecColoristic,		// Coloristic (HB)
 	&BurnDrvMSX_colt36,			// Colt 36 (Spa)
 	&BurnDrvgg_columns,			// Columns (Euro, USA, Bra)
@@ -20102,6 +20182,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_contra,			// Contra - Hard Corps (USA, Kor)
 	&BurnDrvnes_contrredfalwar,	// Contra - Red Falcon War (USA)
 	&BurnDrvnes_contrrevredfal,	// Contra - Revenge of the Red Falcon (USA)
+	&BurnDrvmd_contrak,			// Contra - The Hard Corps (Hack, Korean)
 	&BurnDrvmd_contraj,			// Contra - The Hard Corps (Jpn)
 	&BurnDrvnes_contra168in1,	// Contra 168-in-1 (Unl)
 	&BurnDrvnes_contraforcec,	// Contra Force (2nd option, T-Chi)
@@ -20170,10 +20251,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_cosmoexp,		// Cosmo-Explorer (Jpn)
 	&BurnDrvMSX_cosmoexpa,		// Cosmo-Explorer (Jpn, Alt)
 	&BurnDrvCottong,			// Cotocoto Cottong
-	&BurnDrvCottonjad,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted))
-	&BurnDrvCottonja,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a))
-	&BurnDrvCottonjd,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted))
-	&BurnDrvCottonj,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b))
+	&BurnDrvCottonjad,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a decrypted)
+	&BurnDrvCottonja,			// Cotton (set 1, Japan, Rev A, FD1094 317-0179a)
+	&BurnDrvCottonjd,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b decrypted)
+	&BurnDrvCottonj,			// Cotton (set 2, Japan, Rev B, FD1094 317-0179b)
 	&BurnDrvCottonud,			// Cotton (set 2, US, FD1094 317-0180 decrypted)
 	&BurnDrvCottonu,			// Cotton (set 2, US, FD1094 317-0180)
 	&BurnDrvCottond,			// Cotton (set 3, World, FD1094 317-0181a decrypted)
@@ -20651,8 +20732,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvDeluxe5,			// Deluxe 5 (ver. 0107, 07/01/2000, set 1)
 	&BurnDrvDeluxe5a,			// Deluxe 5 (ver. 0107, 07/01/2000, set 2)
 	&BurnDrvDeluxe5b,			// Deluxe 5 (ver. 0107, 07/01/2000, set 3)
-	&BurnDrvCHF_democrt1,		// Democart 1
-	&BurnDrvCHF_democrt2,		// Democart 2
 	&BurnDrvDemoderbc,			// Demolition Derby (cocktail)
 	&BurnDrvDemoderm,			// Demolition Derby (MCR-3 Mono Board Version)
 	&BurnDrvDemoderb,			// Demolition Derby
@@ -20703,7 +20782,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_desrtdemp3,		// Desert Demolition (Prototype, 19941215)
 	&BurnDrvmd_desrtdemp2,		// Desert Demolition (Prototype, 19941216)
 	&BurnDrvmd_desrtdemp1,		// Desert Demolition (Prototype, 19941219)
-	&BurnDrvCHF_dsrtfox,		// Desert Fox / Shooting Gallery
 	&BurnDrvgg_desert,			// Desert Speedtrap Starring Road Runner and Wile E. Coyote (Euro)
 	&BurnDrvsms_desert,			// Desert Speedtrap Starring Road Runner and Wile E. Coyote (Euro, Bra)
 	&BurnDrvgg_desertu,			// Desert Speedtrap Starring Road Runner and Wile E. Coyote (USA)
@@ -20916,7 +20994,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecDjpuff,			// DJ Puff
 	&BurnDrvDorunrun,			// Do! Run Run (set 1)
 	&BurnDrvDockman,			// Dock Man
-	&BurnDrvCHF_dodgeit,		// Dodge It
 	&BurnDrvDodgeman,			// Dodge Man
 	&BurnDrvMSX_dgnraven,		// Dodgin Raven (HB)
 	&BurnDrvDoDonpachia,		// DoDonPachi (Arrange Mode version 1.1, hack by Trap15)
@@ -21158,7 +21235,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_draconic,		// Draconic Throne (HB, v1.1.2)
 	&BurnSpecDraconus,			// Draconus (48K)
 	&BurnDrvfds_dracuii,		// Dracula II - Noroi no Fuuin (Japan)
-	&BurnDrvCHF_dragrace,		// Drag Race
 	&BurnDrvgg_dragon,			// Dragon - The Bruce Lee Story (Euro)
 	&BurnDrvmd_dragon,			// Dragon - The Bruce Lee Story (Euro)
 	&BurnDrvsms_dragon,			// Dragon - The Bruce Lee Story (Euro)
@@ -21292,7 +21368,6 @@ static struct BurnDriver* pDriver[] = {
 #if defined FBNEO_DEBUG
 	&BurnDrvDpoker,				// Draw Poker (Bally, 03-20) [no comment, NOT WORKING]
 #endif
-	&BurnDrvCHF_drawpkr,		// Draw Poker (Prototype)
 	&BurnDrvDreambal,			// Dream Ball (Japan V2.4)
 	&BurnDrvDland,				// Dream Land / Super Dream Land (bootleg of Bubble Bobble)
 	&BurnDrvdremshpr,			// Dream Shopper
@@ -21376,6 +21451,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsDdsomh,			// Dungeons & Dragons - shadow over mystara (960223 Hispanic)
 	&BurnDrvCpsDdsomjr2,		// Dungeons & Dragons - shadow over mystara (960223 Japan)
 	&BurnDrvCpsDdsoma,			// Dungeons & Dragons - shadow over mystara (960619 Asia)
+	&BurnDrvCpsDdsomav4,		// Dungeons & Dragons - shadow over mystara (960619 Asia, 1 vs 4 Hack)
 	&BurnDrvCpsDdsom,			// Dungeons & Dragons - shadow over mystara (960619 Euro)
 	&BurnDrvCpsDdsomj,			// Dungeons & Dragons - shadow over mystara (960619 Japan)
 	&BurnDrvCpsDdsomud,			// Dungeons & Dragons - shadow over mystara (960619 USA Phoenix Edition)
@@ -21562,11 +21638,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvEfdt,				// El Fin Del Tiempo
 	&BurnDrvMSX_sideral,		// El Motorista Sideral (Spa)
 	&BurnDrvMSX_mundoper,		// El Mundo Perdido (Spa)
+	&BurnDrvmd_elvientok,		// El Viento (Hack, Korean)
 	&BurnDrvmd_elvientos,		// El Viento (Hack, Spanish)
 	&BurnDrvmd_elvientoj,		// El Viento (Jpn)
 	&BurnDrvmd_elviento,		// El Viento (USA)
 	&BurnDrvfds_electrician1,	// Electrician (Japan)
 	&BurnDrvfds_electrician,	// Electrician (T-eng)
+	&BurnDrvmd_elemastk,		// Elemental Master (Hack, Korean)
 	&BurnDrvmd_elemastj,		// Elemental Master (Jpn)
 	&BurnDrvmd_elemast,			// Elemental Master (USA)
 	&BurnDrvElevator,			// Elevator Action (BA3, 4 pcb version, 1.1)
@@ -21724,6 +21802,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvExerizrb,			// Exerizer (Japan) (bootleg)
 	&BurnDrvExerizer,			// Exerizer (Japan)
 	&BurnDrvmd_exile,			// Exile (USA)
+	&BurnDrvmd_exilek,			// Exile - Toki no Hazama e (Hack, Korean)
 	&BurnDrvmd_exilej,			// Exile - Toki no Hazama e (Jpn)
 	&BurnDrvmd_exosquad,		// Exo Squad (Euro)
 	&BurnDrvmd_exosquadu,		// Exo Squad (USA)
@@ -21839,7 +21918,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecFactdaze,			// Factory Daze (HB)
 	&BurnDrvMSX_factory,		// Factory Infection (HB)
 	&BurnDrvgg_factoryp,		// Factory Panic (Euro, Bra)
-	&BurnDrvCHF_Channelf,		// Fairchild Channel F (Bios) [BIOS only, NOT WORKING]
 	&BurnSpecFairlight128,		// Fairlight - A Prelude (128K)
 	&BurnSpecFairlight48,		// Fairlight - A Prelude (48K)
 	&BurnSpecFairlight2,		// Fairlight II (128K)
@@ -21933,6 +22011,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvtg_fantzone,		// Fantasy Zone
 	&BurnDrvFantazia,			// Fantazia (bootleg?)
 	&BurnDrvkabukiklb,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Add hidden characters)
+	&BurnDrvkabukikb,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den (Boss Hack)
 	&BurnDrvkabukikl,			// Far East of Eden - Kabuki Klash / Tengai Makyou - Shin Den
 #if defined FBNEO_DEBUG
 	&BurnDrvFarwest,			// Far West [no comment, NOT WORKING]
@@ -21953,16 +22032,20 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_fastest1,		// Fastest 1 (Jpn)
 	&BurnDrvmd_fatfury,			// Fatal Fury (Euro, Kor)
 	&BurnDrvmd_fatfuryu,		// Fatal Fury (USA)
+	&BurnDrvFatFur1h,			// Fatal Fury - King of Fighters (Hidden Hack)
 	&BurnDrvFatfury1bh,			// Fatal Fury - King of Fighters / Garou Densetsu - shukumei no tatakai (Boss Hack by Yumeji)
 	&BurnDrvFatFury1,			// Fatal Fury - King of Fighters / Garou Densetsu - shukumei no tatakai (NGM-033)(NGH-033)
 	&BurnDrvmd_fatfury2ec,		// Fatal Fury 2 (Hack, Enhanced Colors v4.0)
+	&BurnDrvFatfur2h,			// Fatal Fury 2 (Hidden Hack)
 	&BurnDrvmd_fatfury2,		// Fatal Fury 2 (USA, Kor)
 	&BurnDrvFatfury2,			// Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (NGM-047)(NGH-047)
 	&BurnDrvFatfury2a,			// Fatal Fury 2 / Garou Densetsu 2 - arata-naru tatakai (NGM-047)
+	&BurnDrvFatfur3b,			// Fatal Fury 3 - Road to the Final Victory (Boss Hack)
 	&BurnDrvFatfury3bh,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (Ancient Battles Resurgence 2015-03-13)
 	&BurnDrvFatfury3a,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (NGM-069)(NGH-069) (alternate set)
 	&BurnDrvFatfury3,			// Fatal Fury 3 - Road to the Final Victory / Garou Densetsu 3 - haruka-naru tatakai (NGM-069)(NGH-069)
 	&BurnDrvgg_fatfursp,		// Fatal Fury Special (Euro)
+	&BurnDrvFatfursh,			// Fatal Fury Special (Hidden Hack)
 	&BurnDrvgg_fatfurspu,		// Fatal Fury Special (USA)
 	&BurnDrvFatfurspbs,			// Fatal Fury Special / Garou Densetsu Special (Optional Hidden Character Third Edition)
 	&BurnDrvFatfursp,			// Fatal Fury Special / Garou Densetsu Special (set 1)(NGM-058)(NGH-058)
@@ -22021,6 +22104,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_fifa99,			// FIFA Soccer 99 (Pirate)
 	&BurnDrvmd_fifa2k10,		// FIFA World Cup - South Africa 2010 (Rus)
 	&BurnDrvmd_fifa2k2,			// FIFA World Cup 2002 (Rus)
+	&BurnDrvfightfeb,			// Fight Fever (Boss Hack)
 	&BurnDrvfightfev,			// Fight Fever (set 1)
 	&BurnDrvfightfeva,			// Fight Fever (set 2)
 	&BurnDrvFghtatck,			// Fighter & Attacker (US)
@@ -22082,10 +22166,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsFfightj3,		// Final Fight (900405 Japan)
 	&BurnDrvCpsFfightub,		// Final Fight (900424 USA)
 	&BurnDrvCpsFfightj4,		// Final Fight (900613 Japan)
+	&BurnDrvCpsFfgtj4v2,		// Final Fight (900613 Japan, 1 vs 2 Hack)
 	&BurnDrvCpsFfightuc,		// Final Fight (900613 USA)
 	&BurnDrvCpsFfightbl,		// Final Fight (bootleg set 1 (with 2xYM2203 + 2xMSM5205), World)
 	&BurnDrvCpsFfightbla,		// Final Fight (bootleg set 2 (with 2xYM2203 + 2xMSM5205), World))
 	&BurnDrvCpsFfightj,			// Final Fight (Japan)
+	&BurnDrvCpsFfgtj2sp,		// Final Fight (Super Plus Hack, 900305 Japan)
 	&BurnDrvCpsFfightu,			// Final Fight (USA, set 1)
 	&BurnDrvCpsFfightu1,		// Final Fight (USA, set 2)
 	&BurnDrvCpsFfightu2,		// Final Fight (USA, set 3)
@@ -22285,7 +22371,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvFoodf1,				// Food Fight (rev 1)
 	&BurnDrvFoodf2,				// Food Fight (rev 2)
 	&BurnDrvFoodf,				// Food Fight (rev 3)
-	&BurnDrvCHF_football,		// Football (Prototype)
 	&BurnDrvFootchmp,			// Football Champ (World)
 	&BurnSpecfootdire,			// Football Director (48K)
 	&BurnDrvFbfrenzy,			// Football Frenzy (NGM-034)(NGH-034)
@@ -22488,8 +22573,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_gboogers,		// Galactic Boogers (HB)
 	&BurnDrvnes_galaccru,		// Galactic Crusader (USA) (Unl)
 	&BurnDrvsms_galactpr,		// Galactic Protector (Jpn)
-	&BurnDrvCHF_galacticp,		// Galactic Space Wars (Prototype)
-	&BurnDrvCHF_galactic,		// Galactic Space Wars / Lunar Lander
 	&BurnDrvGalastrm,			// Galactic Storm (Japan)
 	&BurnDrvGwarrior,			// Galactic Warriors
 	&BurnDrvGalaga88a,			// Galaga '88 (02-03-88)
@@ -22551,6 +22634,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvcv_galaxian,		// Galaxian
 	&BurnDrvnes_galaxy5000,		// Galaxy 5000 (USA)
 	&BurnDrvGalemp,				// Galaxy Empire (bootleg?)
+	&BurnDrvgalaxyfh,			// Galaxy Fight - Universal Warriors (Hidden Hack)
 	&BurnDrvgalaxyfg,			// Galaxy Fight - Universal Warriors
 	&BurnDrvsms_gforce,			// Galaxy Force (Euro, Bra)
 	&BurnDrvsms_gforceu,		// Galaxy Force (USA)
@@ -22648,6 +22732,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGangwars,			// Gang Wars
 	&BurnDrvsms_robocop,		// Gangcheol RoboCop (Kor)
 	&BurnDrvsms_gangster,		// Gangster Town (Euro, USA, Bra)
+	&BurnDrvganryund,			// Ganryu (Fully Decrypted)
 	&BurnDrvganryu,				// Ganryu / Musashi Ganryuki
 	&BurnDrvnes_gansosaij,		// Ganso Saiyuuki - Super Monkey Daibouken (Japan)
 	&BurnDrvnes_gansosai,		// Ganso Saiyuuki - Super Monkey Daibouken (T-Eng)
@@ -22673,6 +22758,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGarogun,			// Garogun Seroyang (Korea)
 	&BurnDrvgaroubl,			// Garou - Mark of the Wolves (bootleg)
 	&BurnDrvGaroub,				// Garou - Mark of the Wolves (Enable hidden characters)
+	&BurnDrvGaround,			// Garou - Mark of the Wolves (Fully Decrypted)
 	&BurnDrvgarouha,			// Garou - Mark of the Wolves (NGH-2530)
 	&BurnDrvgarouh,				// Garou - Mark of the Wolves (NGM-2530) (NGH-2530)
 	&BurnDrvGarou,				// Garou - Mark of the Wolves (NGM-2530)
@@ -22856,6 +22942,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecGimmebright,		// Gimme Bright (48K) (HB, v2.0)
 	&BurnDrvnes_gimmick,		// Gimmick! (Japan)
 	&BurnDrvfds_gingaden,		// Ginga Denshou - Galaxy Odyssey (Japan)
+	&BurnDrvGinganink,			// Ginga NinkyouDen (Korean)
 	&BurnDrvGinganin,			// Ginga NinkyouDen (set 1)
 	&BurnDrvGinganina,			// Ginga NinkyouDen (set 2)
 	&BurnDrvGteikokub,			// Gingateikoku No Gyakushu (bootleg set 1)
@@ -22872,6 +22959,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvGlasskr,			// Glass (Ver 1.1, Break Edition, Version 1994) (censored, unprotected)
 	&BurnDrvGlass,				// Glass (Ver 1.1, Break Edition, Version 1994)
 	&BurnDrvmd_gleylance,		// GleyLancer (Hack, English)
+	&BurnDrvmd_gleylanck,		// GleyLancer (Hack, Korean)
 	&BurnDrvmd_gleylanc,		// GleyLancer (Jpn)
 	&BurnDrvMSX_glider,			// Glider (Jpn)
 	&BurnDrvMSX_glidera,		// Glider (Jpn, Alt)
@@ -23279,6 +23367,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecgunship,			// Gunship
 	&BurnSpecGunstar,			// Gunstar (48K)
 	&BurnDrvmd_gunstar,			// Gunstar Heroes (Euro)
+	&BurnDrvmd_gunstark,		// Gunstar Heroes (Hack, Korean)
 	&BurnDrvmd_gunstars,		// Gunstar Heroes (Hack, Spanish)
 	&BurnDrvgg_gunstar,			// Gunstar Heroes (Jpn)
 	&BurnDrvmd_gunstarj,		// Gunstar Heroes (Jpn)
@@ -23344,7 +23433,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_hammboy,		// Hammer Boy (Spa)
 	&BurnSpecHammerfist,		// Hammerfist (48K)
 	&BurnDrvHharryu,			// Hammerin' Harry (US, M84 hardware)
-	&BurnDrvHharry,				// Hammerin' Harry (World, M81 hardware))
+	&BurnDrvHharry,				// Hammerin' Harry (World, M81 hardware)
 	&BurnDrvHharryb,			// Hammerin' Harry (World, M84 hardware bootleg)
 	&BurnDrvpce_hanataka,		// Hana Taaka Daka!?
 	&BurnDrvmd_handyharvy,		// Handy Harvy (HB)
@@ -23366,7 +23455,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvhangly,				// Hangly-Man (set 1)
 	&BurnDrvhangly2,			// Hangly-Man (set 2)
 	&BurnDrvhangly3,			// Hangly-Man (set 3)
-	&BurnDrvCHF_hangman,		// Hangman
 	&BurnDrvHangzo,				// Hangzo (Japan, prototype)
 	&BurnDrvpce_haniisky,		// Hanii in the Sky
 	&BurnDrvpce_haniirod,		// Hanii on the Road
@@ -23584,7 +23672,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpechobbit,			// Hobbit, The v1.2 (48K)
 	&BurnDrvHoccer,				// Hoccer (set 1)
 	&BurnDrvHoccer2,			// Hoccer (set 2)
-	&BurnDrvCHF_builtin,		// Hockey + Tennis
 	&BurnDrvnes_hogansalley,	// Hogan's Alley (USA)
 	&BurnDrvnes_hokutonoken,	// Hokuto no Ken (Japan)
 	&BurnDrvsms_hokuto,			// Hokuto no Ken (Jpn)
@@ -23620,6 +23707,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvRedfoxwp2a,			// Hong Hu Zhanji II (China, set 2)
 	&BurnDrvsms_hongkildong,	// Hong Kil Dong (Kor)
 	&BurnSpecHkphooey,			// Hong Kong Phooey (48K)
+	&BurnDrvmd_ddanpeik,		// Honoo no Toukyuuji - Dodge Danpei (Hack, Korean)
 	&BurnDrvgg_ddanpei,			// Honoo no Toukyuuji - Dodge Danpei (Jpn)
 	&BurnDrvmd_ddanpei,			// Honoo no Toukyuuji - Dodge Danpei (Jpn)
 	&BurnDrvpce_ddanpei,		// Honoo no Toukyuuji - Dodge Danpei
@@ -23753,6 +23841,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvHyperspt,			// Hyper Sports
 	&BurnSpecHypersports,		// Hyper Sports
 	&BurnDrvCpsHsf2j1,			// Hyper Street Fighter II: The Anniversary Edition (031222 Japan)
+	&BurnDrvCpsHsf2jh,			// Hyper Street Fighter II: The Anniversary Edition (031222 Japan, Hidden Hack)
 	&BurnDrvCpsHsf2d,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia Phoenix Edition)
 	&BurnDrvCpsHsf2da,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia Phoenix Edition, alt)
 	&BurnDrvCpsHsf2a,			// Hyper Street Fighter II: The Anniversary Edition (040202 Asia)
@@ -24380,6 +24469,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKarnova,			// Karnov (US, rev 5)
 	&BurnDrvKarnov,				// Karnov (US, rev 6)
 	&BurnDrvnes_karnov,			// Karnov (USA)
+	&BurnDrvkarnovrb,			// Karnov's Revenge / Fighter's History Dynamite (Hidden Hack)
 	&BurnDrvkarnovr,			// Karnov's Revenge / Fighter's History Dynamite
 	&BurnSpecKarnov,			// Karnov
 	&BurnDrvnes_kartfighter,	// Kart Fighter (Unl)
@@ -24556,6 +24646,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKittenk,			// Kitten Kaboodle
 	&BurnDrvnes_kittyscatch,	// Kitty's Catch (USA)
 	&BurnDrvnes_kiwikra,		// Kiwi Kraze - A Bird-Brained Adventure! (USA)
+	&BurnDrvkizunab,			// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle (Boss Hack)
 	&BurnDrvKizuna,				// Kizuna Encounter - Super Tag Battle / Fu'un Super Tag Battle
 	&BurnDrvnes_klashball,		// KlashBall (USA)
 	&BurnSpecKlax,				// Klax (128K)
@@ -24604,6 +24695,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_knightm3,		// Knightmare III - Shalom (Jpn)
 	&BurnDrvsg1k_moyuchua,		// Knightmare, Moyu Chuanqi (Tw)
 	&BurnDrvCpsKnights,			// Knights of the Round (911127 etc)
+	&BurnDrvCpsKnightj3,		// Knights of the Round (911127 Japan, 1 vs 3 Hack)
 	&BurnDrvCpsKnightsja,		// Knights of the Round (911127 Japan, B-Board 89625B-1)
 	&BurnDrvCpsKnightsj,		// Knights of the Round (911127 Japan, B-Board 91634B-2)
 	&BurnDrvCpsKnightsu,		// Knights of the Round (911127 USA)
@@ -24858,6 +24950,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvgg_landill,			// Land of Illusion Starring Mickey Mouse (Euro, USA)
 	&BurnDrvLsasquad,			// Land Sea Air Squad / Riku Kai Kuu Saizensen
 	&BurnDrvmd_landstlkg,		// Landstalker - Die Schatze von Konig Nolo (Ger)
+	&BurnDrvmd_landstlkk,		// Landstalker - Koutei no Zaihou (Hack, Korean)
 	&BurnDrvmd_landstlkj,		// Landstalker - Koutei no Zaihou (Jpn)
 	&BurnDrvmd_landstlkc,		// Landstalker - Koutei no Zaihou (T-Chi)
 	&BurnDrvmd_landstlkf,		// Landstalker - Le Tresor du Roi Nole (Fra)
@@ -25047,7 +25140,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvLgtnfghtu,			// Lightning Fighters (US)
 	&BurnDrvLgtnfght,			// Lightning Fighters (World)
 	&BurnDrvLtswords,			// Lightning Swords
-	&BurnDrvCHF_lightsout,		// Lights Out (HB)
 	&BurnDrvShangonleeh,		// Limited Edition Hang-On (Enhanced Edition v2.0.2)
 	&BurnDrvShangonle,			// Limited Edition Hang-On
 	&BurnSpeclinefire,			// Line of Fire (48K)
@@ -25296,7 +25388,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_magickidgoogoo,	// Magic Kid GooGoo (Unl)
 	&BurnDrvgg_rayearth,		// Magic Knight Rayearth (Jpn)
 	&BurnDrvgg_rayeart2,		// Magic Knight Rayearth 2 - Making of Magic Knight (Jpn)
-	&BurnDrvCHF_magicnum,		// Magic Numbers / Mind Reader / Nim
 	&BurnDrvnes_magicschc,		// Magic of Scheherazade, The (USA) - Castellano v0.99
 	&BurnDrvnes_magicsch,		// Magic of Scheherazade, The (USA)
 	&BurnDrvmd_magicpockets,	// Magic Pockets (HB)
@@ -25535,6 +25626,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMshb,			// Marvel Super Heroes (951117 Brazil)
 	&BurnDrvCpsMshh,			// Marvel Super Heroes (951117 Hispanic)
 	&BurnDrvCpsMshj,			// Marvel Super Heroes (951117 Japan)
+	&BurnDrvCpsMshjh,			// Marvel Super Heroes (951117 Japan, Hidden Hack)
 	&BurnDrvCpsMshvsfa1,		// Marvel Super Heroes vs Street Fighter (970620 Asia)
 	&BurnDrvCpsMshvsfa,			// Marvel Super Heroes vs Street Fighter (970625 Asia)
 	&BurnDrvCpsMshvsfb1,		// Marvel Super Heroes vs Street Fighter (970625 Brazil)
@@ -25545,6 +25637,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMshvsfu1,		// Marvel Super Heroes vs Street Fighter (970625 USA)
 	&BurnDrvCpsMshvsfj1,		// Marvel Super Heroes vs Street Fighter (970702 Japan)
 	&BurnDrvCpsMshvsfj,			// Marvel Super Heroes vs Street Fighter (970707 Japan)
+	&BurnDrvCpsMshvsfjh,		// Marvel Super Heroes vs Street Fighter (970707 Japan, Hidden Hack)
 	&BurnDrvCpsMshvsfb,			// Marvel Super Heroes vs Street Fighter (970827 Brazil)
 	&BurnDrvCpsMshvsfu,			// Marvel Super Heroes vs Street Fighter (970827 USA)
 	&BurnDrvCpsMvscur1,			// Marvel vs Capcom - clash of super heroes (971222 USA)
@@ -25600,9 +25693,9 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_maten,			// Maten no Soumetsu (Jpn)
 	&BurnDrvnes_matendouji,		// Matendouji (Japan)
 	&BurnDrvmd_mathblst,		// Math Blaster - Episode 1 (USA)
-	&BurnDrvCHF_mthquiz1,		// Math Quiz 1
-	&BurnDrvCHF_mthquiz2,		// Math Quiz 2
 	&BurnDrvfds_matounohou,		// Matou no Houkai - The Hero of Babel (Japan)
+	&BurnDrvmatrimdh,			// Matrimelee (Boss Hack)
+	&BurnDrvmatrimnd,			// Matrimelee (Fully Decrypted)
 	&BurnDrvmatrimbl,			// Matrimelee / Shin Gouketsuji Ichizoku Toukon (bootleg)
 	&BurnDrvMatrimbh,			// Matrimelee / Shin Gouketsuji Ichizoku Toukon (Enable Hidden Characters V2)
 	&BurnDrvmatrim,				// Matrimelee / Shin Gouketsuji Ichizoku Toukon (NGM-2660) (NGH-2660)
@@ -25613,8 +25706,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMaydaya,			// Mayday (set 2)
 	&BurnDrvMaydayb,			// Mayday (set 3)
 	&BurnDrvMSX_mayhem,			// Mayhem
-	&BurnDrvCHF_mazea,			// Maze / Jailbreak / Blind-man's-bluff / Trailblazer (Alt)
-	&BurnDrvCHF_maze,			// Maze / Jailbreak / Blind-man's-bluff / Trailblazer
 	&BurnDrvsms_mazehunt,		// Maze Hunter 3-D (Euro, USA, Bra)
 	&BurnDrvMSX_Mazemax,		// Maze Max
 	&BurnDrvMofflott,			// Maze of Flott (Japan)
@@ -25741,7 +25832,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvngp_melonchn,		// Melon-chan no Seichou Nikki (Jpn)
 	&BurnDrvngpc_memories,		// Memories Off - Pure (Jpn)
 	&BurnDrvcv_memmanor,		// Memory Manor
-	&BurnDrvCHF_memory,			// Memory Match 1 & 2
 	&BurnDrvMSX_menace,			// Menace (HB)
 	&BurnDrvnes_menacebeach,	// Menace Beach (USA) (Unl)
 	&BurnDrvMSX_mtriton,		// Menace from Triton, the (HB, v1.1)
@@ -25796,17 +25886,20 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmslug2dg,			// Metal Slug 2 - Super Vehicle-001/II (Multifunction Hack, 20170509)
 	&BurnDrvMSlug2,				// Metal Slug 2 - Super Vehicle-001/II (NGM-2410) (NGH-2410)
 	&BurnDrvMSlug2t,			// Metal Slug 2 Turbo (NGM-9410)
+	&BurnDrvmslug3nd,			// Metal Slug 3 (Fully Decrypted)
 	&BurnDrvmslug3g,			// Metal Slug 3 (Multifunction Hack, 20190119)
 	&BurnDrvmslug3v,			// Metal Slug 3 (NGH-2560) (Enhanced Violence Version, hack by EEZEZY)
 	&BurnDrvmslug3h,			// Metal Slug 3 (NGH-2560)
 	&BurnDrvmslug3,				// Metal Slug 3 (NGM-2560)
 	&BurnDrvmslug3a,			// Metal Slug 3 (NGM-2560, earlier)
+	&BurnDrvmslug4nd,			// Metal Slug 4 (Fully Decrypted)
 	&BurnDrvmslug4dg,			// Metal Slug 4 (Multifunction Hack, 20171225)
 	&BurnDrvmslug4h,			// Metal Slug 4 (NGH-2630)
 	&BurnDrvmslug4,				// Metal Slug 4 (NGM-2630)
 	&BurnDrvms4plus,			// Metal Slug 4 Plus (bootleg)
 	&BurnDrvmslug5b,			// Metal Slug 5 (bootleg, set 1)
 	&BurnDrvmslug5b2,			// Metal Slug 5 (bootleg, set 2)
+	&BurnDrvmslug5nd,			// Metal Slug 5 (Fully Decrypted)
 	&BurnDrvms5pcb,				// Metal Slug 5 (JAMMA PCB)
 	&BurnDrvmslug5g,			// Metal Slug 5 (Multifunction Hack, 20170523)
 	&BurnDrvMslug5w,			// Metal Slug 5 (New Campaign, 2016-03-10)
@@ -26408,8 +26501,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_unleashed,		// MSX Unleashed (HB, Tech-demo)
 	&BurnDrvmsx_msx,			// MSX1 System BIOS [BIOS only, NOT WORKING]
 	&BurnDrvrocktrv2,			// MTV Rock-N-Roll Trivia (Part 2)
-	&BurnDrvCHF_muehle,			// Muehle / Tontauben-Schiessen / Kreatives Malspiel / Videoscope (Ger)
 	&BurnDrvMugsmash,			// Mug Smashers
+	&BurnDrvmd_valisk,			// Mugen Senshi Valis (Hack, Korean)
 	&BurnDrvmd_valisj,			// Mugen Senshi Valis (Jpn)
 	&BurnDrvMSX_valis,			// Mugen Senshi Valis (Jpn)
 	&BurnDrvMSX_valisk,			// Mugen Senshi Valis (Kor)
@@ -26445,6 +26538,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsMbombrd,			// Muscle Bomber Duo - ultimate team battle (931206 World)
 	&BurnDrvmd_mushas,			// Musha - Metallic Uniframe Super Hybrid Armor (Hack, Spanish)
 	&BurnDrvmd_musha,			// MUSHA - Metallic Uniframe Super Hybrid Armor (USA)
+	&BurnDrvmd_mushak,			// Musha Aleste - Full Metal Fighter Ellinor (Hack, Korean)
 	&BurnDrvmd_mushaj,			// Musha Aleste - Full Metal Fighter Ellinor (Jpn)
 	&BurnDrvsg1k_musicj,		// Music (Jpn)
 	&BurnDrvMusicbal,			// Music Ball
@@ -26747,6 +26841,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsyscheck,			// Neo System Check (ver 1.0b)
 	&BurnDrvneothndr,			// Neo Thunder
 	&BurnDrvturfmast,			// Neo Turf Masters / Big Tournament Golf
+	&BurnDrvNeocu98k,			// Neo-Geo Cup '98 - The Road to the Victory (Korean)
 	&BurnDrvNeocup98,			// Neo-Geo Cup '98 - The Road to the Victory
 	&BurnDrvneotet,				// NeoGeo 2-Player Tetris
 	&BurnDrvneo3ddmo,			// NeoGeo 3D! Demo
@@ -26929,6 +27024,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ncirc1,			// Nightmare Circus (Bra, Alt)
 	&BurnDrvmd_ncircp,			// Nightmare Circus (Prototype)
 	&BurnDrvnitdbl,				// Nightmare in the Dark (bootleg)
+	&BurnDrvnitdnd,				// Nightmare in the Dark (Fully Decrypted)
 	&BurnDrvnitd,				// Nightmare in the Dark
 	&BurnDrvnes_nightonelmstra,	// Nightmare on Elm Street, A (USA)
 	&BurnDrvnes_nightshade,		// Nightshade (USA)
@@ -26974,6 +27070,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKazan,				// Ninja Kazan (World)
 	&BurnDrvnes_ninjakid,		// Ninja Kid (USA)
 	&BurnSpecNinjamassacre,		// Ninja Massacre (128K)
+	&BurnDrvninjamab,			// Ninja Master's - haoh-ninpo-cho (Boss Hack)
 	&BurnDrvNinjamasha,			// Ninja Master's - haoh-ninpo-cho (Plus)
 	&BurnDrvninjamas,			// Ninja Master's - haoh-ninpo-cho
 	&BurnDrvnes_ninja4s,		// Ninja of the 4 Seasons (HB)
@@ -27169,7 +27266,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvOrbitron,			// Orbitron
 	&BurnDrvOrbs,				// Orbs (10/7/94 prototype?)
 	&BurnDrvtg_griffon,			// Order of the Griffon
-	&BurnDrvCHF_ordtvlng,		// Ordtavling (Swe)
 	&BurnDrvOrdynej,			// Ordyne (Japan)
 	&BurnDrvOrdyneje,			// Ordyne (Japan, English Version)
 	&BurnDrvOrdyne,				// Ordyne (World)
@@ -27305,8 +27401,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPacmanblc,			// Pac-Man (Calfesa, Spanish bootleg on Galaxian hardware)
 	&BurnDrvPacmanbl,			// Pac-Man (Galaxian hardware, set 1)
 	&BurnDrvPacmanbla,			// Pac-Man (Galaxian hardware, set 2)
-	&BurnDrvCHF_pacman,			// Pac-Man (HB)
-	&BurnDrvCHF_pacmanv2,		// Pac-Man (HB, v2)
 	&BurnDrvpacheart,			// Pac-Man (Hearts)
 	&BurnDrvgg_pacmanj,			// Pac-Man (Jpn)
 	&BurnDrvMSX_pacman,			// Pac-Man (Jpn)
@@ -27606,6 +27700,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_pstarjmd,		// Phantasy Star (Jpn, MD)
 	&BurnDrvsms_pstarje,		// Phantasy Star (Jpn, T-Eng v2.00)
 	&BurnDrvsms_pstark,			// Phantasy Star (Kor)
+	&BurnDrvmd_pstar4k,			// Phantasy Star - Sennenki no Owari ni (Hack, Korean)
 	&BurnDrvmd_pstar4j,			// Phantasy Star - Sennenki no Owari ni (Jpn)
 	&BurnDrvmd_pstar4,			// Phantasy Star - The End of the Millennium (Euro)
 	&BurnDrvmd_pstar4p5,		// Phantasy Star - The End of the Millennium (Prototype, 19940530)
@@ -27626,6 +27721,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ps2ab,			// Phantasy Star II - Anne's Adventure (Jpn, SegaNet)
 	&BurnDrvmd_ps2ace,			// Phantasy Star II - Huey's Adventure (Hack, English)
 	&BurnDrvmd_ps2ac,			// Phantasy Star II - Huey's Adventure (Jpn, SegaNet)
+	&BurnDrvmd_pstar2k,			// Phantasy Star II - Kaerazaru Toki no Owari ni (Hack, Korean)
 	&BurnDrvmd_pstar2j,			// Phantasy Star II - Kaerazaru Toki no Owari ni (Jpn)
 	&BurnDrvmd_ps2ade,			// Phantasy Star II - Kinds's Adventure (Hack, English)
 	&BurnDrvmd_ps2ad,			// Phantasy Star II - Kinds's Adventure (Jpn, SegaNet)
@@ -27707,8 +27803,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPbaction4,			// Pinball Action (set 4, encrypted)
 	&BurnDrvPbactiont,			// Pinball Action (Tecfri License)
 	&BurnDrvMSX_pinblast,		// Pinball Blaster (Euro)
-	&BurnDrvCHF_pinballa,		// Pinball Challenge (Alt)
-	&BurnDrvCHF_pinball,		// Pinball Challenge
 	&BurnDrvnes_pinbacvbyred,	// Pinball CV by Redrum (Hack)
 	&BurnDrvgg_pbdreams,		// Pinball Dreams (USA)
 	&BurnDrvnes_pinballquest,	// Pinball Quest (USA)
@@ -27820,6 +27914,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_popoteam,		// Po Po Team (Taiwan)
 	&BurnDrvmd_pocahont,		// Pocahontas (Euro)
 	&BurnDrvmd_pocahontu,		// Pocahontas (USA)
+	&BurnDrvpnyaand,			// Pochi and Nyaa (Fully Decrypted)
 	&BurnDrvpnyaaa,				// Pochi and Nyaa (Ver 2.00)
 	&BurnDrvpnyaa,				// Pochi and Nyaa (Ver 2.02)
 	&BurnDrvngpc_neo21,			// Pocket Casino Series - Neo 21 (Euro, USA)
@@ -27974,7 +28069,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPowerinb,			// Power Instinct (USA, bootleg set 2)
 	&BurnDrvPowerinsc,			// Power Instinct (USA, bootleg set 3) [no comment, NOT WORKING]
 	&BurnDrvPowerinspu,			// Power Instinct (USA, prototype)
-	&BurnDrvPwrinst2k,			// Power instinct 2 (Korea, ver. 94/04/08)
+	&BurnDrvPwrinst2k,			// Power Instinct 2 (Korea, ver. 94/04/08)
 	&BurnDrvPwrinst2,			// Power Instinct 2 (USA, ver. 94/04/08)
 	&BurnDrvpce_pleag93,		// Power League '93
 	&BurnDrvpce_pleagas,		// Power League (All Star Version)
@@ -28015,6 +28110,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_predatr2s,		// Predator 2 (Hack, Spanish)
 	&BurnSpecPredator2,			// Predator 2
 	&BurnSpecPredator,			// Predator
+	&BurnDrvpisle2nd,			// Prehistoric Isle 2 (Fully Decrypted)
 	&BurnDrvpreisle2,			// Prehistoric Isle 2
 	&BurnDrvPrehislk,			// Prehistoric Isle in 1930 (Korea)
 	&BurnDrvPrehislu,			// Prehistoric Isle in 1930 (US)
@@ -28081,7 +28177,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_par2,			// Pro Action Replay 2 (Euro)
 	&BurnDrvmd_par2a,			// Pro Action Replay 2 (Euro, Alt)
 	&BurnDrvCprobowl,			// Pro Bowling (DECO Cassette) (US)
-	&BurnDrvCHF_pfootbll,		// Pro Football
 	&BurnSpecProgolfsim,		// Pro Golf Simulator
 	&BurnDrvfds_progolsarkagnoto,// Pro Golfer Saru - Kage no Tournament (Japan)
 #if defined FBNEO_DEBUG
@@ -28266,6 +28361,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvPclubys,			// Puzzle Club (Yun Sung, set 1)
 	&BurnDrvPclubysa,			// Puzzle Club (Yun Sung, set 2)
 	&BurnDrvPzlbowl,			// Puzzle De Bowling (Japan)
+	&BurnDrvpuzzldpk,			// Puzzle De Pon! (Korean)
+	&BurnDrvpuzzldrk,			// Puzzle De Pon! R! (Korean)
 	&BurnDrvpuzzldpr,			// Puzzle De Pon! R!
 	&BurnDrvpuzzledp,			// Puzzle De Pon!
 	&BurnDrvPuzzlekg,			// Puzzle King (Dance & Puzzle)
@@ -28495,6 +28592,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_radrexu,			// Radical Rex (USA)
 	&BurnDrvnes_rafworld,		// Raf World (Japan)
 	&BurnDrvRaflesia,			// Rafflesia (315-5162)
+	&BurnDrvrotdbh,				// Rage of the Dragons (Boss Hack)
+	&BurnDrvrotdnd,				// Rage of the Dragons (Fully Decrypted)
 	&BurnDrvrotdh,				// Rage of the Dragons (NGH-2640)
 	&BurnDrvrotd,				// Rage of the Dragons (NGM-264?)
 	&BurnSpecRagnablock,		// Ragnablock (HB)
@@ -28688,7 +28787,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_rastan2j,		// Rastan Saga II (Jpn)
 	&BurnDrvmd_rastan2,			// Rastan Saga II (USA)
 	&BurnDrvpce_rastan2,		// Rastan Saga II
-	&BurnDrvCHF_ratmal,			// Rat' Mal (Ger)
 	&BurnSpecRatatat,			// Rat-A-Tat (HB)
 	&BurnDrvMSX_raththa,		// Rath-Tha (Spa)
 	&BurnDrvRayforce,			// Ray Force (Ver 2.3A 1994/01/20)
@@ -28700,10 +28798,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvrbff1k,				// Real Bout Fatal Fury / Real Bout Garou Densetsu (Korean release)
 	&BurnDrvrbff1ka,			// Real Bout Fatal Fury / Real Bout Garou Densetsu (Korean release, bug fix revision)
 	&BurnDrvrbff1,				// Real Bout Fatal Fury / Real Bout Garou Densetsu (NGM-095)(NGH-095)
+	&BurnDrvrbff2hb,			// Real Bout Fatal Fury 2 - The Newcomers (Hidden Hack)
 	&BurnDrvrbff2k,				// Real Bout Fatal Fury 2 - The Newcomers (Korean release)
 	&BurnDrvrbff2h,				// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (NGH-2400)
 	&BurnDrvrbff2,				// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (NGM-2400)
 	&BurnDrvrbff2bh,			// Real Bout Fatal Fury 2 - The Newcomers / Real Bout Garou Densetsu 2 - the newcomers (Secret Character Hack)
+	&BurnDrvrbffspeh,			// Real Bout Fatal Fury Special (Hidden Hack)
 	&BurnDrvrbffspbh,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special (Boss Hack)
 	&BurnDrvrbffspeck,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special (Korean release)
 	&BurnDrvrbffspec,			// Real Bout Fatal Fury Special / Real Bout Garou Densetsu Special
@@ -28959,8 +29059,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvMSX_robofrog,		// Robofrog (Jpn)
 	&BurnDrvMSX_robofroga,		// Robofrog (Jpn, Alt)
 	&BurnDrvmd_robotbat,		// Robot Battler (Jpn, SegaNet)
-	&BurnDrvCHF_robotwarp,		// Robot War (Prototype)
-	&BurnDrvCHF_robotwar,		// Robot War / Torpedo Alley
 	&BurnDrvMSX_robotwar,		// Robot Wars (Euro)
 	&BurnDrvmd_robowrek,		// Robot Wreckage (USA, Prototype)
 	&BurnDrvRobotron87,			// Robotron: 2084 (1987 'shot-in-the-corner' bugfix)
@@ -29237,6 +29335,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvTsamuraih,			// Samurai Nihon-Ichi (bootleg, harder)
 	&BurnDrvTsamurai,			// Samurai Nihon-Ichi (set 1)
 	&BurnDrvTsamurai2,			// Samurai Nihon-Ichi (set 2)
+	&BurnDrvSamShob,			// Samurai Shodown (Boss Hack)
 	&BurnDrvmd_samsho,			// Samurai Shodown (Euro)
 	&BurnDrvmd_samshoec,		// Samurai Shodown (Hack, Enhanced Colors v2.0)
 	&BurnDrvmd_samshos,			// Samurai Shodown (Hack, Spanish)
@@ -29245,18 +29344,24 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSamShoh,			// Samurai Shodown / Samurai Spirits (NGH-045)
 	&BurnDrvSamsho,				// Samurai Shodown / Samurai Spirits (NGM-045)
 	&BurnDrvSamShoa,			// Samurai Shodown / Samurai Spirits (NGM-045, alternate board)
+	&BurnDrvSamSho2b,			// Samurai Shodown II (Boss Hack)
 	&BurnDrvSamsho2,			// Samurai Shodown II / Shin Samurai Spirits - Haohmaru jigokuhen (NGM-063)(NGH-063)
 	&BurnDrvSamsho2sp,			// Samurai Shodown II / Shin Samurai Spirits - Haohmaru jigokuhen (Special 2017, hack)
+	&BurnDrvSamSho3b,			// Samurai Shodown III (Boss Hack)
 	&BurnDrvSamSho3h,			// Samurai Shodown III / Samurai Spirits - Zankurou Musouken (NGH-087)
 	&BurnDrvSamSho3,			// Samurai Shodown III / Samurai Spirits - Zankurou Musouken (NGM-087)
+	&BurnDrvSamSho4b,			// Samurai Shodown IV - Amakusa's Revenge (Boss Hack)
 	&BurnDrvSamSho4,			// Samurai Shodown IV - Amakusa's Revenge / Samurai Spirits - Amakusa Kourin (NGM-222)(NGH-222)
 	&BurnDrvSamSho4sp,			// Samurai Shodown IV - Amakusa's Revenge / Samurai Spirits - Amakusa Kourin (Special 2017, hack)
+	&BurnDrvsamsh5ndb,			// Samurai Shodown V (Boss Hack)
+	&BurnDrvsamsho5nd,			// Samurai Shodown V (Fully Decrypted)
 	&BurnDrvsamsho5b,			// Samurai Shodown V / Samurai Spirits Zero (bootleg)
 	&BurnDrvsamsho5x,			// Samurai Shodown V / Samurai Spirits Zero (hack of XBOX version)
 	&BurnDrvsamsho5h,			// Samurai Shodown V / Samurai Spirits Zero (NGH-2700)
 	&BurnDrvsamsho5,			// Samurai Shodown V / Samurai Spirits Zero (NGM-2700, set 1)
 	&BurnDrvsamsho5a,			// Samurai Shodown V / Samurai Spirits Zero (NGM-2700, set 2)
 	&BurnDrvsamsh5pf,			// Samurai Shodown V Perfect / Samurai Spirits Zero Perfect (bootleg, hack)
+	&BurnDrvssh5spnd,			// Samurai Shodown V Special (Fully Decrypted)
 	&BurnDrvsamsh5spho,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGH-2720) (1st release, censored)
 	&BurnDrvsamsh5sph,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGH-2720) (2nd release, less censored)
 	&BurnDrvsamsh5fe,			// Samurai Shodown V Special / Samurai Spirits Zero Special (NGM-272) (NGH-272) (Final Edition, location test version)
@@ -29347,13 +29452,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnSpecsavage2,			// Savage (Part 2 of 3) (48K)
 	&BurnSpecsavage3,			// Savage (Part 3 of 3) (48K)
 	&BurnDrvSavgbees,			// Savage Bees
+	&BurnDrvsavagerb,			// Savage Reign (Boss Hack)
 	&BurnDrvSavagereb,			// Savage Reign / Fu'un Mokushiroku - kakutou sousei (Boss Hack)
 	&BurnDrvSavagere,			// Savage Reign / Fu'un Mokushiroku - kakutou sousei
 	&BurnSpecSavingkong,		// Saving Kong (HB)
 	&BurnSpecSc0tb0t,			// Sc0tb0t (HB)
 	&BurnDrvMSX_scarlet7,		// Scarlet 7 - The Mightiest Women (Jpn)
 	&BurnDrvMSX_scentipede,		// Scentipede
-	&BurnDrvCHF_schach,			// Schach (Ger)
 	&BurnDrvSchmeisr,			// Schmeiser Robo (Japan)
 	&BurnDrvmd_msbp06,			// Scholastic's The Magic School Bus (Prototype, 19950331)
 	&BurnDrvmd_msbp05,			// Scholastic's The Magic School Bus (Prototype, 19950411)
@@ -29426,6 +29531,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_sdkblade,		// SD Keiji - Blader (Japan) [T-Eng] [no comment]
 	&BurnDrvnes_sdkbladej,		// SD Keiji - Blader (Japan) [no comment]
 #endif
+	&BurnDrvmd_sdvalisk,		// SD Valis (Hack, Korean)
 	&BurnDrvmd_sdvalis,			// SD Valis (Jpn)
 	&BurnDrvsms_sdi,			// SDI (Jpn)
 	&BurnDrvSdibl,				// SDI - Strategic Defense Initiative (bootleg, original hardware)
@@ -29508,6 +29614,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSengokuh,			// Sengoku / Sengoku Denshou (NGH-017)(US)
 	&BurnDrvSengoku,			// Sengoku / Sengoku Denshou (NGM-017)(NGH-017)
 	&BurnDrvSengoku2,			// Sengoku 2 / Sengoku Denshou 2
+	&BurnDrvSengo3nd,			// Sengoku 3 (Fully Decrypted)
+	&BurnDrvsengo3nh,			// Sengoku 3 (Hidden Hack)
 	&BurnDrvSengoku3s,			// Sengoku 3 / Sengoku Densho 2001 (Evolution 1.0, FCHT hack)
 	&BurnDrvsengoku3fs,			// Sengoku 3 / Sengoku Densho 2001 (Feng Shen Edition, Hack)
 	&BurnDrvSengoku3,			// Sengoku 3 / Sengoku Densho 2001 (set 1)
@@ -29628,10 +29736,12 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_ragnacenp,		// Shin Souseiki Ragnacenty (Jpn, Prototype)
 	&BurnDrvmd_ragnacenc,		// Shin Souseiki Ragnacenty (T-Chi)
 	&BurnDrvTshingen,			// Shingen Samurai-Fighter (Japan, English) [Game crashes in level 2, play tshingena instead!, NOT WORKING]
+	&BurnDrvmd_shindarkk,		// Shining and the Darkness (Hack, Korean)
 	&BurnDrvmd_shindarkj,		// Shining and the Darkness (Jpn)
 	&BurnDrvmd_shinfrces,		// Shining Force (Hack, Spanish)
 	&BurnDrvmd_shinfrce,		// Shining Force (USA)
 	&BurnDrvmd_shinfrcep,		// Shining Force (USA, Prototype)
+	&BurnDrvmd_shinfrcek,		// Shining Force - Kamigami no Isan (Hack, Korean)
 	&BurnDrvmd_shinfrcej,		// Shining Force - Kamigami no Isan (Jpn)
 	&BurnDrvgg_shinfrcg,		// Shining Force Gaiden - Ensei, Jashin no Kuni e (Jpn)
 	&BurnDrvgg_shinfrgfe,		// Shining Force Gaiden - Final Conflict (Hack, English)
@@ -29641,6 +29751,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_shinfrc2u,		// Shining Force II (USA)
 	&BurnDrvmd_shinfrc2p2,		// Shining Force II (USA, Prototype, 19940404)
 	&BurnDrvmd_shinfrc2p1,		// Shining Force II (USA, Prototype, 19940607)
+	&BurnDrvmd_shinfrc2k,		// Shining Force II - Koe no Fuuin (Hack, Korean)
 	&BurnDrvmd_shinfrc2j,		// Shining Force II - Koe no Fuuin (Jpn)
 	&BurnDrvmd_shinfrc2c,		// Shining Force II - Koe no Fuuin (T-Chi, v2)
 	&BurnDrvgg_shinfrc2,		// Shining Force II - The Sword of Hajya (Euro, USA)
@@ -29908,7 +30019,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSlither,			// Slither (set 1)
 	&BurnDrvSlithera,			// Slither (set 2)
 	&BurnDrvcv_slither,			// Slither
-	&BurnDrvCHF_slotmchn,		// Slot Machine
 	&BurnDrvcv_slurpy,			// Slurpy
 	&BurnDrvSlyspy2,			// Sly Spy (US revision 2)
 	&BurnDrvSlyspy3,			// Sly Spy (US revision 3)
@@ -29959,9 +30069,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvngpc_svccardsja,	// SNK vs. Capcom - Gekitotsu Card Fighters - SNK Supporters Version (Jpn, v6)
 	&BurnDrvngpc_svccardsj,		// SNK vs. Capcom - Gekitotsu Card Fighters - SNK Supporters Version (Jpn, v7)
 	&BurnDrvsvcboot,			// SNK vs. Capcom - SVC Chaos (bootleg)
+	&BurnDrvsvcnd,				// SNK vs. Capcom - SVC Chaos (Fully Decrypted)
 	&BurnDrvsvcpcb,				// SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 1)
 	&BurnDrvsvcpcba,			// SNK vs. Capcom - SVC Chaos (JAMMA PCB, set 2)
 	&BurnDrvsvc,				// SNK vs. Capcom - SVC Chaos (NGM-2690)(NGH-2690)
+	&BurnDrvsvcndps2,			// SNK vs. Capcom - SVC Chaos (PlayStation 2 Hack)
 	&BurnDrvsvcplus,			// SNK vs. Capcom - SVC Chaos Plus (bootleg set 1)
 	&BurnDrvsvcplusa,			// SNK vs. Capcom - SVC Chaos Plus (bootleg set 2)
 	&BurnDrvsvcsplus,			// SNK vs. Capcom - SVC Chaos Super Plus (bootleg)
@@ -30039,7 +30151,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSonsonj,			// Son Son (Japan)
 	&BurnDrvpce_sonson2,		// Son Son II
 	&BurnDrvSonson,				// Son Son
-	&BurnDrvCHF_sonrsrch,		// Sonar Search
 	&BurnDrvmd_skp12,			// Sonic & Knuckles (Prototype 0525, 19940525, 15.28)
 	&BurnDrvmd_skp10,			// Sonic & Knuckles (Prototype 0606, 19940606, 10.02)
 	&BurnDrvmd_skp08,			// Sonic & Knuckles (Prototype 0608, 19940608, 05.03)
@@ -30324,7 +30435,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSpctrek,			// Space Trek (Video Game S.A., Spanish bootleg of Scramble)
 	&BurnDrvMSX_spacetrb,		// Space Trouble (Jpn)
 	&BurnDrvMSX_spacewlk,		// Space Walk (Euro)
-	&BurnDrvCHF_spacewar,		// Space War
 	&BurnDrvnes_spacegulls,		// Spacegulls (HB, v1.1)
 	&BurnDrvSparkman,			// Spark Man (v2.0, set 1)
 	&BurnDrvMSX_sparkie,		// Sparkie (Jpn)
@@ -30410,8 +30520,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_spiritwf,		// Spiritual Warfare (USA)
 	&BurnDrvmd_spirou,			// Spirou (Euro)
 	&BurnDrvgg_spirou,			// Spirou (Euro, Prototype)
-	&BurnDrvCHF_spitfirep,		// Spitfire (Prototype)
-	&BurnDrvCHF_spitfire,		// Spitfire
 	&BurnDrvMSX_splash,			// Splash (Spa)
 	&BurnDrvSplat,				// Splat!
 	&BurnDrvSplatterj,			// Splatter House (Japan, SH1)
@@ -30760,6 +30868,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSf2uf,			// Street Fighter II - The World Warrior (910411 USA)
 	&BurnDrvCpsSf2ef,			// Street Fighter II - The World Warrior (910411 World)
 	&BurnDrvCpsSf2jh,			// Street Fighter II - The World Warrior (910522 Japan)
+	&BurnDrvCpsSf2jhpp,			// Street Fighter II - The World Warrior (910522 Japan, Plus Plus Hack)
 	&BurnDrvCpsSf2ug,			// Street Fighter II - The World Warrior (910522 USA, rev G)
 	&BurnDrvCpsSf2uh,			// Street Fighter II - The World Warrior (910522 USA, rev H)
 	&BurnDrvCpsSf2ui,			// Street Fighter II - The World Warrior (910522 USA, rev I)
@@ -30909,6 +31018,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfzh,			// Street Fighter Zero (950718 Hispanic)
 	&BurnDrvCpsSfzbr1,			// Street Fighter Zero (950727 Brazil)
 	&BurnDrvCpsSfzj,			// Street Fighter Zero (950727 Japan)
+	&BurnDrvCpsSfzjh,			// Street Fighter Zero (950727 Japan, Hidden Hack)
 	&BurnDrvCpsSfzb,			// Street Fighter Zero (951109 Brazil)
 	&BurnDrvCpsSfzcha,			// Street Fighter Zero (CPS Changer, 040820 Japan)
 //	&BurnDrvCpsSfzbch,			// Street Fighter Zero (CPS Changer, 950727 Brazil) [no comment]
@@ -30920,12 +31030,14 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfz2a,			// Street Fighter Zero 2 (960227 Asia)
 	&BurnDrvCpsSfz2jd,			// Street Fighter Zero 2 (960227 Japan Phoenix Edition)
 	&BurnDrvCpsSfz2jr1,			// Street Fighter Zero 2 (960227 Japan)
+	&BurnDrvCpsSfz2jr1h,		// Street Fighter Zero 2 (960227 Japan, Hidden Hack)
 	&BurnDrvCpsSfz2n,			// Street Fighter Zero 2 (960229 Oceania)
 	&BurnDrvCpsSfz2br1,			// Street Fighter Zero 2 (960304 Brazil)
 	&BurnDrvCpsSfz2h,			// Street Fighter Zero 2 (960304 Hispanic)
 	&BurnDrvCpsSfz2j,			// Street Fighter Zero 2 (960430 Japan)
 	&BurnDrvCpsSfz2b,			// Street Fighter Zero 2 (960531 Brazil)
 	&BurnDrvCpsSfz2alj,			// Street Fighter Zero 2 Alpha (960805 Japan)
+	&BurnDrvCpsSfz2aljh,		// Street Fighter Zero 2 Alpha (960805 Japan, Hidden Hack)
 	&BurnDrvCpsSfz2alb,			// Street Fighter Zero 2 Alpha (960813 Brazil)
 	&BurnDrvCpsSfz2alh,			// Street Fighter Zero 2 Alpha (960813 Hispanic)
 	&BurnDrvCpsSfz2ald,			// Street Fighter Zero 2 Alpha (960826 Asia Phoenix Edition)
@@ -30937,6 +31049,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSfz3jr1,			// Street Fighter Zero 3 (980727 Japan)
 	&BurnDrvCpsSfz3a,			// Street Fighter Zero 3 (980904 Asia)
 	&BurnDrvCpsSfz3j,			// Street Fighter Zero 3 (980904 Japan)
+	&BurnDrvCpsSfz3jh,			// Street Fighter Zero 3 (980904 Japan, Hidden Hack)
 	&BurnDrvCpsSfz3te,			// Street Fighter Zero 3 Training Edition v1.1 (980629 Japan)
 	&BurnDrvSftm110,			// Street Fighter: The Movie (v1.10)
 	&BurnDrvSftm111,			// Street Fighter: The Movie (v1.11)
@@ -31035,6 +31148,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvS1945n,				// Strikers 1945 (World, unprotected)
 	&BurnDrvS1945iii,			// Strikers 1945 III (World) / Strikers 1999 (Japan)
 	&BurnDrvS1945ii,			// Strikers 1945 II
+	&BurnDrvs1945pnd,			// Strikers 1945 Plus (Fully Decrypted)
 	&BurnDrvs1945p,				// Strikers 1945 Plus
 	&BurnDrvpce_stripf2,		// Strip Fighter II
 	&BurnDrvStrongx,			// Strong X
@@ -31233,6 +31347,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvSupduck,			// Super Duck
 	&BurnDrvUsg32,				// Super Duper Casino (California V3.2)
 	&BurnDrvmd_sfzone,			// Super Fantasy Zone (Euro)
+	&BurnDrvmd_sfzonek,			// Super Fantasy Zone (Hack, Korean)
 	&BurnDrvmd_sfzones,			// Super Fantasy Zone (Hack, Spanish)
 	&BurnDrvmd_sfzonej,			// Super Fantasy Zone (Jpn)
 	&BurnDrvSformula,			// Super Formula (Japan)
@@ -31491,6 +31606,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsSsf2tur1,		// Super Street Fighter II Turbo (super street fighter 2 X 940223 USA)
 	&BurnDrvCpsSsf2tu,			// Super Street Fighter II Turbo (super street fighter 2 X 940323 USA)
 	&BurnDrvCpsSsf2tnl,			// Super Street Fighter II Turbo New Legacy v0.4 (Beta) (Hack by Born2SPD)
+	&BurnDrvCpsSsf2xjh,			// Super Street Fighter II X - grand master challenge (940223 Japan, Hidden Hack)
+	&BurnDrvCpsSsf2xjr1dt,		// Super Street Fighter II X - grand master challenge (Phoenix Edition, Training Hack)
 	&BurnDrvCpsSsf2xjr1d,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan Phoenix Edition)
 	&BurnDrvCpsSsf2xjr1r,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan rent version)
 	&BurnDrvCpsSsf2xjr1,		// Super Street Fighter II X - grand master challenge (super street fighter 2 X 940223 Japan)
@@ -31924,7 +32041,9 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsDynwarjr,		// Tenchi wo Kurau (Japan Resale Ver.)
 	&BurnDrvCpsDynwarj,			// Tenchi wo Kurau (Japan)
 	&BurnDrvnes_tenchiwokurau,	// Tenchi wo Kurau (Japan)
+	&BurnDrvCpsWofj103,			// Tenchi wo Kurau II - Counter Attack of Mei Sisters (921031 Japan, Hack)
 	&BurnDrvCpsWofj,			// Tenchi wo Kurau II - Sekiheki no Tatakai (921031 Japan)
+	&BurnDrvCpsWofch3p,			// Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer 3P Ura Mode Hack, 921031 Japan)
 	&BurnDrvCpsWofch,			// Tenchi wo Kurau II - Sekiheki no Tatakai (CPS Changer, 921031 Japan)
 	&BurnDrvCpsWofjh,			// Tenchi wo Kurau II - Sekiheki no Tatakai (hack, 921031 Japan)
 	&BurnDrvCpsWofjdr,			// Tenchi wo Kurau II - Sekiheki no Tatakai (Master Edition, Hack)
@@ -31998,7 +32117,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvAtetrisc2,			// Tetris (cocktail set 2)
 	&BurnDrvtetrsark,			// Tetris (D.R. Korea)
 	&BurnDrvmd_tetriss,			// Tetris (Hack, Spanish)
-	&BurnDrvCHF_tetris,			// Tetris (HB)
 	&BurnDrvTetrista,			// Tetris (Japan, B-System, YM2203)
 	&BurnDrvTetrist,			// Tetris (Japan, B-System, YM2610)
 	&BurnDrvTetrisse,			// Tetris (Japan, System E)
@@ -32236,6 +32354,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_hybridfc,		// The Hybrid Front (T-Chi)
 	&BurnDrvMSX_iceking,		// The Ice King (Euro)
 	&BurnDrvmd_immortal,		// The Immortal (Euro, USA)
+	&BurnDrvmd_immortalk,		// The Immortal (Hack, Korean)
 	&BurnDrvmd_immortals,		// The Immortal (Hack, Spanish)
 	&BurnDrvsms_crashdum,		// The Incredible Crash Dummies (Euro, Bra)
 	&BurnDrvmd_crashdum,		// The Incredible Crash Dummies (Euro, USA)
@@ -32274,8 +32393,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsKodr1,			// The King of Dragons (World 910711)
 	&BurnDrvCpsKod,				// The King of Dragons (World 910805)
 	&BurnDrvKof94rz,			// The King of Fighters '94 (Hack Boss Remixed)
+	&BurnDrvKof94kr,			// The King of Fighters '94 (Korean, Boss Hack)
 	&BurnDrvKof94,				// The King of Fighters '94 (NGM-055)(NGH-055)
 	&BurnDrvKof95b,				// The King of Fighters '95 (Enable Hidden Characters V.[?])
+	&BurnDrvKof95kr,			// The King of Fighters '95 (Korean, NeoGeo CD Hack)
 	&BurnDrvKof95h,				// The King of Fighters '95 (NGH-084)
 	&BurnDrvKof95a,				// The King of Fighters '95 (NGH-084, alternate board)
 	&BurnDrvKof95,				// The King of Fighters '95 (NGM-084)
@@ -32283,6 +32404,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkof96ae,			// The King of Fighters '96 (Anniversary Edition, EGHT hack)
 	&BurnDrvkof96ep,			// The King of Fighters '96 (bootleg / hack)
 	&BurnDrvkof96cn,			// The King of Fighters '96 (Chinese Edition ver 1.0, hack)
+	&BurnDrvKof96kr,			// The King of Fighters '96 (Korean, Add Practice Mode)
 	&BurnDrvKof96h,				// The King of Fighters '96 (NGH-214)
 	&BurnDrvKof96,				// The King of Fighters '96 (NGM-214)
 	&BurnDrvKof96a,				// The King of Fighters '96 (NGM-214, alternate board)
@@ -32291,6 +32413,8 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKof97ps,			// The King of Fighters '97 (Imitation Playstation final improved version 2016-10-29)
 	&BurnDrvkof97invplus,		// The King of Fighters '97 (Invincible Plus)
 	&BurnDrvKof97k,				// The King of Fighters '97 (Korean release)
+	&BurnDrvkof97ps,			// The King of Fighters '97 (Korean, PlayStation Hack)
+	&BurnDrvKof97kr,			// The King of Fighters '97 (Korean, Practice Mode, Boss Hack)
 	&BurnDrvKof97h,				// The King of Fighters '97 (NGH-2320)
 	&BurnDrvKof97,				// The King of Fighters '97 (NGM-2320)
 	&BurnDrvkof97t2020,			// The King of Fighters '97 (Optimised Edition 2020)
@@ -32304,11 +32428,15 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvKof97oro,			// The King of Fighters '97 oroshi plus 2003
 	&BurnDrvKof97pls,			// The King of Fighters '97 Plus (bootleg)
 	&BurnDrvkof97pla,			// The King of Fighters '97 Plus 2003 (bootleg / hack)
+	&BurnDrvKof97ts,			// The King of Fighters '97 Tu She Edition (v1.2, Hack)
 	&BurnDrvkof98ae2016,		// The King of Fighters '98 (Anniversary Edition build 1.2.0827)
 	&BurnDrvkof98ae,			// The King of Fighters '98 (Anniversary Edition, EGHT hack)
 	&BurnDrvkof98cps,			// The King of Fighters '98 (Combo Plus)
 	&BurnDrvkof98cb,			// The King of Fighters '98 (Combo, hack)
+	&BurnDrvKof98kr,			// The King of Fighters '98 (Korean, NeoGeo CD Hack, System Bugs Fix)
+	&BurnDrvKof98cd,			// The King of Fighters '98 (NeoGeo CD Hack, System Bugs Fix)
 	&BurnDrvkof98pfe,			// The King of Fighters '98 (Plus Final Edition 2017-07-23)
+	&BurnDrvKof98bf,			// The King of Fighters '98 (System Bugs Fix)
 	&BurnDrvkof98ult,			// The King of Fighters '98 (Ultimate Match)
 	&BurnDrvKof98k,				// The King of Fighters '98 - The Slugfest / King of Fighters '98 - dream match never ends (Korean board, set 1)
 	&BurnDrvKof98ka,			// The King of Fighters '98 - The Slugfest / King of Fighters '98 - dream match never ends (Korean board, set 2)
@@ -32318,10 +32446,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkof98eck20,			// The King of Fighters '98 Easy Combo King (YZKOF Version, Hack)
 	&BurnDrvkof98eckvs,			// The King of Fighters '98 Easy Combo King 2014 (Versus Version, Hack)
 	&BurnDrvKof98mix,			// The King of Fighters '98 Mix (2015-12-29)
+	&BurnDrvkof99ae2016,		// The King of Fighters '99 (15th Anniversary Edition 2016)
 	&BurnDrvmd_kof99a,			// The King of Fighters '99 (Alt)
 	&BurnDrvkof99e,				// The King of Fighters '99 - Millennium Battle (earlier)
+	&BurnDrvkof99nd,			// The King of Fighters '99 - Millennium Battle (Fully Decrypted, System Bugs Fix)
 	&BurnDrvkof99k,				// The King of Fighters '99 - Millennium Battle (Korean release)
 	&BurnDrvkof99ka,			// The King of Fighters '99 - Millennium Battle (Korean release, non-encrypted program)
+	&BurnDrvkof99kr,			// The King of Fighters '99 - Millennium Battle (Korean, DreamCast Verson 1.2f)
 	&BurnDrvkof99h,				// The King of Fighters '99 - Millennium Battle (NGH-2510)
 	&BurnDrvkof99,				// The King of Fighters '99 - Millennium Battle (NGM-2510)
 	&BurnDrvkof99p,				// The King of Fighters '99 - Millennium Battle (prototype)
@@ -32336,17 +32467,23 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k5uni,			// The King of Fighters 10th Anniversary 2005 Unique (bootleg)
 	&BurnDrvkof10thuo,			// The King of Fighters 10th Anniversary 2019 (Optimized version 2019, hack)
 	&BurnDrvkf10thep,			// The King of Fighters 10th Anniversary Extra Plus (bootleg)
+	&BurnDrvkof2knd,			// The King of Fighters 2000 (Fully Decrypted)
+	&BurnDrvkof2kkr,			// The King of Fighters 2000 (Korean, PlayStation 2 Hack)
 	&BurnDrvkof2000,			// The King of Fighters 2000 (NGM-2570) (NGH-2570)
 	&BurnDrvkof2000n,			// The King of Fighters 2000 (not encrypted)
 	&BurnDrvkof2000otc,			// The King of Fighters 2000 (OTC, hack)
 	&BurnDrvkof2000ps2,			// The King of Fighters 2000 (Playstation 2 ver. , EGHT hack)
 	&BurnDrvkof2000sp,			// The King of Fighters 2000 - Special Edition (Final Version, Hack)
+	&BurnDrvkof2k1nd,			// The King of Fighters 2001 (Fully Decrypted)
 	&BurnDrvkof2001h,			// The King of Fighters 2001 (NGH-2621)
 	&BurnDrvkof2001,			// The King of Fighters 2001 (NGM-262?)
+	&BurnDrvkof2k1ps2,			// The King of Fighters 2001 (PlayStation 2 Hack)
 	&BurnDrvkf2k1pkz,			// The King of Fighters 2001 (PS2 Krizalid Edition)
 	&BurnDrvkf2k1pls,			// The King of Fighters 2001 Plus (set 1, bootleg / hack)
 	&BurnDrvkf2k1pa,			// The King of Fighters 2001 Plus (set 2, bootleg / hack)
 	&BurnDrvkof2002b,			// The King of Fighters 2002 (bootleg)
+	&BurnDrvkof2k2nd,			// The King of Fighters 2002 (Fully Decrypted)
+	&BurnDrvkof2k2kh,			// The King of Fighters 2002 (Korean Font Fix, Nests, Boss Hack)
 	&BurnDrvkof2002,			// The King of Fighters 2002 (NGM-2650)(NGH-2650)
 	&BurnDrvkof2k2omg,			// The King of Fighters 2002 (Omega v.0?)
 	&BurnDrvkof2k2omg8,			// The King of Fighters 2002 (Omega v0.8)
@@ -32357,15 +32494,18 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k2ps2b,			// The King of Fighters 2002 (PlayStation 2, Hack)
 	&BurnDrvkof2k2plus,			// The King of Fighters 2002 (Plus 2017, Hack)
 	&BurnDrvkf2k23rd,			// The King of Fighters 2002 - 3rd Strike of Orochi (Hack by EGCG/EGHT)
+	&BurnDrvkof2k2cm,			// The King of Fighters 2002 CLIMAX (Hack)
 	&BurnDrvkf2k2mp,			// The King of Fighters 2002 Magic Plus (bootleg)
 	&BurnDrvkf2k2mp2,			// The King of Fighters 2002 Magic Plus II (bootleg)
 	&BurnDrvkf2k2pls,			// The King of Fighters 2002 Plus (bootleg set 1)
 	&BurnDrvkf2k2pla,			// The King of Fighters 2002 Plus (bootleg set 2)
 	&BurnDrvkf2k2plb,			// The King of Fighters 2002 Plus (bootleg set 3)
+	&BurnDrvkf2k2pls2017,		// The King of Fighters 2002 Plus 2017 (2017-12-26, Hack)
 	&BurnDrvkf2k2ru35,			// The King of Fighters 2002 Remix Ultra 3.5 (Hack By FCHT)
 	&BurnDrvkf2k2plc,			// The King of Fighters 2002 Super (bootleg)
 	&BurnDrvkf2k3bl,			// The King of Fighters 2003 (bootleg set 1)
 	&BurnDrvkf2k3bla,			// The King of Fighters 2003 (bootleg set 2)
+	&BurnDrvkof2k3nd,			// The King of Fighters 2003 (Fully Decrypted)
 	&BurnDrvkf2k3pcb,			// The King of Fighters 2003 (Japan, JAMMA PCB)
 	&BurnDrvkof2003h,			// The King of Fighters 2003 (NGH-2710)
 	&BurnDrvkof2003,			// The King of Fighters 2003 (NGM-2710)
@@ -32376,10 +32516,13 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvkf2k4pls,			// The King of Fighters Special Edition 2004 Plus (bootleg)
 	&BurnDrvpce_kungfu,			// The Kung Fu
 	&BurnDrvngpc_lastblad,		// The Last Blade - Beyond the Destiny (Euro)
+	&BurnDrvlastbladb,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Hidden Hack)
 	&BurnDrvlastbladh,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGH-2340)
 	&BurnDrvlastblad,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGM-2340)
 	&BurnDrvlastblada,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (NGM-2340, alternate board)
 	&BurnDrvlastbladsp,			// The Last Blade / Bakumatsu Roman - Gekka no Kenshi (Special 2017, hack)
+	&BurnDrvlastbl2h,			// The Last Blade 2 (Hidden Hack)
+	&BurnDrvlastbl2f,			// The Last Blade 2 (System Bugs Fix)
 	&BurnDrvLb2b,				// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (Enable Hidden Characters V4)
 	&BurnDrvDlastbld2eh,		// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (Enhanced Hack)
 	&BurnDrvlastbld2,			// The Last Blade 2 / Bakumatsu Roman - Dai Ni Maku Gekka no Kenshi (NGM-2430)(NGH-2430)
@@ -32565,9 +32708,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_thorp2,			// The Story of Thor (USA, Prototype, 19941004)
 	&BurnDrvmd_thorp1,			// The Story of Thor (USA, Prototype, 19941017)
 	&BurnDrvmd_thorf,			// The Story of Thor - A Successor of The Light (Fra)
+	&BurnDrvmd_thork2,			// The Story of Thor - Hikari o Tsugumono (Hack, Korean)
 	&BurnDrvmd_thorj,			// The Story of Thor - Hikari o Tsugumono (Jpn)
 	&BurnDrvmd_thorc,			// The Story of Thor - Hikari o Tsugumono (T-Chi)
 	&BurnDrvmd_supshin,			// The Super Shinobi (Jpn)
+	&BurnDrvmd_supshin2k,		// The Super Shinobi II (Hack, Korean)
 	&BurnDrvmd_supshin2,		// The Super Shinobi II (Jpn, Kor)
 	&BurnDrvmd_supshin2p1,		// The Super Shinobi II (Jpn, Prototype)
 	&BurnDrvmd_supshin2p2,		// The Super Shinobi II (Jpn, Prototype, Earlier)
@@ -32699,7 +32844,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvThunderja,			// ThunderJaws (rev 2)
 	&BurnDrvThunderj,			// ThunderJaws (rev 3)
 	&BurnDrvMSX_titipang,		// Ti Ti! Pang Pang! (Kor)
-	&BurnDrvCHF_tctactoe,		// Tic-Tac-Toe / Shooting Gallery / Doodle / Quadra-Doodle
 	&BurnDrvTigerhb1,			// Tiger Heli (bootleg set 1)
 	&BurnDrvTigerhb2,			// Tiger Heli (bootleg set 2)
 	&BurnDrvTigerhb3,			// Tiger Heli (bootleg set 3)
@@ -33188,8 +33332,10 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_twinb3,			// TwinBee 3 - Poko Poko Daimaou (Japan)
 	&BurnDrvTwinkle,			// Twinkle (set 1)
 	&BurnDrvTwinklea,			// Twinkle (set 2)
+	&BurnDrvtwinsprh,			// Twinkle Star Sprites (Hidden Hack)
 	&BurnDrvtwinspri,			// Twinkle Star Sprites
 	&BurnDrvmd_twinklete,		// Twinkle Tale (Hack, English)
+	&BurnDrvmd_twinkletk,		// Twinkle Tale (Hack, Korean)
 	&BurnDrvmd_twinklets,		// Twinkle Tale (Hack, Spanish)
 	&BurnDrvmd_twinklet,		// Twinkle Tale (Jpn)
 	&BurnSpecTwinlight,			// Twinlight (128K) (HB)
@@ -33347,6 +33493,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_valiss,			// Valis (Hack, Spanish)
 	&BurnDrvmd_valis,			// Valis (USA)
 	&BurnDrvnes_valis,			// Valis - The Fantastic Soldier (Japan)
+	&BurnDrvmd_valis3k,			// Valis III (Hack, Korean)
 	&BurnDrvmd_valis3s,			// Valis III (Hack, Spanish)
 	&BurnDrvmd_valis3j,			// Valis III (Jpn, Rev. A)
 	&BurnDrvmd_valis3,			// Valis III (USA)
@@ -33368,6 +33515,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsVampjr1,			// Vampire - the night warriors (940630 Japan)
 	&BurnDrvCpsVampj,			// Vampire - the night warriors (940705 Japan)
 	&BurnDrvCpsVampja,			// Vampire - the night warriors (940705 Japan, alt)
+	&BurnDrvCpsVampjh,			// Vampire - the night warriors (940705 Japan, Hidden Hack)
 	&BurnDrvCpsVhuntjr2,		// Vampire Hunter - darkstalkers' revenge (950302 Japan)
 	&BurnDrvCpsVhuntjr1s,		// Vampire Hunter - darkstalkers' revenge (950307 Japan stop version)
 	&BurnDrvCpsVhuntjr1,		// Vampire Hunter - darkstalkers' revenge (950307 Japan)
@@ -33382,6 +33530,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsVsavh,			// Vampire Savior - the lord of vampire (970519 Hispanic)
 	&BurnDrvCpsVsavj,			// Vampire Savior - the lord of vampire (970519 Japan)
 	&BurnDrvCpsVsavu,			// Vampire Savior - the lord of vampire (970519 USA)
+	&BurnDrvCpsVsavdt,			// Vampire Savior - the lord of vampire (Phoenix Edition, Training Hack)
 	&BurnDrvCpsVsav2d,			// Vampire Savior 2 - the lord of vampire (970913 Japan Phoenix Edition)
 	&BurnDrvCpsVsav2,			// Vampire Savior 2 - the lord of vampire (970913 Japan)
 	&BurnSpecvampveng,			// Vampire Vengeance (HB, v1.1)
@@ -33471,7 +33620,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvpce_victoryr,		// Victory Run
 	&BurnDrvtg_victoryr,		// Victory Run
 	&BurnDrvcv_victory,			// Victory
-	&BurnDrvCHF_vblckjck,		// Video Blackjack
 	&BurnDrvHustlerb,			// Video Hustler (bootleg)
 	&BurnDrvMSX_hustler,		// Video Hustler (Jpn)
 	&BurnDrvMSX_hustlera,		// Video Hustler (Jpn, Alt)
@@ -33480,7 +33628,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvHustler,			// Video Hustler
 	&BurnDrvVpool,				// Video Pool (bootleg on Moon Cresta hardware)
 	&BurnDrvVidvince,			// Video Vince and the Game Factory (prototype)
-	&BurnDrvCHF_whizball,		// Video Whizball
 	&BurnDrvViewpoinp,			// Viewpoint (prototype)
 	&BurnDrvmd_viewpoin,		// Viewpoint (USA)
 	&BurnDrvmd_viewpoinp,		// Viewpoint (USA, Prototype)
@@ -33580,6 +33727,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvnes_volguardii,		// Volguard II (Japan)
 	&BurnDrvfds_volleyball,		// Volleyball (Japan)
 	&BurnDrvnes_volleyball,		// Volleyball (USA)
+	&BurnDrvgowcaizb,			// Voltage Fighter - Gowcaizer (Boss Hack)
 	&BurnDrvgowcaizr,			// Voltage Fighter - Gowcaizer / Choujin Gakuen Gowcaizer
 	&BurnDrvMSX_vortraid,		// Vortex Raider (Euro)
 	&BurnDrvsms_voyage,			// Voyage - A Sorceress Vacation (HB, v1.03)
@@ -33629,6 +33777,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_waimanu,		// Waimanu: Scary Monsters Saga (HB)
 	&BurnDrvMj4simai,			// Wakakusamonogatari Mahjong Yonshimai (Japan)
 	&BurnDrvwakuwak7bh,			// Waku Waku 7 (Boss Hack)
+	&BurnDrvwakuwa7h,			// Waku Waku 7 (Hidden Hack)
 	&BurnDrvwakuwak7,			// Waku Waku 7
 	&BurnDrvUltracin,			// Waku Waku Ultraman Racing
 	&BurnDrvfds_wakusatogai,	// Wakusei Aton Gaiden (Japan)
@@ -33725,7 +33874,6 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_wekainvaders,	// Weka Invaders (HB, v1.0)
 	&BurnDrvWelltrisj,			// Welltris - Alexey Pajitnov's (Japan, 2 players)
 	&BurnDrvWelltris,			// Welltris - Alexey Pajitnov's (World?, 2 players)
-	&BurnDrvCHF_werbetxt,		// Werbetextcassette
 	&BurnDrvnes_werew,			// Werewolf - The Last Warrior (USA)
 #if defined FBNEO_DEBUG
 	&BurnDrvWeststry,			// West Story (bootleg of Blood Bros., set 1) [no comment, NOT WORKING]
@@ -33799,6 +33947,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_wimbledup,		// Wimbledon Championship Tennis (USA, Prototype)
 	&BurnDrvsms_wimbled2,		// Wimbledon II (Euro, Bra)
 	&BurnDrvnes_winlosordra,	// Win, Lose or Draw (USA)
+	&BurnDrvwjammerk,			// Windjammers / Flying Power Disc (Korean)
 	&BurnDrvwjammers,			// Windjammers / Flying Power Disc
 	&BurnDrvWingforc,			// Wing Force (Japan, prototype)
 	&BurnDrvMSX_wingman2,		// Wing Man 2 - Kitakura no Fukkatsu (Jpn)
@@ -34015,6 +34164,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_worldgpp,		// World Grand Prix (USA, Prototype)
 	&BurnDrvwh1h,				// World Heroes (ALH-005)
 	&BurnDrvwh1,				// World Heroes (ALM-005)
+	&BurnDrvwh1b,				// World Heroes (Boss Hack)
 	&BurnDrvmd_whs,				// World Heroes (Hack, Spanish)
 	&BurnDrvmd_whj,				// World Heroes (Jpn)
 	&BurnDrvmd_whjp5,			// World Heroes (Jpn, Prototype, 19940330)
@@ -34039,8 +34189,11 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_whp02,			// World Heroes (USA, Prototype, 19940331-B)
 	&BurnDrvwh2h,				// World Heroes 2 (ALH-006)
 	&BurnDrvwh2,				// World Heroes 2 (ALM-006)(ALH-006)
+	&BurnDrvwh2b,				// World Heroes 2 (Boss Hack)
 	&BurnDrvwh2j,				// World Heroes 2 Jet (ADM-007)(ADH-007)
 	&BurnDrvwh2ja,				// World Heroes 2 Jet (ADM-007)
+	&BurnDrvwh2jb,				// World Heroes 2 Jet (Boss Hack)
+	&BurnDrvwhpb,				// World Heroes Perfect (Boss Hack)
 	&BurnDrvwhp,				// World Heroes Perfect
 	&BurnDrvpce_wjockey,		// World Jockey
 	&BurnDrvmd_worldillj,		// World of Illusion - Fushigi na Magic Box (Jpn)
@@ -34181,6 +34334,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvCpsXmcotaj3,		// X-Men - children of the atom (941217 Japan)
 	&BurnDrvCpsXmcotaar1,		// X-Men - children of the atom (941219 Asia)
 	&BurnDrvCpsXmcotaj2,		// X-Men - children of the atom (941219 Japan)
+	&BurnDrvCpsXmcotaj2h,		// X-Men - children of the atom (941219 Japan, Hidden Hack)
 	&BurnDrvCpsXmcotaj1,		// X-Men - children of the atom (941222 Japan)
 	&BurnDrvCpsXmcotaa,			// X-Men - children of the atom (950105 Asia)
 	&BurnDrvCpsXmcotar1d,		// X-Men - children of the atom (950105 Euro Phoenix Edition)
@@ -34381,6 +34535,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvsms_ysd,			// Ys (USA, Demo)
 	&BurnDrvsms_ys,				// Ys - The Vanished Omens (Euro, USA, Bra)
 	&BurnDrvsms_ysfm,			// Ys - The Vanished Omens (FM Mod, v1.2)
+	&BurnDrvmd_ys3k,			// Ys - Wanderers from Ys (Hack, Korean)
 	&BurnDrvmd_ys3j,			// Ys - Wanderers from Ys (Jpn)
 	&BurnDrvnes_ysiic,			// Ys II - Ancient Ys Vanished - The Final Chapter (Japan) - Castellano v1.0
 	&BurnDrvnes_ysiij,			// Ys II - Ancient Ys Vanished - The Final Chapter (Japan)
@@ -34559,6 +34714,7 @@ static struct BurnDriver* pDriver[] = {
 	&BurnDrvmd_zouzou,			// Zou! Zou! Zou! Rescue Daisakusen (Jpn)
 	&BurnSpecZub,				// Zub (128K)
 	&BurnDrvnes_zunousengal,	// Zunou Senkan Galg (Japan)
+	&BurnDrvZupapand,			// Zupapa! (Fully Decrypted)
 	&BurnDrvZupapa,				// Zupapa!
 	&BurnSpecSpec128BIOS,		// ZX Spectrum 128 [BIOS Only, NOT WORKING]
 	&BurnSpecSpec128,			// ZX Spectrum 128
